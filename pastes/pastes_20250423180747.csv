id,title,username,language,date,content
fsZmgCNb,EARN $900 INSTANTLY 2025 TA,EDY13w12313131313,JavaScript,Wednesday 23rd of April 2025 01:01:19 PM CDT," 
Pdf https://tinyurl.com/privguidee


i70svFnlCY
"
rmg0kuth,Leaked Accounts - Fresh Hits,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 12:59:54 PM CDT,65691 Accounts Posted On https://t.me/leakedbyeminem
Rc4mTJFx,Make $1000 15-MINUTES (BEGINNER) 14,EDY13w12313131313,JavaScript,Wednesday 23rd of April 2025 12:52:04 PM CDT," 
Pdf https://tinyurl.com/privguidee


uUTdJpfsuQ
"
ZCgdXL72,[NP] Student Records,dzocesrce,Java,Wednesday 23rd of April 2025 12:49:25 PM CDT,"public class StudentRecords {
    List<Record> records;

    public StudentRecords() {
        this.records = new ArrayList<>();
    }

    public int readRecords(InputStream in) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
        records= bufferedReader.lines().map(Record::createRecord).collect(Collectors.toList());
        return records.size();
    }

    public void writeTable(PrintStream out) {
        PrintWriter printWriter = new PrintWriter(out);
        Map<String, Set<Record>> recordsByMajor = records.stream().collect(Collectors.groupingBy(
           Record::getMajor,
                TreeMap::new,
                Collectors.toSet()
        ));
        for(String s : recordsByMajor.keySet()){
            printWriter.println(s);
            recordsByMajor.get(s).stream().sorted().forEach(printWriter::println);
        }
        printWriter.flush();
    }

    public void writeDistribution(PrintStream out) {
        PrintWriter printWriter = new PrintWriter(out);

        Map<String, Map<Integer, Long>> recordsByMajorAndDistributedByGrade = records.stream()
                .collect(Collectors.groupingBy(
                        Record::getMajor,
                        TreeMap::new,
                        Collectors.flatMapping(
                                record -> record.getScores().stream(), // flatten all scores in each major
                                Collectors.groupingBy(
                                        grade -> grade,
                                        HashMap::new,
                                        Collectors.counting()
                                )
                        )
                ));
        Map<String, Map<Integer, Long>> recordsByMajorAndDistributedByGradeSorted = recordsByMajorAndDistributedByGrade.entrySet()
                .stream().sorted(Comparator.<Map.Entry<String, Map<Integer, Long>>>comparingLong(entry -> entry.getValue().getOrDefault(10,0L))
                        .reversed())
                        .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        Map.Entry::getValue,
                        (a, b) -> a,
                        LinkedHashMap::new

                ));
        for(String major : recordsByMajorAndDistributedByGradeSorted.keySet()){
            printWriter.println(major);

            for(Integer grade : recordsByMajorAndDistributedByGradeSorted.get(major).keySet()){
                String stars = getStars(Math.round(recordsByMajorAndDistributedByGradeSorted.get(major).get(grade).intValue()/10));
                printWriter.println(String.format(""%2d | %s(%d)"",grade,stars,recordsByMajorAndDistributedByGradeSorted.get(major).get(grade)));
            }
        }


        printWriter.flush();
    }

    public String getStars(double numberOfStars){
        StringBuilder sb= new StringBuilder();
        for(int i=0;i<=numberOfStars;i++){
            sb.append(""*"");
        }
        return sb.toString();
    }
}
public class Record implements Comparable<Record>{

    String code;
    String major;
    List<Integer> scores;

    public Record(String code, String major, List<Integer> scores) {
        this.code = code;
        this.major = major;
        this.scores = scores;
    }

    public String getCode() {
        return code;
    }

    public String getMajor() {
        return major;
    }

    public List<Integer> getScores() {
        return scores;
    }

    public static Record createRecord(String line){
        String[] parts = line.split("" "");
        String code = parts[0];
        String major = parts[1];
        List<Integer> scores = Arrays.stream(parts).skip(2).map(i->Integer.parseInt(i)).collect(Collectors.toList());
        return new Record(code,major,scores);
    }

    public double getAverageScore(){
        return scores.stream().mapToDouble(i->i).average().orElse(5.0);
    }


    @Override
    public String toString() {
        return String.format(""%s %.2f"",code,getAverageScore());
    }

    @Override
    public int compareTo(Record o) {
        return Comparator.comparing(Record::getAverageScore)
                .reversed()
                .thenComparing(Record::getCode)
                .compare(this,o);
    }
}
public class StudentRecordsTest {
    public static void main(String[] args) {
        System.out.println(""=== READING RECORDS ==="");
        StudentRecords studentRecords = new StudentRecords();
        int total = studentRecords.readRecords(System.in);
        System.out.printf(""Total records: %d\n"", total);
        System.out.println(""=== WRITING TABLE ==="");
        studentRecords.writeTable(System.out);
        System.out.println(""=== WRITING DISTRIBUTION ==="");
        studentRecords.writeDistribution(System.out);
    }
}"
S8rkBz7C,Chaturbate with Tokens,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 12:44:31 PM CDT,03061 Accounts Posted On https://t.me/leakedbyeminem
vSzEchtX,EARN $900 INSTANTLY 2025⭐ WF,EDY13w12313131313,JavaScript,Wednesday 23rd of April 2025 12:42:49 PM CDT," 
Pdf https://tinyurl.com/privguidee


IDnJHAecU6
"
rpwpz8KF,Make $1000 15-MINUTES  (BEGINNER) KB,EDY13w12313131313,JavaScript,Wednesday 23rd of April 2025 12:33:34 PM CDT," 
Pdf https://tinyurl.com/privguidee


gjZQ4s1laF
"
x7sQdxNR,Crypto Accounts,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 12:29:06 PM CDT,90366 Accounts Posted On https://t.me/leakedbyeminem
tUrRNA3n,Make $1000 15-MINUTES (BEGINNER) 14,Astaroth_216,JavaScript,Wednesday 23rd of April 2025 12:23:42 PM CDT," 
Pdf https://tinyurl.com/privguidee


ym6HFlLL9M
"
7Kn0aAqH,EARN $900 INSTANTLY 2025⭐ WF,shabingboing,JavaScript,Wednesday 23rd of April 2025 12:14:17 PM CDT," 
Pdf https://tinyurl.com/privguidee


c5WikCZcoN
"
Acf6Ya8Z,PayPal with Balance,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 12:13:42 PM CDT,68574 Accounts Posted On https://t.me/leakedbyeminem
rv2tXC3S,OVN NB DBML,DenisBabarykin,YAML,Wednesday 23rd of April 2025 12:13:01 PM CDT,"Table NB_Global {
  _uuid uuid [pk]
  name string
  nb_cfg integer
  nb_cfg_timestamp integer
  sb_cfg integer
  sb_cfg_timestamp integer
  hv_cfg integer
  hv_cfg_timestamp integer
  external_ids json
  connections uuid[] [ref: > Connection._uuid]
  ssl uuid [ref: > SSL._uuid]
  options json
  ipsec boolean
}

Table Sample_Collector {
  _uuid uuid [pk]
  id integer
  name string
  probability integer
  set_id integer
  external_ids json
}

Table Sample {
  _uuid uuid [pk]
  collectors uuid[] [ref: > Sample_Collector._uuid]
  metadata integer
}

Table Copp {
  _uuid uuid [pk]
  name string
  meters json
  external_ids json
}

Table Logical_Switch {
  _uuid uuid [pk]
  name string
  ports uuid[] [ref: > Logical_Switch_Port._uuid]
  acls uuid[] [ref: > ACL._uuid]
  qos_rules uuid[] [ref: > QoS._uuid]
  load_balancer uuid[] [ref: > Load_Balancer._uuid]
  load_balancer_group uuid[] [ref: > Load_Balancer_Group._uuid]
  dns_records uuid[] [ref: > DNS._uuid]
  copp uuid [ref: > Copp._uuid]
  other_config json
  external_ids json
  forwarding_groups uuid[] [ref: > Forwarding_Group._uuid]
}

Table Logical_Switch_Port {
  _uuid uuid [pk]
  name string
  type string
  options json
  parent_name string
  tag_request integer
  tag integer
  addresses string[]
  dynamic_addresses string
  port_security string[]
  peer string
  up boolean
  enabled boolean
  dhcpv4_options uuid [ref: > DHCP_Options._uuid]
  dhcpv6_options uuid [ref: > DHCP_Options._uuid]
  mirror_rules uuid[] [ref: > Mirror._uuid]
  ha_chassis_group uuid [ref: > HA_Chassis_Group._uuid]
  external_ids json
}

Table Forwarding_Group {
  _uuid uuid [pk]
  name string
  vip string
  vmac string
  liveness boolean
  external_ids json
  child_port string[]
}

Table Address_Set {
  _uuid uuid [pk]
  name string
  addresses string[]
  external_ids json
}

Table Port_Group {
  _uuid uuid [pk]
  name string
  ports uuid[] [ref: > Logical_Switch_Port._uuid]
  acls uuid[] [ref: > ACL._uuid]
  external_ids json
}

Table Load_Balancer {
  _uuid uuid [pk]
  name string
  vips json
  protocol string
  health_check uuid[] [ref: > Load_Balancer_Health_Check._uuid]
  ip_port_mappings json
  selection_fields string[]
  options json
  external_ids json
}

Table Load_Balancer_Group {
  _uuid uuid [pk]
  name string
  load_balancer uuid[] [ref: > Load_Balancer._uuid]
}

Table Load_Balancer_Health_Check {
  _uuid uuid [pk]
  vip string
  options json
  external_ids json
}

Table ACL {
  _uuid uuid [pk]
  name string
  priority integer
  direction string
  match string
  action string
  log boolean
  severity string
  meter string
  label integer
  tier integer
  sample_new uuid [ref: > Sample._uuid]
  sample_est uuid [ref: > Sample._uuid]
  options json
  external_ids json
}

Table QoS {
  _uuid uuid [pk]
  priority integer
  direction string
  match string
  action json
  bandwidth json
  external_ids json
}

Table Mirror {
  _uuid uuid [pk]
  name string
  filter string
  sink string
  type string
  index integer
  external_ids json
}

Table Meter {
  _uuid uuid [pk]
  name string
  unit string
  bands uuid[] [ref: > Meter_Band._uuid]
  fair boolean
  external_ids json
}

Table Meter_Band {
  _uuid uuid [pk]
  action string
  rate integer
  burst_size integer
  external_ids json
}

Table Logical_Router {
  _uuid uuid [pk]
  name string
  ports uuid[] [ref: > Logical_Router_Port._uuid]
  static_routes uuid[] [ref: > Logical_Router_Static_Route._uuid]
  policies uuid[] [ref: > Logical_Router_Policy._uuid]
  enabled boolean
  nat uuid[] [ref: > NAT._uuid]
  load_balancer uuid[] [ref: > Load_Balancer._uuid]
  load_balancer_group uuid[] [ref: > Load_Balancer_Group._uuid]
  copp uuid [ref: > Copp._uuid]
  options json
  external_ids json
}

Table Logical_Router_Port {
  _uuid uuid [pk]
  name string
  gateway_chassis uuid[] [ref: > Gateway_Chassis._uuid]
  ha_chassis_group uuid [ref: > HA_Chassis_Group._uuid]
  options json
  networks string[]
  mac string
  peer string
  enabled boolean
  ipv6_ra_configs json
  ipv6_prefix string[]
  dhcp_relay uuid [ref: > DHCP_Relay._uuid]
  external_ids json
  status json
}

Table Logical_Router_Static_Route {
  _uuid uuid [pk]
  route_table string
  ip_prefix string
  policy string
  nexthop string
  output_port string
  bfd uuid [ref: > BFD._uuid]
  selection_fields string[]
  options json
  external_ids json
}

Table Logical_Router_Policy {
  _uuid uuid [pk]
  priority integer
  chain string
  match string
  action string
  jump_chain string
  nexthop string
  nexthops string[]
  bfd_sessions uuid[] [ref: > BFD._uuid]
  options json
  external_ids json
}

Table NAT {
  _uuid uuid [pk]
  external_ip string
  external_mac string
  external_port_range string
  logical_ip string
  logical_port string
  type string
  allowed_ext_ips uuid [ref: > Address_Set._uuid]
  exempted_ext_ips uuid [ref: > Address_Set._uuid]
  gateway_port uuid [ref: > Logical_Router_Port._uuid]
  priority integer
  match string
  options json
  external_ids json
}

Table DHCP_Options {
  _uuid uuid [pk]
  cidr string
  options json
  external_ids json
}

Table DHCP_Relay {
  _uuid uuid [pk]
  name string
  servers string
  options json
  external_ids json
}

Table Connection {
  _uuid uuid [pk]
  target string
  max_backoff integer
  inactivity_probe integer
  other_config json
  external_ids json
  is_connected boolean
  status json
}

Table DNS {
  _uuid uuid [pk]
  records json
  options json
  external_ids json
}

Table SSL {
  _uuid uuid [pk]
  private_key string
  certificate string
  ca_cert string
  bootstrap_ca_cert boolean
  ssl_protocols string
  ssl_ciphers string
  ssl_ciphersuites string
  external_ids json
}

Table Gateway_Chassis {
  _uuid uuid [pk]
  name string
  chassis_name string
  priority integer
  external_ids json
  options json
}

Table HA_Chassis {
  _uuid uuid [pk]
  chassis_name string
  priority integer
  external_ids json
}

Table HA_Chassis_Group {
  _uuid uuid [pk]
  name string
  ha_chassis uuid[] [ref: > HA_Chassis._uuid]
  external_ids json
}

Table BFD {
  _uuid uuid [pk]
  logical_port string
  dst_ip string
  min_tx integer
  min_rx integer
  detect_mult integer
  status string
  external_ids json
  options json
}

Table Static_MAC_Binding {
  _uuid uuid [pk]
  logical_port string
  ip string
  mac string
  override_dynamic_mac boolean
}

Table Chassis_Template_Var {
  _uuid uuid [pk]
  chassis string
  variables json
  external_ids json
}

Table Sampling_App {
  _uuid uuid [pk]
  type string
  id integer
  external_ids json
}"
GsGd9wDg,Products.js,Ratqueenkslskskwkw,JavaScript,Wednesday 23rd of April 2025 12:11:55 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/30655/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vbGs1XUA,6 черепаха треугольник,nq1s788,Python,Wednesday 23rd of April 2025 12:07:55 PM CDT,"#https://inf-ege.sdamgia.ru/test?theme=316
from turtle import *
screensize(1000, 1000)
shape(""turtle"")
tracer(0) #чтобы моментально рисовала
k = 30
for i in range(7):
    forward(10 * k)
    right(120) #left() налево
penup() #поднять ручку pendown() опустить ручку
for x in range(-10, 20): #рисуем точки
    for y in range(-10, 20):
        goto(x * k, y * k)
        dot(3, ""red"")
done()"
Zsn1zdNW,login.html,DEVAYU,HTML,Wednesday 23rd of April 2025 12:01:44 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>DRONZER - SECURE ACCESS</title>
    <link href=""https://fonts.googleapis.com/css2?family=Orbitron:wght@900&display=swap"" rel=""stylesheet"">
    <link href=""https://fonts.googleapis.com/css2?family=Audiowide&display=swap"" rel=""stylesheet"">
    <link href=""https://fonts.googleapis.com/css2?family=Wallpoet&display=swap"" rel=""stylesheet"">
    <link href=""https://fonts.googleapis.com/css?family=Bungee+Shade"" rel=""stylesheet"">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background-color: #000;
            color: #00ff41;
            font-family: 'Courier New', monospace;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            position: relative;
        }
        
        .scanlines {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                to bottom,
                rgba(0, 255, 65, 0.03) 1px,
                transparent 1px
            );
            background-size: 100% 2px;
            pointer-events: none;
            z-index: 1;
        }
        
        .welcome-screen, .username-screen, .password-screen, .loading-screen {
            position: absolute;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            opacity: 0;
            transition: opacity 0.5s;
            z-index: 2;
        }
        
        /* Enhanced Glitch Effect for DRONZER Title */
        .welcome-title {
            font-family: 'Wallpoet', cursive;
            font-size: 6rem;
            margin-bottom: 20px;
            color: #b300ff;
            text-shadow: 0 0 10px rgba(179, 0, 255, 0.7),
                         0 0 20px rgba(179, 0, 255, 0.5),
                         0 0 30px rgba(179, 0, 255, 0.3);
            animation: pulse 2s ease-in-out infinite, neon-purple-glow 1.5s alternate infinite;
            letter-spacing: 5px;
            position: relative;
            display: inline-block;
        }

        .welcome-title.glitch {
            animation: pulse 2s ease-in-out infinite, neon-purple-glow 1.5s alternate infinite, font 7s step-end infinite;
        }

        .welcome-title.glitch::before,
        .welcome-title.glitch::after {
            content: attr(data-text);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background-color: #000;
        }

        .welcome-title.glitch::before {
            color: #e0287d;
            animation: paths 5s step-end infinite, opacity 5s step-end infinite, movement 10s step-end infinite;
        }

        .welcome-title.glitch::after {
            color: #1bc7fb;
            animation: paths 5s step-end infinite, opacity 5s step-end infinite, movement 8s step-end infinite;
        }
        
        /* Glitch effect for input labels */
        .input-label {
            font-size: 2rem;
            margin-bottom: 30px;
            color: #00d0ff;
            text-shadow: 0 0 5px rgba(0, 208, 255, 0.5);
            position: relative;
            font-family: 'Audiowide', cursive;
            transform: scaleX(var(--scale, 1));
            animation: glitch-p 11s infinite alternate;
        }
        
        .input-label::before,
        .input-label::after {
            --top: 0;        /* offset from top [0 - 10] */
            --left: 0;       /* offset from left [0.001 - 1] */
            --v-height: 30%; /* visible part */
            
            --n-tenth: calc(2 * .1 * var(--top));
            --t-cut: calc(var(--n-tenth) / 2 * 100%);
            --b-cut: calc(var(--t-cut) + var(--v-height));
            
            content: attr(data-text);
            position: absolute;
            width: 100%;
            left: 0;
            text-align: center;
            
            transform: translateX(calc(var(--left) * 100%));
            
            /* this helps to get rid of pixelization */
            filter: drop-shadow(0 0 transparent); 
            
            text-shadow: calc(var(--left) * -3em) 0 .02em lime, 
                         calc(var(--left) * -6em) 0 .02em #ff00e1;
            
            background-color: #000;
            clip-path: polygon(0% var(--t-cut), 100% var(--t-cut), 100% var(--b-cut), 0% var(--b-cut));
        } 
        
        .input-label::before {
            animation: glitch-b 1.7s infinite alternate-reverse;
        }
        
        .input-label::after {
            animation: glitch-a 3.1s infinite alternate;
        }
        
        @keyframes glitch-p {
            17% { --scale: .87; }
            31% { --scale: 1.1; }
            37% { --scale: 1.3; }
            47% { --scale: .91; }
            87% { --scale: 1; }
        }
        
        @keyframes glitch-a {
            10%,30%,50%,70%,90% {
                --top: 0;
                --left: 0;
            }
            0% {
             --v-height: 15%; 
            }
            20% {
                --left: .005;
            }
            40% {
                --left: .01;
                --v-height: 20%;
                --top: 3;
            }
            60% {
                --left: .03;
                --v-height: 25%;
                --top: 6;
            }
            80% {
                --left: .07;
                --v-height: 5%;
                --top: 8;
            }
            100% {
                --left: .083;
                --v-height: 30%;
                --top: 1;
            }
        }
        
        @keyframes glitch-b {
            10%,30%,50%,70%,90% {
                --top: 0;
                --left: 0;
            }
            0% {
             --v-height: 15%; 
             --top: 10;
            }
            20% {
                --left: -.005;
            }
            40% {
                --left: -.01;
                --v-height: 17%;
                --top: 3;
            }
            60% {
                --left: -.03;
                --v-height: 35%;
                --top: 6;
            }
            80% {
                --left: -.07;
                --v-height: 5%;
                --top: 8;
            }
            100% {
                --left: -.083;
                --v-height: 30%;
                --top: 1;
            }
        }
        
        .input-field {
            width: 60%;
            padding: 15px;
            background: transparent;
            border: 2px solid #00ff41;
            border-radius: 0;
            box-shadow: 0 0 0 2px #000, 
                        0 0 0 4px #00ff41,
                        0 0 20px rgba(0, 255, 65, 0.3);
            color: #00ff41;
            font-family: 'Courier New', monospace;
            font-size: 1.5rem;
            text-align: center;
            outline: none;
            transition: all 0.3s;
        }
        
        .input-field:focus {
            box-shadow: 0 0 0 2px #000, 
                        0 0 0 4px #00d0ff,
                        0 0 30px rgba(0, 208, 255, 0.5);
            border-color: #00d0ff;
        }
        
        .access-message {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 101;
            font-size: 5rem;
            font-family: 'Wallpoet', cursive;
            color: #00ff41;
            text-shadow: 0 0 15px #00ff41;
            animation: blink 0.5s infinite, neon-glow 0.5s alternate infinite;
        }
        
        .denied-message {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 101;
            font-size: 5rem;
            font-family: 'Wallpoet', cursive;
            color: #ff0000;
            text-shadow: 0 0 15px #ff0000;
            animation: blink 0.2s infinite, shake 0.5s infinite, neon-red-glow 0.3s alternate infinite;
        }
        
        /* Glitch Animations */
        @keyframes paths {
            0% {
                clip-path: polygon(
                    0% 43%, 83% 43%, 83% 22%, 23% 22%, 23% 24%, 91% 24%, 91% 26%, 18% 26%, 18% 83%, 29% 83%, 29% 17%, 41% 17%, 41% 39%, 18% 39%, 18% 82%, 54% 82%, 54% 88%, 19% 88%, 19% 4%, 39% 4%, 39% 14%, 76% 14%, 76% 52%, 23% 52%, 23% 35%, 19% 35%, 19% 8%, 36% 8%, 36% 31%, 73% 31%, 73% 16%, 1% 16%, 1% 56%, 50% 56%, 50% 8%
                );
            }
            5% {
                clip-path: polygon(
                    0% 29%, 44% 29%, 44% 83%, 94% 83%, 94% 56%, 11% 56%, 11% 64%, 94% 64%, 94% 70%, 88% 70%, 88% 32%, 18% 32%, 18% 96%, 10% 96%, 10% 62%, 9% 62%, 9% 84%, 68% 84%, 68% 50%, 52% 50%, 52% 55%, 35% 55%, 35% 87%, 25% 87%, 25% 39%, 15% 39%, 15% 88%, 52% 88%
                );
            }
            30% {
                clip-path: polygon(
                    0% 53%, 93% 53%, 93% 62%, 68% 62%, 68% 37%, 97% 37%, 97% 89%, 13% 89%, 13% 45%, 51% 45%, 51% 88%, 17% 88%, 17% 54%, 81% 54%, 81% 75%, 79% 75%, 79% 76%, 38% 76%, 38% 28%, 61% 28%, 61% 12%, 55% 12%, 55% 62%, 68% 62%, 68% 51%, 0% 51%, 0% 92%, 63% 92%, 63% 4%, 65% 4%
                );
            }
            45% {
                clip-path: polygon(
                    0% 33%, 2% 33%, 2% 69%, 58% 69%, 58% 94%, 55% 94%, 55% 25%, 33% 25%, 33% 85%, 16% 85%, 16% 19%, 5% 19%, 5% 20%, 79% 20%, 79% 96%, 93% 96%, 93% 50%, 5% 50%, 5% 74%, 55% 74%, 55% 57%, 96% 57%, 96% 59%, 87% 59%, 87% 65%, 82% 65%, 82% 39%, 63% 39%, 63% 92%, 4% 92%, 4% 36%, 24% 36%, 24% 70%, 1% 70%, 1% 43%, 15% 43%, 15% 28%, 23% 28%, 23% 71%, 90% 71%, 90% 86%, 97% 86%, 97% 1%, 60% 1%, 60% 67%, 71% 67%, 71% 91%, 17% 91%, 17% 14%, 39% 14%, 39% 30%, 58% 30%, 58% 11%, 52% 11%, 52% 83%, 68% 83%
                );
            }
            76% {
                clip-path: polygon(
                    0% 26%, 15% 26%, 15% 73%, 72% 73%, 72% 70%, 77% 70%, 77% 75%, 8% 75%, 8% 42%, 4% 42%, 4% 61%, 17% 61%, 17% 12%, 26% 12%, 26% 63%, 73% 63%, 73% 43%, 90% 43%, 90% 67%, 50% 67%, 50% 41%, 42% 41%, 42% 46%, 50% 46%, 50% 84%, 96% 84%, 96% 78%, 49% 78%, 49% 25%, 63% 25%, 63% 14%
                );
            }
            90% {
                clip-path: polygon(
                    0% 41%, 13% 41%, 13% 6%, 87% 6%, 87% 93%, 10% 93%, 10% 13%, 89% 13%, 89% 6%, 3% 6%, 3% 8%, 16% 8%, 16% 79%, 0% 79%, 0% 99%, 92% 99%, 92% 90%, 5% 90%, 5% 60%, 0% 60%, 0% 48%, 89% 48%, 89% 13%, 80% 13%, 80% 43%, 95% 43%, 95% 19%, 80% 19%, 80% 85%, 38% 85%, 38% 62%
                );
            }
            1%, 7%, 33%, 47%, 78%, 93% {
                clip-path: none;
            }
        }

        @keyframes movement {
            0% {
                top: 0px;
                left: -20px;
            }
            15% {
                top: 10px;
                left: 10px;
            }
            60% {
                top: 5px;
                left: -10px;
            }
            75% {
                top: -5px;
                left: 20px;
            }
            100% {
                top: 10px;
                left: 5px;
            }
        }

        @keyframes opacity {
            0% {
                opacity: 0.1;
            }
            5% {
                opacity: 0.7;
            }
            30% {
                opacity: 0.4;
            }
            45% {
                opacity: 0.6;
            }
            76% {
                opacity: 0.4;
            }
            90% {
                opacity: 0.8;
            }
            1%, 7%, 33%, 47%, 78%, 93% {
                opacity: 0;
            }
        }

        @keyframes font {
            0% {
                font-weight: 100;
                color: #e0287d;
                filter: blur(3px);
            }
            20% {
                font-weight: 500;
                color: #fff;
                filter: blur(0);
            }
            50% {
                font-weight: 300;
                color: #1bc7fb;
                filter: blur(2px);
            }
            60% {
                font-weight: 700;
                color: #fff;
                filter: blur(0);
            }
            90% {
                font-weight: 500;
                color: #e0287d;
                filter: blur(6px);
            }
        }
        
        @keyframes neon-purple-glow {
            from {
                text-shadow: 0 0 5px #b300ff, 0 0 10px #b300ff, 0 0 15px #b300ff, 0 0 20px #b300ff;
            }
            to {
                text-shadow: 0 0 10px #b300ff, 0 0 20px #b300ff, 0 0 30px #b300ff, 0 0 40px #b300ff;
            }
        }
        
        @keyframes neon-glow {
            from {
                text-shadow: 0 0 5px #00ff41, 0 0 10px #00ff41, 0 0 15px #00ff41, 0 0 20px #00ff41;
            }
            to {
                text-shadow: 0 0 10px #00ff41, 0 0 20px #00ff41, 0 0 30px #00ff41, 0 0 40px #00ff41;
            }
        }
        
        @keyframes neon-red-glow {
            from {
                text-shadow: 0 0 5px #ff0000, 0 0 10px #ff0000, 0 0 15px #ff0000, 0 0 20px #ff0000;
            }
            to {
                text-shadow: 0 0 10px #ff0000, 0 0 20px #ff0000, 0 0 30px #ff0000, 0 0 40px #ff0000;
            }
        }
        
        @keyframes blink {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: 0.7;
            }
        }
        
        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
        }
        
        @keyframes shake {
            0%, 100% {
                transform: translateX(0);
            }
            10%, 30%, 50%, 70%, 90% {
                transform: translateX(-10px);
            }
            20%, 40%, 60%, 80% {
                transform: translateX(10px);
            }
        }
        
        @keyframes pixelate {
            0%, 100% {
                filter: none;
            }
            10%, 30%, 50%, 70%, 90% {
                filter: url('#pixelate');
            }
        }
        
        .glitch-effect {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml;utf8,<svg xmlns=""http://www.w3.org/2000/svg"" width=""100"" height=""100"" viewBox=""0 0 100 100""><rect width=""100"" height=""100"" fill=""black""/><text x=""50"" y=""50"" font-family=""monospace"" font-size=""10"" fill=""white"" text-anchor=""middle"">NO SIGNAL</text></svg>');
            background-size: 20px 20px;
            opacity: 0.05;
            pointer-events: none;
            z-index: 0;
        }
        
        .typing {
            border-right: 3px solid #00ff41;
            animation: blink-caret 0.75s step-end infinite;
        }
        
        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: #00ff41; }
        }
        
        .loading-container {
            width: 60%;
            margin-top: 30px;
            text-align: center;
        }
        
        .loading-bar {
            width: 100%;
            height: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            border: 2px solid #00ff41;
            box-shadow: 0 0 0 2px #000, 
                        0 0 0 4px #00ff41,
                        0 0 20px rgba(0, 255, 65, 0.3);
            margin-top: 10px;
            overflow: hidden;
            position: relative;
        }
        
        .loading-progress {
            height: 100%;
            width: 0%;
            background-color: #00ff41;
            box-shadow: 0 0 10px #00ff41;
            transition: width 0.1s linear;
        }
        
        .loading-text {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: #00d0ff;
            font-family: 'Audiowide', cursive;
            text-shadow: 0 0 5px rgba(0, 208, 255, 0.5);
        }
        
        .percentage {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #00ff41;
            font-family: 'Courier New', monospace;
            font-weight: bold;
            text-shadow: 0 0 5px rgba(0, 255, 65, 0.5);
        }
        
        .hacker-bg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml;utf8,<svg xmlns=""http://www.w3.org/2000/svg"" width=""100"" height=""100"" viewBox=""0 0 100 100""><rect width=""100"" height=""100"" fill=""none"" stroke=""%2300ff41"" stroke-width=""0.5""/><text x=""10"" y=""15"" font-family=""monospace"" font-size=""5"" fill=""%2300ff41"">01010101</text></svg>');
            background-size: 100px 100px;
            opacity: 0.3;
            z-index: -1;
            filter: blur(1px);
        }
        
        .matrix-effect {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            opacity: 0.2;
            pointer-events: none;
        }
        
        .system-message {
            position: absolute;
            bottom: 20px;
            left: 20px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            color: #00ff41;
            opacity: 0.7;
            animation: glitch-text 1s linear infinite;
        }
        
        @keyframes glitch-text {
            0%, 100% {
                text-shadow: 2px 0 rgba(255, 0, 255, 0.7), -2px 0 rgba(0, 255, 255, 0.7);
                transform: translate(0);
            }
            20% {
                text-shadow: -3px 0 rgba(255, 0, 255, 0.7), 3px 0 rgba(0, 255, 255, 0.7);
                transform: translate(-2px, 1px);
            }
            40% {
                text-shadow: 4px 0 rgba(255, 0, 255, 0.7), -4px 0 rgba(0, 255, 255, 0.7);
                transform: translate(2px, -1px);
            }
            60% {
                text-shadow: -2px 0 rgba(255, 0, 255, 0.7), 2px 0 rgba(0, 255, 255, 0.7);
                transform: translate(1px, 1px);
            }
            80% {
                text-shadow: 3px 0 rgba(255, 0, 255, 0.7), -3px 0 rgba(0, 255, 255, 0.7);
                transform: translate(-1px, -1px);
            }
        }
    </style>
    
    <!-- SVG filter for pixelation effect -->
    <svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"" width=""0"" height=""0"">
        <defs>
            <filter id=""pixelate"" x=""0"" y=""0"">
                <feFlood x=""4"" y=""4"" height=""2"" width=""2""/>
                <feComposite width=""5"" height=""5""/>
                <feTile result=""a""/>
                <feComposite in=""SourceGraphic"" in2=""a"" operator=""in""/>
                <feMorphology operator=""dilate"" radius=""1""/>
            </filter>
        </defs>
    </svg>
</head>
<body>
    <div class=""glitch-effect""></div>
    <div class=""scanlines""></div>
    <div class=""hacker-bg""></div>
    <canvas id=""matrix"" class=""matrix-effect""></canvas>
    
    <div class=""system-message"">SYSTEM STATUS: ONLINE</div>
    
    <div class=""welcome-screen"" id=""welcomeScreen"">
        <h1 class=""welcome-title glitch"" data-text=""DRONZER"">DRONZER</h1>
        <div class=""input-label"" data-text=""SECURE ACCESS TERMINAL"">SECURE ACCESS TERMINAL</div>
    </div>
    
    <div class=""username-screen"" id=""usernameScreen"">
        <div class=""input-label"" data-text=""ENTER USERNAME"">ENTER USERNAME</div>
        <input type=""text"" id=""username"" class=""input-field"" autocomplete=""off"" autofocus>
    </div>
    
    <div class=""password-screen"" id=""passwordScreen"">
        <div class=""input-label"" data-text=""ENTER PASSWORD"">ENTER PASSWORD</div>
        <input type=""password"" id=""password"" class=""input-field"" autocomplete=""off"" autofocus>
    </div>
    
    <div class=""loading-screen"" id=""loadingScreen"">
        <div class=""loading-text"">INITIATING USER PROTOCOL</div>
        <div class=""loading-container"">
            <div class=""loading-bar"">
                <div class=""loading-progress"" id=""loadingProgress""></div>
                <div class=""percentage"" id=""percentage"">0%</div>
            </div>
        </div>
    </div>
    
    <div class=""access-message"" id=""accessGranted"">ACCESS GRANTED</div>
    <div class=""denied-message"" id=""accessDenied"">ACCESS DENIED</div>
    
    <audio id=""glitchSound"" src=""https://assets.mixkit.co/sfx/preview/mixkit-digital-glitch-2297.mp3"" preload=""auto""></audio>
    <audio id=""accessSound"" src=""https://assets.mixkit.co/sfx/preview/mixkit-security-protected-1982.mp3"" preload=""auto""></audio>
    <audio id=""deniedSound"" src=""https://assets.mixkit.co/sfx/preview/mixkit-wrong-answer-fail-notification-946.mp3"" preload=""auto""></audio>
    
    <script>
        // Matrix effect
        const canvas = document.getElementById('matrix');
        const ctx = canvas.getContext('2d');
        
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        const katakana = 'アァカサタナハマヤャラワガザダバパイィキシチニヒミリヰギジヂビピウゥクスツヌフムユュルグズブヅプエェケセテネヘメレヱゲゼデベペオォコソトノホモヨョロヲゴゾドボポヴッン';
        const latin = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const nums = '0123456789';
        
        const alphabet = katakana + latin + nums;
        
        const fontSize = 16;
        const columns = canvas.width / fontSize;
        
        const rainDrops = [];
        
        for (let x = 0; x < columns; x++) {
            rainDrops[x] = 1;
        }
        
        const draw = () => {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            ctx.fillStyle = '#00ff41';
            ctx.font = fontSize + 'px monospace';
            
            for (let i = 0; i < rainDrops.length; i++) {
                const text = alphabet.charAt(Math.floor(Math.random() * alphabet.length));
                ctx.fillText(text, i * fontSize, rainDrops[i] * fontSize);
                
                if (rainDrops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                    rainDrops[i] = 0;
                }
                rainDrops[i]++;
            }
        };
        
        setInterval(draw, 30);
        
        // Audio functions
        function playGlitch() {
            const sound = document.getElementById('glitchSound');
            sound.currentTime = 0;
            sound.play();
        }
        
        function playAccessSound() {
            const sound = document.getElementById('accessSound');
            sound.currentTime = 0;
            sound.play();
        }
        
        function playDeniedSound() {
            const sound = document.getElementById('deniedSound');
            sound.currentTime = 0;
            sound.play();
        }
        
        // Typing effect
        async function typeWriter(text, element, speed) {
            element.innerHTML = '';
            element.classList.add('typing');
            
            for (let i = 0; i < text.length; i++) {
                element.innerHTML += text.charAt(i);
                await new Promise(resolve => setTimeout(resolve, speed));
            }
            
            element.classList.remove('typing');
        }
        
        // Reset to username screen
        function resetToUsername() {
            const passwordScreen = document.getElementById('passwordScreen');
            passwordScreen.style.opacity = 0;
            
            setTimeout(() => {
                const usernameScreen = document.getElementById('usernameScreen');
                usernameScreen.style.opacity = 1;
                document.getElementById('username').value = '';
                document.getElementById('password').value = '';
                document.getElementById('username').focus();
            }, 500);
        }
        
        // Loading bar animation
        function animateLoadingBar(duration) {
            return new Promise((resolve) => {
                const loadingBar = document.getElementById('loadingProgress');
                const percentage = document.getElementById('percentage');
                let width = 0;
                const interval = 100; // ms
                const increment = 100 / (duration / interval);
                
                const timer = setInterval(() => {
                    if (width < 100) {
                        width += increment;
                        loadingBar.style.width = width + '%';
                        percentage.textContent = Math.min(Math.round(width), 100) + '%';
                    } else {
                        clearInterval(timer);
                        resolve();
                    }
                }, interval);
            });
        }
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', async () => {
            const welcomeScreen = document.getElementById('welcomeScreen');
            welcomeScreen.style.opacity = 1;
            
            playGlitch();
            await typeWriter('DRONZER', document.querySelector('.welcome-title'), 150);
            
            setTimeout(() => {
                welcomeScreen.style.opacity = 0;
                
                setTimeout(() => {
                    const usernameScreen = document.getElementById('usernameScreen');
                    usernameScreen.style.opacity = 1;
                    const usernameInput = document.getElementById('username');
                    usernameInput.focus();
                    
                    let usernameTimeout;
                    
                    usernameInput.addEventListener('input', () => {
                        clearTimeout(usernameTimeout);
                        usernameTimeout = setTimeout(() => {
                            proceedToPassword();
                        }, 2000);
                    });
                    
                    usernameInput.addEventListener('keydown', (e) => {
                        if (e.key === 'Enter') {
                            proceedToPassword();
                        }
                    });
                }, 500);
            }, 3000);
        });
        
        function proceedToPassword() {
            const username = document.getElementById('username').value.trim();
            if (!username) return;
            
            const usernameScreen = document.getElementById('usernameScreen');
            usernameScreen.style.opacity = 0;
            
            setTimeout(() => {
                const passwordScreen = document.getElementById('passwordScreen');
                passwordScreen.style.opacity = 1;
                const passwordInput = document.getElementById('password');
                passwordInput.focus();
                
                let passwordTimeout;
                
                passwordInput.addEventListener('input', () => {
                    clearTimeout(passwordTimeout);
                    passwordTimeout = setTimeout(() => {
                        authenticate();
                    }, 2000);
                });
                
                passwordInput.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        authenticate();
                    }
                });
            }, 500);
        }
        
        function authenticate() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            fetch('/auth', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, password }),
                credentials: 'include'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const passwordScreen = document.getElementById('passwordScreen');
                    passwordScreen.style.opacity = 0;
                    
                    playGlitch();
                    document.getElementById('accessGranted').style.display = 'flex';
            
                    setTimeout(() => {
                        document.getElementById('accessGranted').style.display = 'none';
                        window.location.href = data.redirect || '/';
                    }, 5000);
                } else {
                    playGlitch();
                    document.getElementById('accessDenied').style.display = 'flex';
            
                    setTimeout(() => {
                        document.getElementById('accessDenied').style.display = 'none';
                        resetToUsername();
                    }, 3000);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                playGlitch();
                document.getElementById('accessDenied').style.display = 'flex';
        
                setTimeout(() => {
                    document.getElementById('accessDenied').style.display = 'none';
                    resetToUsername();
                }, 3000);
            });
            
            const passwordScreen = document.getElementById('passwordScreen');
            passwordScreen.style.opacity = 0;
            
            if (isValid) {
                // Show loading screen
                const loadingScreen = document.getElementById('loadingScreen');
                loadingScreen.style.opacity = 1;
                
                // Animate loading bar for 10 seconds
                animateLoadingBar(10000).then(() => {
                    loadingScreen.style.opacity = 0;
                    playAccessSound();
                    document.getElementById('accessGranted').style.display = 'flex';
            
                    setTimeout(() => {
                        document.getElementById('accessGranted').style.display = 'none';
                        // Redirect to index.html on success
                        window.location.href = 'index.html';
                    }, 3000);
                });
            } else {
                playDeniedSound();
                document.getElementById('accessDenied').style.display = 'flex';
                
                setTimeout(() => {
                    document.getElementById('accessDenied').style.display = 'none';
                    resetToUsername();
                }, 3000);
            }
        }
        
        // Random glitch effects
        setInterval(() => {
            if (Math.random() > 0.9) {
                playGlitch();
            }
        }, 3000);
        
        // Window resize handler
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
    </script>
</body>
</html>"
03W2EG4P,Leaked Accounts - Fresh Hits,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 11:58:13 AM CDT,19424 Accounts Posted On https://t.me/leakedbyeminem
r6KgQ9Hg,Untitled,drakon-firestone,C++,Wednesday 23rd of April 2025 11:56:48 AM CDT,"
class Paddle
{
public:
    float x, y;
    float width, height;
    int speed;
    
    Paddle(float x, float y, int speed)
    {
        this->x = x;
        this->y = y;
        this->speed = speed;
        this->width = 25;
        this->height = 120;
    }
    void draw()
    {
        DrawRectangle(x, y, width, height, BLACK);
    }
 
    void update()
    {
        if(IsKeyDown(KEY_UP))
        {
            y -= speed;
        }
        else if (IsKeyDown(KEY_DOWN))
        {
            y += speed;
        }
    }
    
};"
zuNJsfPC,Order.js,Ratqueenkslskskwkw,JavaScript,Wednesday 23rd of April 2025 11:56:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/48521/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TU6v0sbG,PlayerController,leomovskii,C#,Wednesday 23rd of April 2025 11:43:39 AM CDT,"using UnityEngine;

public class PlayerController : MonoBehaviour {

	private static PlayerController _me;
	public static PlayerController Me {
		get {
			if (_me == null)
				_me = GameObject.FindObjectOfType<PlayerController>();
			return _me;
		}
	}

	public float speed;
	public float jumpHeight;
	public float gravity = 20f;

	public float crouchHeight = 0.9f;
	public float crouchCameraHeight = 0.6f;
	public float crouchTransitionSmooth = 5f;

	[Space]

	public Transform cameraTransform;
	public float horizontalSensitivity = 1f;
	public float verticalSensitivity = 1f;
	public float pitchMin = -70f;
	public float pitchMax = 80f;

	[Space]

	public LayerMask playerLayer;
	public Transform aimPoint;

	private CharacterController _controller;
	private Health _health;
	private Vector3 _input;
	private Vector3 _verticalVelocity;
	private Vector3 _yawVector;
	private Vector3 _currentPitch;

	private PlayerHUD _playerHud;
	private float _standingHeight;
	private float _standingCameraHeight;

	private void Start() {
		_me = this;

		_controller = GetComponent<CharacterController>();
		_currentPitch = cameraTransform.localEulerAngles;
		_standingHeight = _controller.height;

		_standingCameraHeight = cameraTransform.position.y;

		_health = GetComponent<Health>();
		_health.OnDeathEvent.AddListener(Endgame);

		_playerHud = FindObjectOfType<PlayerHUD>();
		_playerHud.SetMouseLocked(true);
		_health.healthBar = _playerHud.HealthBar;
	}

	private void Update() {
		CrouchUpdate();
		MoveUpdate();
		LookUpdate();
	}

	private void MoveUpdate() {
		bool isGrounded = _controller.isGrounded;

		_input.x = Input.GetAxisRaw(""Horizontal"");
		_input.z = Input.GetAxisRaw(""Vertical"");
		_input.Normalize();

		if (_verticalVelocity.y < -2f && isGrounded)
			_verticalVelocity.y = -1f;

		Vector3 moveVector = transform.forward * _input.z + transform.right * _input.x;
		_controller.Move(speed * Time.deltaTime * moveVector);

		if (Input.GetKeyDown(KeyCode.Space) && isGrounded) {
			_verticalVelocity.y = Mathf.Sqrt(jumpHeight * 2f * gravity);
		}

		_verticalVelocity.y -= gravity * Time.deltaTime;
		_controller.Move(_verticalVelocity * Time.deltaTime);
	}

	private void LookUpdate() {
		_yawVector.y = Input.GetAxis(""Mouse X"") * horizontalSensitivity;
		float pitch = Input.GetAxis(""Mouse Y"") * verticalSensitivity;

		transform.Rotate(_yawVector);

		_currentPitch.x = Mathf.Clamp(_currentPitch.x - pitch, pitchMin, pitchMax);
		cameraTransform.localEulerAngles = _currentPitch;
	}

	private void CrouchUpdate() {
		bool crouching = _controller.isGrounded && Input.GetKey(KeyCode.LeftControl);
		float targetHeight = crouching ? crouchHeight : _standingHeight;
		Vector3 cameraTarget = new Vector3(0f,crouching ? crouchCameraHeight : _standingCameraHeight, 0f);

		_controller.height = Mathf.Lerp(_controller.height, targetHeight, crouchTransitionSmooth * Time.deltaTime);
		_controller.center = new Vector3(0f,_controller.height / 2, 0f);

		cameraTransform.localPosition = Vector3.Lerp(cameraTransform.localPosition, cameraTarget, crouchTransitionSmooth * Time.deltaTime);

		// call animator
	}

	private void Endgame() {
		Time.timeScale = 0f;
		_playerHud.GameOver();
	}
}"
MTm8s2qV,Chaturbate with Tokens,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 11:42:49 AM CDT,39509 Accounts Posted On https://t.me/leakedbyeminem
UJdAc6ri,Market.js,Ratqueenkslskskwkw,JavaScript,Wednesday 23rd of April 2025 11:41:10 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/72689/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
budPDXWw,Warcaby,Cassimus,C++,Wednesday 23rd of April 2025 11:27:38 AM CDT,"#include <iostream>
#include <stdio.h>
#include <string>


using namespace std;

const string PAWN = ""O"";
tuple<int,int> punkt;


void init_board(int board[8][8]);
int get_row(string kind_of_move);
int get_column(string kind_of_move);
void draw_board(int board[8][8], bool is_white_move, int white_pawns, int black_pawns);
bool check_move(int col_from, int row_from, int col_to, int row_to, int board[8][8], bool is_white_move);
void move_pawn(int col_from, int row_from, int col_to, int row_to, int board[8][8], 
    int &white_pawns, int &black_pawns, bool is_white_move);
void clr_screen() { printf(""\033[H\033[J""); } // czyszczenie ekranu
void draw_white_field();
void draw_black_field();
void draw_white_pawn();
void draw_black_pawn();

int main(int argc, char const *argv[])
{
    // 0- biale pole, 1-czarne puste pole, 2 -czarny pion , 3 - bialy pion
    int board[8][8];
    bool is_white_move = true;

    int white_pawns = 12;
    int black_pawns = 12;

    int col_from = 0;
    int row_from = 0;
    int col_to = 0;
    int row_to = 0;

    init_board(board);

    while (white_pawns > 0 && black_pawns > 0)
    {
        draw_board(board, is_white_move,white_pawns, black_pawns);

        // pobranie ruchu
        col_from = get_column(""skad"");
        row_from = get_row(""skad"");
        col_to = get_column(""dokad"");
        row_to = get_row(""dokad"");

        char temp;

        if (check_move(col_from, row_from, col_to, row_to, board, is_white_move))
        {
            cout << ""Ruch mozliwy"" << endl;
            // przesuń pion
            move_pawn(col_from, row_from, col_to, row_to, board, 
                white_pawns, black_pawns, is_white_move);
            // ruch przeciwnika
            is_white_move = !is_white_move;
            cin >> temp;
        }
        else
        {
            cout << "" Nie mozna wykonac ruchu"" << endl;
            cin >> temp;
        }
    }
    if (white_pawns > 0)
    {
        cout << ""Gratulacje! Białe wygrywają "" << endl;
    }
    else
    {
        cout << ""Gratulacje! Czarne wygrywają"" << endl;
    }
}

bool check_move(int col_from, int row_from, int col_to, int row_to, int board[8][8], bool is_white_move)
{
    // czy ruch miesci sie w planszy
    if (col_from < 0 || col_from > 7 || col_to < 0 || col_to > 7)
        return false;
    else if (row_from < 0 || row_from > 7 || row_to < 0 || row_to > 7)
        return false;
    // czy nie idziemy na biale pole
    else if (board[row_to][col_to] == 0)
        return false;
    // czy na polu skad zaczynamy stoi nasz pion
    else if (board[row_from][col_from] <= 1)
        return false;
    else if (board[row_from][col_from] == 2 && is_white_move)
        return false;
    else if (board[row_from][col_from] == 3 && !is_white_move)
        return false;
    // czy pole na ktore się ruszamy jest puste;
    else if (board[row_to][col_to] != 1)
        return false;
    else if (col_from == col_to || row_from == row_to)
        return false;

    // czy o jedno lub 2 pola po skosie
    else if (abs(col_from - col_to) == 1 && abs(row_from - row_to) == 1)
        return true;
    else if (abs(col_from - col_to) == 2 && abs(row_from - row_to) == 2)
    {
        if (is_white_move)
        {
            if (col_from - col_to > 0 && row_from - row_to > 0)
            {
                if (board[row_from - 1][col_from - 1] == 2)
                    return true;
            }
            else if (col_from - col_to < 0 && row_from - row_to > 0)
            {
                if (board[row_from - 1][col_from + 1] == 2)
                    return true;
            }
            else if (col_from - col_to > 0 && row_from - row_to < 0)
            {
                if (board[row_from + 1][col_from - 1] == 2)
                    return true;
            }
            else if (col_from - col_to < 0 && row_from - row_to < 0)
            {
                if (board[row_from + 1][col_from + 1] == 2)
                    return true;
            }
            return false;
        }
        else
        {
            if (col_from - col_to > 0 && row_from - row_to > 0)
            {
                if (board[row_from - 1][col_from - 1] == 3)
                    return true;
            }
            else if (col_from - col_to < 0 && row_from - row_to > 0)
            {
                if (board[row_from - 1][col_from + 1] == 3)
                    return true;
            }
            else if (col_from - col_to > 0 && row_from - row_to < 0)
            {
                if (board[row_from + 1][col_from - 1] == 3)
                    return true;
            }
            else if (col_from - col_to < 0 && row_from - row_to < 0)
            {
                if (board[row_from + 1][col_from + 1] == 3)
                    return true;
            }
            return false;
        }
        return false;
    }

    return false;
}

int get_row(string kind_of_move)
{
    cout << ""Podaj numer wiersza "" << kind_of_move << "" chcesz ruszyć "" << endl;
    int row;
    cin >> row;
    return --row;
}

int get_column(string kind_of_move)
{
    cout << ""Podaj literę kolumny "" << kind_of_move << "" chcesz się ruszyć"" << endl;
    char temp;
    cin >> temp;
    return toupper(temp) - 65;
}

void init_board(int board[8][8])
{
    for (int row = 0; row < 8; row++)
    {
        for (int col = 0; col < 8; col++)
        {
            if ((row + col) % 2 == 0)
            {
                board[row][col] = 0;
            }
            else
            {
                if (row < 3)
                {
                    board[row][col] = 2;
                }
                else if (row > 4)
                {
                    board[row][col] = 3;
                }
                else
                {
                    board[row][col] = 1;
                }
            }
        }
    }
}

void draw_board(int board[8][8], bool is_white_move, 
    int white_pawns, int black_pawns)
{
    clr_screen();

    if (is_white_move)
    {
        cout << ""Ruch wykonuja biale"" << endl;
    }
    else
    {
        cout << ""Ruch wykonuja czarne"" << endl;
    }
    cout << ""Bialych na planszy: "" << white_pawns << endl;
    cout << ""Czarnych na planszy: "" << black_pawns << endl;
    cout << endl;

    cout << ""  ABCDEFGH"" << endl;
    for (int row = 0; row < 8; row++)
    {
        printf(""\033[37m"");
        cout << row + 1 << "" "";
        for (int col = 0; col < 8; col++)
        {
            if (board[row][col] == 0)
            {
                draw_white_field();
            }
            else if (board[row][col] == 1)
            {
                draw_black_field();
            }
            else if (board[row][col] == 2)
            {
                draw_black_pawn();
            }
            else if (board[row][col] == 3)
            {
                draw_white_pawn();
            }
        }
        cout << endl;
    }
}

void move_pawn(int col_from, int row_from, int col_to, int row_to, int board[8][8], 
    int &white_pawns, int &black_pawns, bool is_white_move)
{
    int pawn;
    pawn = board[row_from][col_from];
    board[row_from][col_from] = 1;
    board[row_to][col_to] = pawn;
    // uwzględnić bicie
    if (abs(row_from - row_to) == 2)
    {
        if (col_from - col_to > 0 && row_from - row_to > 0)
        {
            board[row_from - 1][col_from - 1] = 1;
        }
        else if (col_from - col_to < 0 && row_from - row_to > 0)
        {
            board[row_from - 1][col_from + 1] = 1;
        }
        else if (col_from - col_to > 0 && row_from - row_to < 0)
        {
            board[row_from + 1][col_from - 1] = 1;
        }
        else if (col_from - col_to < 0 && row_from - row_to < 0)
        {
            board[row_from + 1][col_from + 1] = 1;
        }

        if (is_white_move)
        {
            black_pawns--;
        }
        else
        {
            white_pawns--;
        }
    }
}

void draw_white_field()
{
    printf(""\033[37m"");
    cout << ""#"";
}

void draw_black_field()
{
    printf(""\033[30m"");
    cout << "" "";
}
void draw_white_pawn()
{
    printf(""\033[37m"");
    cout << PAWN;
}
void draw_black_pawn()
{
    printf(""\033[31m"");
    cout << PAWN;
}"
Zt9kF4kr,Crypto Accounts,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 11:27:26 AM CDT,22381 Accounts Posted On https://t.me/leakedbyeminem
XTMeBM0e,Untitled,Ratqueenkslskskwkw,JavaScript,Wednesday 23rd of April 2025 11:25:47 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71679/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
4vgba7Up,Chandelier Exit + RSIDiff + EMA Indicators,Kordan,RBScript,Wednesday 23rd of April 2025 11:18:56 AM CDT,"//@version=6
// Combined by Kordan
// Version 2
indicator(title=""Chandelier Exit + RSIDiff + EMA Indicators"", shorttitle=""CE+RSID+EMA"", format=format.price, precision=2)

////////////////////////////////////////////////////////////////////////////////////////

// ======================================================
// Differencial RSI Indicators - отдельная панель
//=======================================================

// Входные параметры для RSI
var string GroupRSI = 'Differencial RSI Indicators'
rsiFastLength = input.int(25, minval=1, title=""RSI Fast"", group=GroupRSI)
rsiSlowLength = input.int(100, minval=2, title=""RSI Slow"", group=GroupRSI)

// Проверка на корректность значений и вывод предупреждения
var label warningLabel = na  // Переменная для метки предупреждения

if (rsiSlowLength <= rsiFastLength)
    // Удаляем предыдущую метку, если она существует
    if (not na(warningLabel))
        label.delete(warningLabel)
    
    // Создаем новую метку предупреждения
    warningLabel := label.new(bar_index-100, na, ""Ошибка! : RSI Slow должен быть > RSI Fast"",  color=color.red, style=label.style_label_down)

else
    // Удаляем метку предупреждения, если значения корректны
    if (not na(warningLabel))
        label.delete(warningLabel)

// Функция для расчета RSI
f_rsi(source, length) =>
    change = ta.change(source)
    up = ta.rma(math.max(change, 0), length)
    down = ta.rma(-math.min(change, 0), length)
    down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))

// Расчет RSI и их разности
rsiSlow = f_rsi(close, rsiSlowLength)
rsiFast = f_rsi(close, rsiFastLength)       
rsiDifference = rsiFast - rsiSlow

colB = color.red
colS = color.green

// Отрисовка линий
plot(0, ""Zero Level"", color=color.silver, editable=false)
plot(rsiDifference, ""RSI Difference"", style=plot.style_histogram, color=(rsiDifference > 0 ? colS : colB), editable=false)

////////////////////////////////////////////////////////////////////////////////////////

//=======================================================
// Chandelier Exit Indicator
//=======================================================

var string calcGroupCE = 'Chandelier Exit Indicator'

// Группа параметров для визуализации и оповещений
showLabels = input.bool(title='Показать Buy/Sell Labels', defval=true, group=calcGroupCE)

length = input.int(title='ATR Period', defval=1, group=calcGroupCE)
mult = input.float(title='ATR Multiplier', step=0.1, defval=1.85, group=calcGroupCE)

// Расчет ATR и уровней стоп-лоссов
atr = mult * ta.atr(length)

longStop = ta.highest(high, length) - atr
longStopPrev = nz(longStop[1], longStop)
longStop := close[1] > longStopPrev ? math.max(longStop, longStopPrev) : longStop

shortStop = ta.lowest(low, length) + atr
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := close[1] < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop

// Определение направления тренда
var int dir = 1
dir := close > shortStopPrev ? 1 : close < longStopPrev ? -1 : dir

// Цвета для визуализации
var color longColor = color.green
var color shortColor = color.red
var color textColor = color.white

// Условия для сигналов покупки и продажи
buySignal = dir == 1 and dir[1] == -1
sellSignal = dir == -1 and dir[1] == 1
plotshape(buySignal and showLabels ? longStop : na, title='Buy Label', text='Buy', location=location.absolute,
          style=shape.labelup, size=size.tiny, color=longColor, textcolor=textColor,
          force_overlay=true, editable=false)
plotshape(sellSignal and showLabels ? shortStop : na, title='Sell Label', text='Sell', location=location.absolute,
          style=shape.labeldown, size=size.tiny, color=shortColor,textcolor=textColor,
          force_overlay=true, editable=false)

// Условия для оповещений
awaitCondition = barstate.isconfirmed
alertcondition(dir != dir[1] and awaitCondition , title='Alert: CE Direction Change' , message='Chandelier Exit has changed direction!')
alertcondition(buySignal and awaitCondition , title='Alert: CE Buy' , message='Chandelier Exit Buy!')
alertcondition(sellSignal and awaitCondition , title='Alert: CE Sell' , message='Chandelier Exit Sell!')

////////////////////////////////////////////////////////////////////////////////////////

//=======================================================
// EMA Indicator
//=======================================================

var string calcGroupEMA = 'EMA Indicator'

len = input.int(50, minval=1, title=""EMA Period"", group=calcGroupEMA)
plot(ta.ema(close, len), title=""EMA"", color=color.orange, offset=0, linewidth=2,force_overlay=true)

////////////////////////////////////////////////////////////////////////////////////////"
ThZHXkHU,Chandelier Exit + RSI + EMA Indicators,Kordan,RBScript,Wednesday 23rd of April 2025 11:14:20 AM CDT,"//@version=6
// Combined by Kordan
// Version 1
indicator(title=""Chandelier Exit + RSI + EMA Indicators"", shorttitle=""CE+RSI+EMA"", format=format.price, precision=2)

// Входные параметры для RSI
var string GroupRSI = 'Chandelier RSI Indicators'
rsiFastLength = input.int(25, minval=1, title=""RSI Fast"", group=GroupRSI)
rsiSlowLength = input.int(100, minval=2, title=""RSI Slow"", group=GroupRSI)

// Функция для расчета RSI
f_rsi(source, length) =>
    change = ta.change(source)
    up = ta.rma(math.max(change, 0), length)
    down = ta.rma(-math.min(change, 0), length)
    down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))

// Расчет RSI
rsiSlow = f_rsi(close, rsiSlowLength)
rsiFast = f_rsi(close, rsiFastLength)

// Назначение цветов
var color rsislowColor = color.aqua
var color rsifastColor = color.yellow
var color hlineColor50 = color.new(color.gray, 50)
var color hlineColor70 = color.new(color.red, 60)
var color hlineColor30 = color.new(color.green, 60)
var color rsiBColor = color.new(color.red, 80)
var color rsiSColor = color.new(color.green, 80)

// Добавление уровней
hline(50, ""Mid Level"", color=hlineColor50, editable=false)
hline(70, ""Upper Band"", color=hlineColor70, editable=false)
hline(30, ""Lower Band"", color=hlineColor30, editable=false)

// Заполнение между графиками только если оба RSI отображаются
p1 = plot(rsiSlow, ""RSI Slow"", linewidth=3, color=rsislowColor)
p2 = plot(rsiFast, ""RSI Fast"", linewidth=1, color=rsifastColor)

// Подкрашивание областей выше и ниже уровней
bgColor = (rsiSlow > rsiFast) ? rsiBColor : (rsiSlow < rsiFast) ? rsiSColor : na
fill(p1, p2, color=bgColor, editable=false)

////////////////////////////////////////////////////////////////////////////////////////

//=======================================================
// Chandelier Exit Indicator
//=======================================================

var string calcGroupCE = 'Chandelier Exit Indicator'

// Группа параметров для визуализации и оповещений
showLabels = input.bool(title='Показать Buy/Sell Labels', defval=true, group=calcGroupCE)

length = input.int(title='ATR Period', defval=1, group=calcGroupCE)
mult = input.float(title='ATR Multiplier', step=0.1, defval=1.85, group=calcGroupCE)

// Расчет ATR и уровней стоп-лоссов
atr = mult * ta.atr(length)

longStop = ta.highest(high, length) - atr
longStopPrev = nz(longStop[1], longStop)
longStop := close[1] > longStopPrev ? math.max(longStop, longStopPrev) : longStop

shortStop = ta.lowest(low, length) + atr
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := close[1] < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop

// Определение направления тренда
var int dir = 1
dir := close > shortStopPrev ? 1 : close < longStopPrev ? -1 : dir

// Цвета для визуализации
var color longColor = color.green
var color shortColor = color.red
var color textColor = color.white

// Условия для сигналов покупки и продажи
buySignal = dir == 1 and dir[1] == -1
sellSignal = dir == -1 and dir[1] == 1
plotshape(buySignal and showLabels ? longStop : na, title='Buy Label', text='Buy', location=location.absolute,
          style=shape.labelup, size=size.tiny, color=longColor, textcolor=textColor,
          force_overlay=true, editable=false)
plotshape(sellSignal and showLabels ? shortStop : na, title='Sell Label', text='Sell', location=location.absolute,
          style=shape.labeldown, size=size.tiny, color=shortColor,textcolor=textColor,
          force_overlay=true, editable=false)

// Условия для оповещений
awaitCondition = barstate.isconfirmed
alertcondition(dir != dir[1] and awaitCondition , title='Alert: CE Direction Change' , message='Chandelier Exit has changed direction!')
alertcondition(buySignal and awaitCondition , title='Alert: CE Buy' , message='Chandelier Exit Buy!')
alertcondition(sellSignal and awaitCondition , title='Alert: CE Sell' , message='Chandelier Exit Sell!')

////////////////////////////////////////////////////////////////////////////////////////

//=======================================================
// EMA Indicator
//=======================================================

var string calcGroupEMA = 'EMA Indicator'

len = input.int(50, minval=1, title=""EMA Period"", group=calcGroupEMA)
plot(ta.ema(close, len), title=""EMA"", color=color.orange, offset=0, linewidth=2,force_overlay=true)

////////////////////////////////////////////////////////////////////////////////////////"
JqL55ARr,PayPal with Balance,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 11:12:02 AM CDT,48183 Accounts Posted On https://t.me/leakedbyeminem
31QUpewu,2D 8-Ball Pool Using Vector Graphics (Finally A Success !!!: Rewritten Major Overhauled),alien_fx_fiend,C++,Wednesday 23rd of April 2025 10:57:36 AM CDT,"==++ Here's the full source for (file 1/1 (No OOP-based)) ""Pool-Game-Clone.cpp""::: ++==
```Pool-Game-Clone.cpp
#define WIN32_LEAN_AND_MEAN
#define NOMINMAX
#include <windows.h>
#include <d2d1.h>
#include <dwrite.h>
#include <vector>
#include <cmath>
#include <string>
#include <sstream> // Required for wostringstream
#include <algorithm> // Required for std::max, std::min
#include <ctime>    // Required for srand, time
#include <cstdlib> // Required for srand, rand (often included by others, but good practice)

#pragma comment(lib, ""d2d1.lib"")
#pragma comment(lib, ""dwrite.lib"")

// --- Constants ---
const float PI = 3.1415926535f;
const float BALL_RADIUS = 10.0f;
const float TABLE_LEFT = 100.0f;
const float TABLE_TOP = 100.0f;
const float TABLE_WIDTH = 700.0f;
const float TABLE_HEIGHT = 350.0f;
const float TABLE_RIGHT = TABLE_LEFT + TABLE_WIDTH;
const float TABLE_BOTTOM = TABLE_TOP + TABLE_HEIGHT;
const float CUSHION_THICKNESS = 20.0f;
const float HOLE_VISUAL_RADIUS = 22.0f; // Visual size of the hole
const float POCKET_RADIUS = HOLE_VISUAL_RADIUS; // Make detection radius match visual size (or slightly larger)
const float MAX_SHOT_POWER = 15.0f;
const float FRICTION = 0.985f; // Friction factor per frame
const float MIN_VELOCITY_SQ = 0.01f * 0.01f; // Stop balls below this squared velocity
const float HEADSTRING_X = TABLE_LEFT + TABLE_WIDTH * 0.30f; // 30% line
const float RACK_POS_X = TABLE_LEFT + TABLE_WIDTH * 0.65f; // 65% line for rack apex
const float RACK_POS_Y = TABLE_TOP + TABLE_HEIGHT / 2.0f;
const UINT ID_TIMER = 1;
const int TARGET_FPS = 60; // Target frames per second for timer

// --- Enums ---
enum GameState {
    PRE_BREAK_PLACEMENT, // Player placing cue ball for break
    BREAKING,           // Player is aiming/shooting the break shot
    AIMING,             // Player is aiming
    SHOT_IN_PROGRESS,   // Balls are moving
    ASSIGNING_BALLS,    // Turn after break where ball types are assigned
    PLAYER1_TURN,
    PLAYER2_TURN,
    BALL_IN_HAND_P1,
    BALL_IN_HAND_P2,
    GAME_OVER
};

enum BallType {
    NONE,
    SOLID,  // Yellow (1-7)
    STRIPE, // Red (9-15)
    EIGHT_BALL, // Black (8)
    CUE_BALL // White (0)
};

// --- Structs ---
struct Ball {
    int id;             // 0=Cue, 1-7=Solid, 8=Eight, 9-15=Stripe
    BallType type;
    float x, y;
    float vx, vy;
    D2D1_COLOR_F color;
    bool isPocketed;
};

struct PlayerInfo {
    BallType assignedType;
    int ballsPocketedCount;
    std::wstring name;
};

// --- Global Variables ---

// Direct2D & DirectWrite
ID2D1Factory* pFactory = nullptr;
ID2D1HwndRenderTarget* pRenderTarget = nullptr;
IDWriteFactory* pDWriteFactory = nullptr;
IDWriteTextFormat* pTextFormat = nullptr;
IDWriteTextFormat* pLargeTextFormat = nullptr; // For ""Foul!""

// Game State
HWND hwndMain = nullptr;
GameState currentGameState = PRE_BREAK_PLACEMENT;
std::vector<Ball> balls;
int currentPlayer = 1; // 1 or 2
PlayerInfo player1Info = { BallType::NONE, 0, L""Player 1"" };
PlayerInfo player2Info = { BallType::NONE, 0, L""Player 2"" };
bool foulCommitted = false;
std::wstring gameOverMessage = L"""";
bool firstBallPocketedAfterBreak = false; // Track if colors need assignment
std::vector<int> pocketedThisTurn; // IDs of balls pocketed in the current shot sequence

// Input & Aiming
POINT ptMouse = { 0, 0 };
bool isAiming = false;
bool isDraggingCueBall = false;
bool isSettingEnglish = false;
D2D1_POINT_2F aimStartPoint = { 0, 0 };
float cueAngle = 0.0f;
float shotPower = 0.0f;
float cueSpinX = 0.0f; // Range -1 to 1
float cueSpinY = 0.0f; // Range -1 to 1

// UI Element Positions
D2D1_RECT_F powerMeterRect = { TABLE_RIGHT + CUSHION_THICKNESS + 10, TABLE_TOP, TABLE_RIGHT + CUSHION_THICKNESS + 40, TABLE_BOTTOM };
D2D1_RECT_F spinIndicatorRect = { TABLE_LEFT - CUSHION_THICKNESS - 60, TABLE_TOP + 20, TABLE_LEFT - CUSHION_THICKNESS - 20, TABLE_TOP + 60 }; // Circle area
D2D1_POINT_2F spinIndicatorCenter = { spinIndicatorRect.left + (spinIndicatorRect.right - spinIndicatorRect.left) / 2.0f, spinIndicatorRect.top + (spinIndicatorRect.bottom - spinIndicatorRect.top) / 2.0f };
float spinIndicatorRadius = (spinIndicatorRect.right - spinIndicatorRect.left) / 2.0f;
D2D1_RECT_F pocketedBallsBarRect = { TABLE_LEFT, TABLE_BOTTOM + CUSHION_THICKNESS + 30, TABLE_RIGHT, TABLE_BOTTOM + CUSHION_THICKNESS + 70 };

// Corrected Pocket Center Positions (aligned with table corners/edges)
const D2D1_POINT_2F pocketPositions[6] = {
    {TABLE_LEFT, TABLE_TOP},                           // Top-Left
    {TABLE_LEFT + TABLE_WIDTH / 2.0f, TABLE_TOP},      // Top-Middle
    {TABLE_RIGHT, TABLE_TOP},                          // Top-Right
    {TABLE_LEFT, TABLE_BOTTOM},                        // Bottom-Left
    {TABLE_LEFT + TABLE_WIDTH / 2.0f, TABLE_BOTTOM},   // Bottom-Middle
    {TABLE_RIGHT, TABLE_BOTTOM}                        // Bottom-Right
};

// Colors
const D2D1_COLOR_F TABLE_COLOR = D2D1::ColorF(0.0f, 0.5f, 0.1f); // Darker Green
const D2D1_COLOR_F CUSHION_COLOR = D2D1::ColorF(D2D1::ColorF::Red);
const D2D1_COLOR_F POCKET_COLOR = D2D1::ColorF(D2D1::ColorF::Black);
const D2D1_COLOR_F CUE_BALL_COLOR = D2D1::ColorF(D2D1::ColorF::White);
const D2D1_COLOR_F EIGHT_BALL_COLOR = D2D1::ColorF(D2D1::ColorF::Black);
const D2D1_COLOR_F SOLID_COLOR = D2D1::ColorF(D2D1::ColorF::Yellow); // Solids = Yellow
const D2D1_COLOR_F STRIPE_COLOR = D2D1::ColorF(D2D1::ColorF::Red);   // Stripes = Red
const D2D1_COLOR_F AIM_LINE_COLOR = D2D1::ColorF(D2D1::ColorF::White, 0.7f); // Semi-transparent white
const D2D1_COLOR_F FOUL_TEXT_COLOR = D2D1::ColorF(D2D1::ColorF::Red);
const D2D1_COLOR_F TURN_ARROW_COLOR = D2D1::ColorF(D2D1::ColorF::Blue);
const D2D1_COLOR_F ENGLISH_DOT_COLOR = D2D1::ColorF(D2D1::ColorF::Red);
const D2D1_COLOR_F UI_TEXT_COLOR = D2D1::ColorF(D2D1::ColorF::Black);

// --- Forward Declarations ---
HRESULT CreateDeviceResources();
void DiscardDeviceResources();
void OnPaint();
void OnResize(UINT width, UINT height);
void InitGame();
void GameUpdate();
void UpdatePhysics();
void CheckCollisions();
bool CheckPockets(); // Returns true if any ball was pocketed
void ProcessShotResults();
void ApplyShot(float power, float angle, float spinX, float spinY);
void RespawnCueBall(bool behindHeadstring);
bool AreBallsMoving();
void SwitchTurns();
void AssignPlayerBallTypes(BallType firstPocketedType);
void CheckGameOverConditions(bool eightBallPocketed, bool cueBallPocketed);
Ball* GetBallById(int id);
Ball* GetCueBall();

// Drawing Functions
void DrawScene(ID2D1RenderTarget* pRT);
void DrawTable(ID2D1RenderTarget* pRT);
void DrawBalls(ID2D1RenderTarget* pRT);
void DrawCueStick(ID2D1RenderTarget* pRT);
void DrawAimingAids(ID2D1RenderTarget* pRT);
void DrawUI(ID2D1RenderTarget* pRT);
void DrawPowerMeter(ID2D1RenderTarget* pRT);
void DrawSpinIndicator(ID2D1RenderTarget* pRT);
void DrawPocketedBallsIndicator(ID2D1RenderTarget* pRT);
void DrawBallInHandIndicator(ID2D1RenderTarget* pRT);

// Helper Functions
float GetDistance(float x1, float y1, float x2, float y2);
float GetDistanceSq(float x1, float y1, float x2, float y2);
bool IsValidCueBallPosition(float x, float y, bool checkHeadstring);
template <typename T> void SafeRelease(T** ppT);

// --- Forward Declaration for Window Procedure --- <<< Add this line HERE
LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);

// --- WinMain ---
int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR, int nCmdShow) {
    if (FAILED(CoInitialize(NULL))) {
        MessageBox(NULL, L""COM Initialization Failed."", L""Error"", MB_OK | MB_ICONERROR);
        return -1;
    }

    WNDCLASS wc = { };
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = L""Direct2D_8BallPool"";
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);

    if (!RegisterClass(&wc)) {
        MessageBox(NULL, L""Window Registration Failed."", L""Error"", MB_OK | MB_ICONERROR);
        CoUninitialize();
        return -1;
    }

    hwndMain = CreateWindowEx(
        0, L""Direct2D_8BallPool"", L""Direct2D 8-Ball Pool (Human vs Human)"", WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 1000, 700, // Adjusted window size
        NULL, NULL, hInstance, NULL
    );

    if (!hwndMain) {
        MessageBox(NULL, L""Window Creation Failed."", L""Error"", MB_OK | MB_ICONERROR);
        CoUninitialize();
        return -1;
    }

    // Initialize Direct2D Resources AFTER window creation
    if (FAILED(CreateDeviceResources())) {
        MessageBox(NULL, L""Failed to create Direct2D resources."", L""Error"", MB_OK | MB_ICONERROR);
        DestroyWindow(hwndMain); // Clean up window if resources fail
        CoUninitialize();
        return -1;
    }

    InitGame(); // Initialize game state AFTER resources are ready

    ShowWindow(hwndMain, nCmdShow);
    UpdateWindow(hwndMain);

    if (!SetTimer(hwndMain, ID_TIMER, 1000 / TARGET_FPS, NULL)) {
        MessageBox(NULL, L""Could not SetTimer()."", L""Error"", MB_OK | MB_ICONERROR);
        DestroyWindow(hwndMain);
        CoUninitialize();
        return -1;
    }

    MSG msg = { };
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    KillTimer(hwndMain, ID_TIMER);
    DiscardDeviceResources();
    CoUninitialize();

    return (int)msg.wParam;
}

// --- WndProc ---
LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_CREATE:
        // Resources are now created in WinMain after CreateWindowEx
        return 0;

    case WM_PAINT:
        OnPaint();
        // Validate the entire window region after painting
        ValidateRect(hwnd, NULL);
        return 0;

    case WM_SIZE: {
        UINT width = LOWORD(lParam);
        UINT height = HIWORD(lParam);
        OnResize(width, height);
        return 0;
    }

    case WM_TIMER:
        if (wParam == ID_TIMER) {
            GameUpdate(); // Update game logic and physics
            InvalidateRect(hwnd, NULL, FALSE); // Request redraw
        }
        return 0;

    case WM_MOUSEMOVE: {
        ptMouse.x = LOWORD(lParam);
        ptMouse.y = HIWORD(lParam);

        Ball* cueBall = GetCueBall();
        if (!cueBall) return 0;

        if (isDraggingCueBall && (currentGameState == BALL_IN_HAND_P1 || currentGameState == BALL_IN_HAND_P2 || currentGameState == PRE_BREAK_PLACEMENT)) {
            bool behindHeadstring = (currentGameState == PRE_BREAK_PLACEMENT);
            if (IsValidCueBallPosition((float)ptMouse.x, (float)ptMouse.y, behindHeadstring)) {
                cueBall->x = (float)ptMouse.x;
                cueBall->y = (float)ptMouse.y;
                cueBall->vx = cueBall->vy = 0; // Ensure it's stopped
            }
        }
        else if (isAiming && (currentGameState == AIMING || currentGameState == BREAKING)) {
            float dx = (float)ptMouse.x - cueBall->x;
            float dy = (float)ptMouse.y - cueBall->y;
            cueAngle = atan2f(dy, dx);
            // Calculate power based on distance pulled back from the initial click point (aimStartPoint)
            float pullDist = GetDistance((float)ptMouse.x, (float)ptMouse.y, aimStartPoint.x, aimStartPoint.y);
            shotPower = std::min(pullDist / 10.0f, MAX_SHOT_POWER); // Scale power, clamp to max
        }
        else if (isSettingEnglish) {
            float dx = (float)ptMouse.x - spinIndicatorCenter.x;
            float dy = (float)ptMouse.y - spinIndicatorCenter.y;
            float dist = GetDistance(dx, dy, 0, 0);
            if (dist > spinIndicatorRadius) { // Clamp to edge
                dx *= spinIndicatorRadius / dist;
                dy *= spinIndicatorRadius / dist;
            }
            cueSpinX = dx / spinIndicatorRadius; // Normalize to -1 to 1
            cueSpinY = dy / spinIndicatorRadius;
        }
        // No need to InvalidateRect here, the timer does it
        return 0;
    }

    case WM_LBUTTONDOWN: {
        ptMouse.x = LOWORD(lParam);
        ptMouse.y = HIWORD(lParam);

        // Check if clicking on Spin Indicator
        float spinDistSq = GetDistanceSq((float)ptMouse.x, (float)ptMouse.y, spinIndicatorCenter.x, spinIndicatorCenter.y);
        if (spinDistSq < spinIndicatorRadius * spinIndicatorRadius) {
            isSettingEnglish = true;
            // Update spin immediately on click
            float dx = (float)ptMouse.x - spinIndicatorCenter.x;
            float dy = (float)ptMouse.y - spinIndicatorCenter.y;
            cueSpinX = dx / spinIndicatorRadius;
            cueSpinY = dy / spinIndicatorRadius;
            return 0; // Don't process other clicks if setting english
        }


        Ball* cueBall = GetCueBall();
        if (!cueBall) return 0;

        if (currentGameState == BALL_IN_HAND_P1 || currentGameState == BALL_IN_HAND_P2 || currentGameState == PRE_BREAK_PLACEMENT) {
            // Check if clicking on the cue ball to start dragging
            float distSq = GetDistanceSq(cueBall->x, cueBall->y, (float)ptMouse.x, (float)ptMouse.y);
            if (distSq < BALL_RADIUS * BALL_RADIUS * 4) { // Allow clicking near the ball
                isDraggingCueBall = true;
            }
            else { // If clicking elsewhere on the table (and valid), place the ball
                bool behindHeadstring = (currentGameState == PRE_BREAK_PLACEMENT);
                if (IsValidCueBallPosition((float)ptMouse.x, (float)ptMouse.y, behindHeadstring)) {
                    cueBall->x = (float)ptMouse.x;
                    cueBall->y = (float)ptMouse.y;
                    cueBall->vx = cueBall->vy = 0;
                    isDraggingCueBall = false; // Stop dragging if placed by click
                    // Transition to aiming state
                    if (currentGameState == PRE_BREAK_PLACEMENT) {
                        currentGameState = BREAKING;
                    }
                    else if (currentGameState == BALL_IN_HAND_P1) {
                        currentGameState = PLAYER1_TURN; // Or AIMING directly? Let's go to TURN first
                    }
                    else if (currentGameState == BALL_IN_HAND_P2) {
                        currentGameState = PLAYER2_TURN;
                    }
                    currentGameState = (currentPlayer == 1) ? PLAYER1_TURN : PLAYER2_TURN; // Should transition to aiming on next click near ball
                }
            }
        }
        else if (currentGameState == PLAYER1_TURN || currentGameState == PLAYER2_TURN || currentGameState == BREAKING) {
            // Check if clicking near cue ball to start aiming
            float distSq = GetDistanceSq(cueBall->x, cueBall->y, (float)ptMouse.x, (float)ptMouse.y);
            if (distSq < BALL_RADIUS * BALL_RADIUS * 9) { // Click reasonably close to cue ball
                isAiming = true;
                aimStartPoint = { (float)ptMouse.x, (float)ptMouse.y }; // Store where aiming started
                shotPower = 0; // Reset power
                // Decide which state based on context
                currentGameState = (currentGameState == BREAKING) ? BREAKING : AIMING;
            }
        }
        return 0;
    }

    case WM_LBUTTONUP: {
        ptMouse.x = LOWORD(lParam);
        ptMouse.y = HIWORD(lParam);

        if (isAiming && (currentGameState == AIMING || currentGameState == BREAKING)) {
            isAiming = false;
            if (shotPower > 0.1f) { // Only shoot if power is applied
                ApplyShot(shotPower, cueAngle, cueSpinX, cueSpinY);
                currentGameState = SHOT_IN_PROGRESS;
                foulCommitted = false; // Reset foul flag for the new shot
                pocketedThisTurn.clear(); // Clear balls pocketed this specific shot
            }
            else {
                // If no power, revert state back
                currentGameState = (currentPlayer == 1) ? PLAYER1_TURN : PLAYER2_TURN;
                if (GetBallById(0)->x < HEADSTRING_X && currentGameState != PLAYER1_TURN && currentGameState != PLAYER2_TURN) { // Simple check if it was likely a break attempt reset
                    currentGameState = BREAKING;
                }
            }
            shotPower = 0; // Reset power indicator
        }
        if (isDraggingCueBall) {
            isDraggingCueBall = false;
            // After placing the ball, transition state if needed
            if (currentGameState == PRE_BREAK_PLACEMENT) {
                currentGameState = BREAKING; // Ready to aim for break
            }
            else if (currentGameState == BALL_IN_HAND_P1 || currentGameState == BALL_IN_HAND_P2) {
                // Now ready to aim the shot after placing
                currentGameState = (currentPlayer == 1) ? PLAYER1_TURN : PLAYER2_TURN;
            }
        }
        if (isSettingEnglish) {
            isSettingEnglish = false;
            // Spin is already set during drag
        }
        return 0;
    }


    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;

    default:
        return DefWindowProc(hwnd, msg, wParam, lParam);
    }
    return 0;
}

// --- Direct2D Resource Management ---

HRESULT CreateDeviceResources() {
    HRESULT hr = S_OK;

    // Create Direct2D Factory
    if (!pFactory) {
        hr = D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, &pFactory);
        if (FAILED(hr)) return hr;
    }

    // Create DirectWrite Factory
    if (!pDWriteFactory) {
        hr = DWriteCreateFactory(
            DWRITE_FACTORY_TYPE_SHARED,
            __uuidof(IDWriteFactory),
            reinterpret_cast<IUnknown**>(&pDWriteFactory)
        );
        if (FAILED(hr)) return hr;
    }

    // Create Text Formats
    if (!pTextFormat && pDWriteFactory) {
        hr = pDWriteFactory->CreateTextFormat(
            L""Segoe UI"", NULL, DWRITE_FONT_WEIGHT_NORMAL, DWRITE_FONT_STYLE_NORMAL, DWRITE_FONT_STRETCH_NORMAL,
            16.0f, L""en-us"", &pTextFormat
        );
        if (FAILED(hr)) return hr;
        // Center align text
        pTextFormat->SetTextAlignment(DWRITE_TEXT_ALIGNMENT_CENTER);
        pTextFormat->SetParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT_CENTER);
    }
    if (!pLargeTextFormat && pDWriteFactory) {
        hr = pDWriteFactory->CreateTextFormat(
            L""Impact"", NULL, DWRITE_FONT_WEIGHT_BOLD, DWRITE_FONT_STYLE_NORMAL, DWRITE_FONT_STRETCH_NORMAL,
            48.0f, L""en-us"", &pLargeTextFormat
        );
        if (FAILED(hr)) return hr;
        pLargeTextFormat->SetTextAlignment(DWRITE_TEXT_ALIGNMENT_LEADING); // Align left
        pLargeTextFormat->SetParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT_CENTER);
    }


    // Create Render Target (needs valid hwnd)
    if (!pRenderTarget && hwndMain) {
        RECT rc;
        GetClientRect(hwndMain, &rc);
        D2D1_SIZE_U size = D2D1::SizeU(rc.right - rc.left, rc.bottom - rc.top);

        hr = pFactory->CreateHwndRenderTarget(
            D2D1::RenderTargetProperties(),
            D2D1::HwndRenderTargetProperties(hwndMain, size),
            &pRenderTarget
        );
        if (FAILED(hr)) {
            // If failed, release factories if they were created in this call
            SafeRelease(&pTextFormat);
            SafeRelease(&pLargeTextFormat);
            SafeRelease(&pDWriteFactory);
            SafeRelease(&pFactory);
            pRenderTarget = nullptr; // Ensure it's null on failure
            return hr;
        }
    }

    return hr;
}

void DiscardDeviceResources() {
    SafeRelease(&pRenderTarget);
    SafeRelease(&pTextFormat);
    SafeRelease(&pLargeTextFormat);
    SafeRelease(&pDWriteFactory);
    // Keep pFactory until application exit? Or release here too? Let's release.
    SafeRelease(&pFactory);
}

void OnResize(UINT width, UINT height) {
    if (pRenderTarget) {
        D2D1_SIZE_U size = D2D1::SizeU(width, height);
        pRenderTarget->Resize(size); // Ignore HRESULT for simplicity here
    }
}

// --- Game Initialization ---
void InitGame() {
    srand((unsigned int)time(NULL)); // Seed random number generator

    balls.clear();
    pocketedThisTurn.clear();

    // Reset Players
    player1Info = { BallType::NONE, 0, L""Player 1"" };
    player2Info = { BallType::NONE, 0, L""Player 2"" };
    currentPlayer = 1;
    firstBallPocketedAfterBreak = false;
    foulCommitted = false;
    gameOverMessage = L"""";


    // Create Cue Ball (ID 0)
    balls.push_back({ 0, BallType::CUE_BALL, HEADSTRING_X / 2.0f, RACK_POS_Y, 0, 0, CUE_BALL_COLOR, false });

    // Create 8-Ball (ID 8) - Will be placed correctly in the rack setup
    // balls.push_back({ 8, BallType::EIGHT_BALL, 0, 0, 0, 0, EIGHT_BALL_COLOR, false });

    // Create Solid Balls (1-7, Yellow)
    for (int i = 1; i <= 7; ++i) {
        balls.push_back({ i, BallType::SOLID, 0, 0, 0, 0, SOLID_COLOR, false });
    }
    // Create Stripe Balls (9-15, Red)
    for (int i = 9; i <= 15; ++i) {
        balls.push_back({ i, BallType::STRIPE, 0, 0, 0, 0, STRIPE_COLOR, false });
    }
    // Add 8-ball (ID 8) now, it will be picked up by the racking algorithm
    balls.push_back({ 8, BallType::EIGHT_BALL, 0, 0, 0, 0, EIGHT_BALL_COLOR, false });


    // Arrange balls in a triangle rack
    float spacingX = BALL_RADIUS * 2.0f * 0.866f; // cos(30) for horizontal spacing
    float spacingY = BALL_RADIUS * 2.0f * 1.0f;   // Vertical spacing
    int ballIndex = 1; // Start placing from ball ID 1

    // Temp vector to hold balls for racking (excluding cue ball)
    std::vector<Ball*> rackBalls;
    for (size_t i = 0; i < balls.size(); ++i) {
        if (balls[i].id != 0) {
            rackBalls.push_back(&balls[i]);
        }
    }
    // Simple shuffle (optional, but makes breaks more varied)
    std::random_shuffle(rackBalls.begin(), rackBalls.end());

    // Find 8-ball and place it correctly if shuffled
    Ball* eightBallPtr = nullptr;
    int eightBallIdx = -1;
    for (size_t i = 0; i < rackBalls.size(); ++i) {
        if (rackBalls[i]->id == 8) {
            eightBallPtr = rackBalls[i];
            eightBallIdx = i;
            break;
        }
    }

    int currentBall = 0;
    for (int row = 0; row < 5; ++row) {
        for (int col = 0; col <= row; ++col) {
            if (currentBall >= rackBalls.size()) break; // Should not happen with 15 balls

            Ball* ballToPlace = rackBalls[currentBall];

            // Specific placement for 8-ball (center of 3rd row, index 4 if 0-based)
            bool isEightBallPosition = (row == 2 && col == 1); // Center position in the triangle (0-based indexing)

            if (isEightBallPosition) {
                // If this is the 8-ball's spot, place the 8-ball here
                if (eightBallPtr) {
                    ballToPlace = eightBallPtr;
                    // If the 8-ball wasn't already at currentBall index due to shuffle, swap it
                    if (rackBalls[currentBall]->id != 8) {
                        std::swap(rackBalls[currentBall], rackBalls[eightBallIdx]);
                        // Update eightBallIdx if it was swapped out
                        eightBallIdx = currentBall;
                    }
                }
                // If 8-ball wasn't found (error), just place whatever is here
            }
            else if (ballToPlace->id == 8) {
                // If we are about to place the 8-ball in a non-designated spot,
                // find a non-8-ball later in the list and swap with it.
                int swapIdx = -1;
                for (size_t k = currentBall + 1; k < rackBalls.size(); ++k) {
                    // Find the next ball that *shouldn't* be the 8-ball and isn't the 8-ball spot
                    bool kIsEightBallPosition = false; // Calculate if k corresponds to the 8-ball spot row/col
                    int temp_row = 0, temp_col = 0, count = 0;
                    for (int r = 0; r < 5; ++r) for (int c = 0; c <= r; ++c) { if (count == k) { temp_row = r; temp_col = c; } count++; }
                    kIsEightBallPosition = (temp_row == 2 && temp_col == 1);

                    if (rackBalls[k]->id != 8 && !kIsEightBallPosition) {
                        swapIdx = k;
                        break;
                    }
                }
                if (swapIdx != -1) {
                    std::swap(rackBalls[currentBall], rackBalls[swapIdx]);
                    ballToPlace = rackBalls[currentBall]; // Use the newly swapped ball
                    // Update eightBallIdx if it was involved in the swap
                    if (eightBallIdx == swapIdx) eightBallIdx = currentBall;
                }
                else {
                    // Failsafe: if no suitable swap found (e.g., end of list),
                    // place 8-ball here and hope for the best, or handle error.
                    // This case should be rare with correct logic.
                }
            }


            float x = RACK_POS_X + row * spacingX;
            float y = RACK_POS_Y + (col - row / 2.0f) * spacingY;
            ballToPlace->x = x;
            ballToPlace->y = y;
            ballToPlace->vx = 0;
            ballToPlace->vy = 0;
            ballToPlace->isPocketed = false;

            currentBall++;
        }
        if (currentBall >= rackBalls.size()) break;
    }

    // Specific check for corner balls types after placing others (common rule: one solid, one stripe)
    // Ball at index 0 (front) and indices 10, 14 (back corners)
    Ball* frontBall = rackBalls[0];
    Ball* corner1 = rackBalls[10]; // Bottom left corner of rack
    Ball* corner2 = rackBalls[14]; // Bottom right corner of rack
    if (corner1->type == corner2->type && corner1->id != 8 && corner2->id != 8) {
        // Find a ball of the opposite type to swap with one corner
        BallType typeNeeded = (corner1->type == BallType::SOLID) ? BallType::STRIPE : BallType::SOLID;
        int swapIdx = -1;
        for (size_t i = 1; i < rackBalls.size(); ++i) { // Start from 1 to avoid apex
            // Don't swap with 8-ball or the other corner
            if (rackBalls[i]->type == typeNeeded && rackBalls[i]->id != 8 && i != 10 && i != 14) {
                bool iIsEightBallPosition = false; // Check if this index is the 8-ball spot
                int temp_row = 0, temp_col = 0, count = 0;
                for (int r = 0; r < 5; ++r) for (int c = 0; c <= r; ++c) { if (count == i) { temp_row = r; temp_col = c; } count++; }
                iIsEightBallPosition = (temp_row == 2 && temp_col == 1);
                if (!iIsEightBallPosition) {
                    swapIdx = i;
                    break;
                }
            }
        }
        if (swapIdx != -1) {
            std::swap(rackBalls[10], rackBalls[swapIdx]); // Swap with one corner
        }
    }


    // Set initial game state
    currentGameState = PRE_BREAK_PLACEMENT; // Start by placing the cue ball
}


// --- Game Loop ---
void GameUpdate() {
    if (currentGameState == SHOT_IN_PROGRESS) {
        UpdatePhysics();
        CheckCollisions();
        bool pocketed = CheckPockets(); // Store if any ball was pocketed

        if (!AreBallsMoving()) {
            ProcessShotResults(); // Determine next state based on what happened
        }
    }
    // Other states (AIMING, BALL_IN_HAND, etc.) are handled by input messages
}

// --- Physics and Collision ---
void UpdatePhysics() {
    for (size_t i = 0; i < balls.size(); ++i) {
        Ball& b = balls[i];
        if (!b.isPocketed) {
            b.x += b.vx;
            b.y += b.vy;

            // Apply friction
            b.vx *= FRICTION;
            b.vy *= FRICTION;

            // Stop balls if velocity is very low
            if (GetDistanceSq(b.vx, b.vy, 0, 0) < MIN_VELOCITY_SQ) {
                b.vx = 0;
                b.vy = 0;
            }
        }
    }
}

void CheckCollisions() {
    // --- Corrected Collision Boundaries ---
    // These now represent the actual edges of the playable table surface
    float left = TABLE_LEFT;
    float right = TABLE_RIGHT;
    float top = TABLE_TOP;
    float bottom = TABLE_BOTTOM;

    // Define a radius around pocket centers to check if a ball is near a pocket mouth
    // Use a value slightly larger than the pocket radius to prevent clipping the edge
    const float pocketMouthCheckRadiusSq = (POCKET_RADIUS + BALL_RADIUS) * (POCKET_RADIUS + BALL_RADIUS) * 1.1f; // Check slightly larger area

    for (size_t i = 0; i < balls.size(); ++i) {
        Ball& b1 = balls[i];
        if (b1.isPocketed) continue; // Skip balls already pocketed

        // --- Pre-calculate proximity to pocket centers ---
        // This avoids recalculating distances multiple times for wall checks
        bool nearPocket[6];
        for (int p = 0; p < 6; ++p) {
            nearPocket[p] = GetDistanceSq(b1.x, b1.y, pocketPositions[p].x, pocketPositions[p].y) < pocketMouthCheckRadiusSq;
        }
        // Individual pocket proximity flags for clarity in wall checks
        bool nearTopLeftPocket = nearPocket[0];
        bool nearTopMidPocket = nearPocket[1];
        bool nearTopRightPocket = nearPocket[2];
        bool nearBottomLeftPocket = nearPocket[3];
        bool nearBottomMidPocket = nearPocket[4];
        bool nearBottomRightPocket = nearPocket[5];


        // --- Ball-Wall Collisions (with Pocket Avoidance) ---
        bool collidedWall = false; // Track if any wall collision happened for spin effects

        // Left Wall
        if (b1.x - BALL_RADIUS < left) {
            // Don't bounce if near top-left or bottom-left pocket mouths
            if (!nearTopLeftPocket && !nearBottomLeftPocket) {
                b1.x = left + BALL_RADIUS;
                b1.vx *= -1.0f;
                collidedWall = true;
            } // else: Allow ball to continue towards pocket
        }
        // Right Wall
        if (b1.x + BALL_RADIUS > right) {
            // Don't bounce if near top-right or bottom-right pocket mouths
            if (!nearTopRightPocket && !nearBottomRightPocket) {
                b1.x = right - BALL_RADIUS;
                b1.vx *= -1.0f;
                collidedWall = true;
            } // else: Allow ball to continue towards pocket
        }
        // Top Wall
        if (b1.y - BALL_RADIUS < top) {
            // Don't bounce if near top-left, top-mid, or top-right pocket mouths
            if (!nearTopLeftPocket && !nearTopMidPocket && !nearTopRightPocket) {
                b1.y = top + BALL_RADIUS;
                b1.vy *= -1.0f;
                collidedWall = true;
            } // else: Allow ball to continue towards pocket
        }
        // Bottom Wall
        if (b1.y + BALL_RADIUS > bottom) {
            // Don't bounce if near bottom-left, bottom-mid, or bottom-right pocket mouths
            if (!nearBottomLeftPocket && !nearBottomMidPocket && !nearBottomRightPocket) {
                b1.y = bottom - BALL_RADIUS;
                b1.vy *= -1.0f;
                collidedWall = true;
            } // else: Allow ball to continue towards pocket
        }

        // Optional: Apply simplified spin effect on wall collision IF a bounce occurred
        if (collidedWall) {
            // Simple spin damping/effect (can be refined)
            // Side spin affects vertical velocity on horizontal collision & vice-versa
            if (b1.x <= left + BALL_RADIUS || b1.x >= right - BALL_RADIUS) { // Hit L/R wall
                b1.vy += cueSpinX * b1.vx * 0.05f; // Apply small vertical impulse based on side spin and horizontal velocity
            }
            if (b1.y <= top + BALL_RADIUS || b1.y >= bottom - BALL_RADIUS) { // Hit T/B wall
                b1.vx -= cueSpinY * b1.vy * 0.05f; // Apply small horizontal impulse based on top/bottom spin and vertical velocity
            }
            // Dampen spin after wall hit
            cueSpinX *= 0.7f; // Increase damping maybe
            cueSpinY *= 0.7f;
        }


        // --- Ball-Ball Collisions ---
        for (size_t j = i + 1; j < balls.size(); ++j) {
            Ball& b2 = balls[j];
            if (b2.isPocketed) continue; // Skip pocketed balls

            float dx = b2.x - b1.x;
            float dy = b2.y - b1.y;
            float distSq = dx * dx + dy * dy;
            float minDist = BALL_RADIUS * 2.0f;

            if (distSq > 0 && distSq < minDist * minDist) { // Check distance squared first
                float dist = sqrtf(distSq);
                float overlap = minDist - dist;

                // Normalize collision vector
                float nx = dx / dist;
                float ny = dy / dist;

                // Separate balls to prevent sticking
                // Move each ball half the overlap distance along the collision normal
                b1.x -= overlap * 0.5f * nx;
                b1.y -= overlap * 0.5f * ny;
                b2.x += overlap * 0.5f * nx;
                b2.y += overlap * 0.5f * ny;

                // Relative velocity
                float rvx = b1.vx - b2.vx;
                float rvy = b1.vy - b2.vy;

                // Dot product of relative velocity and collision normal
                // This represents the component of relative velocity along the collision line
                float velAlongNormal = rvx * nx + rvy * ny;

                // Only resolve collision if balls are moving towards each other (dot product > 0)
                if (velAlongNormal > 0) {
                    // Calculate impulse scalar (simplified - assumes equal mass, perfect elasticity=1.0)
                   // For perfect elastic collision, the impulse magnitude needed is velAlongNormal.
                   // Each ball gets half the impulse if masses are equal, but since we apply to both in opposite directions along the normal,
                   // the change in velocity for each along the normal is 'velAlongNormal'.
                    float impulse = velAlongNormal; // Simplified impulse magnitude along normal

                    // Apply impulse to velocities along the collision normal
                    b1.vx -= impulse * nx;
                    b1.vy -= impulse * ny;
                    b2.vx += impulse * nx;
                    b2.vy += impulse * ny;

                    // Apply spin transfer/effect (Very simplified)
                    if (b1.id == 0 || b2.id == 0) { // If cue ball involved
                        float spinEffectFactor = 0.08f; // Reduced factor maybe
                        // Simple model: Apply a small velocity change perpendicular to the normal based on spin
                        b1.vx += (cueSpinY * ny - cueSpinX * nx) * spinEffectFactor; // Spin effect
                        b1.vy += (cueSpinY * nx + cueSpinX * ny) * spinEffectFactor; // Spin effect (check signs/logic)

                        b2.vx -= (cueSpinY * ny - cueSpinX * nx) * spinEffectFactor;
                        b2.vy -= (cueSpinY * nx + cueSpinX * ny) * spinEffectFactor;

                        // Dampen spin after transfer
                        cueSpinX *= 0.85f;
                        cueSpinY *= 0.85f;
                    }
                }
            }
        } // End ball-ball collision loop
    } // End loop through balls
} // End CheckCollisions


bool CheckPockets() {
    bool ballPocketed = false;
    for (size_t i = 0; i < balls.size(); ++i) {
        Ball& b = balls[i];
        if (!b.isPocketed) {
            for (int p = 0; p < 6; ++p) {
                float distSq = GetDistanceSq(b.x, b.y, pocketPositions[p].x, pocketPositions[p].y);
                if (distSq < POCKET_RADIUS * POCKET_RADIUS) {
                    b.isPocketed = true;
                    b.vx = b.vy = 0;
                    pocketedThisTurn.push_back(b.id); // Record pocketed ball ID
                    ballPocketed = true;
                    break; // No need to check other pockets for this ball
                }
            }
        }
    }
    return ballPocketed;
}

bool AreBallsMoving() {
    for (size_t i = 0; i < balls.size(); ++i) {
        if (!balls[i].isPocketed && (balls[i].vx != 0 || balls[i].vy != 0)) {
            return true;
        }
    }
    return false;
}

void RespawnCueBall(bool behindHeadstring) {
    Ball* cueBall = GetCueBall();
    if (cueBall) {
        cueBall->x = HEADSTRING_X * 0.5f; // Default spot
        cueBall->y = TABLE_TOP + TABLE_HEIGHT / 2.0f;
        cueBall->vx = 0;
        cueBall->vy = 0;
        cueBall->isPocketed = false;

        // If foul, allow free placement
        if (!behindHeadstring) {
            currentGameState = (currentPlayer == 1) ? BALL_IN_HAND_P1 : BALL_IN_HAND_P2;
        }
        else {
            currentGameState = PRE_BREAK_PLACEMENT; // Only for initial break setup
        }
    }
}


// --- Game Logic ---

void ApplyShot(float power, float angle, float spinX, float spinY) {
    Ball* cueBall = GetCueBall();
    if (cueBall) {
        cueBall->vx = cosf(angle) * power;
        cueBall->vy = sinf(angle) * power;

        // Apply English (Spin) - Simplified effect
        // Top/Bottom spin affects initial roll slightly
        cueBall->vx += sinf(angle) * spinY * 0.5f; // Small effect perpendicular to shot dir
        cueBall->vy -= cosf(angle) * spinY * 0.5f;
        // Side spin affects initial direction slightly
        cueBall->vx -= cosf(angle) * spinX * 0.5f;
        cueBall->vy -= sinf(angle) * spinX * 0.5f;

        // Store spin for later use in collisions/cushions (could decay over time too)
        cueSpinX = spinX;
        cueSpinY = spinY;
    }
}


void ProcessShotResults() {
    bool cueBallPocketed = false;
    bool eightBallPocketed = false;
    bool legalBallPocketed = false; // Player's own ball type
    bool opponentBallPocketed = false; // Opponent's ball type
    bool anyNonCueBallPocketed = false;
    BallType firstPocketedType = BallType::NONE;

    PlayerInfo& currentPlayerInfo = (currentPlayer == 1) ? player1Info : player2Info;
    PlayerInfo& opponentPlayerInfo = (currentPlayer == 1) ? player2Info : player1Info;


    // Analyze pocketed balls
    for (int pocketedId : pocketedThisTurn) {
        Ball* b = GetBallById(pocketedId);
        if (!b) continue;

        if (b->id == 0) {
            cueBallPocketed = true;
        }
        else if (b->id == 8) {
            eightBallPocketed = true;
        }
        else {
            anyNonCueBallPocketed = true;
            if (firstPocketedType == BallType::NONE) {
                firstPocketedType = b->type; // Record type of first non-8 ball pocketed
            }

            // Check if ball matches player's assigned type (if assigned)
            if (currentPlayerInfo.assignedType != BallType::NONE) {
                if (b->type == currentPlayerInfo.assignedType) {
                    legalBallPocketed = true;
                }
                else if (b->type == opponentPlayerInfo.assignedType) {
                    opponentBallPocketed = true; // Pocketed opponent's ball
                }
            }
        }
    }

    // --- Game Over Checks ---
    if (eightBallPocketed) {
        CheckGameOverConditions(eightBallPocketed, cueBallPocketed);
        if (currentGameState == GAME_OVER) return; // Stop processing if game ended
    }

    // --- Foul Checks ---
    bool turnFoul = false;
    if (cueBallPocketed) {
        foulCommitted = true;
        turnFoul = true;
    }
    // Add other foul conditions here (e.g., no ball hit cushion after contact, first ball hit wasn't legal)
    // For simplicity, only scratch and wrong ball pocketed first are fouls here.
    // If player pockets opponent ball BEFORE their own, it can be a foul in some rulesets.
    // Let's simplify: Pocketing opponent ball is only a foul if NO own balls pocketed.
    if (opponentBallPocketed && !legalBallPocketed && currentPlayerInfo.assignedType != BallType::NONE) {
        //foulCommitted = true; // Optional rule: fouling by pocketing only opponent ball
        //turnFoul = true;
    }


    // --- State Transitions ---

    // 1. Break Shot Results (Assigning Colors)
    if (player1Info.assignedType == BallType::NONE && anyNonCueBallPocketed && !cueBallPocketed) {
        AssignPlayerBallTypes(firstPocketedType);
        // Update ball counts for newly assigned types
        player1Info.ballsPocketedCount = 0;
        player2Info.ballsPocketedCount = 0;
        for (int id : pocketedThisTurn) {
            Ball* b = GetBallById(id);
            if (b && b->id != 0 && b->id != 8) {
                if (b->type == player1Info.assignedType) player1Info.ballsPocketedCount++;
                else if (b->type == player2Info.assignedType) player2Info.ballsPocketedCount++;
            }
        }

        // Did the current player pocket their *newly assigned* type?
        bool pocketedOwnTypeOnBreakAssign = false;
        if (firstPocketedType == currentPlayerInfo.assignedType) {
            pocketedOwnTypeOnBreakAssign = true;
        }

        if (pocketedOwnTypeOnBreakAssign) {
            // Continue turn
            currentGameState = (currentPlayer == 1) ? PLAYER1_TURN : PLAYER2_TURN;
        }
        else {
            // Switch turns
            SwitchTurns();
        }
    }
    // 2. Normal Play Results
    else {
        // Update pocketed counts
        for (int id : pocketedThisTurn) {
            Ball* b = GetBallById(id);
            if (!b || b->id == 0 || b->id == 8) continue;
            if (b->type == player1Info.assignedType) player1Info.ballsPocketedCount++;
            else if (b->type == player2Info.assignedType) player2Info.ballsPocketedCount++;
        }

        if (turnFoul) {
            SwitchTurns();
            RespawnCueBall(false); // Ball in hand for opponent
            // State already set in RespawnCueBall
        }
        else if (legalBallPocketed) {
            // Player legally pocketed their own ball, continue turn
            currentGameState = (currentPlayer == 1) ? PLAYER1_TURN : PLAYER2_TURN;
        }
        else {
            // No legal ball pocketed (missed or only opponent ball)
            SwitchTurns();
        }
    }

    // Clear pocketed list for the next shot
    pocketedThisTurn.clear();

    // If a foul occurred but wasn't a scratch, maybe still switch turn?
    // Current logic handles scratch = foul = switch + ball-in-hand.
    // Other fouls could just mean switch turn.
}


void AssignPlayerBallTypes(BallType firstPocketedType) {
    if (firstPocketedType == BallType::SOLID || firstPocketedType == BallType::STRIPE) {
        if (currentPlayer == 1) {
            player1Info.assignedType = firstPocketedType;
            player2Info.assignedType = (firstPocketedType == BallType::SOLID) ? BallType::STRIPE : BallType::SOLID;
        }
        else {
            player2Info.assignedType = firstPocketedType;
            player1Info.assignedType = (firstPocketedType == BallType::SOLID) ? BallType::STRIPE : BallType::SOLID;
        }
    }
    // If 8-ball was first (illegal on break generally), rules vary.
    // Here, we might ignore assignment until a solid/stripe is pocketed legally.
    // Or assign based on what *else* was pocketed, if anything.
    // Simplification: Assignment only happens on SOLID or STRIPE first pocket.
}

void CheckGameOverConditions(bool eightBallPocketed, bool cueBallPocketed) {
    if (!eightBallPocketed) return; // Only proceed if 8-ball was pocketed

    PlayerInfo& currentPlayerInfo = (currentPlayer == 1) ? player1Info : player2Info;
    bool playerClearedBalls = (currentPlayerInfo.assignedType != BallType::NONE && currentPlayerInfo.ballsPocketedCount >= 7);

    // Loss Conditions:
    // 1. Pocket 8-ball AND scratch (pocket cue ball)
    // 2. Pocket 8-ball before clearing own color group
    if (cueBallPocketed || (!playerClearedBalls && currentPlayerInfo.assignedType != BallType::NONE)) {
        gameOverMessage = (currentPlayer == 1) ? L""Player 2 Wins! (Player 1 fouled on 8-ball)"" : L""Player 1 Wins! (Player 2 fouled on 8-ball)"";
        currentGameState = GAME_OVER;
    }
    // Win Condition:
    // 1. Pocket 8-ball legally after clearing own color group
    else if (playerClearedBalls) {
        gameOverMessage = (currentPlayer == 1) ? L""Player 1 Wins!"" : L""Player 2 Wins!"";
        currentGameState = GAME_OVER;
    }
    // Special case: 8 ball pocketed on break. Usually re-spot or re-rack.
    // Simple: If it happens during assignment phase, treat as foul, respawn 8ball.
    else if (player1Info.assignedType == BallType::NONE) {
        Ball* eightBall = GetBallById(8);
        if (eightBall) {
            eightBall->isPocketed = false;
            // Place 8-ball on foot spot (approx RACK_POS_X) or center if occupied
            eightBall->x = RACK_POS_X;
            eightBall->y = RACK_POS_Y;
            eightBall->vx = eightBall->vy = 0;
            // Check overlap and nudge if necessary (simplified)
        }
        // Apply foul rules if cue ball was also pocketed
        if (cueBallPocketed) {
            foulCommitted = true;
            // Don't switch turns on break scratch + 8ball pocket? Rules vary.
            // Let's make it a foul, switch turns, ball in hand.
            SwitchTurns();
            RespawnCueBall(false); // Ball in hand for opponent
        }
        else {
            // Just respawned 8ball, continue turn or switch based on other balls pocketed.
            // Let ProcessShotResults handle turn logic based on other pocketed balls.
        }
        // Prevent immediate game over message by returning here
        return;
    }


}


void SwitchTurns() {
    currentPlayer = (currentPlayer == 1) ? 2 : 1;
    currentGameState = (currentPlayer == 1) ? PLAYER1_TURN : PLAYER2_TURN;
    // Reset aiming state for the new player
    isAiming = false;
    shotPower = 0;
    // Don't reset foul flag here, it's reset before the shot is taken
}

// --- Helper Functions ---

Ball* GetBallById(int id) {
    for (size_t i = 0; i < balls.size(); ++i) {
        if (balls[i].id == id) {
            return &balls[i];
        }
    }
    return nullptr;
}

Ball* GetCueBall() {
    return GetBallById(0);
}

float GetDistance(float x1, float y1, float x2, float y2) {
    return sqrtf(GetDistanceSq(x1, y1, x2, y2));
}

float GetDistanceSq(float x1, float y1, float x2, float y2) {
    float dx = x2 - x1;
    float dy = y2 - y1;
    return dx * dx + dy * dy;
}

bool IsValidCueBallPosition(float x, float y, bool checkHeadstring) {
    // Basic bounds check (inside cushions)
    float left = TABLE_LEFT + CUSHION_THICKNESS + BALL_RADIUS;
    float right = TABLE_RIGHT - CUSHION_THICKNESS - BALL_RADIUS;
    float top = TABLE_TOP + CUSHION_THICKNESS + BALL_RADIUS;
    float bottom = TABLE_BOTTOM - CUSHION_THICKNESS - BALL_RADIUS;

    if (x < left || x > right || y < top || y > bottom) {
        return false;
    }

    // Check headstring restriction if needed
    if (checkHeadstring && x >= HEADSTRING_X) {
        return false;
    }

    // Check overlap with other balls
    for (size_t i = 0; i < balls.size(); ++i) {
        if (balls[i].id != 0 && !balls[i].isPocketed) { // Don't check against itself or pocketed balls
            if (GetDistanceSq(x, y, balls[i].x, balls[i].y) < (BALL_RADIUS * 2.0f) * (BALL_RADIUS * 2.0f)) {
                return false; // Overlapping another ball
            }
        }
    }

    return true;
}


template <typename T>
void SafeRelease(T** ppT) {
    if (*ppT) {
        (*ppT)->Release();
        *ppT = nullptr;
    }
}

// --- Drawing Functions ---

void OnPaint() {
    HRESULT hr = CreateDeviceResources(); // Ensure resources are valid

    if (SUCCEEDED(hr)) {
        pRenderTarget->BeginDraw();
        DrawScene(pRenderTarget); // Pass render target
        hr = pRenderTarget->EndDraw();

        if (hr == D2DERR_RECREATE_TARGET) {
            DiscardDeviceResources();
            // Optionally request another paint message: InvalidateRect(hwndMain, NULL, FALSE);
            // But the timer loop will trigger redraw anyway.
        }
    }
    // If CreateDeviceResources failed, EndDraw might not be called.
    // Consider handling this more robustly if needed.
}

void DrawScene(ID2D1RenderTarget* pRT) {
    if (!pRT) return;

    pRT->Clear(D2D1::ColorF(D2D1::ColorF::LightGray)); // Background color

    DrawTable(pRT);
    DrawBalls(pRT);
    DrawAimingAids(pRT); // Includes cue stick if aiming
    DrawUI(pRT);
    DrawPowerMeter(pRT);
    DrawSpinIndicator(pRT);
    DrawPocketedBallsIndicator(pRT);
    DrawBallInHandIndicator(pRT); // Draw cue ball ghost if placing

     // Draw Game Over Message
    if (currentGameState == GAME_OVER && pTextFormat) {
        ID2D1SolidColorBrush* pBrush = nullptr;
        pRT->CreateSolidColorBrush(D2D1::ColorF(D2D1::ColorF::White), &pBrush);
        if (pBrush) {
            D2D1_RECT_F layoutRect = D2D1::RectF(TABLE_LEFT, TABLE_TOP + TABLE_HEIGHT / 2 - 30, TABLE_RIGHT, TABLE_TOP + TABLE_HEIGHT / 2 + 30);
            pRT->DrawText(
                gameOverMessage.c_str(),
                (UINT32)gameOverMessage.length(),
                pTextFormat, // Use large format maybe?
                &layoutRect,
                pBrush
            );
            SafeRelease(&pBrush);
        }
    }

}

void DrawTable(ID2D1RenderTarget* pRT) {
    ID2D1SolidColorBrush* pBrush = nullptr;

    // Draw Table Bed (Green Felt)
    pRT->CreateSolidColorBrush(TABLE_COLOR, &pBrush);
    if (!pBrush) return;
    D2D1_RECT_F tableRect = D2D1::RectF(TABLE_LEFT, TABLE_TOP, TABLE_RIGHT, TABLE_BOTTOM);
    pRT->FillRectangle(&tableRect, pBrush);
    SafeRelease(&pBrush);

    // Draw Cushions (Red Border)
    pRT->CreateSolidColorBrush(CUSHION_COLOR, &pBrush);
    if (!pBrush) return;
    // Top Cushion (split by middle pocket)
    pRT->FillRectangle(D2D1::RectF(TABLE_LEFT + HOLE_VISUAL_RADIUS, TABLE_TOP - CUSHION_THICKNESS, TABLE_LEFT + TABLE_WIDTH / 2.f - HOLE_VISUAL_RADIUS, TABLE_TOP), pBrush);
    pRT->FillRectangle(D2D1::RectF(TABLE_LEFT + TABLE_WIDTH / 2.f + HOLE_VISUAL_RADIUS, TABLE_TOP - CUSHION_THICKNESS, TABLE_RIGHT - HOLE_VISUAL_RADIUS, TABLE_TOP), pBrush);
    // Bottom Cushion (split by middle pocket)
    pRT->FillRectangle(D2D1::RectF(TABLE_LEFT + HOLE_VISUAL_RADIUS, TABLE_BOTTOM, TABLE_LEFT + TABLE_WIDTH / 2.f - HOLE_VISUAL_RADIUS, TABLE_BOTTOM + CUSHION_THICKNESS), pBrush);
    pRT->FillRectangle(D2D1::RectF(TABLE_LEFT + TABLE_WIDTH / 2.f + HOLE_VISUAL_RADIUS, TABLE_BOTTOM, TABLE_RIGHT - HOLE_VISUAL_RADIUS, TABLE_BOTTOM + CUSHION_THICKNESS), pBrush);
    // Left Cushion
    pRT->FillRectangle(D2D1::RectF(TABLE_LEFT - CUSHION_THICKNESS, TABLE_TOP + HOLE_VISUAL_RADIUS, TABLE_LEFT, TABLE_BOTTOM - HOLE_VISUAL_RADIUS), pBrush);
    // Right Cushion
    pRT->FillRectangle(D2D1::RectF(TABLE_RIGHT, TABLE_TOP + HOLE_VISUAL_RADIUS, TABLE_RIGHT + CUSHION_THICKNESS, TABLE_BOTTOM - HOLE_VISUAL_RADIUS), pBrush);
    SafeRelease(&pBrush);


    // Draw Pockets (Black Circles)
    pRT->CreateSolidColorBrush(POCKET_COLOR, &pBrush);
    if (!pBrush) return;
    for (int i = 0; i < 6; ++i) {
        D2D1_ELLIPSE ellipse = D2D1::Ellipse(pocketPositions[i], HOLE_VISUAL_RADIUS, HOLE_VISUAL_RADIUS);
        pRT->FillEllipse(&ellipse, pBrush);
    }
    SafeRelease(&pBrush);

    // Draw Headstring Line (White)
    pRT->CreateSolidColorBrush(D2D1::ColorF(D2D1::ColorF::White, 0.5f), &pBrush);
    if (!pBrush) return;
    pRT->DrawLine(
        D2D1::Point2F(HEADSTRING_X, TABLE_TOP),
        D2D1::Point2F(HEADSTRING_X, TABLE_BOTTOM),
        pBrush,
        1.0f // Line thickness
    );
    SafeRelease(&pBrush);
}


void DrawBalls(ID2D1RenderTarget* pRT) {
    ID2D1SolidColorBrush* pBrush = nullptr;
    ID2D1SolidColorBrush* pStripeBrush = nullptr; // For stripe pattern

    pRT->CreateSolidColorBrush(D2D1::ColorF(0, 0, 0), &pBrush); // Placeholder
    pRT->CreateSolidColorBrush(D2D1::ColorF(D2D1::ColorF::White), &pStripeBrush);

    if (!pBrush || !pStripeBrush) {
        SafeRelease(&pBrush);
        SafeRelease(&pStripeBrush);
        return;
    }


    for (size_t i = 0; i < balls.size(); ++i) {
        const Ball& b = balls[i];
        if (!b.isPocketed) {
            D2D1_ELLIPSE ellipse = D2D1::Ellipse(D2D1::Point2F(b.x, b.y), BALL_RADIUS, BALL_RADIUS);

            // Set main ball color
            pBrush->SetColor(b.color);
            pRT->FillEllipse(&ellipse, pBrush);

            // Draw Stripe if applicable
            if (b.type == BallType::STRIPE) {
                // Draw a white band across the middle (simplified stripe)
                D2D1_RECT_F stripeRect = D2D1::RectF(b.x - BALL_RADIUS, b.y - BALL_RADIUS * 0.4f, b.x + BALL_RADIUS, b.y + BALL_RADIUS * 0.4f);
                // Need to clip this rectangle to the ellipse bounds - complex!
                // Alternative: Draw two colored arcs leaving a white band.
                // Simplest: Draw a white circle inside, slightly smaller.
                D2D1_ELLIPSE innerEllipse = D2D1::Ellipse(D2D1::Point2F(b.x, b.y), BALL_RADIUS * 0.6f, BALL_RADIUS * 0.6f);
                pRT->FillEllipse(innerEllipse, pStripeBrush); // White center part
                pBrush->SetColor(b.color); // Set back to stripe color
                pRT->FillEllipse(innerEllipse, pBrush); // Fill again, leaving a ring - No, this isn't right.

                // Let's try drawing a thick white line across
                // This doesn't look great. Just drawing solid red for stripes for now.
            }

            // Draw Number (Optional - requires more complex text layout or pre-rendered textures)
            // if (b.id != 0 && pTextFormat) {
            //     std::wstring numStr = std::to_wstring(b.id);
            //     D2D1_RECT_F textRect = D2D1::RectF(b.x - BALL_RADIUS, b.y - BALL_RADIUS, b.x + BALL_RADIUS, b.y + BALL_RADIUS);
            //     ID2D1SolidColorBrush* pNumBrush = nullptr;
            //     D2D1_COLOR_F numCol = (b.type == BallType::SOLID || b.id == 8) ? D2D1::ColorF(D2D1::ColorF::Black) : D2D1::ColorF(D2D1::ColorF::White);
            //     pRT->CreateSolidColorBrush(numCol, &pNumBrush);
            //     // Create a smaller text format...
            //     // pRT->DrawText(numStr.c_str(), numStr.length(), pSmallTextFormat, &textRect, pNumBrush);
            //     SafeRelease(&pNumBrush);
            // }
        }
    }

    SafeRelease(&pBrush);
    SafeRelease(&pStripeBrush);
}


void DrawAimingAids(ID2D1RenderTarget* pRT) {
    // --- Modified Condition ---
    // Draw aiming aids whenever it's a player's turn to aim or shoot, or during the break setup/aim.
    if (currentGameState != PLAYER1_TURN && currentGameState != PLAYER2_TURN &&
        currentGameState != BREAKING && currentGameState != AIMING &&
        currentGameState != PRE_BREAK_PLACEMENT) // Also show direction during initial placement maybe? Let's stick to active turns/aiming for now.
    {
        // Let's refine: show only when player can actually shoot or is aiming
        if (currentGameState != PLAYER1_TURN && currentGameState != PLAYER2_TURN &&
            currentGameState != BREAKING && currentGameState != AIMING)
        {
            return;
        }
    }

    Ball* cueBall = GetCueBall();
    if (!cueBall || cueBall->isPocketed) return; // Don't draw if cue ball is gone

    ID2D1SolidColorBrush* pBrush = nullptr;
    ID2D1SolidColorBrush* pGhostBrush = nullptr;
    ID2D1StrokeStyle* pDashedStyle = nullptr;
    ID2D1SolidColorBrush* pCueBrush = nullptr; // Moved cue brush here

    // Ensure render target is valid
    if (!pRT) return;

    // Create Brushes and Styles (check for failures)
    HRESULT hr = pRT->CreateSolidColorBrush(AIM_LINE_COLOR, &pBrush);
    if FAILED(hr) { SafeRelease(&pBrush); return; }

    hr = pRT->CreateSolidColorBrush(D2D1::ColorF(D2D1::ColorF::White, 0.5f), &pGhostBrush); // Semi-transparent white
    if FAILED(hr) { SafeRelease(&pBrush); SafeRelease(&pGhostBrush); return; }

    hr = pRT->CreateSolidColorBrush(D2D1::ColorF(0.6f, 0.4f, 0.2f), &pCueBrush); // Brownish cue stick
    if FAILED(hr) { SafeRelease(&pBrush); SafeRelease(&pGhostBrush); SafeRelease(&pCueBrush); return; }


    // Create dashed line style (Only if needed - Check Factory first)
    if (pFactory) {
        D2D1_STROKE_STYLE_PROPERTIES strokeProps = D2D1::StrokeStyleProperties();
        strokeProps.dashStyle = D2D1_DASH_STYLE_DASH;
        hr = pFactory->CreateStrokeStyle(&strokeProps, nullptr, 0, &pDashedStyle);
        // Don't exit entirely if dashed style fails, just draw solid lines later maybe?
        if FAILED(hr) { pDashedStyle = nullptr; } // Ensure it's null if failed
    }


    // --- Aiming Line & Cue Stick ---
    float stickLength = 150.0f;
    float stickAngle = cueAngle + PI; // Stick points opposite to aim direction

    // --- Modified Power Offset ---
    // Only apply pullback visual if actively aiming (dragging)
    float powerOffset = 0.0f;
    if (isAiming && (currentGameState == AIMING || currentGameState == BREAKING)) {
        powerOffset = shotPower * 5.0f; // Pull back based on power
    }

    D2D1_POINT_2F cueStickEnd = { cueBall->x + cosf(stickAngle) * (stickLength + powerOffset), cueBall->y + sinf(stickAngle) * (stickLength + powerOffset) };
    // Tip starts closer when not pulled back, further when pulled back
    D2D1_POINT_2F cueStickTip = { cueBall->x + cosf(stickAngle) * (powerOffset + 5.0f), cueBall->y + sinf(stickAngle) * (powerOffset + 5.0f) }; // Start tip slightly away from ball center


    // Draw Cue Stick (simple line) - Always draw if in correct state
    pRT->DrawLine(cueStickTip, cueStickEnd, pCueBrush, 4.0f); // Thickness 4


    // --- Projection Lines ---
    float projectionLength = TABLE_WIDTH + TABLE_HEIGHT; // Ensure line is long enough
    D2D1_POINT_2F aimEndPoint = { cueBall->x + cosf(cueAngle) * projectionLength, cueBall->y + sinf(cueAngle) * projectionLength };

    // Find the first ball hit by the aiming line (logic remains the same)
    Ball* hitBall = nullptr;
    float minDistSq = -1.0f;
    D2D1_POINT_2F collisionPoint = { 0, 0 };

    for (size_t i = 0; i < balls.size(); ++i) {
        Ball& b = balls[i];
        if (b.id == 0 || b.isPocketed) continue; // Skip cue ball and pocketed balls

        float dx = b.x - cueBall->x;
        float dy = b.y - cueBall->y;
        float dot = dx * cosf(cueAngle) + dy * sinf(cueAngle);

        if (dot > 0) {
            float closestPointX = cueBall->x + dot * cosf(cueAngle);
            float closestPointY = cueBall->y + dot * sinf(cueAngle);
            float distSq = GetDistanceSq(b.x, b.y, closestPointX, closestPointY);
            float combinedRadiusSq = (BALL_RADIUS + BALL_RADIUS) * (BALL_RADIUS + BALL_RADIUS); // Check against combined radius

            // More accurate check: does the line segment from cue ball intersect ball radius?
            // And is the distance along the line less than current min hit distance?
            if (distSq < BALL_RADIUS * BALL_RADIUS) { // Aim line passes *through* the ball radius zone
               // Distance from cue ball center to the point on aim line closest to target ball center
                float distToClosestPointOnLine = dot;
                // Distance from target ball center to that closest point
                float distFromTargetCenterToLine = sqrtf(distSq);
                // Distance along aim line from closest point back to collision point on cue path circumference
                float backDist = sqrtf(std::max(0.f, BALL_RADIUS * BALL_RADIUS - distSq)); // Clamp to 0
                float collisionDist = distToClosestPointOnLine - backDist; // Distance from cue ball center to collision point

                if (collisionDist > 0 && (hitBall == nullptr || collisionDist * collisionDist < minDistSq)) {
                    minDistSq = collisionDist * collisionDist;
                    hitBall = &b;
                    // The actual collision point (where cue surface hits target surface) is slightly further
                    collisionPoint = { cueBall->x + collisionDist * cosf(cueAngle), cueBall->y + collisionDist * sinf(cueAngle) };
                }
            }
        }
    }


    // Draw Aiming Line (dashed up to the first hit ball or full length)
    D2D1_POINT_2F lineEnd = hitBall ? collisionPoint : aimEndPoint;
    // Use dashed style if available, otherwise solid
    pRT->DrawLine(D2D1::Point2F(cueBall->x, cueBall->y), lineEnd, pBrush, 1.0f, pDashedStyle ? pDashedStyle : NULL);

    // Draw Target Circle at end of line
    D2D1_ELLIPSE targetCircle = D2D1::Ellipse(lineEnd, BALL_RADIUS / 2.0f, BALL_RADIUS / 2.0f);
    pRT->DrawEllipse(&targetCircle, pBrush, 1.0f);

    // If a ball is hit, draw projection lines
    if (hitBall) {
        // Draw Ghost Cue Ball at collision point
        D2D1_ELLIPSE ghostCue = D2D1::Ellipse(collisionPoint, BALL_RADIUS, BALL_RADIUS);
        // Use dashed style if available
        pRT->DrawEllipse(ghostCue, pGhostBrush, 1.0f, pDashedStyle ? pDashedStyle : NULL);

        // Draw Target Ball Projection Line
        float hitAngle = atan2f(hitBall->y - collisionPoint.y, hitBall->x - collisionPoint.x);
        D2D1_POINT_2F targetStartPoint = { hitBall->x, hitBall->y }; // Start from ball center
        // Extend line from collision point through ball center? No, from ball center along hitAngle.
        D2D1_POINT_2F targetProjectionEnd = { hitBall->x + cosf(hitAngle) * 50.0f, hitBall->y + sinf(hitAngle) * 50.0f }; // Short projection line
        // Use solid line for projection
        pRT->DrawLine(targetStartPoint, targetProjectionEnd, pBrush, 1.0f);

        // Optional: Draw Cue Ball Projection Line (after collision) - requires physics model
    }

    // Release resources
    SafeRelease(&pBrush);
    SafeRelease(&pGhostBrush);
    SafeRelease(&pCueBrush);
    SafeRelease(&pDashedStyle);
}


void DrawUI(ID2D1RenderTarget* pRT) {
    if (!pTextFormat || !pLargeTextFormat) return;

    ID2D1SolidColorBrush* pBrush = nullptr;
    pRT->CreateSolidColorBrush(UI_TEXT_COLOR, &pBrush);
    if (!pBrush) return;

    // Player Info Area (Top Left/Right)
    float uiTop = TABLE_TOP - 80;
    float uiHeight = 60;
    float p1Left = TABLE_LEFT;
    float p1Width = 150;
    float p2Left = TABLE_RIGHT - p1Width;

    D2D1_RECT_F p1Rect = D2D1::RectF(p1Left, uiTop, p1Left + p1Width, uiTop + uiHeight);
    D2D1_RECT_F p2Rect = D2D1::RectF(p2Left, uiTop, p2Left + p1Width, uiTop + uiHeight);

    // Player 1 Info
    std::wostringstream oss1;
    oss1 << player1Info.name.c_str() << L""\n"";
    if (player1Info.assignedType != BallType::NONE) {
        oss1 << ((player1Info.assignedType == BallType::SOLID) ? L""Solids (Yellow)"" : L""Stripes (Red)"");
        oss1 << L"" ["" << player1Info.ballsPocketedCount << L""/7]"";
    }
    else {
        oss1 << L""(Undecided)"";
    }
    pRT->DrawText(oss1.str().c_str(), (UINT32)oss1.str().length(), pTextFormat, &p1Rect, pBrush);

    // Player 2 Info
    std::wostringstream oss2;
    oss2 << player2Info.name.c_str() << L""\n"";
    if (player2Info.assignedType != BallType::NONE) {
        oss2 << ((player2Info.assignedType == BallType::SOLID) ? L""Solids (Yellow)"" : L""Stripes (Red)"");
        oss2 << L"" ["" << player2Info.ballsPocketedCount << L""/7]"";
    }
    else {
        oss2 << L""(Undecided)"";
    }
    pRT->DrawText(oss2.str().c_str(), (UINT32)oss2.str().length(), pTextFormat, &p2Rect, pBrush);

    // Current Turn Arrow (Blue)
    ID2D1SolidColorBrush* pArrowBrush = nullptr;
    pRT->CreateSolidColorBrush(TURN_ARROW_COLOR, &pArrowBrush);
    if (pArrowBrush && currentGameState != GAME_OVER && currentGameState != SHOT_IN_PROGRESS) {
        float arrowX = (currentPlayer == 1) ? p1Rect.left + p1Width / 2.0f : p2Rect.left + p1Width / 2.0f;
        float arrowY = uiTop - 15; // Above the text box
        // Draw a simple triangle arrow
        ID2D1PathGeometry* pPath = nullptr;
        pFactory->CreatePathGeometry(&pPath);
        if (pPath) {
            ID2D1GeometrySink* pSink = nullptr;
            pPath->Open(&pSink);
            if (pSink) {
                pSink->BeginFigure(D2D1::Point2F(arrowX, arrowY), D2D1_FIGURE_BEGIN_FILLED);
                pSink->AddLine(D2D1::Point2F(arrowX - 8, arrowY - 12));
                pSink->AddLine(D2D1::Point2F(arrowX + 8, arrowY - 12));
                pSink->EndFigure(D2D1_FIGURE_END_CLOSED);
                pSink->Close();
                SafeRelease(&pSink);
                pRT->FillGeometry(pPath, pArrowBrush);
            }
            SafeRelease(&pPath);
        }
        SafeRelease(&pArrowBrush);
    }


    // Foul Text (Large Red)
    if (foulCommitted && currentGameState != SHOT_IN_PROGRESS) { // Show foul until next shot starts
        ID2D1SolidColorBrush* pFoulBrush = nullptr;
        pRT->CreateSolidColorBrush(FOUL_TEXT_COLOR, &pFoulBrush);
        if (pFoulBrush) {
            D2D1_RECT_F foulRect = D2D1::RectF(TABLE_LEFT - CUSHION_THICKNESS - 150, TABLE_TOP + TABLE_HEIGHT / 2 - 30, TABLE_LEFT - CUSHION_THICKNESS - 10, TABLE_TOP + TABLE_HEIGHT / 2 + 30);
            pRT->DrawText(L""FOUL!"", 5, pLargeTextFormat, &foulRect, pFoulBrush);
            SafeRelease(&pFoulBrush);
        }
    }

    SafeRelease(&pBrush);
}

void DrawPowerMeter(ID2D1RenderTarget* pRT) {
    ID2D1SolidColorBrush* pBorderBrush = nullptr;
    ID2D1SolidColorBrush* pFillBrush = nullptr;

    pRT->CreateSolidColorBrush(D2D1::ColorF(D2D1::ColorF::Black), &pBorderBrush);
    pRT->CreateSolidColorBrush(D2D1::ColorF(D2D1::ColorF::LimeGreen), &pFillBrush);

    if (!pBorderBrush || !pFillBrush) {
        SafeRelease(&pBorderBrush);
        SafeRelease(&pFillBrush);
        return;
    }

    // Draw Border
    pRT->DrawRectangle(&powerMeterRect, pBorderBrush, 1.0f);

    // Calculate Fill Height
    float fillRatio = 0;
    if (isAiming && (currentGameState == AIMING || currentGameState == BREAKING)) {
        fillRatio = shotPower / MAX_SHOT_POWER;
    }
    float fillHeight = (powerMeterRect.bottom - powerMeterRect.top) * fillRatio;
    D2D1_RECT_F fillRect = D2D1::RectF(
        powerMeterRect.left, powerMeterRect.bottom - fillHeight,
        powerMeterRect.right, powerMeterRect.bottom
    );

    // Draw Fill
    pRT->FillRectangle(&fillRect, pFillBrush);

    SafeRelease(&pBorderBrush);
    SafeRelease(&pFillBrush);
}

void DrawSpinIndicator(ID2D1RenderTarget* pRT) {
    ID2D1SolidColorBrush* pWhiteBrush = nullptr;
    ID2D1SolidColorBrush* pRedBrush = nullptr;

    pRT->CreateSolidColorBrush(CUE_BALL_COLOR, &pWhiteBrush);
    pRT->CreateSolidColorBrush(ENGLISH_DOT_COLOR, &pRedBrush);

    if (!pWhiteBrush || !pRedBrush) {
        SafeRelease(&pWhiteBrush);
        SafeRelease(&pRedBrush);
        return;
    }

    // Draw White Ball Background
    D2D1_ELLIPSE bgEllipse = D2D1::Ellipse(spinIndicatorCenter, spinIndicatorRadius, spinIndicatorRadius);
    pRT->FillEllipse(&bgEllipse, pWhiteBrush);
    pRT->DrawEllipse(&bgEllipse, pRedBrush, 0.5f); // Thin red border


    // Draw Red Dot for Spin Position
    float dotRadius = 4.0f;
    float dotX = spinIndicatorCenter.x + cueSpinX * (spinIndicatorRadius - dotRadius); // Keep dot inside edge
    float dotY = spinIndicatorCenter.y + cueSpinY * (spinIndicatorRadius - dotRadius);
    D2D1_ELLIPSE dotEllipse = D2D1::Ellipse(D2D1::Point2F(dotX, dotY), dotRadius, dotRadius);
    pRT->FillEllipse(&dotEllipse, pRedBrush);

    SafeRelease(&pWhiteBrush);
    SafeRelease(&pRedBrush);
}


void DrawPocketedBallsIndicator(ID2D1RenderTarget* pRT) {
    ID2D1SolidColorBrush* pBgBrush = nullptr;
    ID2D1SolidColorBrush* pBallBrush = nullptr;

    // Ensure render target is valid before proceeding
    if (!pRT) return;

    HRESULT hr = pRT->CreateSolidColorBrush(D2D1::ColorF(D2D1::ColorF::Black, 0.8f), &pBgBrush); // Semi-transparent black
    if (FAILED(hr)) { SafeRelease(&pBgBrush); return; } // Exit if brush creation fails

    hr = pRT->CreateSolidColorBrush(D2D1::ColorF(0, 0, 0), &pBallBrush); // Placeholder, color will be set per ball
    if (FAILED(hr)) {
        SafeRelease(&pBgBrush);
        SafeRelease(&pBallBrush);
        return; // Exit if brush creation fails
    }

    // Draw the background bar (rounded rect)
    D2D1_ROUNDED_RECT roundedRect = D2D1::RoundedRect(pocketedBallsBarRect, 10.0f, 10.0f); // Corner radius 10
    pRT->FillRoundedRectangle(&roundedRect, pBgBrush);

    // --- Draw small circles for pocketed balls inside the bar ---

    // Calculate dimensions based on the bar's height for better scaling
    float barHeight = pocketedBallsBarRect.bottom - pocketedBallsBarRect.top;
    float ballDisplayRadius = barHeight * 0.30f; // Make balls slightly smaller relative to bar height
    float spacing = ballDisplayRadius * 2.2f; // Adjust spacing slightly
    float padding = spacing * 0.75f; // Add padding from the edges
    float center_Y = pocketedBallsBarRect.top + barHeight / 2.0f; // Vertical center

    // Starting X positions with padding
    float currentX_P1 = pocketedBallsBarRect.left + padding;
    float currentX_P2 = pocketedBallsBarRect.right - padding; // Start from right edge minus padding

    int p1DrawnCount = 0;
    int p2DrawnCount = 0;
    const int maxBallsToShow = 7; // Max balls per player in the bar

    for (const auto& b : balls) {
        if (b.isPocketed) {
            // Skip cue ball and 8-ball in this indicator
            if (b.id == 0 || b.id == 8) continue;

            bool isPlayer1Ball = (player1Info.assignedType != BallType::NONE && b.type == player1Info.assignedType);
            bool isPlayer2Ball = (player2Info.assignedType != BallType::NONE && b.type == player2Info.assignedType);

            if (isPlayer1Ball && p1DrawnCount < maxBallsToShow) {
                pBallBrush->SetColor(b.color);
                // Draw P1 balls from left to right
                D2D1_ELLIPSE ballEllipse = D2D1::Ellipse(D2D1::Point2F(currentX_P1 + p1DrawnCount * spacing, center_Y), ballDisplayRadius, ballDisplayRadius);
                pRT->FillEllipse(&ballEllipse, pBallBrush);
                p1DrawnCount++;
            }
            else if (isPlayer2Ball && p2DrawnCount < maxBallsToShow) {
                pBallBrush->SetColor(b.color);
                // Draw P2 balls from right to left
                D2D1_ELLIPSE ballEllipse = D2D1::Ellipse(D2D1::Point2F(currentX_P2 - p2DrawnCount * spacing, center_Y), ballDisplayRadius, ballDisplayRadius);
                pRT->FillEllipse(&ballEllipse, pBallBrush);
                p2DrawnCount++;
            }
            // Note: Balls pocketed before assignment or opponent balls are intentionally not shown here.
            // You could add logic here to display them differently if needed (e.g., smaller, grayed out).
        }
    }

    SafeRelease(&pBgBrush);
    SafeRelease(&pBallBrush);
}

void DrawBallInHandIndicator(ID2D1RenderTarget* pRT) {
    if (!isDraggingCueBall && (currentGameState != BALL_IN_HAND_P1 && currentGameState != BALL_IN_HAND_P2 && currentGameState != PRE_BREAK_PLACEMENT)) {
        return; // Only show when placing/dragging
    }

    Ball* cueBall = GetCueBall();
    if (!cueBall) return;

    ID2D1SolidColorBrush* pGhostBrush = nullptr;
    pRT->CreateSolidColorBrush(D2D1::ColorF(D2D1::ColorF::White, 0.6f), &pGhostBrush); // Semi-transparent white

    if (pGhostBrush) {
        D2D1_POINT_2F drawPos;
        if (isDraggingCueBall) {
            drawPos = D2D1::Point2F((float)ptMouse.x, (float)ptMouse.y);
        }
        else {
            // If not dragging but in placement state, show at current ball pos
            drawPos = D2D1::Point2F(cueBall->x, cueBall->y);
        }

        // Check if the placement is valid before drawing differently?
        bool behindHeadstring = (currentGameState == PRE_BREAK_PLACEMENT);
        bool isValid = IsValidCueBallPosition(drawPos.x, drawPos.y, behindHeadstring);

        if (!isValid) {
            // Maybe draw red outline if invalid placement?
            pGhostBrush->SetColor(D2D1::ColorF(D2D1::ColorF::Red, 0.6f));
        }


        D2D1_ELLIPSE ghostEllipse = D2D1::Ellipse(drawPos, BALL_RADIUS, BALL_RADIUS);
        pRT->FillEllipse(&ghostEllipse, pGhostBrush);
        pRT->DrawEllipse(&ghostEllipse, pGhostBrush, 1.0f); // Outline

        SafeRelease(&pGhostBrush);
    }
}
```"
BB3d7C2C,Leaked Accounts - Fresh Hits,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 10:56:40 AM CDT,21393 Accounts Posted On https://t.me/leakedbyeminem
Ef1z8cRj,Untitled,zaingaming,Lua,Wednesday 23rd of April 2025 10:56:13 AM CDT,"--[[ v1.0.0 https://wearedevs.net/obfuscator ]] return(function(...)local i={""\053\112\122\115\106\047\122\102"",""\116\082\049\105\102\050\117\079\049\076\056\097\087\085\065\061"";""\056\118\082\075\090\080\083\105\055\102\061\061"",""\121\115\071\078\121\119\068\049\084\053\089\097\084\087\103\108"";""\051\109\079\080\086\115\068\088\077\087\047\053\077\098\067\121"",""\116\077\056\073\081\068\065\073\120\082\061\061"";""\081\050\100\067\118\121\116\076\102\067\065\110\122\120\102\061"";""\070\055\088\055\088\111\089\073"";""\047\056\087\113\048\083\115\107\073\118\061\061"";""\104\111\119\098\074\048\057\110\089\097\109\074\052\119\098\072\084\084\086\084\103\104\070\106\075\069\061\061"",""\103\106\075\083\072\048\097\097\079\118\061\061"",""\074\122\099\053\084\066\056\047\119\081\071\103\121\114\070\061"";""\100\087\083\065\107\072\077\061"",""\054\107\101\080\084\090\099\090\103\070\098\108\074\088\053\061"";""\099\084\049\113\073\122\105\068\052\067\110\118\080\100\104\061"",""\047\116\097\108\101\102\061\061"",""\066\077\122\115\115\070\117\117\074\089\086\117\105\121\069\061"",""\110\117\048\109\087\118\061\061"",""\084\085\077\089\078\056\087\100\050\102\061\061"",""\120\043\119\118\079\118\061\061"",""\065\073\109\104\057\069\102\121\113\104\072\069\099\085\073\051\081\049\102\081\089\118\061\061"";""\112\103\089\106\109\114\074\069"";""\109\074\104\070\070\082\061\061"";""\088\081\101\104\108\110\102\048\067\051\114\090\073\104\105\061"",""\084\043\068\104\121\053\114\070\081\098\077\056\121\090\087\065\113\082\061\061"";""\065\108\070\120\075\121\090\067\043\069\082\116"",""\120\115\067\047\052\082\061\061"";""\053\074\073\066\085\069\061\061"",""\066\084\087\108\056\069\061\061"";""\078\104\103\083\106\083\105\061"";""\121\076\122\121\080\098\055\077\120\069\061\061"";""\121\106\068\056\051\082\061\061"",""\052\099\070\118\084\113\104\061"",""\078\086\055\054\082\090\070\106\106\118\061\061"",""\102\110\108\055\108\112\053\108\083\077\089\101\122\119\111\120\101\052\082\048\074\069\061\061"";""\047\119\056\100\081\117\121\090\084\053\103\090\110\043\121\121"",""\080\101\078\080\116\102\061\061"";""\052\082\061\061"",""\100\067\076\082\085\080\079\061"";""\076\048\118\086\121\088\069\061"";""\114\076\087\084\075\069\061\061"";""\086\043\084\104\081\079\047\114\047\069\061\061"";""\084\119\102\116\053\113\057\115\113\053\087\109\053\113\071\050\120\118\061\061"",""\085\112\113\100\074\100\105\061"";""\101\098\055\103\079\086\100\122\115\102\061\061"";""\074\068\104\112\118\100\076\090\109\056\066\069\114\090\065\061"",""\119\116\098\121\065\116\067\082\120\111\077\053\051\118\122\100\073\050\110\121"",""\106\055\054\082"";""\075\113\119\090\078\108\074\103"";""\043\103\070\108\071\069\061\061"",""\116\101\115\099\106\087\103\119\070\065\109\050\056\079\056\067"",""\068\054\082\114\117\112\051\052\043\102\061\061"";""\109\052\073\067\056\069\061\061"",""\101\066\089\043\103\084\082\061"",""\114\051\087\048\049\080\117\065\070\089\070\055"";""\072\077\116\100\043\082\047\107\043\069\061\061"";""\112\103\118\043\097\082\061\061"",""\047\070\055\122\105\071\090\047\100\057\079\061"",""\089\114\122\106\108\043\079\107\120\048\049\122"",""\053\083\048\048\050\068\083\084\074\112\102\061"",""\109\084\101\115\116\077\089\088\067\110\114\076\110\072\100\104"",""\101\111\086\087\074\082\061\061"";""\054\098\066\122\048\102\049\055\065\086\079\061"",""\079\057\053\100\116\047\103\111\117\068\073\102\086\056\051\061"",""\121\067\111\108\105\103\099\061"";""\090\101\119\085\083\106\118\061"";""\084\104\097\112\068\050\047\113\052\103\114\053\084\103\121\051\051\113\051\061"";""\112\049\067\102\113\043\047\049\069\113\099\061"";""\047\115\116\102\051\115\068\054"",""\090\077\122\116\052\078\081\121\054\100\098\110\098\074\082\061"";""\051\077\110\066\121\074\102\070\118\052\054\111\100\120\068\102\055\119\079\108\071\083\122\090"",""\052\084\115\121\069\056\066\087\119\110\081\061"",""\070\066\107\098\074\053\074\108\097\071\049\080\069\079\111\100\069\118\061\061"";""\097\073\067\055\071\106\088\114\090\102\061\061"",""\104\079\114\112\071\120\047\065\068\065\056\079\072\082\101\079\069\109\088\061"",""\051\086\074\098\115\116\066\107\108\086\082\108\076\066\079\075\070\082\120\097\070\102\061\061"",""\067\049\098\117\065\118\073\079\080\099\082\084\072\043\053\109\071\106\050\104\098\116\120\122\089\113\079\077\111\073\107\075\097\098\088\106\111\068\068\089\107\054\099\086\112\086\089\057\117\067\074\107\053\069\061\061"";""\073\121\098\057\055\054\067\070\098\090\069\089\071\106\077\061"",""\051\050\114\104\121\118\061\061"",""\047\106\084\043\084\106\121\078\107\119\121\066\107\098\097\048\051\101\079\061"",""\074\079\082\074\110\118\061\061"",""\049\090\101\121\107\048\082\116\051\114\116\081"";""\053\083\053\043\105\065\075\088\116\108\098\109\048\077\073\061"",""\051\056\097\116\068\043\103\066\068\087\089\102\118\113\097\107\118\102\061\061"",""\065\074\097\081\106\109\122\049\116\119\088\071\070\101\053\070\080\088\066\114\103\119\082\061"";""\119\098\110\078\117\050\108\122\074\050\083\067"";""\103\101\104\113\119\087\105\051\084\054\082\047\108\085\073\061"",""\106\114\110\114\047\049\081\061"",""\119\111\104\065\086\052\102\061"",""\098\065\116\088\098\118\061\061"",""\119\049\077\075\116\089\108\049\047\048\074\069\074\081\079\061"",""\076\069\072\080\088\075\106\084\120\082\061\061"",""\114\115\073\119\112\122\102\061"",""\118\098\083\112\110\090\087\109\047\069\061\061"";""\074\087\066\097\056\102\061\061"";""\069\106\075\050\055\115\053\061"",""\105\069\103\084\115\055\118\061"";""\110\068\080\052\118\054\119\051\077\082\120\116\074\070\082\061"";""\099\120\077\070\118\082\085\104\109\089\069\061"";""\084\101\074\057\100\048\071\106\116\072\085\119\084\073\089\068\082\072\103\055\047\069\061\061"";""\074\074\114\099"",""\118\106\071\114\051\074\084\114\118\050\087\104\047\119\083\112"";""\082\098\109\075\102\111\088\061"",""\101\110\111\065\055\114\112\118\079\083\051\061"",""\101\087\102\048\090\087\081\069\122\057\072\051"",""\043\074\077\081\072\056\104\061"",""\084\052\067\116\104\082\061\061"";""\066\116\107\073\053\102\121\110\106\114\081\050\054\105\057\098"",""\075\100\109\088\106\077\089\070\120\103\073\061"";""\052\115\071\112\113\074\069\065\053\056\047\090\053\114\068\119\053\102\061\061"";""\107\106\057\077\113\098\089\054\081\087\089\117\086\090\047\057\051\118\061\061"";""\101\110\054\068\120\074\099\118\118\102\061\061"";""\114\055\075\090\057\102\061\061"";""\108\065\113\082\049\080\102\106\085\098\081\102\119\117\053\061"";""\047\098\103\089\047\069\061\061"",""\084\105\089\079\079\074\084\111\103\105\066\111\078\104\104\061"",""\097\090\081\070\086\053\053\061"",""\100\072\097\101\075\082\076\102\108\051\065\061"",""\117\066\052\100\108\052\072\078\053\118\061\061"",""\121\098\087\104\121\098\087\112\047\082\061\061"";""\087\119\047\071\053\098\067\107\107\079\071\117\047\115\089\097\115\043\088\061"";""\102\043\076\122\088\089\086\049\081\109\053\061"";""\047\119\083\100\110\069\061\061"";""\083\118\100\101\101\051\089\069\065\076\073\061"";""\070\080\088\102\117\108\054\074\101\083\089\089\082\084\051\061"",""\051\098\097\097\081\082\061\061"";""\115\080\115\073\078\115\074\109\072\114\117\112\108\119\074\074\090\106\106\067\100\082\061\061"",""\113\056\087\118\051\088\084\068\113\079\071\099\077\106\097\080\120\090\099\061"",""\119\065\114\068\081\099\050\104\108\119\090\097"",""\053\067\088\103\090\107\050\048\080\077\082\112"";""\067\122\081\113\120\118\061\061"",""\047\114\071\106\120\079\047\075\121\098\097\043\081\088\105\098"";""\118\106\071\114\051\074\084\114\087\098\114\112\121\119\083\106"";""\086\102\061\061"",""\051\116\075\104\054\099\073\089\114\074\065\061"";""\089\117\049\086\104\113\074\050"",""\102\047\048\067\118\110\057\071\053\053\087\067\066\043\081\061"";""\101\078\067\067\102\114\099\090"",""\079\079\069\112\047\120\085\117\099\066\100\084\087\086\073\061"",""\075\117\087\069\090\104\108\043\048\082\061\061"",""\068\074\097\068\115\079\116\098\107\119\068\103\086\079\087\099\053\082\061\061"",""\104\083\054\116\115\078\088\083\098\097\081\061"";""\103\088\120\109\101\047\118\047\115\098\043\105\116\065\072\079\114\082\061\061"",""\101\103\099\079\057\069\061\061"";""\074\056\083\070\121\115\065\061"";""\122\072\047\105\108\109\073\079\105\100\080\084\081\070\081\061"",""\122\115\114\055\085\050\105\061"",""\077\106\077\056\053\115\065\098\084\109\057\054\047\090\103\080\084\074\079\061"",""\103\071\069\076\047\069\061\061"";""\068\103\079\104\084\115\089\079\087\053\067\109\086\079\114\119\053\118\061\061"";""\090\069\116\109\080\081\088\061"";""\113\084\047\056\110\090\120\077\054\054\104\103\083\113\077\061"";""\117\115\078\052\072\082\061\061"";""\086\098\122\115\065\116\084\118\097\118\061\061"";""\087\119\116\121\110\074\121\090\110\104\071\113\121\053\089\084"",""\065\118\086\118\043\089\118\084\112\069\061\061"",""\120\065\082\054\075\082\061\061"",""\047\119\103\066\110\119\053\061"";""\119\051\105\052\081\098\048\068\110\100\054\116\049\083\088\061"",""\105\120\052\104\086\119\097\122\107\069\061\061"",""\067\112\117\110\120\110\088\061"",""\084\090\114\112\121\079\121\089\081\050\068\104\118\098\097\089\110\119\118\061"",""\084\072\106\075\101\111\102\122\112\076\117\052\072\047\069\061"";""\069\077\047\080\048\072\067\110\073\055\049\081"",""\083\097\069\117\098\108\106\099\070\043\084\084\072\055\069\061"";""\048\074\080\043"";""\119\079\114\055\068\071\055\084\088\070\069\061"",""\086\115\116\101\047\119\103\112\051\098\053\061"",""\087\113\114\074\051\098\083\112\052\103\057\079\053\115\103\099"";""\068\101\052\056\119\082\061\061"",""\105\050\101\086\107\069\061\061"",""\054\065\050\090\051\107\110\078\089\077\074\078\101\071\070\061"",""\068\105\104\054\115\116\090\076"",""\067\116\088\084\088\118\053\061"";""\121\053\055\068\084\106\069\065\047\115\089\109\047\109\057\107"",""\110\043\087\121\113\087\047\077\086\117\084\088\086\074\068\078\047\082\061\061"",""\043\104\105\100\073\103\051\057\054\118\061\061"";""\068\090\083\056\068\050\068\077\068\114\114\078\120\113\084\102"",""\102\108\068\075\057\065\105\122\088\084\104\061"",""\090\084\066\085\107\048\081\053\109\052\106\099\098\070\047\114\052\086\117\100"";""\107\106\103\070"",""\069\108\119\089\122\102\061\061"";""\107\077\120\086\117\120\048\065\115\076\098\053\068\068\077\061"",""\112\098\074\097\109\090\073\082\115\118\061\061"";""\081\090\087\055\110\106\121\114"",""\057\112\100\105\118\116\052\122\097\082\061\061"";""\104\074\106\088\076\107\072\067\115\081\053\061"";""\121\098\103\055\121\118\061\061"";""\055\080\048\090\102\076\089\083\088\074\072\100"",""\113\071\121\106\121\071\102\102\066\101\047\097\070\108\105\061"";""\118\109\057\049\113\104\071\102\118\050\057\113\084\053\118\080\068\101\081\061"";""\072\054\086\070\052\054\069\061"",""\086\075\072\097\111\114\043\053\073\084\097\100\057\050\073\098\098\077\074\109\054\054\104\061"";""\084\098\084\050\047\043\068\067\068\053\047\098\120\103\087\113"";""\056\052\072\088\105\097\099\085\113\068\118\061"";""\118\104\121\080\051\115\056\114"",""\115\109\121\057\077\113\071\115\113\056\121\054\107\109\071\097\110\118\061\061"",""\074\114\054\086\051\117\083\072\055\070\122\048\105\083\122\048\067\110\073\107\077\082\086\078\111\106\089\097"";""\101\077\072\101\114\066\072\055\113\082\061\061"";""\081\090\103\112\121\119\083\055"",""\052\066\082\114\121\049\099\089\052\082\061\061"",""\099\104\097\113\098\111\073\061"",""\055\078\111\087\109\082\061\061"";""\065\117\048\081\081\082\061\061"";""\051\098\083\112\051\098\103\104"";""\121\072\097\050\102\076\104\061"";""\097\112\086\122\051\057\089\077\050\112\052\047\072\112\065\061"";""\109\090\122\088\074\116\079\048\070\069\061\061"";""\082\121\100\117\067\072\099\061"",""\089\098\073\086\078\105\105\061"";""\068\050\086\116\072\115\106\053\112\082\061\061"",""\106\084\076\101\082\054\056\117\047\098\116\076"",""\122\086\053\100\055\065\116\084\098\120\047\107\076\047\073\061"";""\097\106\071\087\111\051\114\057\075\121\104\061"",""\113\117\103\101\120\088\071\078\113\090\056\086\053\079\103\055"";""\082\055\105\086\106\071\053\110\090\069\061\061"",""\081\098\087\104\110\115\087\104\051\074\084\097\051\090\067\114"";""\082\086\106\077\086\082\061\061"",""\117\084\115\047\087\101\079\061"";""\098\102\079\069\066\081\069\061"",""\121\053\122\089\104\097\108\051\077\079\102\061"";""\079\122\066\052\084\052\099\061"";""\099\090\065\067\067\069\061\061"";""\109\106\115\080\106\086\103\107\097\049\097\047"";""\047\119\083\101\047\043\071\089\110\090\081\061"",""\052\081\080\097\089\082\061\061"",""\077\111\043\100\071\122\069\076\121\112\100\121\069\052\112\117\067\118\086\116\075\112\085\079\084\088\118\061"",""\084\104\089\073\053\101\079\098\053\115\084\051\087\098\099\098"";""\067\051\105\118\043\115\101\050\116\122\111\052\077\072\118\061"";""\084\080\117\056"";""\081\119\083\103\113\090\056\053\084\104\068\100\086\104\121\117\047\082\061\061"",""\086\054\047\117\122\118\061\061"",""\110\119\083\097\121\043\068\104\081\090\114\112\121\102\061\061"",""\120\067\087\085\069\082\108\072"",""\089\052\051\115\075\084\111\049\078\102\061\061"";""\103\121\078\083\077\113\121\114\056\069\061\061"";""\053\119\089\054\107\087\057\103\084\087\071\073\087\079\116\053"";""\057\077\068\088\114\119\053\107\076\065\119\113\107\068\105\061"";""\114\070\085\105\078\115\070\061"",""\087\099\051\069\051\086\082\069\082\083\081\061"",""\050\051\108\065\066\080\052\102\049\082\080\118\053\071\105\061"";""\085\076\108\071\104\113\102\061"";""\085\067\054\068\086\087\073\074\065\085\072\057\074\103\082\061"",""\120\117\051\122\122\114\111\099\043\067\102\047\051\111\043\051\120\082\061\061"",""\081\090\087\067\047\115\114\080\121\118\061\061"";""\047\116\121\057\120\069\061\061"",""\054\048\103\109\072\076\053\069\047\117\066\065\055\106\101\106\115\122\074\048\068\106\049\052\116\080\075\053\072\114\075\100\098\122\114\104\067\070\106\083\100\069\052\088\122\071\067\098\065\087\088\105\068\069\061\061"";""\051\110\078\100\065\089\103\111\100\085\051\061"";""\090\065\103\083\073\076\099\061"",""\081\119\067\097\120\115\087\080"",""\106\047\106\117\050\074\043\068\055\101\118\102\081\080\079\061"",""\076\076\102\105\070\111\115\054\051\105\080\099\067\048\105\061"",""\070\121\117\090\104\079\102\114\076\112\043\098\065\106\088\102\110\068\084\079\109\083\115\055\043\076\101\066\087\089\112\115\053\074\055\067\069\102\061\061"",""\043\109\067\097\070\078\069\084\049\116\114\116\078\109\048\071\102\078\051\090\122\082\061\061"";""\073\078\085\066\108\069\061\061"",""\078\089\072\081\047\077\089\084\052\072\085\050\087\111\073\061"";""\121\070\075\114\049\097\104\061"";""\047\098\083\080\107\106\068\102\051\115\068\114"",""\083\065\075\068\119\110\052\075\051\069\061\061"",""\087\101\072\043\117\055\079\061"";""\119\101\078\089\065\104\116\099\108\054\122\077\117\102\116\074\067\047\081\061"",""\118\056\084\074\118\113\047\102\107\088\056\098\113\050\103\080\081\106\082\061"";""\106\067\054\113\098\052\053\100\075\082\061\061"";""\076\068\099\110\087\101\105\061"";""\070\103\107\099\090\043\077\061"";""\049\075\057\079\079\103\109\102\052\118\107\071\067\071\082\061"";""\049\081\089\115\049\057\121\102\103\078\053\116\113\066\119\120\086\052\118\119\113\102\066\079\072\115\079\048\066\118\061\061"",""\085\076\109\113\103\075\053\061"";""\121\105\089\088\074\110\106\084\098\103\119\074\079\043\051\121"",""\069\112\076\072\121\103\120\056\056\082\080\078"";""\074\103\090\076\104\070\122\115\066\106\054\054\114\073\056\120\076\117\115\112\075\069\061\061"";""\109\067\114\080\087\119\073\078\097\112\088\061"";""\104\075\118\052\051\054\074\053\121\089\082\109\081\049\048\050\120\082\061\061"";""\075\090\049\069\120\114\089\108"",""\121\090\067\100\110\106\073\061"",""\078\049\075\056\089\065\053\109\120\076\082\061"";""\081\119\068\097\110\119\102\061"",""\076\078\112\116\106\122\073\061"";""\085\112\055\081\113\082\061\061"",""\087\088\103\057\081\103\084\065\110\043\114\054\121\113\071\106\068\102\061\061"";""\086\053\068\111\086\113\114\117\084\074\068\050\121\103\114\073"",""\070\078\113\082\119\114\106\065\082\103\069\109\080\080\116\105\072\050\079\089"",""\053\098\088\116\081\115\087\113\077\043\082\116\051\115\071\074\051\118\061\061"",""\053\101\057\075\115\079\071\100\120\117\087\102\118\098\087\075\121\115\079\061"",""\110\076\108\051\077\115\050\072\067\106\117\053\072\111\071\087\111\097\057\122\106\068\054\075\110\097\118\066"",""\119\090\087\110\078\069\090\051\073\098\088\070\055\074\081\061"",""\054\068\057\066\097\069\061\061"";""\080\118\072\083\101\066\118\117\100\072\065\078\073\047\073\061"",""\120\114\089\086\052\118\061\061"";""\065\109\102\079\070\111\079\106\118\112\053\075\047\099\069\061"",""\055\103\078\065\080\103\108\084\047\069\065\117\116\069\104\061"";""\047\111\117\087\090\119\079\122"",""\070\066\081\069\113\112\075\047\079\108\117\086\117\071\065\061"",""\085\114\110\047"";""\097\105\104\105\070\072\085\086\043\122\082\116\069\069\073\061"";""\085\053\101\114\089\069\061\061"";""\107\105\106\066\118\076\054\104"";""\114\116\122\074\052\054\047\052\097\057\074\112"",""\086\072\079\083\050\049\113\047\081\117\090\076\114\118\061\061"";""\075\079\106\097\106\098\054\073\085\090\099\061"",""\115\109\073\080\113\098\089\109\121\043\047\053\068\079\097\075\107\082\061\061"",""\071\090\070\120\102\054\081\069\081\053\103\085\119\102\061\061"",""\103\113\065\104\098\120\076\098\066\102\061\061"",""\087\119\089\090\084\087\121\121\118\087\053\098\053\115\105\056\086\102\061\061"";""\121\056\083\076\111\077\098\105\082\082\061\061"";""\079\098\072\051\084\118\061\061"",""\065\109\115\072\077\084\116\101\065\082\061\061"",""\114\069\116\089\057\076\109\067\057\069\061\061"";""\051\074\087\104\110\104\084\080\107\115\071\066\110\119\087\103\110\090\103\066\110\119\087\088"",""\072\101\112\055\079\121\099\110\104\118\061\061"";""\111\047\104\121\090\066\048\070\084\113\079\061"";""\120\052\117\121\111\119\082\051\074\082\061\061"";""\083\072\106\053\112\100\080\047\111\107\077\061"",""\107\102\089\056\081\088\073\111\057\121\106\070"";""\112\121\103\065\053\073\068\074\084\097\082\061"",""\119\099\090\072\071\116\055\079\081\100\071\122\076\114\099\061"",""\098\090\049\110\101\072\065\061"";""\118\076\057\098\108\102\061\061"";""\052\103\114\084\118\088\055\099\121\090\105\098\086\115\083\070"",""\118\106\071\114\051\074\084\114\087\119\103\066"",""\115\110\065\067\111\069\061\061"",""\111\073\077\080\118\055\043\106\101\071\066\043\050\069\065\061"",""\088\117\070\106\116\082\061\061"";""\056\103\088\106\084\077\043\055\081\102\119\077\120\104\118\061"",""\049\121\051\061"",""\087\053\098\079\054\067\069\061"",""\084\098\087\104\113\115\083\056\081\098\053\061"",""\050\074\051\099\049\067\080\086\105\069\061\061"";""\085\054\084\068\071\071\069\061"",""\051\086\051\057\107\079\066\084\078\067\116\110"";""\070\084\121\052\051\055\101\086\075\069\061\061"";""\071\072\099\102\111\111\112\057\111\118\085\120\102\043\065\061"",""\047\114\051\055\072\114\065\061"",""\107\122\073\075\080\069\061\061"";""\121\119\118\102\084\087\118\061"",""\116\049\085\115\104\047\084\105\118\069\061\061"";""\084\098\087\104\053\098\087\080\047\090\114\109\121\118\061\061"",""\084\066\081\047\104\121\053\061"",""\069\073\122\084\072\102\061\061"";""\121\117\086\055\111\082\061\061"";""\077\097\089\076\098\118\061\061"";""\052\069\090\082\071\083\077\119\116\080\073\090\079\104\081\061"",""\118\067\087\086\104\050\109\076\121\057\073\061"",""\117\053\086\105\075\054\068\104\086\114\103\119\115\100\076\100"",""\079\047\105\056\089\076\069\057\084\118\061\061"";""\107\056\090\056\083\116\103\070\054\052\113\101\103\048\065\061"",""\111\043\085\081\049\109\048\103\066\106\104\061"",""\107\118\073\072\119\082\061\061"";""\078\108\110\098\110\109\077\086\110\077\119\110\043\048\068\054\097\119\079\101"",""\115\052\051\057\086\089\056\070\067\069\052\115\105\112\072\116\052\111\081\061"";""\108\080\069\081\111\053\109\111\068\066\072\106\056\079\051\061"",""\110\119\087\112"";""\049\101\111\088\082\050\057\082\115\088\084\057\102\110\070\043\104\079\082\047"",""\121\103\047\109\118\090\055\054\121\114\084\106\086\103\082\106\087\098\077\061"";""\100\072\088\051\102\102\043\084\115\069\061\061"",""\120\100\087\103\086\102\061\061"",""\068\053\084\057\107\119\070\067\053\114\087\053\086\074\114\055\107\118\061\061"";""\081\109\071\079\086\119\097\089\068\114\071\057\113\117\114\097\107\069\061\061"",""\076\076\072\077\070\057\112\112\118\104\050\075\111\081\051\061"";""\049\098\078\090\090\050\111\114\057\102\107\086\070\120\110\082\114\069\065\108\084\088\073\115\056\069\061\061"",""\081\043\071\089\110\050\118\061"",""\084\100\105\067\101\109\117\118\069\048\049\119\122\056\053\061"";""\050\052\074\065\110\112\116\049\051\118\061\061"";""\073\068\050\056\049\078\079\061"",""\076\075\115\106\047\108\075\077\110\102\061\061"";""\043\048\043\107\047\072\068\121\109\066\054\100\116\050\104\061"";""\043\072\103\052\100\114\084\081\047\112\053\061"",""\081\087\098\099\090\102\061\061"";""\104\119\071\076\067\069\108\081\111\102\061\061"",""\106\121\105\117\110\043\122\081\043\119\105\080\097\047\079\061"";""\048\102\049\099\057\102\065\053\076\049\049\070\054\076\118\061"",""\121\097\053\115\073\047\079\105\116\104\121\073"",""\119\065\097\109\115\075\056\085\082\052\104\074"",""\100\079\084\111\047\097\043\116\118\054\102\102\066\069\061\061"";""\113\103\077\089\048\079\065\084\068\104\119\057\098\043\079\050\076\109\085\080"",""\102\106\104\109\065\102\061\061"",""\068\086\056\078\050\073\115\081\114\097\108\073\107\117\105\061"",""\101\105\057\112\070\073\065\061"";""\088\078\108\099\089\107\109\065\049\069\061\061"";""\086\079\121\112"";""\101\086\090\072\072\085\051\061"";""\086\088\082\048\084\080\105\061"",""\120\071\066\056"",""\109\098\085\122\056\071\110\067\056\120\097\073\078\081\053\061"";""\103\111\043\107\101\086\084\120\100\117\099\082\074\101\053\061"";""\073\047\084\078\078\101\108\104\068\065\051\088\121\073\073\061"",""\107\110\116\080\083\076\108\088\121\090\078\112\090\079\102\061"";""\080\068\119\118\105\107\057\117\067\116\086\047\078\050\077\061"";""\107\119\083\100\107\098\121\056\110\090\068\104\107\115\083\112"";""\047\079\087\107\081\079\056\070\115\119\103\079\113\088\055\101\047\103\099\061"";""\043\073\048\087\112\076\116\113"",""\110\115\068\112\068\103\087\043\113\113\097\087\107\098\083\051"";""\077\114\084\075\047\109\077\067\051\050\047\068\047\117\071\055\068\113\081\061"",""\102\088\100\053\078\080\068\082"",""\047\113\087\056\117\083\109\066\048\098\055\065\054\073\081\061"";""\120\118\089\057\087\102\061\061"";""\118\106\071\114\051\074\084\114\053\098\087\109\047\119\114\100\110\082\061\061"","""",""\110\049\079\084\077\069\061\061"";""\121\098\056\097\047\119\068\099"",""\122\103\055\119\098\069\077\061"";""\116\065\109\068\116\106\122\053\084\116\090\043\116\067\073\061"",""\098\074\087\107\066\069\061\061"";""\050\110\067\068\100\117\066\108\081\115\052\076\054\115\073\061"";""\100\076\083\116\082\121\056\105"";""\102\120\068\098\107\069\061\061"",""\050\075\049\122\099\115\089\085"";""\113\097\069\107\055\108\104\069\050\077\049\077\116\085\053\061"";""\051\098\083\112\110\090\087\109\047\069\061\061"",""\073\111\065\121\085\097\056\047\121\088\102\061"";""\053\084\086\079\050\079\100\052\048\057\051\061"",""\051\074\071\078\105\102\061\061"";""\097\122\082\080\122\102\061\061"";""\119\104\051\080\069\088\103\086\118\116\103\055\101\107\111\112\074\072\115\109\085\110\056\054"";""\118\106\071\114\051\074\084\114\053\098\067\089\121\119\087\080"";""\119\082\061\061"";""\083\047\070\087\111\102\061\061"",""\054\103\104\079\065\047\055\086\084\071\067\121\104\071\053\104\076\113\048\049\047\065\051\061"",""\083\109\118\107\088\118\061\061"";""\072\077\113\114\113\119\116\104\087\118\061\061"";""\084\079\079\104\118\098\071\114\051\109\103\073\107\079\071\113"",""\111\066\089\071\111\104\077\110\121\069\061\061"";""\117\088\052\065\105\085\047\086\066\118\061\061"",""\115\090\053\118\052\081\077\061"";""\066\069\116\067\108\069\061\061"";""\109\082\061\061"",""\065\057\104\069\089\103\099\076\055\082\061\061"";""\050\115\108\074\084\072\069\099\049\047\104\111\086\055\071\085\051\068\072\120\048\072\107\067\072\065\078\119"";""\110\050\050\070\048\082\061\061"",""\121\074\121\090\107\053\083\090\047\098\084\057\051\056\089\101\087\050\088\061"",""\122\118\100\078\102\122\083\102\099\114\047\090\085\066\082\061"",""\054\052\120\074\082\069\061\061"",""\072\053\056\055\117\102\061\061"";""\081\117\083\082\105\084\102\068\105\043\105\061"";""\107\048\098\076\073\119\072\068\104\102\061\061"";""\110\118\043\118\079\102\061\061"",""\083\112\106\111\067\111\106\056\079\090\077\065\056\072\081\061"";""\084\071\066\073\100\069\061\061"";""\077\053\121\099\121\088\056\088\113\087\103\084\086\043\082\102\047\082\061\061"",""\048\080\102\116\073\069\061\061"";""\076\101\106\043\075\116\122\109\105\102\061\061"",""\065\074\082\081\071\118\082\077\102\066\070\061"";""\110\115\103\104\107\069\061\061"";""\053\114\043\050\101\104\071\071\116\054\107\055\050\076\077\061"",""\108\047\106\102\053\078\070\061"";""\051\079\118\122\099\117\074\067\115\120\089\088\121\118\061\061"",""\087\050\051\098\052\053\055\107\087\098\065\104\068\079\116\118"";""\100\057\043\121\076\099\084\070\043\051\051\061"";""\049\088\114\056\115\103\103\076\097\102\061\061"";""\056\090\043\075\079\050\120\076\116\110\049\043\120\089\081\061"";""\103\100\066\043\107\057\107\086\052\090\106\067\078\114\109\099\043\068\073\047\119\053\051\061"",""\073\053\086\098\119\069\061\061"";""\110\099\117\087\055\080\106\056"",""\112\072\051\122\115\117\047\112\048\052\053\099\118\119\065\061"";""\115\080\097\121\106\118\061\061"",""\074\056\083\050\051\102\061\061"",""\043\090\074\121\074\067\066\085\072\117\101\071\088\122\051\061"";""\089\120\117\121\065\121\089\069\072\069\061\061"",""\047\070\082\078\057\100\104\077\053\100\077\061"",""\051\117\118\097\070\078\070\061"",""\117\122\120\108\048\111\102\061"",""\082\065\109\102\054\102\104\081\105\098\075\111\068\066\081\061"",""\114\103\104\111\099\052\070\052\048\118\061\061"",""\122\090\054\080\079\069\101\116"";""\080\057\052\065\107\050\066\065\099\067\068\043\119\102\061\061"",""\087\119\103\055\081\119\087\080\073\079\084\114\047\119\087\109\047\119\087\088\073\118\061\061"",""\082\079\113\104\112\118\102\061"",""\121\113\082\086\080\051\082\073\048\077\113\056\086\113\102\061"";""\067\053\107\067\071\107\112\075\089\073\081\061"",""\118\050\114\086\110\098\084\071\107\114\082\101\120\117\069\061"";""\087\053\083\075\047\098\047\113\121\079\114\109\086\114\053\101"";""\106\053\055\069\082\090\068\117\121\113\086\074\101\076\114\121\115\099\079\061"",""\081\097\056\109\117\071\111\110\102\076\099\061"";""\081\050\065\115\088\104\053\105\056\070\080\099\066\076\104\061"";""\097\049\084\050\070\113\110\072"";""\097\055\085\105\079\087\054\105\115\082\061\061"",""\114\074\112\090\075\115\051\061"";""\057\077\083\079\110\078\073\061"";""\079\121\118\073\103\052\101\043\112\122\099\061"";""\120\053\056\106\113\043\099\056\118\053\068\109\053\050\068\099\068\114\081\061"",""\121\074\071\080\110\106\073\061"",""\112\057\100\053\049\109\079\061"",""\110\117\079\061"",""\118\050\087\104\047\119\083\112\077\114\087\102"";""\079\117\057\085\105\079\084\068\119\088\113\085\119\117\073\087\083\057\100\068\049\076\105\109\111\098\105\080\071\052\055\078\089\068\111\068\072\107\083\117\106\098\080\117\106\080\104\065\068\122\104\061"";""\075\116\066\067\082\086\055\122\101\047\118\061"";""\051\114\114\109\098\118\061\061"";""\108\109\052\075\066\102\061\061"";""\116\120\070\066"";""\115\119\116\108\086\114\068\100\107\088\116\074\084\050\097\080\051\118\061\061"";""\055\122\054\102\098\090\065\119\081\069\065\081\112\110\105\061"";""\083\080\106\057\107\067\081\061"";""\082\105\103\114\088\089\053\053\116\053\088\061"";""\069\085\056\106\047\079\055\070\047\102\061\061"",""\102\120\110\049\079\083\088\089\113\118\061\061"";""\082\105\068\056\053\069\105\118\057\112\097\070\047\090\082\061"";""\053\118\085\050\066\110\078\113\083\073\102\061"";""\076\117\043\048\048\087\109\054\116\102\061\061"",""\053\068\115\071\122\082\061\061"";""\110\102\084\081\113\052\070\072\089\068\083\100\071\114\118\061"";""\075\075\097\047\075\067\074\099\122\078\100\119\099\118\099\061"";""\066\116\117\087\098\084\073\061"";""\118\103\098\052\119\122\116\048\078\076\113\089\071\043\082\061"",""\087\090\087\109\047\119\083\080\077\082\061\061"",""\114\083\077\055\055\084\047\072\082\090\084\049\114\110\082\061"",""\052\108\076\087\077\054\057\069\100\085\082\061"";""\112\119\110\051\074\082\069\061"",""\113\071\097\118\079\056\076\107"",""\071\122\050\111\116\073\086\051\048\102\061\061"";""\114\049\055\056\122\100\050\081\078\074\086\117\097\069\061\061"",""\118\101\069\098\087\113\068\099\087\087\068\067\047\119\071\118\053\102\061\061"";""\065\073\115\110\079\090\057\106\072\069\061\061"";""\081\049\065\087\053\069\061\061"",""\104\069\116\111\075\068\082\080\043\105\118\061"";""\117\079\090\106\076\057\070\061"",""\099\090\120\120\088\051\052\106\120\098\043\111"";""\122\111\077\052\049\057\101\069\122\107\052\071\109\075\099\061"",""\090\115\055\110\115\082\061\061"",""\085\110\077\086\070\120\070\061"";""\107\106\057\073\084\090\055\080\118\113\071\108\047\106\081\098"",""\049\089\101\081\055\090\101\050\051\079\087\081\120\070\049\068\080\082\061\061"";""\107\090\106\077\121\055\113\075\075\116\053\118"";""\074\056\083\055\121\074\084\097\047\119\103\066\110\119\053\061"",""\081\053\112\047\088\065\054\067\117\107\082\061"";""\087\079\055\066\121\117\097\113\118\115\081\067\068\087\057\108"";""\051\090\070\104\110\098\079\067\107\119\114\089\084\117\057\088\115\074\069\061"";""\108\079\056\104\074\090\076\070\111\105\056\073\065\083\070\061"";""\083\102\109\053\114\069\061\061"",""\083\043\098\049\083\118\089\097\075\068\056\075\068\097\102\061"",""\104\090\082\101\076\111\087\109\065\056\099\050\117\077\097\103"";""\043\085\108\066\054\102\061\061"",""\087\090\087\109\047\119\083\080\077\102\061\061"";""\057\110\104\049\077\111\078\113\087\066\084\111\077\069\084\082\069\057\085\051"";""\107\088\116\121\084\053\083\056\047\119\084\119\087\119\053\080\084\115\065\061"",""\069\050\056\097\075\107\054\119\079\082\061\061"",""\074\056\083\089\110\090\084\114\120\069\061\061"",""\070\051\076\121\082\079\065\061"",""\076\110\054\104\102\102\086\119\098\050\117\119\052\048\104\061"";""\051\117\070\089\084\065\120\078\074\080\077\061"",""\076\107\085\109"";""\047\088\071\109\052\053\121\104\118\101\077\106\047\113\047\075\047\109\077\061"";""\084\105\100\056\055\066\101\070\120\053\051\061"";""\104\118\048\118\088\105\051\061"";""\118\050\087\104\047\119\083\112\077\088\084\100\047\098\065\061"",""\047\105\108\100\043\121\048\090\090\080\114\070\086\077\053\061"";""\115\086\118\074\081\115\121\056\118\118\105\061"",""\104\052\081\121\051\068\105\061"",""\098\075\069\099\043\053\067\103\121\118\061\061"",""\083\084\101\088\080\120\100\084\076\118\070\116\082\048\083\056\108\067\097\067\101\048\114\088\053\043\100\066\067\082\061\061"",""\052\051\085\055\066\105\099\050\052\086\116\107\055\081\069\061"";""\052\080\100\085\085\114\084\107\074\071\090\084\081\117\079\061"",""\107\119\083\101\047\069\061\061"",""\075\068\070\097\053\078\054\111\053\099\050\071\047\074\081\061"",""\075\069\110\101"";""\081\106\084\080\107\115\116\050"",""\103\067\112\111\082\114\052\122\103\110\043\120\050\102\061\061"",""\075\121\105\051\075\118\116\056\110\121\075\048\115\112\079\061"",""\054\112\119\098\047\118\097\105\048\113\105\061"",""\115\052\077\111\111\069\061\061"";""\048\105\122\070\088\113\100\105\071\079\099\061"";""\114\085\075\119\097\068\055\085"";""\113\057\115\117\102\110\082\065\113\122\079\061"";""\113\088\116\116\087\074\084\070\084\106\079\067\087\090\067\048"";""\048\077\104\083\051\082\061\061"",""\115\114\089\109\068\079\056\116\107\090\068\097\053\074\057\071"",""\074\104\090\119\078\121\050\115\072\102\061\061"";""\068\114\112\107\087\117\088\074\070\104\073\061"",""\082\114\051\047\080\119\051\048\103\102\061\061"",""\086\054\106\108"";""\110\115\083\056\081\098\053\061"";""\115\113\114\090\110\087\097\113\084\115\083\103\107\115\071\099\113\069\061\061"";""\080\068\106\074\065\118\061\061"",""\088\112\104\086\122\084\117\053\111\052\104\061"";""\049\084\082\116\053\088\117\110\071\078\069\061"",""\097\085\079\082\108\079\105\061"";""\088\113\105\113\079\082\061\061"";""\118\079\104\049\101\106\051\061"",""\086\098\071\073\115\090\084\107\118\087\068\119\086\087\103\068"";""\047\086\110\099"";""\085\106\054\116\118\047\116\120\120\053\075\104\114\052\098\115\054\082\061\061"";""\106\072\105\099\103\053\099\117\118\069\061\061"";""\075\083\090\069\116\112\072\102\103\048\108\085\102\051\068\072\099\074\121\109\047\084\054\068\086\102\061\061"",""\047\075\075\106\066\086\083\052\043\100\099\061"";""\052\053\089\090\113\109\121\065\068\088\114\065\110\106\071\086"";""\054\049\107\103\050\118\053\081\056\053\122\071\114\054\073\061"";""\097\068\051\073\072\118\061\061"",""\077\089\066\119\113\043\102\071\120\051\087\099\089\111\114\047\113\104\057\076"",""\108\074\109\068\107\118\061\061"",""\116\088\069\066"",""\071\081\112\101\106\115\081\081\074\082\061\061"";""\088\088\088\086\084\101\065\061"";""\069\071\100\090"";""\049\067\057\049\108\057\098\057\081\080\077\061"";""\050\056\108\106\072\071\065\056\080\049\073\061"",""\120\103\084\112\118\074\047\100\052\053\055\068\118\053\056\116"",""\055\078\113\056\079\069\061\061"";""\047\119\083\112\047\115\056\066\121\074\073\061"",""\099\048\099\106\066\116\048\057"";""\076\121\067\071\082\118\113\101\056\053\077\114\097\117\075\099"";""\066\066\109\050\047\069\061\061"";""\071\112\050\084\122\115\099\074"";""\055\112\108\056\055\112\107\043\120\080\081\061"";""\110\117\073\061"",""\083\068\110\051\072\118\061\061"",""\106\077\117\110\082\109\105\061"",""\077\056\099\050\082\105\069\110\073\099\051\090\043\097\077\061"";""\104\052\055\112\110\116\053\061"";""\113\066\077\089\070\088\088\049\052\116\049\051\052\048\073\104\101\070\083\112\105\118\061\061"";""\043\100\055\068\066\088\073\054\065\054\048\114\074\102\109\056\097\073\111\068\057\120\102\061"";""\067\078\113\055\106\111\082\061"";""\081\119\104\078\116\089\116\118\052\086\118\061"",""\115\079\056\089\043\073\087\072\075\115\082\061""}for Z,F in ipairs({{676851-676850,-443709-(-444321)};{241099-241098,-1029147-(-1029153)},{1023475+-1023468,554326+-553714}})do while F[922164+-922163]<F[270033-270031]do i[F[116971+-116970]],i[F[-512875+512877]],F[-680144-(-680145)],F[-408825+408827]=i[F[-732728-(-732730)]],i[F[-567354-(-567355)]],F[840256-840255]+(-932602-(-932603)),F[-623265+623267]-(-32906+32907)end end local function Z(Z)return i[Z-(-566693-(-576645))]end do local Z=type local F=table.insert local I={V=1040923+-1040905;M=613223+-613211,F=697693+-697649,i=961202+-961142,v=-369925+369941;I=-800450-(-800458),e=394336+-394285,U=-18639+18698;z=975468+-975405;j=619919-619864;u=-814103+814106,c=-822079-(-822119),x=-290375-(-290405),b=992532-992478,m=-786111+786146;Q=1027137+-1027109;w=164971-164965,Y=-30661+30702,[""\050""]=-880622+880661,N=-655343+655354;h=-410278-(-410330);r=-990953+990990;k=979037-979011;X=-802528-(-802564);[""\051""]=233429+-233405;C=-145048-(-145097),K=-451563-(-451605),s=-566384-(-566406);T=-830045-(-830062),p=628480-628434;H=452966+-452935,t=-865032+865089,O=180663+-180659,l=-577904+577914;[""\056""]=223468-223415,o=825183+-825168;D=-104301+104314;q=-315817+315836,[""\048""]=-799843+799901,n=-469111-(-469138);a=-576095+576128,[""\043""]=783417+-783410;[""\052""]=-177743+177757,S=281422-281361,B=74994-74960;g=-591044-(-591049);A=-337352+337408,Z=59884+-59846,[""\053""]=-424848+424868,[""\054""]=-968123+968166;d=82471+-82424,W=-281837-(-281858);f=-784192-(-784240),y=468645+-468620,L=97324+-97262,G=-91528+91537;R=654721-654689,J=422808-422785;[""\049""]=-55092-(-55094),P=-125646-(-125696);E=575168+-575168,[""\047""]=-431691-(-431720);[""\057""]=-101841+101842;[""\055""]=-338033+338078}local z=i local O=math.floor local T=string.char local p=table.concat local e=string.sub local Q=string.len for i=-194046+194047,#z,-637126-(-637127)do local j=z[i]if Z(j)==""\115\116\114\105\110\103""then local Z=Q(j)local P={}local t=-590823+590824 local D=608369-608369 local h=416675-416675 while t<=Z do local i=e(j,t,t)local z=I[i]if z then D=D+z*(772754+-772690)^((695373+-695370)-h)h=h+(1020676+-1020675)if h==1006040-1006036 then h=-840744-(-840744)local i=O(D/(-664951+730487))local Z=O((D%(467908+-402372))/(10251-9995))local I=D%(842914-842658)F(P,T(i,Z,I))D=-229554+229554 end elseif i==""\061""then F(P,T(O(D/(685833+-620297))))if t>=Z or e(j,t+(606527-606526),t+(878306-878305))~=""\061""then F(P,T(O((D%(-105585+171121))/(396066-395810))))end break end t=t+(-839731+839732)end z[i]=p(P)end end end return(function(i,I,z,O,T,p,e,t,Q,h,x,E,y,A,j,k,s,w,m,D,c,r,P,F)s,h,r,x,w,A,P,t,m,Q,D,k,E,y,F,c,j=function(i,Z)local I=D(Z)local z=function(z,O,T,p,e,Q,j)return F(i,{z;O;T,p;e,Q,j},Z,I)end return z end,function(i)local Z,F=-201980+201981,i[195679-195678]while F do j[F],Z=j[F]-(967948-967947),Z+(350094+-350093)if-660796+660796==j[F]then j[F],Q[F]=nil,nil end F=i[Z]end end,function(i,Z)local I=D(Z)local z=function(z,O,T,p)return F(i,{z;O;T,p},Z,I)end return z end,function(i,Z)local I=D(Z)local z=function(z,O,T,p,e,Q)return F(i,{z;O,T;p,e,Q},Z,I)end return z end,function(i)j[i]=j[i]-(-715267+715268)if j[i]==707965-707965 then j[i],Q[i]=nil,nil end end,function(i,Z)local I=D(Z)local z=function()return F(i,{},Z,I)end return z end,function()t=t+(-813429+813430)j[t]=157049-157048 return t end,496966-496966,function(i,Z)local I=D(Z)local z=function(z,O)return F(i,{z,O},Z,I)end return z end,{},function(i)for Z=158605-158604,#i,103710-103709 do j[i[Z]]=(-256457-(-256458))+j[i[Z]]end if z then local F=z(true)local I=T(F)I[Z(-663034-(-673528))],I[Z(-204282+214696)],I[Z(240309+-230206)]=i,h,function()return-588173+876500 end return F else return O({},{[Z(1056232-1045818)]=h;[Z(-477895-(-488389))]=i,[Z(-516275+526378)]=function()return 562640-274313 end})end end,function(i,Z)local I=D(Z)local z=function(z,O,T,p,e)return F(i,{z,O;T;p;e},Z,I)end return z end,function(i,Z)local I=D(Z)local z=function(z)return F(i,{z},Z,I)end return z end,function(i,Z)local I=D(Z)local z=function(...)return F(i,{...},Z,I)end return z end,function(F,z,O,T)local yb,Zb,U,X,h,ob,hb,bb,kb,Qb,Hb,lb,Ib,qb,xb,Ze,Y,fb,Ob,ib,Lb,D,L,zb,e,Ab,Mb,a,vb,eb,jb,Kb,G,Nb,K,ab,B,pb,C,db,mb,Bb,rb,Wb,Tb,y,o,j,Rb,H,nb,M,gb,R,Yb,d,q,wb,ie,tb,Sb,V,Ie,Jb,b,u,J,Pb,Gb,S,Ub,l,sb,t,Fe,ub,Fb,W,Db,n,f,v,g,Xb,Cb,ze,Vb,Eb,cb,N while F do if F<8324981-542849 then if F<3613944-(-91437)then if F<2208128-(-34192)then if F<2161403-1036703 then if F<-701689+1158795 then if F<400421-5628 then if F<-639198+993193 then if F<918522-717258 then h=Z(-863617-(-873763))D=i[h]y=Q[O[147247-147246]]n=1048099+27169573122888 W=Q[O[875480-875478]]Y=Z(37159-26889)U=W(Y,n)h=y[U]t=D[h]h=Q[O[994844+-994843]]y=Q[O[-292759-(-292761)]]U=Z(-418777+429238)Y=-628223+30408756776271 W=y(U,Y)U=3663872563369-(-732673)D=h[W]j=t[D]D=Q[O[-235977+235978]]h=Q[O[1570-1568]]W=Z(11240-940)y=h(W,U)W=-575440+24849955763459 t=D[y]e=j[t]t=Q[O[66113-66112]]D=Q[O[-671706+671708]]y=Z(-592025+602482)h=D(y,W)j=t[h]F=e[j]j=Q[O[-76768+76769]]t=Q[O[-611271+611273]]y=46403+12653524443585 h=Z(491386+-481335)D=t(h,y)y=Z(204352-194170)e=j[D]W=17712532793922-133642 t=Q[O[-358450-(-358451)]]D=Q[O[296179+-296177]]h=D(y,W)j=t[h]F[e]=j F=i[Z(779040-768885)]e={}else y=-12424+12426 t=Q[O[-891511+891512]]h=921487-921486 D=t(h,y)t=504835-504834 j=D==t F=j and 7121418-(-938460)or 441995+9893100 e=j end else F=8968837-(-780742)end else if F<-500282-(-929043)then Y=Z(-919527+929980)h=Z(709826-699680)D=i[h]y=Q[O[-264750+264751]]n=29120158650941-(-352955)W=Q[O[481606-481604]]U=W(Y,n)h=y[U]U=Z(206306+-195961)t=D[h]h=Q[O[-9707+9708]]Y=6648497469435-(-840732)y=Q[O[-817017+817019]]W=y(U,Y)D=h[W]j=t[D]W=Z(-154093+164344)D=Q[O[518630-518629]]h=Q[O[920644+-920642]]U=4265171094260-82738 y=h(W,U)t=D[y]y=Z(-483821-(-493774))W=-949142+31363877713058 e=j[t]t=Q[O[-813063+813064]]D=Q[O[1042806-1042804]]h=D(y,W)j=t[h]h=Z(141443-131225)F=e[j]W=-139949+26090166932002 y=488248+16035782683123 j=Q[O[-871464-(-871465)]]t=Q[O[942313+-942311]]D=t(h,y)e=j[D]t=Q[O[983842-983841]]D=Q[O[789671+-789669]]y=Z(430856+-420306)h=D(y,W)j=t[h]F[e]=j F=i[Z(-170588+180724)]e={}else v=Z(-825532+835648)F=16555316-333654 V=i[v]v=Z(-801171-(-811198))u=V[v]n=u end end else if F<1614503-979274 then if F<234975-(-262942)then D=469522-469310 t=Q[O[1031596-1031593]]j=t*D F=-495079+6539915 t=-348320+348577 e=j%t Q[O[760638+-760635]]=e else h=Z(662316-652170)Y=Z(-647410+657704)D=i[h]n=897985+18502681734630 y=Q[O[-897380-(-897381)]]W=Q[O[781851-781849]]U=W(Y,n)Y=128113+3663669858873 h=y[U]t=D[h]h=Q[O[32307+-32306]]U=Z(217666-207338)y=Q[O[-1143-(-1145)]]W=y(U,Y)U=33229589188256-(-44497)D=h[W]W=Z(370513-360231)j=t[D]D=Q[O[56041-56040]]h=Q[O[459125+-459123]]y=h(W,U)t=D[y]e=j[t]t=Q[O[975965+-975964]]y=Z(614505+-604325)D=Q[O[-128605+128607]]W=571381+29186229828897 h=D(y,W)j=t[h]y=42224+15340242073335 h=Z(-42943+53007)F=e[j]j=Q[O[395399+-395398]]W=58224+21399325967228 t=Q[O[859900-859898]]D=t(h,y)e=j[D]t=Q[O[433363+-433362]]y=Z(-643420+653777)D=Q[O[-266604+266606]]h=D(y,W)j=t[h]F[e]=j F=i[Z(-458183-(-468562))]e={}end else if F<36730-(-751880)then Y=Z(582118-571625)h=Z(-266971+277117)D=i[h]n=813313+33158255874895 y=Q[O[564467+-564466]]W=Q[O[99115-99113]]U=W(Y,n)Y=-238700+20431892515222 h=y[U]t=D[h]h=Q[O[459340-459339]]y=Q[O[790403-790401]]U=Z(335376-325205)W=y(U,Y)D=h[W]W=Z(-808269-(-818777))U=410524+9869677497943 j=t[D]D=Q[O[-36508+36509]]h=Q[O[-938024+938026]]y=h(W,U)t=D[y]y=Z(982076+-971631)e=j[t]W=23080817199029-236986 t=Q[O[-203445-(-203446)]]D=Q[O[646677-646675]]h=D(y,W)y=3937891426645-760364 j=t[h]F=e[j]j=Q[O[221600+-221599]]t=Q[O[-513499-(-513501)]]h=Z(-444885-(-454946))D=t(h,y)e=j[D]W=32977952391003-(-539809)t=Q[O[-319665-(-319666)]]y=Z(-62408-(-72738))D=Q[O[-576474-(-576476)]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(700509+-690026)]else e=Q[O[-961030+961031]]S=543259+28238657939778 D=Q[O[287672-287670]]W=153315+32879587484907 y=Z(956658-946295)n=Z(555031+-544973)h=D(y,W)F=e[h]u=-320661+16616870642382 W=Q[O[-158309+158310]]U=Q[O[955338+-955336]]Y=U(n,S)n=Z(-152161+162292)S=-370924+6777958757696 y=W[Y]h=j[y]W=Q[O[347451-347450]]U=Q[O[-564931+564933]]Y=U(n,S)y=W[Y]W=Z(-1027135+1037289)D=h[y]y=i[W]U=Q[O[-406914-(-406915)]]S=Z(-556178+566302)Y=Q[O[-763258+763260]]n=Y(S,u)W=U[n]h=y[W]U=-520000+520000 W=297859-297859 Y=656245-656250 y=h(W,U,Y)e=D*y t[F]=e e=Z(903237+-892918)Y=-463028+30123913037695 F=i[e]h=Q[O[-330187+330188]]U=Z(-364941+375448)y=Q[O[90159+-90157]]W=y(U,Y)D=h[W]e=F(D)F=-966905+7438786 end end end else if F<691752+1153942 then if F<1511816-(-31407)then if F<1106214-(-352926)then h=Z(-773270+783416)D=i[h]Y=Z(-425682-(-436103))y=Q[O[-600789+600790]]n=356305+5843669801680 W=Q[O[581806-581804]]U=W(Y,n)h=y[U]t=D[h]h=Q[O[-352430+352431]]Y=24889440958254-543208 U=Z(703645-693230)y=Q[O[-942915+942917]]W=y(U,Y)D=h[W]W=Z(709896+-699921)j=t[D]U=-1042350+2541620096077 D=Q[O[-519159+519160]]h=Q[O[434787+-434785]]y=h(W,U)t=D[y]y=Z(1026922-1016635)W=3879281436730-500012 e=j[t]t=Q[O[918430-918429]]D=Q[O[822404-822402]]h=D(y,W)y=-937702+2298685084436 j=t[h]h=Z(521308+-511317)F=e[j]j=Q[O[-625929-(-625930)]]t=Q[O[-242644+242646]]D=t(h,y)e=j[D]W=497582+26904599533890 y=Z(-1002686-(-1013187))t=Q[O[-276696-(-276697)]]D=Q[O[635032+-635030]]h=D(y,W)j=t[h]F[e]=j F=i[Z(-736877-(-746976))]e={}else e={}F=i[Z(173695-163142)]end else if F<87115+1633986 then F=Q[U]q=177981-177975 f=-608382+608383 H=F(f,q)F=Z(-583069+593630)i[F]=H q=Z(-420817+431378)f=i[q]q=49603+-49601 F=f>q F=F and-889074+11228114 or 93377+16201282 else h=Z(-843079-(-853225))D=i[h]n=-686535+15203462649198 Y=Z(-278739+289155)y=Q[O[529818-529817]]W=Q[O[227903+-227901]]U=W(Y,n)h=y[U]U=Z(66173+-55807)Y=-922296+28803440641820 t=D[h]h=Q[O[279450-279449]]y=Q[O[659529+-659527]]W=y(U,Y)D=h[W]j=t[D]U=-199537+16118043175106 W=Z(682360+-672151)D=Q[O[830251+-830250]]h=Q[O[-916466+916468]]y=h(W,U)W=-1044872+1880998720755 t=D[y]e=j[t]t=Q[O[647442+-647441]]D=Q[O[-490268+490270]]y=Z(-583666+593637)h=D(y,W)j=t[h]F=e[j]h=Z(238276+-227811)y=-906519+34647110784028 j=Q[O[-272008+272009]]t=Q[O[833952+-833950]]D=t(h,y)y=Z(-424079-(-434478))W=5823110270326-(-1015073)e=j[D]t=Q[O[832956-832955]]D=Q[O[-72148-(-72150)]]h=D(y,W)j=t[h]F[e]=j F=i[Z(228475+-218474)]e={}end end else if F<-69878+2072365 then if F<2311563-335623 then F=true F=F and 947924+1047849 or-806786+8308596 else F=-309258+3985513 end else if F<2983149-775456 then F=true F=-68384+7570194 else Q[t]=ib a=Q[B]J=-518744-(-518745)l=a+J C=K[l]M=u+C C=-167930+168186 F=M%C u=F l=Q[b]C=V+l F=7671771-(-92004)l=-985109-(-985365)M=C%l V=M end end end end else if F<2450775-(-242024)then if F<3336253-832104 then if F<2364079-56322 then if F<2124557-(-153946)then e=Z(514630+-504069)F=i[e]j=Z(-830836-(-841277))e=i[j]j=Z(69005+-58564)i[j]=F j=Z(-531211+541772)i[j]=e F=-697301+10464340 j=Q[O[96955-96954]]t=j()else M=F a=-624341-(-624342)l=K[a]a=false C=l==a ib=C F=C and-640201+15179568 or-17510+9489556 end else if F<1027179+1346881 then Y=Z(-533301-(-543587))h=Z(329442-319296)D=i[h]y=Q[O[998754+-998753]]W=Q[O[201558+-201556]]n=259084+22080698479646 U=W(Y,n)h=y[U]t=D[h]U=Z(-580178+590520)Y=533802+27861703609732 h=Q[O[-901630-(-901631)]]y=Q[O[-816839-(-816841)]]W=y(U,Y)D=h[W]j=t[D]D=Q[O[-749638+749639]]h=Q[O[-466704+466706]]W=Z(-169724+180086)U=370413+21641987014768 y=h(W,U)W=735763+11128473164331 t=D[y]e=j[t]t=Q[O[782109-782108]]D=Q[O[-284550-(-284552)]]y=Z(-180289+190337)h=D(y,W)j=t[h]F=e[j]j=Q[O[-864105-(-864106)]]h=Z(566498-556025)W=3453328009456-647848 t=Q[O[-528408-(-528410)]]y=-383314+25796913580094 D=t(h,y)e=j[D]y=Z(1017498+-1007514)t=Q[O[1027198-1027197]]D=Q[O[481142-481140]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(1007861-997464)]else F=6724924-243053 W=nil h=nil U=nil end end else if F<2330660-(-333458)then if F<2098439-(-561821)then Y=Z(563428-553259)h=Z(422255-412109)n=-529336+14786022338205 D=i[h]y=Q[O[-822538-(-822539)]]W=Q[O[610402-610400]]U=W(Y,n)h=y[U]t=D[h]h=Q[O[19495+-19494]]U=Z(-288980+299467)y=Q[O[-788628-(-788630)]]Y=482412+7202143727789 W=y(U,Y)D=h[W]W=Z(624766-614371)j=t[D]D=Q[O[108842+-108841]]h=Q[O[-804325+804327]]U=14652793720907-(-658012)y=h(W,U)t=D[y]e=j[t]W=-342842+25010045020344 t=Q[O[-866842-(-866843)]]D=Q[O[827955+-827953]]y=Z(-212793+222805)h=D(y,W)j=t[h]F=e[j]j=Q[O[-270418+270419]]h=Z(251111-240775)t=Q[O[796616-796614]]y=392431+9851771966716 D=t(h,y)W=537894+29994751377769 e=j[D]t=Q[O[54425+-54424]]D=Q[O[-549779+549781]]y=Z(-374346-(-384464))h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(-414802+425117)]else h=Z(479748-469602)D=i[h]Y=Z(-786718+796979)y=Q[O[687299+-687298]]n=713077+24742791908236 W=Q[O[717221+-717219]]U=W(Y,n)h=y[U]Y=744115+27873991759872 U=Z(40208+-30236)t=D[h]h=Q[O[-972546-(-972547)]]y=Q[O[-283821-(-283823)]]W=y(U,Y)D=h[W]j=t[D]W=Z(145379-134868)D=Q[O[783127+-783126]]U=21688+27392718560539 h=Q[O[-190243+190245]]y=h(W,U)t=D[y]e=j[t]t=Q[O[-5910-(-5911)]]y=Z(49235+-39238)D=Q[O[-459063+459065]]W=287462+8061102861251 h=D(y,W)j=t[h]F=e[j]j=Q[O[505942+-505941]]t=Q[O[-505732+505734]]y=31537663269647-778674 h=Z(773026-762829)W=978536+25437934731229 D=t(h,y)y=Z(390735-380198)e=j[D]t=Q[O[-521809+521810]]D=Q[O[175171-175169]]h=D(y,W)j=t[h]F[e]=j F=i[Z(-794605+804993)]e={}end else if F<3283666-603597 then U=Z(-873740+884252)F=Q[O[-874134+874135]]D=Z(-780452-(-790914))t=i[D]h=Q[O[-3573+3575]]n=Z(-299356+309387)y=Q[O[45856+-45853]]Y=2584399021791-(-523732)W=y(U,Y)y=Z(984349+-974133)S=-656058+8634573181550 D=h[W]j=t[D]h=580704-580704 D=-1005588-(-1005588)t=j(D,h)h=i[y]W=Q[O[-376613+376615]]U=Q[O[769511-769508]]Y=U(n,S)y=W[Y]D=h[y]y=Q[O[232743-232741]]e=Z(767720-757218)e=F[e]S=19173272106886-709798 W=Q[O[-109926-(-109929)]]Y=Z(-977274-(-987685))n=29788709524068-(-893899)U=W(Y,n)h=y[U]j=D[h]e=e(F,t,j)Y=172163+14624349485590 e=Z(739104-729031)F=i[e]j=641184+-641183 e=F(j)F=Q[O[-983996-(-983997)]]U=Z(-1019825+1029831)D=Z(30341-19879)n=Z(-47767+58305)t=i[D]h=Q[O[-799687-(-799689)]]e=Z(1009688-999246)y=Q[O[-18487-(-18490)]]W=y(U,Y)D=h[W]j=t[D]y=Z(13404+-3188)h=-915531-(-915531)D=-1023662-(-1023662)e=F[e]t=j(D,h)h=i[y]W=Q[O[-949093-(-949095)]]U=Q[O[651300-651297]]Y=U(n,S)y=W[Y]D=h[y]y=Q[O[-771185+771187]]Y=Z(-113649-(-123629))W=Q[O[748463-748460]]n=1371445185096-(-79926)U=W(Y,n)h=y[U]j=D[h]e=e(F,t,j)e={}F=i[Z(-810041+820533)]else e=Z(423101-412834)F=i[e]F=F and-297042+9064908 or 299829+1238824 end end end else if F<-606957+3863778 then if F<3460449-519550 then if F<2926493-205136 then F=Q[O[248042-248041]]Y=-612946-(-612946)n=-647717-(-647972)t=D U=F(Y,n)F=302732+5020402 j[t]=U t=nil else M=Q[t]F=M and 7863128-588871 or 1459192-(-764493)ib=M end else if F<3718116-627887 then Y=Z(-913006-(-922975))h=Z(-934773-(-944919))D=i[h]y=Q[O[-908944-(-908945)]]n=162295+32048308256852 W=Q[O[-27002-(-27004)]]U=W(Y,n)h=y[U]U=Z(-874034-(-884324))Y=790483096511-(-372145)t=D[h]h=Q[O[-1019365+1019366]]y=Q[O[711535+-711533]]W=y(U,Y)D=h[W]j=t[D]D=Q[O[744272-744271]]h=Q[O[-497665+497667]]U=-102820+18465322627898 W=Z(-832873-(-842901))y=h(W,U)t=D[y]y=Z(-868157+878455)e=j[t]t=Q[O[528267-528266]]D=Q[O[-298799-(-298801)]]W=18425054795024-275341 h=D(y,W)j=t[h]F=e[j]j=Q[O[158831+-158830]]t=Q[O[544121-544119]]h=Z(759768-749205)y=584518+15545116160256 D=t(h,y)W=202628+18978875624193 e=j[D]y=Z(301713-291406)t=Q[O[-46949-(-46950)]]D=Q[O[264701-264699]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(-596162+606640)]else j=z[830616-830615]y=Z(-375104-(-385250))h=i[y]n=Z(372717+-362750)W=Q[O[-689760+689761]]U=Q[O[-651906-(-651908)]]S=887010+27419864197374 Y=U(n,S)y=W[Y]D=h[y]y=Q[O[289113+-289112]]Y=Z(-560392-(-570496))n=972642+33016779056300 W=Q[O[841467+-841465]]U=W(Y,n)h=y[U]t=D[h]h=Q[O[-874562+874563]]y=Q[O[-476227+476229]]Y=921787+11510797190197 U=Z(-1012086+1022256)W=y(U,Y)D=h[W]e=t[D]D=Q[O[835938+-835937]]U=8852363784691-483801 W=Z(-749070+759137)h=Q[O[-107745+107747]]y=h(W,U)W=27956321224854-726460 t=D[y]y=Z(-107798+118278)F=e[t]t=Q[O[301330+-301329]]D=Q[O[-243995+243997]]h=D(y,W)e=t[h]t=j F[e]=t j=nil e={}F=i[Z(-999133+1009219)]end end else if F<3455578-(-59783)then if F<-378393+3728598 then Y=Z(509867+-499397)h=Z(-226565-(-236711))D=i[h]n=407983+14754632851751 y=Q[O[-854311+854312]]W=Q[O[305546+-305544]]U=W(Y,n)h=y[U]U=Z(-479688+489648)t=D[h]Y=163957+513553137786 h=Q[O[635074+-635073]]y=Q[O[803289-803287]]W=y(U,Y)D=h[W]j=t[D]U=216396+1509002048882 W=Z(173143+-162814)D=Q[O[265555-265554]]h=Q[O[-907300+907302]]y=h(W,U)t=D[y]e=j[t]t=Q[O[802121+-802120]]D=Q[O[-174147-(-174149)]]W=-93431+6739835418937 y=Z(731307-721015)h=D(y,W)j=t[h]F=e[j]j=Q[O[910758-910757]]y=344208+30922309105583 t=Q[O[807910+-807908]]h=Z(-663012+673296)D=t(h,y)y=Z(-572179-(-582138))e=j[D]t=Q[O[-778502+778503]]D=Q[O[676378+-676376]]W=-165716+5172875727036 h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(179561+-169366)]else d=-630680-(-630681)b=-386634+386635 q=#v R=D(d,q)d=W(v,R)R=nil q=Q[V]G=d-b o=U(G)F=17323313-641094 q[d]=o d=nil end else if F<2563848-(-1044659)then h=Z(944825+-934679)D=i[h]y=Q[O[1011009-1011008]]Y=Z(891169-881025)n=9069769970303-(-15872)W=Q[O[-664516+664518]]U=W(Y,n)h=y[U]t=D[h]h=Q[O[603774+-603773]]Y=848917+22561438233844 U=Z(787602+-777213)y=Q[O[-479260+479262]]W=y(U,Y)D=h[W]j=t[D]D=Q[O[408112-408111]]U=27608391711781-330221 W=Z(-315539-(-325735))h=Q[O[-532177+532179]]y=h(W,U)t=D[y]e=j[t]t=Q[O[-174121-(-174122)]]y=Z(349118-338822)W=296774+32189811503943 D=Q[O[402518+-402516]]h=D(y,W)j=t[h]F=e[j]j=Q[O[826387-826386]]h=Z(634620+-624511)y=216905+5689063242512 W=-234307+20848116201775 t=Q[O[-149571-(-149573)]]D=t(h,y)e=j[D]t=Q[O[223701+-223700]]y=Z(-1023566+1033570)D=Q[O[-137860+137862]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(490694-480453)]else F=true F=F and 2011917-409905 or 11507553-961519 end end end end end else if F<-642425+6680054 then if F<-830009+5339757 then if F<4196709-(-75589)then if F<-593754+4603130 then if F<3459986-(-472351)then ib=Q[t]F=ib and 3291073-987588 or-356543+12271400 e=ib else h=Z(-453650+463796)n=12393218769904-601445 D=i[h]y=Q[O[895914-895913]]Y=Z(-777481-(-787458))W=Q[O[251520-251518]]U=W(Y,n)h=y[U]t=D[h]h=Q[O[604134-604133]]U=Z(230216-220002)Y=-764091+18921655536422 y=Q[O[571489+-571487]]W=y(U,Y)D=h[W]W=Z(-953904-(-964239))j=t[D]D=Q[O[643963+-643962]]U=1885254911965-820336 h=Q[O[-38268+38270]]y=h(W,U)t=D[y]e=j[t]W=-922965+32788220350713 t=Q[O[319312+-319311]]y=Z(-210833+221070)D=Q[O[908611+-908609]]h=D(y,W)j=t[h]F=e[j]h=Z(-248139+258244)y=19527746670250-1010469 j=Q[O[-156146-(-156147)]]t=Q[O[845084+-845082]]D=t(h,y)e=j[D]y=Z(792500-782115)W=10321336499656-174850 t=Q[O[826525+-826524]]D=Q[O[-652765-(-652767)]]h=D(y,W)j=t[h]F[e]=j F=i[Z(-1028434-(-1038620))]e={}end else if F<139874+4005089 then Q[O[617880+-617875]]=e F=611707+14423651 j=nil else h=Z(143901+-133755)n=20395002202756-943467 D=i[h]Y=Z(-94164+104338)y=Q[O[-153494+153495]]W=Q[O[-176877-(-176879)]]U=W(Y,n)h=y[U]t=D[h]U=Z(592804-582594)h=Q[O[915942+-915941]]Y=278380+606090592686 y=Q[O[-693159+693161]]W=y(U,Y)D=h[W]j=t[D]D=Q[O[724661-724660]]h=Q[O[29846-29844]]W=Z(-373925-(-384048))U=8436082630211-397035 y=h(W,U)t=D[y]W=6328951321054-(-760229)e=j[t]t=Q[O[-562462+562463]]y=Z(-653428+663754)D=Q[O[568699+-568697]]h=D(y,W)y=22632031119189-917035 j=t[h]h=Z(171642+-161165)F=e[j]W=-165704+33609284060266 j=Q[O[61694+-61693]]t=Q[O[88592+-88590]]D=t(h,y)e=j[D]t=Q[O[441797+-441796]]y=Z(871614+-861448)D=Q[O[138122-138120]]h=D(y,W)j=t[h]F[e]=j F=i[Z(498633+-488356)]e={}end end else if F<4763896-421643 then if F<701554+3623914 then Y=Z(825564+-815343)h=Z(-916901+927047)D=i[h]y=Q[O[767382+-767381]]W=Q[O[942865-942863]]n=937222+33820257513598 U=W(Y,n)h=y[U]U=Z(329120+-318635)Y=194817+19386462939714 t=D[h]h=Q[O[-862942-(-862943)]]y=Q[O[-39584+39586]]W=y(U,Y)D=h[W]j=t[D]W=Z(372652-362580)D=Q[O[502627-502626]]h=Q[O[846903+-846901]]U=10532737970561-(-156071)y=h(W,U)t=D[y]e=j[t]W=31794142016051-(-1034146)t=Q[O[-1838+1839]]D=Q[O[811736+-811734]]y=Z(-423713+434074)h=D(y,W)j=t[h]F=e[j]j=Q[O[691827-691826]]h=Z(-925844+935976)W=110704+20402415924396 y=-340480+4633983662701 t=Q[O[-879967-(-879969)]]D=t(h,y)y=Z(710455-700133)e=j[D]t=Q[O[-1047012+1047013]]D=Q[O[276002-276000]]h=D(y,W)j=t[h]F[e]=j F=i[Z(674972+-664838)]e={}else n=21118322389053-(-538156)h=Z(-90126+100272)D=i[h]y=Q[O[384155+-384154]]Y=Z(715509-705116)W=Q[O[231189-231187]]U=W(Y,n)h=y[U]U=Z(793144-782629)Y=673158+22025938641546 t=D[h]h=Q[O[-474701+474702]]y=Q[O[-122248+122250]]W=y(U,Y)D=h[W]U=-582466+25173202243852 W=Z(-303734-(-314136))j=t[D]D=Q[O[-264736+264737]]h=Q[O[-60346+60348]]y=h(W,U)t=D[y]e=j[t]y=Z(-169933-(-179928))t=Q[O[-132726-(-132727)]]W=2939506416776-1038128 D=Q[O[435588-435586]]h=D(y,W)y=-996617+21844515757253 j=t[h]W=15855233919653-(-799282)F=e[j]j=Q[O[-669874-(-669875)]]t=Q[O[285617-285615]]h=Z(411858+-401651)D=t(h,y)e=j[D]t=Q[O[-408284-(-408285)]]y=Z(-155888-(-165999))D=Q[O[328234+-328232]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(-790697+800660)]end else if F<-699134+5159587 then D=161134-161085 t=Q[O[-461877+461879]]j=t*D t=668357+1422916882386 e=j+t j=-945572+35184373034404 F=e%j Q[O[-583553-(-583555)]]=F j=Q[O[-81397+81400]]t=58900-58899 F=-266243+724388 e=j~=t else D=Q[O[-37637+37643]]t=D==j e=t F=4891228-847879 end end end else if F<146987+4823105 then if F<243502+4422299 then if F<4125443-(-444933)then v=not V S=S+u Y=S<=n Y=v and Y v=S>=n v=V and v Y=v or Y v=9846053-1011536 F=Y and v Y=1461061-(-1036947)F=F or Y else F=252326+9514713 end else if F<4083021-(-819125)then h=Z(-943832+953978)Y=Z(-590645-(-601026))D=i[h]y=Q[O[682433-682432]]W=Q[O[-918392-(-918394)]]n=23120041940665-126123 U=W(Y,n)h=y[U]t=D[h]h=Q[O[-13612+13613]]y=Q[O[-640276-(-640278)]]Y=679354+18311995786133 U=Z(794458+-784310)W=y(U,Y)D=h[W]j=t[D]U=28424096646531-(-44593)D=Q[O[-210641-(-210642)]]W=Z(938083+-927973)h=Q[O[942583+-942581]]y=h(W,U)t=D[y]W=-454113+15516394883610 e=j[t]y=Z(135528+-125033)t=Q[O[-50400-(-50401)]]D=Q[O[643142-643140]]h=D(y,W)j=t[h]F=e[j]j=Q[O[646183+-646182]]h=Z(-696246-(-706649))W=15234586011270-1002192 t=Q[O[-622425+622427]]y=6034354514424-(-319745)D=t(h,y)e=j[D]t=Q[O[370652+-370651]]D=Q[O[-31185+31187]]y=Z(403674-393325)h=D(y,W)j=t[h]F[e]=j F=i[Z(-879206+889339)]e={}else F=e and-1037045+1936346 or 6225305-(-246576)end end else if F<-37399+5433295 then if F<5007215-(-216317)then F=872742+5609129 else U=not W D=D+y t=D<=h t=U and t U=D>=h U=W and U t=U or t U=572480+2120792 F=t and U t=15446807-917359 F=F or t end else if F<5138429-(-710096)then e={}F=true Q[O[210177-210176]]=F F=i[Z(615283+-604854)]else h=Z(-18054+28200)Y=Z(-583540-(-593638))D=i[h]y=Q[O[213740+-213739]]n=28318968027856-(-497843)W=Q[O[-430046+430048]]U=W(Y,n)h=y[U]Y=-588649+32995415488365 t=D[h]U=Z(-628688-(-639041))h=Q[O[612625+-612624]]y=Q[O[680791+-680789]]W=y(U,Y)D=h[W]j=t[D]U=24946259554614-66518 D=Q[O[-870979-(-870980)]]W=Z(934170+-924096)h=Q[O[590311+-590309]]y=h(W,U)W=21938036771746-631739 t=D[y]y=Z(1025848-1015850)e=j[t]t=Q[O[953984+-953983]]D=Q[O[178161-178159]]h=D(y,W)j=t[h]F=e[j]j=Q[O[617440+-617439]]h=Z(974892-964692)t=Q[O[998554-998552]]y=510033+13929085260037 W=26827256314244-(-849736)D=t(h,y)e=j[D]t=Q[O[920933-920932]]D=Q[O[-160918+160920]]y=Z(-737082-(-747288))h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(492393+-481864)]end end end end else if F<-1043472+7965836 then if F<804892+5669140 then if F<5909767-(-237649)then if F<-1045452+7144512 then t=Q[O[-325152-(-325155)]]D=617436-617435 j=t~=D F=j and 665807+13311674 or-342164+800309 else F=2783349-90742 end else if F<-572311+6858579 then W=Z(232464-222077)e=Z(-64595-(-74811))U=-172070+9365029335342 F=i[e]e=Z(-178741+188861)e=F[e]D=Q[O[5163+-5162]]h=Q[O[-796387-(-796389)]]y=h(W,U)t=D[y]e=e(F,t)t=e F=t and-872391+7351879 or-746126+5656137 e=t else t=nil F=14399347-887180 end end else if F<-47292+6538365 then if F<782417+5699074 then Y=Z(-423233+433318)y=Q[O[880139+-880138]]F=-75875+4985886 n=-1014960+29569113338489 W=Q[O[-55073-(-55075)]]U=W(Y,n)h=y[U]D=j[h]e=D else e={t}F=i[Z(-529145+539334)]end else if F<743906+5782341 then Y=Z(773100-762720)n=5696660518694-(-414518)h=Z(857789+-847643)D=i[h]y=Q[O[630043+-630042]]W=Q[O[321995+-321993]]U=W(Y,n)h=y[U]U=Z(-986035+996284)t=D[h]Y=65581+28755413300257 h=Q[O[777027+-777026]]y=Q[O[-80102-(-80104)]]W=y(U,Y)D=h[W]W=Z(924029+-913934)j=t[D]D=Q[O[-794450+794451]]U=10363240296205-(-533452)h=Q[O[438338+-438336]]y=h(W,U)t=D[y]W=27777359031572-(-640370)e=j[t]t=Q[O[792779-792778]]D=Q[O[-996835-(-996837)]]y=Z(882004+-871843)h=D(y,W)j=t[h]F=e[j]W=-311976+32005228526815 j=Q[O[838693-838692]]h=Z(826213-815987)y=-224158+21432745628314 t=Q[O[-827923+827925]]D=t(h,y)e=j[D]t=Q[O[-84458+84459]]D=Q[O[1039016-1039014]]y=Z(-546475-(-556972))h=D(y,W)j=t[h]F[e]=j F=i[Z(378915+-368695)]e={}else h=Z(916318-906172)n=-868140+32641345927819 D=i[h]y=Q[O[-538255+538256]]W=Q[O[-401146+401148]]Y=Z(1039325+-1029004)U=W(Y,n)h=y[U]t=D[h]U=Z(186301-175805)Y=21513705846739-(-569167)h=Q[O[-474834+474835]]y=Q[O[148515+-148513]]W=y(U,Y)D=h[W]U=23122847479580-232717 j=t[D]D=Q[O[-5651-(-5652)]]h=Q[O[666387+-666385]]W=Z(760905+-750581)y=h(W,U)W=81247+31277231340421 t=D[y]e=j[t]t=Q[O[-353236-(-353237)]]D=Q[O[143894-143892]]y=Z(-656598-(-666782))h=D(y,W)j=t[h]F=e[j]j=Q[O[-894724-(-894725)]]y=5715796767316-(-694289)t=Q[O[-436474-(-436476)]]h=Z(587369+-576950)D=t(h,y)W=287949+33655585085547 e=j[D]y=Z(-302474+312693)t=Q[O[-1028471+1028472]]D=Q[O[53390+-53388]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(-136634-(-147155))]end end end else if F<7842715-321280 then if F<-833905+8191033 then if F<6544165-(-694719)then t=1015876-1015875 F={}D=Q[O[899058-899049]]h=D D=1034844+-1034843 y=D j=F D=-719122+719122 W=y<D D=t-y F=-583866+5907000 else C=534115-534114 M=K[C]ib=M F=-118813+2342498 end else if F<7909104-413179 then j=z[68386+-68385]y=Z(30237-20091)n=Z(12582-2279)h=i[y]S=-123997+54410945654 W=Q[O[961550+-961549]]U=Q[O[-1018579+1018581]]Y=U(n,S)y=W[Y]D=h[y]Y=Z(-694823-(-704793))n=942879+16720312154955 y=Q[O[617387-617386]]W=Q[O[-234042-(-234044)]]U=W(Y,n)Y=-187669+30128833483746 h=y[U]t=D[h]U=Z(-432521-(-442809))h=Q[O[702434-702433]]y=Q[O[-132228+132230]]W=y(U,Y)D=h[W]U=30264902282923-(-133218)e=t[D]D=Q[O[473287+-473286]]h=Q[O[983670-983668]]W=Z(-659447-(-669884))y=h(W,U)t=D[y]F=e[t]y=Z(-251453-(-261681))t=Q[O[341386+-341385]]D=Q[O[537923-537921]]W=31932680259121-281628 h=D(y,W)e=t[h]t=j F[e]=t F=i[Z(956090+-945739)]j=nil e={}else F=m(4440642-(-163843),{h})H={F()}F=i[Z(739244+-729002)]e={I(H)}end end else if F<-992050+8593337 then if F<7819332-293220 then j=Z(147645+-137206)F=i[j]t=Q[O[-644777+644785]]D=-839148-(-839148)j=F(t,D)F=943276+6221942 else t=Z(451960-441721)e=-658788+12908415 D=5427247-(-276514)j=t^D F=e-j j=F e=Z(56480-46233)F=e/j e={F}F=i[Z(578556+-568448)]end else if F<-95312+7742858 then e=Z(-99065-(-109504))F=i[e]j=Z(228987+-218563)e=F(j)F=i[Z(-1035635-(-1046104))]e={}else b=w(b)L=w(L)G=w(G)g=w(g)o=w(o)F=246467+11142075 K=nil B=w(B)end end end end end end else if F<13399557-677741 then if F<9847450-(-210607)then if F<8293878-(-879129)then if F<7963948-(-868173)then if F<7565285-(-1039556)then if F<8778801-405099 then if F<8405659-359022 then F=8533550-(-730058)S=Z(-80137-(-90164))n=i[S]e=n else F=e and 14787143-148428 or 14738240-(-297118)end else F=57269+3618986 end else if F<284800+8508824 then e=Z(-289643+299716)j=.1 y=Z(243408+-233368)W=22529807886528-1032133 F=i[e]e=F(j)j=Z(322405+-312197)e=i[j]t=Q[O[-276079+276080]]D=Q[O[-843524-(-843526)]]h=D(y,W)j=t[h]F=e[j]j=F F=j and 6011957-(-150826)or 12480089-(-1032078)else W=Z(-387786-(-397925))t=Z(-1040618+1051146)j=i[t]U=842930+13943507532970 S=475788+3645776577557 D=Q[O[874609-874608]]h=Q[O[761283-761281]]y=h(W,U)t=D[y]e=j[t]D=Z(863333+-852843)Y=32488418674949-(-1012243)t=i[D]h=Q[O[-52587-(-52588)]]U=Z(-923747-(-934245))y=Q[O[-890312-(-890314)]]W=y(U,Y)D=h[W]y=-24133+24133 j=t[D]D=-970861-(-970861)h=-859077+859079.5 t=j(D,h,y)U=569037936049-(-240471)Y=450426+9024038236400 W=Z(-511072-(-521599))F=e+t n=29236727471976-(-87494)t=Z(739775+-729621)e=i[t]D=Q[O[394034-394033]]j=F h=Q[O[-129502-(-129504)]]y=h(W,U)t=D[y]F=e[t]h=Q[O[-316870+316871]]y=Q[O[504205+-504203]]U=Z(-32921-(-43305))W=y(U,Y)D=h[W]t=j[D]y=Q[O[343610-343609]]Y=Z(-599335-(-609709))W=Q[O[731167+-731165]]U=W(Y,n)n=Z(-213238+223330)h=y[U]D=j[h]W=Q[O[-897205-(-897206)]]U=Q[O[-466270-(-466272)]]Y=U(n,S)y=W[Y]W=Z(-210336+220482)h=j[y]e=F(t,D,h)u=34589243121339-(-958511)y=i[W]S=Z(-954074-(-964411))j=e U=Q[O[82254+-82253]]Y=Q[O[540187+-540185]]n=Y(S,u)W=U[n]n=Z(326596-316455)h=y[W]S=13756003350203-(-713290)W=Q[O[-258374+258375]]U=Q[O[446868-446866]]e={}Y=U(n,S)n=-854023+12311767441004 y=W[Y]D=h[y]y=Q[O[259171+-259170]]Y=Z(734946-724674)W=Q[O[539994+-539992]]U=W(Y,n)h=y[U]t=D[h]U=Z(877475-867482)h=Q[O[943781+-943780]]Y=-571520+6599715243137 y=Q[O[817773+-817771]]W=y(U,Y)D=h[W]W=Z(-98422+108978)F=t[D]D=Q[O[-926609-(-926610)]]h=Q[O[565896+-565894]]U=655131+9169095807378 y=h(W,U)t=D[y]D=j F[t]=D j=nil F=i[Z(272739+-262203)]end end else if F<-350759+9398315 then if F<9503829-646168 then f=Z(601636+-591123)H=i[f]f=Z(-934986-(-945023))Y=S X=H[f]H=X(j,Y)F=789394+3747202 X=Q[O[-555995-(-556001)]]Y=nil f=X()d=H+f R=d+W d=308370+-308114 v=R%d W=v d=D[t]f=101866+-101865 H=W+f X=h[H]R=d..X D[t]=R else e=Z(-122452+132655)F=i[e]S=8132277430366-(-255596)h=Z(-261870+272016)n=Z(619785-609409)D=i[h]W=Q[O[-105561+105562]]U=Q[O[987397-987395]]h=Z(465972-455677)Y=U(n,S)h=D[h]y=W[Y]h=h(D,y)Y=Z(-447072+457117)y=Q[O[634531+-634530]]W=Q[O[425804+-425802]]n=-147570+30484675229669 U=W(Y,n)Y=239718+22955340497243 D=y[U]t=h[D]U=Z(93836-83427)h=Q[O[-525744+525745]]y=Q[O[-1038126+1038128]]W=y(U,Y)D=h[W]j=t[D]e=F(j)F=nil j=e e=Z(638575-628228)Y=Z(-110309-(-120447))t=F n=5589250972714-332288 F=i[e]y=Q[O[-513954+513955]]W=Q[O[-715812+715814]]U=W(Y,n)h=y[U]D=j[h]h=m(12730411-128536,{})j=nil e=F(D,h)t=e t=nil F=i[Z(-363464+373912)]e={}end else if F<-358952+9471458 then Y=Z(-954551-(-964667))U=Z(-169517+179918)V=Z(-824473+834589)W=e e=i[U]U=Z(242015-231857)F=e[U]U=P()Q[U]=F e=i[Y]Y=Z(-809774+819937)F=e[Y]S=F Y=F u=i[V]F=u and-742387+1199015 or-830751+17052413 n=u else h=Z(217491-207345)D=i[h]y=Q[O[-917910+917911]]Y=Z(-270110+280327)n=-388484+2243718148504 W=Q[O[82039+-82037]]U=W(Y,n)h=y[U]t=D[h]U=Z(-976421+986730)h=Q[O[-596324-(-596325)]]y=Q[O[779259-779257]]Y=9387285594950-733747 W=y(U,Y)D=h[W]j=t[D]D=Q[O[-246331-(-246332)]]h=Q[O[1048523-1048521]]U=21824995955234-174703 W=Z(-593940-(-604443))y=h(W,U)W=33493592102290-432294 t=D[y]e=j[t]y=Z(-582184+592543)t=Q[O[-145411+145412]]D=Q[O[-358891-(-358893)]]h=D(y,W)j=t[h]F=e[j]h=Z(-475517+486022)j=Q[O[-501200-(-501201)]]t=Q[O[164768+-164766]]y=34130078213833-731316 W=214654+14514615964648 D=t(h,y)e=j[D]y=Z(901609+-891310)t=Q[O[-354969-(-354970)]]D=Q[O[-622388-(-622390)]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(575174+-565212)]end end end else if F<-475402+10136045 then if F<668120+8870513 then if F<-450808+9756574 then u=-890345-(-890410)S=919253+-919250 n=P()Q[n]=e F=Q[U]v=Z(718566+-708331)e=F(S,u)S=P()F=-950697+950697 Q[S]=e e=i[v]u=F F=-158444-(-158444)f=Z(74917+-64734)R=m(-360047+14535047,{})v={e(R)}e=79128-79126 V=F F={I(v)}v=F F=v[e]R=F e=Z(-745372+755927)F=i[e]d=Q[D]H=i[f]f=H(R)H=Z(551307+-541148)X=d(f,H)d={X()}e=F(I(d))d=P()Q[d]=e e=980113-980112 X=Q[S]H=X X=741142-741141 f=X X=-397859+397859 q=f<X X=e-f F=11611619-223077 else F=M F=-213004+12127861 e=ib end else if F<10461331-877164 then h=Z(597733+-587587)D=i[h]y=Q[O[557320+-557319]]n=550533+32984521856378 Y=Z(979108+-968674)W=Q[O[-488966+488968]]U=W(Y,n)h=y[U]U=Z(-847602+858022)t=D[h]h=Q[O[256210-256209]]Y=-425118+24730199075225 y=Q[O[-591661+591663]]W=y(U,Y)D=h[W]j=t[D]W=Z(-339466-(-350030))D=Q[O[-325191+325192]]h=Q[O[668304+-668302]]U=32163797254182-66981 y=h(W,U)t=D[y]W=10779738029802-142159 e=j[t]t=Q[O[-957741+957742]]D=Q[O[852221-852219]]y=Z(-147081+157445)h=D(y,W)j=t[h]h=Z(819065-808725)F=e[j]y=10146660636585-(-719563)W=33764023164122-(-925840)j=Q[O[141530+-141529]]t=Q[O[-181389+181391]]D=t(h,y)e=j[D]t=Q[O[-45532+45533]]y=Z(982718+-972204)D=Q[O[-169692+169694]]h=D(y,W)j=t[h]F[e]=j F=i[Z(80298-70229)]e={}else D=Z(-104070-(-114583))j=z t=P()F=true y=P()Q[t]=F e=i[D]D=Z(-537905-(-548263))F=e[D]h=P()U=Z(19166+-8931)D=P()Q[D]=F Y=E(-921360+6468665,{y})F=m(999141+6605009,{})Q[h]=F F=false Q[y]=F W=i[U]U=W(Y)F=U and 884101+15429485 or 8468259-(-598816)e=U end end else if F<-537263+10351089 then if F<-665230+10429023 then t=w(t)t=nil h=w(h)Y=nil v=nil V=nil n=w(n)R=nil Y=Z(-911027+921143)u=nil F=478827+14353114 S=w(S)y=w(y)d=w(d)d=-621398+621654 u={}W=nil D=w(D)R=864974-864973 W=Z(599426-589025)D=nil h=P()Q[h]=t U=w(U)t=P()U=Z(643610-633209)q=d Q[t]=D y=i[W]W=Z(-1002127+1012360)n=Z(674928-664415)D=y[W]y=P()S=P()Q[y]=D W=i[U]U=Z(102342-92184)D=W[U]U=i[Y]V=P()Y=Z(711790+-701647)W=U[Y]Y=i[n]n=Z(955720-945636)U=Y[n]n=P()Y=-562774-(-562774)Q[n]=Y v={}Y=-864894+864896 Q[S]=Y Y={}d=-683303-(-683304)Q[V]=u u=-753108-(-753108)o=d d=-527072+527072 G=o<d d=R-o else F=true F=F and-998867+3269811 or 14168101-326693 end else if F<9952120-(-18414)then Y=Z(-490357-(-500622))h=Z(213330-203184)D=i[h]y=Q[O[241948-241947]]n=226780+13201256653351 W=Q[O[699163+-699161]]U=W(Y,n)Y=-207060+16267576821355 h=y[U]t=D[h]U=Z(-229817-(-239853))h=Q[O[-761707+761708]]y=Q[O[-348725+348727]]W=y(U,Y)D=h[W]W=Z(697819-687618)j=t[D]U=23026394798128-159310 D=Q[O[704838-704837]]h=Q[O[34611-34609]]y=h(W,U)W=18897918058800-245456 t=D[y]e=j[t]y=Z(958860-948670)t=Q[O[-650643-(-650644)]]D=Q[O[-823818+823820]]h=D(y,W)j=t[h]y=9838616953512-(-921405)F=e[j]W=-842948+33389636311424 h=Z(-969676-(-980211))j=Q[O[778173-778172]]t=Q[O[401078-401076]]D=t(h,y)e=j[D]t=Q[O[806826-806825]]D=Q[O[904457+-904455]]y=Z(-138-(-10143))h=D(y,W)j=t[h]F[e]=j F=i[Z(932424+-922430)]e={}else Y=Z(309621+-299507)h=Z(363801-353655)n=-477380+25106932840047 D=i[h]y=Q[O[-428818+428819]]W=Q[O[810920-810918]]U=W(Y,n)h=y[U]t=D[h]U=Z(388439-378122)h=Q[O[65480-65479]]Y=168654+18690370326321 y=Q[O[1012660-1012658]]W=y(U,Y)D=h[W]j=t[D]D=Q[O[-772993+772994]]h=Q[O[1048405+-1048403]]U=-373423+23108275395767 W=Z(-158027+168307)y=h(W,U)t=D[y]y=Z(1003037-992667)e=j[t]t=Q[O[-735865-(-735866)]]W=-493768+12807968989204 D=Q[O[-626178-(-626180)]]h=D(y,W)j=t[h]F=e[j]j=Q[O[536946+-536945]]t=Q[O[-455713+455715]]h=Z(-158477-(-168654))y=988016+23280697317096 D=t(h,y)e=j[D]y=Z(-690098+700141)t=Q[O[802838+-802837]]D=Q[O[-227475-(-227477)]]W=671711+27630875947619 h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(329878+-319836)]end end end end else if F<-287363+11418233 then if F<101668+10243243 then if F<559845+9619382 then if F<461141+9638067 then h=Z(392978+-382832)D=i[h]y=Q[O[599244+-599243]]n=4590327994490-184353 W=Q[O[-834966-(-834968)]]Y=Z(526001+-515678)U=W(Y,n)h=y[U]U=Z(285328-274920)t=D[h]h=Q[O[156414+-156413]]Y=4522602609844-1012858 y=Q[O[912124-912122]]W=y(U,Y)U=7605940662253-(-417256)D=h[W]j=t[D]D=Q[O[621396+-621395]]W=Z(-453699-(-463664))h=Q[O[999299+-999297]]y=h(W,U)t=D[y]e=j[t]t=Q[O[657129-657128]]y=Z(-925276-(-935590))W=1006606+6711023120423 D=Q[O[-499444+499446]]h=D(y,W)j=t[h]y=7302239716492-30532 W=782248+31776016288292 h=Z(664872-654323)F=e[j]j=Q[O[485477-485476]]t=Q[O[179328+-179326]]D=t(h,y)y=Z(540028+-530039)e=j[D]t=Q[O[-8864-(-8865)]]D=Q[O[379195-379193]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(-969010-(-979137))]else t=z[177863-177861]j=z[-265932+265933]F=Q[O[-757093+757094]]D=F F=D[t]F=F and 185705+5014199 or-97717+13810304 end else if F<10694135-357073 then t=Q[O[709644+-709642]]D=Q[O[764062-764059]]j=t==D F=8319354-259476 e=j else o=Z(-539603+550044)f=Z(354918+-344735)F=i[f]q=i[o]f=F(q)F=Z(105209-94648)i[F]=f F=8770056-331868 end end else if F<795981+9744504 then if F<847376+9505204 then h=Z(-50339-(-60485))D=i[h]y=Q[O[-587509-(-587510)]]n=20190662079142-(-291348)W=Q[O[1010867+-1010865]]Y=Z(-637297-(-647367))U=W(Y,n)h=y[U]t=D[h]h=Q[O[952010-952009]]Y=545826+21988296545245 y=Q[O[-126546-(-126548)]]U=Z(60690+-50231)W=y(U,Y)D=h[W]j=t[D]W=Z(-215584+225771)U=16288316960531-(-487053)D=Q[O[-162929-(-162930)]]h=Q[O[275912+-275910]]y=h(W,U)t=D[y]e=j[t]t=Q[O[815971-815970]]W=-1040734+961793057565 y=Z(363259-353023)D=Q[O[-988417-(-988419)]]h=D(y,W)y=-378537+31058067455783 j=t[h]F=e[j]j=Q[O[872131+-872130]]h=Z(63187+-52737)t=Q[O[-778008+778010]]D=t(h,y)e=j[D]t=Q[O[369624-369623]]y=Z(-265872+276127)D=Q[O[364480-364478]]W=3665384540365-115235 h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(-259910-(-270023))]else u=nil d=P()R={}Q[d]=R o=P()R=P()b={}ob=18873629042476-(-277288)q=k(565033+15891334,{d,n;S,y})Q[R]=q W=nil L=Z(-1014503+1024997)v=nil G=Z(580619-570444)K=Z(-750581-(-761062))q={}Qb=19425872794794-(-134827)Q[o]=q q=i[G]C=nil g=Q[o]Y=nil B={[L]=g;[K]=C}D=nil G=q(b,B)Q[h]=G q=s(-173530+10326696,{o,d,V;n,S;R})C=Z(1057655-1047470)y=w(y)zb=Z(289142+-278638)v=-373671+9665188316475 R=w(R)V=w(V)o=w(o)S=w(S)g=23466368701784-(-202071)d=w(d)y=Z(-969328-(-979519))V=Z(-402552-(-412763))d=Z(954002-943775)R=-286167+16899220651156 Q[t]=q D=i[y]U=nil U=Z(323740-313594)K=16199221697642-(-164109)q=-441038+17060837906902 Fb=Z(504052-493648)n=w(n)W=i[U]n=Q[h]S=Q[t]db=369944+15379873019617 u=S(V,v)L=29767592102644-(-60209)Y=n[u]v=11572699060414-426930 n=Z(-162052+172052)u=Z(331335-320960)n=W[n]U={n(W,Y)}mb=10224022883492-14860 y=D(I(U))D=y()eb=21003535673933-33817 Y=Q[h]yb=Z(547903-537663)n=Q[t]V=12616700798646-(-880701)S=n(u,V)N=Z(616644+-606683)U=Y[S]n=Q[h]S=Q[t]B=918429+31817009460802 ab=-1020445+24203225267747 V=Z(-830487+840522)jb=22891507427355-261752 Tb=978818+7016246058305 o=-679961+22697169308002 u=S(V,v)Y=n[u]S=Q[h]nb=-470193+25424457931504 v=Z(299389-289125)u=Q[t]b=3047533786084-667225 V=u(v,R)sb=15341958423763-887019 n=S[V]S=162722-162722 V=Q[h]v=Q[t]R=v(d,q)q=Z(344536+-334113)u=V[R]v=Q[h]R=Q[t]d=R(q,o)V=v[d]R=Q[h]o=Z(-764600-(-774933))d=Q[t]pb=8710556830418-(-673030)q=d(o,b)v=R[q]b=Z(-170899-(-181378))d=Q[h]y=Z(617853-607762)q=Q[t]Ob=539960+30543764568663 o=q(b,B)B=Z(34650-24210)R=d[o]q=Q[h]wb=33465493162900-1003189 J=31672477197773-519217 o=Q[t]b=o(B,L)d=q[b]Ib=28221097249223-(-862606)o=Q[h]l=26707957134081-295533 rb=2649628974042-841481 b=Q[t]L=Z(281481-271014)Zb=14546173517614-(-686919)Db=33835696894918-554555 B=b(L,g)q=o[B]g=Z(898316-888091)b=Q[h]B=Q[t]L=B(g,K)o=b[L]L=Q[h]g=Q[t]b=false K=g(C,l)B=L[K]K=Q[h]C=Q[t]a=Z(-2517-(-12485))L=false l=C(a,J)g=K[l]l=Q[h]a=Q[t]J=a(N,Zb)C=l[J]J=Q[h]l=true N=Q[t]Zb=N(Fb,Ib)a=J[Zb]Zb=Q[h]Fb=Q[t]ie=Z(866575+-856029)Ib=Fb(zb,Ob)N=Zb[Ib]tb=20848791519491-1039127 Ob=Z(-300056-(-310268))J=nil Fb=Q[h]Ib=Q[t]zb=Ib(Ob,Tb)Zb=Fb[zb]K={[C]=l,[a]=J;[N]=Zb}l=Q[h]N=Z(815984+-805934)a=Q[t]ub=30337237071033-228747 Zb=464722+17988069460326 J=a(N,Zb)kb=Z(-333892-(-344175))C=l[J]J=Q[h]zb=Z(109659+-99467)Fb=Z(229828+-219634)Ib=-101904+18056402792168 N=Q[t]Zb=N(Fb,Ib)Tb=3167191203520-571646 a=J[Zb]Zb=Q[h]J=false Fb=Q[t]Ob=1312216495414-(-19757)Ib=Fb(zb,Ob)N=Zb[Ib]Jb=14007125726255-817845 Ob=Z(61305-50817)Fb=Q[h]Ib=Q[t]Ub=653810+3845262658828 zb=Ib(Ob,Tb)Zb=Fb[zb]Ib=Q[h]hb=88445+20934779784343 Tb=Z(-636034+646135)zb=Q[t]Ob=zb(Tb,pb)Fb=Ib[Ob]Ib=true l={[a]=J,[N]=Zb,[Fb]=Ib}y=D[y]zb=Z(58068+-47869)J=Q[h]Ib=635160+8498896985693 N=Q[t]Fb=Z(-867158+877414)Eb=Z(-512830-(-523082))Zb=N(Fb,Ib)a=J[Zb]Zb=Q[h]Ob=13245772103996-(-104156)Fb=Q[t]Ib=Fb(zb,Ob)Tb=Z(-724119-(-734142))J=true Pb=11269592796173-866190 N=Zb[Ib]Ib=Q[h]pb=15833946718198-58153 zb=Q[t]Ob=zb(Tb,pb)pb=Z(-755977+766182)Fb=Ib[Ob]zb=Q[h]Ob=Q[t]Tb=Ob(pb,eb)Ib=zb[Tb]eb=Z(-675793+686224)Ob=Q[h]Tb=Q[t]pb=Tb(eb,Qb)zb=Ob[pb]Qb=Z(-646929+657189)Tb=Q[h]pb=Q[t]eb=pb(Qb,jb)jb=Z(771123+-761138)Ob=Tb[eb]pb=Q[h]eb=Q[t]Qb=eb(jb,Pb)Tb=pb[Qb]eb=Q[h]Pb=Z(-332383-(-342923))Qb=Q[t]jb=Qb(Pb,tb)pb=eb[jb]Qb=Q[h]jb=Q[t]tb=Z(-883597-(-894052))Pb=jb(tb,Db)Db=Z(-282422-(-292740))eb=Qb[Pb]jb=Q[h]Pb=Q[t]tb=Pb(Db,hb)Qb=jb[tb]hb=Z(-192777-(-203090))Pb=Q[h]tb=Q[t]Db=tb(hb,wb)jb=Pb[Db]Db=Q[h]hb=Q[t]wb=hb(yb,mb)Pb=true tb=Db[wb]Ab=22885407962018-(-259582)wb=Q[h]yb=Q[t]Db=false mb=yb(Eb,rb)hb=wb[mb]mb=Q[h]Eb=Q[t]rb=Eb(kb,sb)yb=mb[rb]wb={yb}Zb={[Fb]=Ib;[zb]=Ob;[Tb]=pb,[eb]=Qb;[jb]=Pb;[tb]=Db;[hb]=wb}W={[U]=Y,[n]=S,[u]=V,[v]=R,[d]=q;[o]=b,[B]=L;[g]=K,[C]=l,[a]=J;[N]=Zb}V=-230771+32921191727445 y=y(D,W)wb=Z(460339+-450177)L=-1045484+21451737488113 u=Z(-940017-(-950219))o=29163529831549-(-340111)q=27504411138876-(-415435)Y=Q[h]R=-59335+11974595870095 n=Q[t]S=n(u,V)K=-356489+6784975977696 U=Y[S]W=Z(-147653-(-157931))d=Z(-361477+372035)Y=nil V=Z(353324-343244)W=y[W]v=5697161223638-(-27782)W=W(y,U,Y)n=Q[h]S=Q[t]g=-125769+16371674433808 u=S(V,v)Y=n[u]b=-378087+28173818050598 U=Z(997086-986731)U=W[U]v=Z(849906-839563)U=U(W,Y)S=Q[h]Y=Z(554040+-543685)Y=W[Y]u=Q[t]Ob=31249874011409-101434 V=u(v,R)n=S[V]Y=Y(W,n)lb=Z(-674124+684220)V=Q[h]sb=432892+14620058779547 v=Q[t]R=v(d,q)u=V[R]v=Q[h]Eb=-395088+15132256559830 R=Q[t]q=Z(-140156-(-150334))d=R(q,o)V=v[d]o=Z(-342549+353090)l=-399730+1902372855015 R=Q[h]d=Q[t]Y=nil q=d(o,b)N=8121796217585-785451 b=3883057591778-(-741678)n=Z(-760827+770887)B=15864082989983-(-350524)n=W[n]v=R[q]R=c(139381+14820489,{h;t})S={[u]=V;[v]=R}n=n(W,S)q=Z(6039+4437)v=Q[h]o=30052791468585-(-767105)R=Q[t]S=Z(-217776+227836)d=R(q,o)V=v[d]o=Z(-781941+792397)R=Q[h]d=Q[t]q=d(o,b)v=R[q]b=Z(-145850-(-156381))d=Q[h]q=Q[t]Wb=-480914+14716813652311 o=q(b,B)B=16134698229186-655465 R=d[o]d=c(11125392-(-824984),{h;t})o=271476+30707255661415 u={[V]=v;[R]=d}S=W[S]U=nil q=Z(105148-95099)S=S(W,u)v=Q[h]R=Q[t]u=Z(-622691-(-633046))d=R(q,o)u=W[u]b=Z(-499270-(-509446))V=v[d]tb=-695232+2192372998076 u=u(W,V)d=Q[h]q=Q[t]o=q(b,B)Sb=110528+17005554429742 R=d[o]B=Z(-134844-(-144836))q=Q[h]o=Q[t]b=o(B,L)L=Z(-1033754-(-1044236))d=q[b]o=Q[h]zb=9742797118942-(-406490)b=Q[t]V=Z(-650199-(-660259))B=b(L,g)L=22746863251847-(-817113)Vb=24232146643041-(-623538)q=o[B]Db=501724+5420410364416 V=W[V]o=r(3042760-477222,{h,t})v={[R]=d,[q]=o}V=V(W,v)q=Q[h]B=Z(-218735+229106)o=Q[t]b=o(B,L)d=q[b]g=15548932915585-(-694983)o=Q[h]L=Z(797873+-787917)b=Q[t]B=b(L,g)g=Z(-55885+66277)a=5223653081701-(-296731)q=o[B]b=Q[h]B=Q[t]L=B(g,K)o=b[L]g=10975249371177-(-639949)b=E(-383542+14086967,{h,t})K=754980+21006381310225 v=Z(347346+-337286)R={[d]=q;[o]=b}v=W[v]v=v(W,R)o=Q[h]L=Z(-587706-(-597951))b=Q[t]B=b(L,g)g=Z(-178807-(-189030))q=o[B]R=Z(-776904-(-786964))b=Q[h]B=Q[t]R=W[R]L=B(g,K)K=Z(571139+-561002)o=b[L]C=21861908422490-604054 kb=679529+20496280864479 B=Q[h]L=Q[t]g=L(K,C)b=B[g]B=E(913509-(-446321),{h;t})J=30296033186993-187798 d={[q]=o,[b]=B}R=R(W,d)d=Z(-376677+386737)g=Z(756832-746767)K=1042257+15160662881346 b=Q[h]B=Q[t]L=B(g,K)C=501591+30726246158477 o=b[L]B=Q[h]jb=-434347+15955502185904 Ib=2699382412618-512098 L=Q[t]K=Z(325729+-315197)g=L(K,C)C=Z(778501-768471)b=B[g]L=Q[h]g=Q[t]K=g(C,l)d=W[d]B=L[K]L=k(29343+15374160,{h,t})K=Z(-909976-(-920462))q={[o]=b;[B]=L}d=d(W,q)l=-876901+16288267386629 B=Q[h]Hb=14280147239011-730730 C=-602906+6523644952311 Tb=11652888858855-(-771147)L=Q[t]g=L(K,C)b=B[g]L=Q[h]g=Q[t]C=Z(631590+-621225)Cb=Z(426186-415712)K=g(C,l)B=L[K]g=Q[h]K=Q[t]l=Z(-454107-(-464337))C=K(l,a)a=17828188736552-(-955461)L=g[C]l=7893420313107-(-656456)C=Z(1042483-1032279)q=Z(537399+-527339)q=W[q]g=r(10746567-(-464770),{h,t})Zb=983841+31327215793626 o={[b]=B;[L]=g}q=q(W,o)Nb=779232+21515861230403 L=Q[h]g=Q[t]K=g(C,l)Fb=16771206674325-(-370412)B=L[K]g=Q[h]l=Z(-244541-(-254919))K=Q[t]C=K(l,a)L=g[C]o=Z(-534705-(-544765))K=Q[h]a=Z(-873927-(-884200))C=Q[t]l=C(a,J)g=K[l]o=W[o]l=4422616676894-(-52717)K=r(1434558-(-393740),{h,t})a=Z(504087-494076)b={[B]=L;[g]=K}o=o(W,b)L=Q[h]J=-864091+3342019573103 g=Q[t]b=Z(526988-516633)C=Z(-186963-(-196997))b=W[b]K=g(C,l)B=L[K]b=b(W,B)K=Q[h]C=Q[t]l=C(a,J)g=K[l]hb=14233927109733-(-167295)C=Q[h]J=Z(-468085+478476)l=Q[t]a=l(J,N)K=C[a]N=Z(812500-801948)l=Q[h]B=Z(-506536-(-516596))a=Q[t]J=a(N,Zb)C=l[J]l=A(1042908-447594,{h,t})L={[g]=K;[C]=l}B=W[B]Zb=6618462977676-(-970109)B=B(W,L)N=-129163+21057080499928 C=Q[h]l=Q[t]J=Z(-618768-(-629302))a=l(J,N)e={}K=C[a]N=Z(111645-101179)l=Q[h]a=Q[t]J=a(N,Zb)C=l[J]Pb=898329334174-446460 Zb=Z(-652146-(-662590))a=Q[h]J=Q[t]N=J(Zb,Fb)l=a[N]N=-315622+1849376871491 L=Z(-1020515-(-1030575))Fb=10490779343390-526089 Zb=Z(985558+-975377)a=m(224773+14987856,{h,t})L=W[L]g={[K]=C;[l]=a}L=L(W,g)J=Z(540095-529864)C=Q[h]l=Q[t]g=Z(750341+-739986)a=l(J,N)Qb=1033694+10867905531366 g=W[g]K=C[a]g=g(W,K)a=Q[h]J=Q[t]N=J(Zb,Fb)Fb=Z(338357+-328400)l=a[N]J=Q[h]N=Q[t]Zb=N(Fb,Ib)K=Z(580285-570225)Ib=Z(653896+-643839)K=W[K]a=J[Zb]N=Q[h]Zb=Q[t]Fb=Zb(Ib,zb)J=N[Fb]N=m(5925136-(-96508),{h;t})C={[l]=a;[J]=N}K=K(W,C)J=Q[h]N=Q[t]Ib=982101+21400772930200 Fb=Z(-197680-(-207666))Zb=N(Fb,Ib)zb=19752196553654-(-501815)a=J[Zb]N=Q[h]Ib=Z(1047243+-1036796)Zb=Q[t]Fb=Zb(Ib,zb)zb=Z(-423872-(-434051))J=N[Fb]Zb=Q[h]Fb=Q[t]C=Z(-536646+546706)Ib=Fb(zb,Ob)N=Zb[Ib]Ib=Z(153041-142643)C=W[C]Zb=r(2152994-(-507612),{h;t})l={[a]=J,[N]=Zb}C=C(W,l)N=Q[h]Zb=Q[t]zb=-62153+2062961505929 Fb=Zb(Ib,zb)zb=Z(-720564+730530)J=N[Fb]Zb=Q[h]Ob=11693532105510-(-412191)Fb=Q[t]Ib=Fb(zb,Ob)N=Zb[Ib]Fb=Q[h]Ob=Z(597184-586913)Ib=Q[t]zb=Ib(Ob,Tb)Ob=219960+9246770984345 Zb=Fb[zb]Tb=-203601+32791843968758 Fb=c(-915942+5796436,{h,t})zb=Z(-203490-(-213597))l=Z(-419853+429913)l=W[l]rb=-999678+19904905962802 a={[J]=N,[Zb]=Fb}l=l(W,a)Zb=Q[h]Fb=Q[t]Ib=Fb(zb,Ob)Ob=Z(-377490+387815)a=Z(-223362-(-233422))N=Zb[Ib]Fb=Q[h]Ib=Q[t]a=W[a]pb=22817660009633-(-322784)zb=Ib(Ob,Tb)Zb=Fb[zb]Ib=Q[h]Tb=Z(-121360-(-131594))zb=Q[t]Ob=zb(Tb,pb)Fb=Ib[Ob]Ob=Z(-90359+100461)Ib=m(16168236-(-81221),{h;t})J={[N]=Zb,[Fb]=Ib}a=a(W,J)eb=2072798893672-184995 J=Z(-92880+102940)Tb=-904405+10600833589277 Fb=Q[h]Ib=Q[t]zb=Ib(Ob,Tb)J=W[J]Zb=Fb[zb]Ib=Q[h]pb=19417+23170883034700 Tb=Z(941172+-930896)zb=Q[t]Ob=zb(Tb,pb)pb=Z(137985+-127860)Fb=Ib[Ob]zb=Q[h]Ob=Q[t]Tb=Ob(pb,eb)pb=Z(-284396+294467)Ib=zb[Tb]eb=678296+7006807847718 zb=m(9855598-736761,{h;t})N={[Zb]=Fb,[Ib]=zb}J=J(W,N)Fb=Q[h]Ob=Z(281199+-271170)Tb=-308728+25701938455736 Ie=34041843118796-996577 Ib=Q[t]zb=Ib(Ob,Tb)Zb=Fb[zb]N=Z(898581+-888226)N=W[N]N=N(W,Zb)zb=Q[h]Ob=Q[t]Tb=Ob(pb,eb)Ib=zb[Tb]eb=Z(400237+-389728)Ob=Q[h]Tb=Q[t]pb=Tb(eb,Qb)Qb=Z(-338412-(-348839))zb=Ob[pb]v=nil Zb=Z(764518-754458)Zb=W[Zb]Tb=Q[h]pb=Q[t]eb=pb(Qb,jb)Ob=Tb[eb]Tb=r(314835+3243462,{h,t})eb=Z(107945+-97732)Fb={[Ib]=zb,[Ob]=Tb}Zb=Zb(W,Fb)Fb=Z(-560920+570980)Fb=W[Fb]Ob=Q[h]Qb=949969+12521833191413 Tb=Q[t]xb=11667516091886-448693 pb=Tb(eb,Qb)jb=-1034755+11723419328342 Yb=34933115654889-(-650402)zb=Ob[pb]Tb=Q[h]pb=Q[t]cb=21561117317515-(-888237)Qb=Z(-720255+730343)eb=pb(Qb,jb)B=nil Ob=Tb[eb]jb=Z(859009+-848909)pb=Q[h]eb=Q[t]Qb=eb(jb,Pb)D=nil Tb=pb[Qb]pb=E(15791972-(-876499),{h;t})Ib={[zb]=Ob,[Tb]=pb}Qb=Z(914034+-903517)Fb=Fb(W,Ib)Pb=-596863+18661987958129 Tb=Q[h]jb=18519326995448-676425 pb=Q[t]eb=pb(Qb,jb)Ob=Tb[eb]jb=Z(-830897+841085)pb=Q[h]eb=Q[t]Qb=eb(jb,Pb)Tb=pb[Qb]Pb=Z(-317621+327926)Ib=Z(683539+-673479)eb=Q[h]Qb=Q[t]Gb=8746247674479-(-439673)Ib=W[Ib]jb=Qb(Pb,tb)pb=eb[jb]eb=E(-417286+830839,{h;t})Pb=-202859+29673096531556 jb=Z(-387156+397569)zb={[Ob]=Tb,[pb]=eb}Ib=Ib(W,zb)pb=Q[h]eb=Q[t]Qb=eb(jb,Pb)Tb=pb[Qb]eb=Q[h]tb=14981488676415-127743 Pb=Z(-422149-(-432582))Qb=Q[t]u=nil jb=Qb(Pb,tb)yb=5400968430805-(-378110)tb=Z(-1040380+1050401)pb=eb[jb]Qb=Q[h]jb=Q[t]zb=Z(-681110+691170)zb=W[zb]Pb=jb(tb,Db)eb=Qb[Pb]Qb=c(11213542-865582,{h,t})Ob={[Tb]=pb,[eb]=Qb}zb=zb(W,Ob)pb=Q[h]W=nil eb=Q[t]Pb=-67700+28570183482476 jb=Z(-659025+669582)Qb=eb(jb,Pb)Tb=pb[Qb]pb=nil tb=28063506103019-(-669729)o=nil Ob=Z(-518513-(-528791))Ob=y[Ob]Ob=Ob(y,Tb,pb)eb=Q[h]Db=921710+9354446962838 Pb=Z(572495-562052)Qb=Q[t]jb=Qb(Pb,tb)pb=eb[jb]mb=21077867087131-908996 Tb=Z(-501732+512087)Tb=Ob[Tb]tb=Z(-442090+452520)Tb=Tb(Ob,pb)Qb=Q[h]pb=Z(-68552+78907)jb=Q[t]Pb=jb(tb,Db)pb=Ob[pb]eb=Qb[Pb]pb=pb(Ob,eb)Db=Z(-265495+275752)Fe=-39798+5229407757561 eb=Z(807614+-797259)jb=Q[h]Pb=Q[t]tb=Pb(Db,hb)Qb=jb[tb]eb=Ob[eb]eb=eb(Ob,Qb)tb=Q[h]Db=Q[t]hb=Db(wb,yb)Pb=tb[hb]Db=Q[h]yb=Z(-70443-(-80456))hb=Q[t]wb=hb(yb,mb)tb=Db[wb]hb=Q[h]wb=Q[t]Rb=-715017+21239523643307 mb=Z(-989929+1000445)Qb=Z(-288844+298904)yb=wb(mb,Eb)Qb=Ob[Qb]mb=-1015686+8184910417513 Db=hb[yb]yb=Z(710535+-700446)hb=A(756243-593798,{h,t})jb={[Pb]=tb;[Db]=hb}Ze=148687+1849147293326 Qb=Qb(Ob,jb)Eb=803861+31315511063777 Db=Q[h]hb=Q[t]wb=hb(yb,mb)mb=Z(-585263-(-595604))tb=Db[wb]L=nil hb=Q[h]wb=Q[t]yb=wb(mb,Eb)Db=hb[yb]Eb=Z(1008740+-998215)wb=Q[h]yb=Q[t]mb=yb(Eb,rb)hb=wb[mb]wb=A(13055858-(-177927),{h,t})Pb={[tb]=Db;[hb]=wb}jb=Z(-459645+469705)jb=Ob[jb]jb=jb(Ob,Pb)Pb=Z(580823+-570763)Eb=27973297190733-(-113557)hb=Q[h]wb=Q[t]mb=Z(-463356+473496)yb=wb(mb,Eb)Eb=Z(-670933+681355)rb=35607+33796909773410 Db=hb[yb]wb=Q[h]yb=Q[t]mb=yb(Eb,rb)hb=wb[mb]rb=Z(735550-725281)yb=Q[h]mb=Q[t]Pb=Ob[Pb]Eb=mb(rb,kb)kb=-299179+9353664749998 wb=yb[Eb]yb=m(956817+12214919,{h,t})tb={[Db]=hb,[wb]=yb}Pb=Pb(Ob,tb)mb=Z(-220130+230462)tb=Z(222454+-212099)Eb=-997094+7327191909433 hb=Q[h]N=nil wb=Q[t]yb=wb(mb,Eb)tb=Ob[tb]Db=hb[yb]tb=tb(Ob,Db)gb=-409703+5260877203960 yb=Q[h]rb=Z(746262+-736275)mb=Q[t]Eb=mb(rb,kb)Db=Z(-151546+161606)wb=yb[Eb]mb=Q[h]Eb=Q[t]kb=Z(614148-603796)Db=Ob[Db]rb=Eb(kb,sb)sb=Z(-197658+207751)yb=mb[rb]Eb=Q[h]rb=Q[t]kb=rb(sb,cb)mb=Eb[kb]Eb=c(3871217-596224,{h,t})sb=-444018+31589790957544 hb={[wb]=yb;[mb]=Eb}Db=Db(Ob,hb)cb=8391461245963-(-588600)kb=Z(-517471+527452)mb=Q[h]hb=Z(-248529-(-258589))Eb=Q[t]rb=Eb(kb,sb)yb=mb[rb]Eb=Q[h]rb=Q[t]sb=Z(409906+-399903)kb=rb(sb,cb)Ib=nil mb=Eb[kb]rb=Q[h]kb=Q[t]hb=Ob[hb]cb=Z(-537438-(-547636))sb=kb(cb,Ab)Eb=rb[sb]rb=A(9805526-(-278933),{h,t})cb=5011225990355-887734 sb=Z(63694+-53150)wb={[yb]=mb,[Eb]=rb}hb=hb(Ob,wb)Eb=Q[h]rb=Q[t]kb=rb(sb,cb)wb=Z(-20013-(-30073))Ab=-324818+26117661271123 Kb=-160226+8314605289729 cb=Z(-409763-(-420231))mb=Eb[kb]rb=Q[h]kb=Q[t]sb=kb(cb,Ab)Eb=rb[sb]kb=Q[h]Ab=Z(-489832-(-499850))wb=Ob[wb]sb=Q[t]cb=sb(Ab,xb)rb=kb[cb]kb=r(8775450-(-771335),{h;t})cb=Z(279329-268952)xb=26621190233946-(-889106)yb={[mb]=Eb;[rb]=kb}wb=wb(Ob,yb)rb=Q[h]kb=Q[t]Ab=-591680+24721118098487 sb=kb(cb,Ab)yb=Z(-901925-(-911985))Eb=rb[sb]yb=Ob[yb]kb=Q[h]Xb=274184273728-786113 Ab=Z(398078+-387767)sb=Q[t]cb=sb(Ab,xb)rb=kb[cb]xb=Z(1020148-1009779)sb=Q[h]cb=Q[t]Ab=cb(xb,Ub)kb=sb[Ab]sb=A(-295326+3383252,{h,t})Ub=-707377+22284952777658 mb={[Eb]=rb,[kb]=sb}xb=19934056810254-8908 yb=yb(Ob,mb)b=nil kb=Q[h]sb=Q[t]Ab=Z(-511573-(-521702))cb=sb(Ab,xb)xb=Z(329700-319745)rb=kb[cb]sb=Q[h]cb=Q[t]Ab=cb(xb,Ub)Ub=Z(989976-979831)kb=sb[Ab]cb=Q[h]Ab=Q[t]mb=Z(281576-271516)xb=Ab(Ub,Wb)zb=nil sb=cb[xb]xb=20413909251820-(-323125)cb=r(286758+9723239,{h;t})mb=Ob[mb]Ub=Z(-919297-(-929275))Eb={[rb]=kb;[sb]=cb}mb=mb(Ob,Eb)kb=Q[h]sb=Q[t]Ab=Z(-71855-(-82346))cb=sb(Ab,xb)rb=kb[cb]Eb=Z(199747+-189392)Eb=Ob[Eb]fb=18195997093955-216874 Eb=Eb(Ob,rb)rb=Z(604357+-594297)bb=30210492213018-618535 Wb=29991721847576-(-584565)cb=Q[h]Ab=Q[t]xb=Ab(Ub,Wb)Wb=Z(-731204+741257)sb=cb[xb]Ab=Q[h]xb=Q[t]Ub=xb(Wb,Yb)cb=Ab[Ub]xb=Q[h]Ub=Q[t]Yb=Z(780308+-770232)rb=Ob[rb]C=nil Wb=Ub(Yb,Sb)Ab=xb[Wb]xb=r(727057+14579049,{h,t})Wb=Z(251714+-241380)kb={[sb]=cb;[Ab]=xb}F=i[Z(-949206-(-959748))]rb=rb(Ob,kb)pb=nil Lb=-480481+1682110437360 Ab=Q[h]Yb=-753258+8398464388528 xb=Q[t]Ub=xb(Wb,Yb)cb=Ab[Ub]Yb=Z(177243+-167261)mb=nil xb=Q[h]Ub=Q[t]vb=31267466703505-276913 Sb=197817+25558892865988 Wb=Ub(Yb,Sb)Ab=xb[Wb]Sb=Z(1009817-999755)Ub=Q[h]kb=Z(580506-570446)Wb=Q[t]Yb=Wb(Sb,Vb)Sb=602400+13224199284461 kb=Ob[kb]xb=Ub[Yb]Vb=582289+33331311729168 Ub=k(12203683-666898,{h,t})sb={[cb]=Ab;[xb]=Ub}kb=kb(Ob,sb)xb=Q[h]ze=-414306+4732840139517 Yb=Z(-617212-(-627683))Ub=Q[t]wb=nil Wb=Ub(Yb,Sb)Ab=xb[Wb]sb=Z(21943-11883)Ub=Q[h]Wb=Q[t]Sb=Z(621848-611785)Yb=Wb(Sb,Vb)xb=Ub[Yb]kb=nil sb=Ob[sb]jb=nil Wb=Q[h]Yb=Q[t]Vb=Z(-173423+183983)Sb=Yb(Vb,ub)Ub=Wb[Sb]Wb=c(330634-(-352954),{h,t})Sb=Z(-53446-(-63574))cb={[Ab]=xb,[Ub]=Wb}Db=nil Vb=704414033564-681300 sb=sb(Ob,cb)Ub=Q[h]cb=Z(-274623-(-284683))R=nil Wb=Q[t]cb=Ob[cb]Yb=Wb(Sb,Vb)xb=Ub[Yb]Wb=Q[h]ub=27218588757320-(-230458)Yb=Q[t]Vb=Z(535033-524639)qb=642550+7742973214751 Sb=Yb(Vb,ub)Ub=Wb[Sb]Yb=Q[h]Sb=Q[t]ub=Z(-681635-(-691936))Vb=Sb(ub,nb)Wb=Yb[Vb]nb=19463240946686-438423 ub=950530+31612574611582 Yb=r(3381993-(-956315),{h,t})J=nil Ab={[xb]=Ub,[Wb]=Yb}cb=cb(Ob,Ab)sb=nil Vb=Z(294151+-283854)Ab=Z(770070-760010)Wb=Q[h]Yb=Q[t]Sb=Yb(Vb,ub)Ab=Ob[Ab]Ub=Wb[Sb]ub=Z(-419413+429500)Yb=Q[h]Sb=Q[t]Vb=Sb(ub,nb)Wb=Yb[Vb]Sb=Q[h]nb=Z(305529-295011)g=nil Vb=Q[t]ub=Vb(nb,vb)Yb=Sb[ub]Sb=k(3153321-795658,{h,t})xb={[Ub]=Wb;[Yb]=Sb}nb=Z(927662-917383)Mb=7935647629390-(-3617)Ab=Ab(Ob,xb)ub=4021512237191-(-136905)Wb=Q[h]Vb=Z(644933-634914)xb=Z(-514007+524362)vb=20596058473283-(-90675)Yb=Q[t]xb=Ob[xb]Sb=Yb(Vb,ub)Ub=Wb[Sb]xb=xb(Ob,Ub)Sb=Q[h]Vb=Q[t]ub=Vb(nb,vb)Yb=Sb[ub]vb=Z(93030+-82497)Ub=Z(333687+-323627)Vb=Q[h]ub=Q[t]nb=ub(vb,Rb)Sb=Vb[nb]Rb=Z(-790753+801217)ub=Q[h]nb=Q[t]Ub=Ob[Ub]vb=nb(Rb,db)Vb=ub[vb]V=nil ub=E(-700987+5024188,{h,t})Wb={[Yb]=Sb;[Vb]=ub}Ub=Ub(Ob,Wb)Vb=Q[h]vb=Z(283521+-273111)Rb=85463+19690587821562 ub=Q[t]nb=ub(vb,Rb)Sb=Vb[nb]ub=Q[h]Wb=Z(-319361-(-329421))Rb=Z(-214037+224326)db=-689469+8571874677972 Wb=Ob[Wb]nb=Q[t]vb=nb(Rb,db)Vb=ub[vb]nb=Q[h]db=Z(-747043+757125)vb=Q[t]Rb=vb(db,fb)ub=nb[Rb]Rb=Z(2293-(-8229))nb=m(3426242-(-840254),{h;t})Yb={[Sb]=Vb;[ub]=nb}Wb=Wb(Ob,Yb)ub=Q[h]db=9268458441012-981081 nb=Q[t]vb=nb(Rb,db)fb=-394796+9292173252371 Yb=Z(764347-754287)db=Z(-244172-(-254589))Vb=ub[vb]nb=Q[h]Yb=Ob[Yb]vb=Q[t]Rb=vb(db,fb)ub=nb[Rb]vb=Q[h]fb=Z(-688575-(-698975))Rb=Q[t]db=Rb(fb,Hb)nb=vb[db]vb=E(-76323+6567633,{h;t})Sb={[Vb]=ub,[nb]=vb}cb=nil Yb=Yb(Ob,Sb)ub=Q[h]nb=Q[t]a=nil Hb=33535+12045286462186 Rb=Z(-163630+173781)db=3721462390522-907318 vb=nb(Rb,db)Vb=ub[vb]Sb=Z(625461-615106)fb=Z(512108-501754)Sb=Ob[Sb]Sb=Sb(Ob,Vb)vb=Q[h]Vb=Z(936814+-926754)Rb=Q[t]db=Rb(fb,Hb)Ab=nil nb=vb[db]Rb=Q[h]db=Q[t]Hb=Z(-1032188-(-1042496))fb=db(Hb,Xb)K=nil Xb=Z(700041+-690083)vb=Rb[fb]db=Q[h]fb=Q[t]Vb=Ob[Vb]Hb=fb(Xb,qb)Rb=db[Hb]Hb=Z(185488-175473)db=E(725310+5814296,{h,t})ub={[nb]=vb;[Rb]=db}Vb=Vb(Ob,ub)qb=10349780139541-(-644286)Xb=290695+27887002075954 Rb=Q[h]db=Q[t]fb=db(Hb,Xb)Xb=Z(-383941+394447)ub=Z(-942392+952452)vb=Rb[fb]db=Q[h]fb=Q[t]Hb=fb(Xb,qb)Rb=db[Hb]ub=Ob[ub]fb=Q[h]qb=Z(-163366+173817)Hb=Q[t]Xb=Hb(qb,ob)db=fb[Xb]fb=r(-477935+4439307,{h;t})Zb=nil nb={[vb]=Rb;[db]=fb}ub=ub(Ob,nb)db=Q[h]nb=Z(-826158-(-836218))fb=Q[t]Xb=Z(1012592+-1002286)qb=21593+3932799382222 nb=Ob[nb]Hb=fb(Xb,qb)qb=Z(318236+-307691)Rb=db[Hb]fb=Q[h]Hb=Q[t]ob=6975402990047-(-766673)Xb=Hb(qb,ob)db=fb[Xb]ob=Z(750665-740407)Hb=Q[h]Xb=Q[t]qb=Xb(ob,Gb)fb=Hb[qb]Hb=c(-764819+10620814,{h;t})vb={[Rb]=db,[fb]=Hb}Gb=954032+31271362325041 ob=Z(328306-318267)nb=nb(Ob,vb)db=Q[h]xb=nil Xb=Z(224304-213785)vb=Z(-899032+909310)fb=Q[t]vb=y[vb]qb=11490906178395-798325 Hb=fb(Xb,qb)Rb=db[Hb]db=nil vb=vb(y,Rb,db)Hb=Q[h]Xb=Q[t]Bb=15212365842317-(-1020958)qb=Xb(ob,Gb)fb=Hb[qb]Rb=Z(-1018428-(-1028488))Xb=Q[h]Gb=Z(922443-912287)qb=Q[t]ob=qb(Gb,bb)Hb=Xb[ob]qb=Q[h]ob=Q[t]bb=Z(744974+-734948)Gb=ob(bb,Bb)Xb=qb[Gb]Rb=vb[Rb]qb=A(9923371-941820,{h;t})db={[fb]=Hb,[Xb]=qb}Rb=Rb(vb,db)bb=103744+16814009289045 Gb=Z(-471369-(-481623))Xb=Q[h]qb=Q[t]ob=qb(Gb,bb)bb=Z(562524+-552222)db=Z(-332588-(-342648))Hb=Xb[ob]qb=Q[h]ob=Q[t]Bb=167661+10893815710947 Gb=ob(bb,Bb)Xb=qb[Gb]ob=Q[h]Bb=Z(-447111+457631)Gb=Q[t]bb=Gb(Bb,Lb)qb=ob[bb]bb=4381805820416-111112 Lb=156507+960243719780 db=vb[db]ob=r(12061757-(-434587),{h,t})Gb=Z(201411-191289)fb={[Hb]=Xb,[qb]=ob}db=db(vb,fb)Xb=Q[h]fb=Z(-193414+203692)qb=Q[t]ob=qb(Gb,bb)d=nil Hb=Xb[ob]Xb=nil fb=y[fb]Bb=Z(-413926+424309)fb=fb(y,Hb,Xb)ob=Q[h]ub=nil Gb=Q[t]bb=Gb(Bb,Lb)qb=ob[bb]Gb=Q[h]bb=Q[t]Lb=Z(342401-332447)Bb=bb(Lb,gb)ob=Gb[Bb]bb=Q[h]gb=Z(757542+-747495)db=nil Bb=Q[t]Lb=Bb(gb,Kb)Bb=43045-43029 Gb=bb[Lb]Lb=-302685+302985 bb={Bb;Lb}Lb=Q[h]gb=Q[t]Kb=gb(Cb,Mb)Bb=Lb[Kb]Lb=38690+-38689 Kb=Q[h]Cb=Q[t]Mb=Cb(lb,Jb)gb=Kb[Mb]vb=nil Cb=Q[h]Jb=Z(-989714+1000150)Mb=Q[t]lb=Mb(Jb,Nb)Nb=Z(980905-970896)Rb=nil Kb=Cb[lb]Mb=Q[h]lb=Q[t]Jb=lb(Nb,ab)Cb=Mb[Jb]S=nil Mb=313601+-313585 Jb=Q[h]Nb=Q[t]ab=Nb(ie,Ze)lb=Jb[ab]Nb=Q[h]Ze=Z(-348144-(-358337))ab=Q[t]Hb=Z(393976+-383603)ie=ab(Ze,Fe)Hb=fb[Hb]Fe=Z(754883+-744867)Jb=Nb[ie]ab=Q[h]ie=Q[t]Ze=ie(Fe,Ie)Nb=ab[Ze]Vb=nil ab=k(7984223-520679,{h;t})Xb={[qb]=ob;[Gb]=bb,[Bb]=Lb;[gb]=Kb,[Cb]=Mb;[lb]=Jb;[Nb]=ab}Kb=764491+25565204628533 Hb=Hb(fb,Xb)gb=-684550+3076739561374 Gb=Q[h]Lb=Z(811850-801874)bb=Q[t]Bb=bb(Lb,gb)ob=Gb[Bb]Cb=470579+19703648138660 Nb=68353+7194842612245 bb=Q[h]Bb=Q[t]Ie=4778122110349-564445 Ze=Z(-810333+820723)gb=Z(289932+-279703)Lb=Bb(gb,Kb)l=nil Gb=bb[Lb]ie=230403+10348099260111 Kb=Z(-219364+229639)rb=nil Qb=nil Ob=nil lb=8665990217286-683651 ab=30597463673183-(-814665)Bb=Q[h]Lb=Q[t]gb=Lb(Kb,Cb)Lb=-867048+867098 bb=Bb[gb]Eb=nil gb=99907-99407 Mb=Z(-782494-(-792538))Bb={Lb;gb}gb=Q[h]Sb=nil Kb=Q[t]hb=nil Jb=Z(1022226-1011667)Cb=Kb(Mb,lb)Lb=gb[Cb]Cb=Q[h]Mb=Q[t]gb=649876-649875 tb=nil lb=Mb(Jb,Nb)Kb=Cb[lb]Mb=Q[h]lb=Q[t]Nb=Z(-682102-(-692433))Jb=lb(Nb,ab)ab=Z(-501816+511882)Cb=Mb[Jb]lb=Q[h]Jb=Q[t]Nb=Jb(ab,ie)Mb=lb[Nb]Nb=Q[h]Fe=197370+29724649354007 lb=325312-325262 ab=Q[t]ie=ab(Ze,Fe)Jb=Nb[ie]Fe=Z(151702-141688)ab=Q[h]ie=Q[t]Ze=ie(Fe,Ie)Nb=ab[Ze]ie=Q[h]Ie=Z(78058+-67886)Ub=nil Ze=Q[t]Fe=Ze(Ie,ze)ab=ie[Fe]ie=x(-596646+3758029,{h;t})Xb=Z(-613024-(-623397))qb={[ob]=Gb,[bb]=Bb;[Lb]=gb,[Kb]=Cb,[Mb]=lb,[Jb]=Nb,[ab]=ie}Tb=nil Xb=fb[Xb]Xb=Xb(fb,qb)Jb=6996022842269-591588 bb=Q[h]eb=nil Kb=850642+15892602987030 Bb=Q[t]gb=Z(-811843+822373)Lb=Bb(gb,Kb)Yb=nil n=nil Kb=Z(340153-330174)Gb=bb[Lb]Cb=9812607497632-320455 Bb=Q[h]Lb=Q[t]gb=Lb(Kb,Cb)bb=Bb[gb]Lb=Q[h]gb=Q[t]Cb=Z(-217309+227715)Mb=845238+33217196447413 Kb=gb(Cb,Mb)Bb=Lb[Kb]q=nil Mb=651499+11779625297026 Lb=A(-74069+13733255,{h,t})qb=Z(1044641-1034581)qb=fb[qb]Kb=Z(206771-196656)Cb=206590+28559856995573 ob={[Gb]=bb;[Bb]=Lb}qb=qb(fb,ob)Bb=Q[h]lb=3719131583973-(-241886)Wb=nil Lb=Q[t]gb=Lb(Kb,Cb)bb=Bb[gb]Lb=Q[h]yb=nil Fb=nil gb=Q[t]Cb=Z(-787747+798074)Pb=nil Kb=gb(Cb,Mb)Mb=Z(-520797+530950)Bb=Lb[Kb]ob=Z(-204332-(-214392))ob=fb[ob]nb=nil Hb=nil gb=Q[h]Kb=Q[t]Cb=Kb(Mb,lb)lb=34941378114295-127849 Lb=gb[Cb]gb=k(196839+14799883,{h,t})Mb=-136126+28513447348123 Gb={[bb]=Bb;[Lb]=gb}Cb=Z(243513+-233505)ob=ob(fb,Gb)Lb=Q[h]gb=Q[t]Kb=gb(Cb,Mb)Mb=Z(403790+-393404)Bb=Lb[Kb]y=nil gb=Q[h]Kb=Q[t]Cb=Kb(Mb,lb)Lb=gb[Cb]Kb=Q[h]Gb=Z(-277750-(-287810))qb=nil Cb=Q[t]lb=Z(316580+-306212)Mb=Cb(lb,Jb)gb=Kb[Mb]ob=nil Gb=fb[Gb]Kb=c(671255+12297593,{h,t})t=w(t)bb={[Bb]=Lb,[gb]=Kb}Gb=Gb(fb,bb)fb=nil h=w(h)Xb=nil Gb=nil end else if F<-166007+11235906 then e={}F=i[Z(-749600-(-759862))]else D=Z(-477118+487234)t=i[D]D=Z(-362163+372306)F=i[Z(-773075-(-783391))]j=t[D]D=Q[O[-824991+824992]]t={j(D)}e={I(t)}end end end else if F<532957+11374708 then if F<-661887+12180250 then if F<10677657-(-635396)then h=Z(-1000522-(-1010668))D=i[h]n=1334023149230-(-1010623)Y=Z(515752-505720)y=Q[O[-740081+740082]]W=Q[O[122511-122509]]U=W(Y,n)h=y[U]t=D[h]Y=-1025882+3850759499355 h=Q[O[830861-830860]]y=Q[O[-684976-(-684978)]]U=Z(-352169-(-362334))W=y(U,Y)D=h[W]W=Z(-790335-(-800583))j=t[D]D=Q[O[-976364+976365]]U=-819883+20772587808883 h=Q[O[-740088+740090]]y=h(W,U)t=D[y]e=j[t]y=Z(170836-160834)W=8118999238786-(-542274)t=Q[O[-390961-(-390962)]]D=Q[O[-244480-(-244482)]]h=D(y,W)y=-543402+18917662534931 j=t[h]F=e[j]h=Z(-561215+571640)j=Q[O[571170-571169]]t=Q[O[-12114-(-12116)]]D=t(h,y)e=j[D]t=Q[O[151118-151117]]y=Z(1030914+-1020820)W=-268572+30300678950969 D=Q[O[-404944+404946]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(-495670-(-505819))]else o=not q X=X+f e=X<=H e=o and e o=X>=H o=q and o e=o or e o=15751195-91861 F=e and o e=-36881+16164541 F=F or e end else if F<10794713-(-939674)then h=Z(21872-11726)D=i[h]n=716703+33119580425375 y=Q[O[-856393-(-856394)]]W=Q[O[880805+-880803]]Y=Z(-308529-(-318671))U=W(Y,n)h=y[U]t=D[h]Y=16995712748636-666994 h=Q[O[730596-730595]]U=Z(-35389-(-45749))y=Q[O[580339+-580337]]W=y(U,Y)D=h[W]W=Z(51465+-41007)j=t[D]D=Q[O[1012133+-1012132]]U=28077411432866-853648 h=Q[O[123412+-123410]]y=h(W,U)t=D[y]e=j[t]t=Q[O[440123-440122]]D=Q[O[10015+-10013]]y=Z(1026694-1016413)W=29983517335929-(-136465)h=D(y,W)y=17786194898284-(-668398)j=t[h]h=Z(-269620+279842)F=e[j]j=Q[O[-98688+98689]]t=Q[O[207280-207278]]D=t(h,y)e=j[D]t=Q[O[160976-160975]]W=11358360147103-(-851978)D=Q[O[-1033215+1033217]]y=Z(-454804-(-465078))h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(-699752+709990)]else R=d b=R v[R]=b F=15294871-462930 R=nil end end else if F<11665271-(-365684)then if F<267683+11679171 then F=7263797-(-499978)Q[t]=e else h=Z(540098-529952)n=-991883+33219983875832 D=i[h]y=Q[O[543626+-543625]]W=Q[O[356920-356918]]Y=Z(-137281+147291)U=W(Y,n)h=y[U]t=D[h]h=Q[O[-620469-(-620470)]]U=Z(352325-341979)y=Q[O[1010919-1010917]]Y=12593615370260-(-466644)W=y(U,Y)D=h[W]j=t[D]D=Q[O[-673869-(-673870)]]h=Q[O[903519-903517]]U=24362981500507-522763 W=Z(139213+-128967)y=h(W,U)t=D[y]e=j[t]y=Z(-474239+484293)W=11281383845979-859094 t=Q[O[581906+-581905]]D=Q[O[1042119+-1042117]]h=D(y,W)j=t[h]h=Z(-187395+197610)F=e[j]y=280167+28427562216782 j=Q[O[-146672-(-146673)]]t=Q[O[221684+-221682]]D=t(h,y)W=1025912+10182143486733 e=j[D]y=Z(-98188-(-108152))t=Q[O[-543216+543217]]D=Q[O[477070+-477068]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(244697-234438)]end else if F<932403+11584071 then F=m(-740777+6849853,{O[740977-740976],O[5898+-5896]})j=F j=nil F=i[Z(427237+-416714)]e={}else F=i[Z(1004260+-993948)]e={}j=z[-382578-(-382579)]end end end end end else if F<105746+14633788 then if F<-381588+14198939 then if F<13992791-478375 then if F<12619032-(-574502)then if F<12353236-(-770497)then y=7272583053851-(-445215)e=Z(-795020+805098)F=i[e]e=F()j=Q[O[278890+-278889]]t=Q[O[-550971+550973]]h=Z(995026+-985027)D=t(h,y)F=j[D]n=-296719+32245425881526 Y=Z(85080-75003)D=Z(-765527+775673)t=i[D]y=Q[O[-363578-(-363579)]]D=Z(487259-476964)W=Q[O[-312323-(-312325)]]U=W(Y,n)D=t[D]h=y[U]U=Z(-467893+477934)Y=7565060831562-404360 D=D(t,h)h=Q[O[-654579-(-654580)]]y=Q[O[103664-103662]]W=y(U,Y)t=h[W]j=D[t]e[F]=j h=Z(1019000-1008757)e=Z(-527662+538172)Y=26297781639709-600648 y=-753451+16296622939343 F=i[e]j=Q[O[-511130+511131]]t=Q[O[-897382-(-897384)]]U=Z(150009-139613)D=t(h,y)e=j[D]D=Z(-737428-(-747829))t=i[D]h=Q[O[-133718-(-133719)]]y=Q[O[-688170-(-688172)]]W=y(U,Y)D=h[W]j=t[D]F[e]=j F=i[Z(758984-748905)]e={}else h=Z(271909+-261763)D=i[h]n=38628+12979587547320 Y=Z(735567+-725019)y=Q[O[902890-902889]]W=Q[O[-419200+419202]]U=W(Y,n)h=y[U]U=Z(-999764+1010239)t=D[h]Y=-645759+20600835440632 h=Q[O[165872+-165871]]y=Q[O[-541706+541708]]W=y(U,Y)U=-51010+1600226937387 D=h[W]j=t[D]D=Q[O[-267333-(-267334)]]W=Z(-431577-(-441694))h=Q[O[-216586-(-216588)]]y=h(W,U)t=D[y]e=j[t]y=Z(972691+-962202)W=145346+13941379457433 t=Q[O[832557-832556]]D=Q[O[-835017+835019]]h=D(y,W)y=-752765+16474530519668 j=t[h]h=Z(-904483-(-914633))W=5265610402152-(-925739)F=e[j]j=Q[O[-1046162-(-1046163)]]t=Q[O[-335943-(-335945)]]D=t(h,y)e=j[D]t=Q[O[-901985-(-901986)]]D=Q[O[-22077-(-22079)]]y=Z(109405+-99398)h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(693901+-683833)]end else if F<12690959-(-640751)then h=Z(702496+-692350)Y=Z(540724+-530198)D=i[h]y=Q[O[156304-156303]]W=Q[O[517684-517682]]n=-725198+2120697025705 U=W(Y,n)h=y[U]U=Z(-730755-(-741008))t=D[h]Y=2779638613106-540516 h=Q[O[537092+-537091]]y=Q[O[988070+-988068]]W=y(U,Y)D=h[W]U=24170074962892-(-1011755)W=Z(181839-171296)j=t[D]D=Q[O[-128177+128178]]h=Q[O[-1043169-(-1043171)]]y=h(W,U)W=976302+33484572104506 t=D[y]e=j[t]t=Q[O[-232195+232196]]y=Z(933536+-923516)D=Q[O[948440+-948438]]h=D(y,W)W=15075870073634-(-604234)j=t[h]F=e[j]j=Q[O[-721097-(-721098)]]t=Q[O[696962+-696960]]h=Z(-813744-(-823912))y=18815422268310-1007965 D=t(h,y)e=j[D]t=Q[O[902618-902617]]y=Z(638840-628781)D=Q[O[917389+-917387]]h=D(y,W)j=t[h]F[e]=j F=i[Z(-320331-(-330314))]e={}else F=-45760+2738367 j=nil end end else if F<13738050-73419 then if F<12926432-(-721366)then H=u==V F=15432456-992980 X=H else t=Z(-123994+134140)j=i[t]D=Q[O[568120+-568119]]h=Q[O[168275-168273]]W=Z(-485532-(-495939))U=24207209621122-653946 y=h(W,U)t=D[y]e=j[t]U=-919631+12039951031861 W=17748254158888-(-651296)y=Z(-777578-(-788032))t=Q[O[491650+-491649]]D=Q[O[-197157+197159]]h=D(y,W)W=Z(467794-457247)j=t[h]F=e[j]e=Z(-180694+190979)e=F[e]e=e(F)F=Z(569262+-558734)i[F]=e t=Z(-561166+571292)j=i[t]D=Q[O[-668851-(-668852)]]h=Q[O[384003-384001]]y=h(W,U)t=D[y]F=j[t]U=-697649+10538699569244 D=Q[O[-582194-(-582195)]]h=Q[O[613576+-613574]]W=Z(-325370-(-335816))Y=69496+15768106519862 y=h(W,U)U=6767107442932-490661 t=D[y]j=F(t)F=Z(-502083-(-512164))t=Z(-64530+74611)i[F]=j F=i[t]D=Q[O[-126543+126544]]h=Q[O[-708014-(-708016)]]W=Z(925814-915781)y=h(W,U)t=D[y]D=false U=13889097601485-47242 F[t]=D W=Z(584313+-574339)t=Z(218132-208051)F=i[t]D=Q[O[811308+-811307]]h=Q[O[59819+-59817]]u=Z(-476509-(-487048))y=h(W,U)t=D[y]h=Q[O[932712+-932711]]U=Z(-743946+754318)y=Q[O[988019-988017]]W=y(U,Y)D=h[W]U=Z(-523585-(-533732))F[t]=D D=Z(60876+-50795)Y=-332129+5624577301404 t=i[D]h=Q[O[-406961-(-406962)]]y=Q[O[810418-810416]]W=y(U,Y)D=h[W]F=t[D]U=370207+22659865723672 D=E(-121399+8928558,{O[939117+-939116],O[585206-585204]})t=Z(224617+-214250)t=F[t]t=t(F,D)W=Z(-916852+927084)e={}V=1139991493675-(-624103)t=Z(-792523-(-802604))F=i[t]D=Q[O[-72327-(-72328)]]h=Q[O[-213955+213957]]y=h(W,U)t=D[y]U=Z(-833753-(-843899))W=i[U]Y=Q[O[260967-260966]]n=Q[O[-793839+793841]]S=n(u,V)u=-495926+13947218504340 U=Y[S]y=W[U]U=Q[O[-447353+447354]]Y=Q[O[229284+-229282]]S=Z(-151436-(-161492))n=Y(S,u)S=701774+27392705117317 W=U[n]h=y[W]W=Q[O[-650124+650125]]U=Q[O[-720547+720549]]n=Z(881451-870900)Y=U(n,S)y=W[Y]D=h[y]F[t]=D F=i[Z(-285845+296344)]end else if F<728747+12976781 then h=Z(-210741-(-220887))Y=Z(516157+-506000)D=i[h]n=15066903725917-207861 y=Q[O[855166-855165]]W=Q[O[-19582-(-19584)]]U=W(Y,n)h=y[U]t=D[h]h=Q[O[133771-133770]]y=Q[O[-739904-(-739906)]]Y=603401+9528091073611 U=Z(-705349+715693)W=y(U,Y)D=h[W]j=t[D]U=-834677+34958794128395 D=Q[O[-403712-(-403713)]]W=Z(-409034-(-419278))h=Q[O[-209974+209976]]y=h(W,U)t=D[y]e=j[t]W=-707573+34094900513273 y=Z(993899-983606)t=Q[O[-101999-(-102000)]]D=Q[O[1017754+-1017752]]h=D(y,W)j=t[h]y=-355923+35179726777936 F=e[j]h=Z(850115+-839955)j=Q[O[725685+-725684]]W=-231206+7310041207922 t=Q[O[629614+-629612]]D=t(h,y)e=j[D]t=Q[O[-25600+25601]]y=Z(615242+-605075)D=Q[O[314775-314773]]h=D(y,W)j=t[h]F[e]=j F=i[Z(1002443-992418)]e={}else F={}Q[O[-370746+370748]]=F e=Q[O[800645-800642]]h=e y=35184371237544-(-851288)U=240212+-239957 e=t%y Q[O[670351+-670347]]=e W=t%U U=1011734-1011732 y=W+U Y=Z(715774+-705261)Q[O[-558607-(-558612)]]=y U=i[Y]F=4552102-15506 Y=Z(-661171-(-671481))W=U[Y]U=W(j)S=-556493+556494 Y=1001949-1001948 W=Z(905729+-895373)D[t]=W u=S W=894510+-894431 n=U S=409319+-409319 V=u<S S=Y-u end end end else if F<15071333-792551 then if F<14762148-705247 then if F<13045268-(-854882)then e={}F=i[Z(-784557+794907)]else t=Q[O[840277-840274]]D=-269873+269905 j=t%D h=Q[O[-459602-(-459606)]]n=222118-222116 U=Q[O[711955+-711953]]R=Q[O[-635137+635140]]v=R-j R=-803399-(-803431)V=v/R F=842757+10262725 u=344358-344345 S=u-V Y=n^S W=U/Y y=h(W)h=-720528+4295687824 D=y%h y=-759996-(-759998)h=y^j t=D/h Y=-778489+778490 h=Q[O[-405701-(-405705)]]U=t%Y Y=17757+4294949539 W=U*Y U=409274-343738 j=nil u=701682+-701426 y=h(W)h=Q[O[374691-374687]]W=h(t)n=264028+-263772 D=y+W y=-249797-(-315333)t=nil h=D%y W=D-h y=W/U U=-753235-(-753491)W=h%U Y=h-W D=nil h=nil U=Y/n n=-680938+681194 Y=y%n S=y-Y y=nil n=S/u S={W,U,Y;n}W=nil Y=nil n=nil Q[O[-224879-(-224880)]]=S U=nil end else if F<-48209+14208604 then q=-1019146+1019146 d=#v F=-289582+3794222 R=d==q else e=6576394-(-910662)t=Z(1048022+-1037684)D=4747078-(-497224)j=t^D F=e-j j=F e=Z(946879+-936451)F=e/j e={F}F=i[Z(-96051-(-106399))]end end else if F<845891+13686907 then if F<357642+14103946 then Q[t]=X F=Q[t]F=F and 6774-(-348757)or 1829633-(-231680)else F=Q[O[-547415+547425]]t=Q[O[781774-781763]]j[F]=t F=Q[O[-179575+179587]]t={F(j)}e={I(t)}F=i[Z(-185022+195460)]end else if F<14850789-252088 then a=-146947+146949 l=K[a]F=107425+9364621 a=Q[g]C=l==a ib=C else n=r(-77644+7673892,{})e=Z(1058931-1048376)F=i[e]h=Z(499954+-489771)j=Q[O[-218123-(-218127)]]Y=Z(-228205+238440)D=i[h]U=i[Y]Y={U(n)}W={I(Y)}U=255099+-255097 y=W[U]h=D(y)D=Z(-169521+179680)t=j(h,D)j={t()}e=F(I(j))t=Q[O[-761114-(-761119)]]j=e F=t and 4163783-(-297751)or 4291378-248029 e=t end end end end else if F<15102223-(-827576)then if F<797730+14397865 then if F<15631655-644497 then if F<15022412-89129 then d=d+o R=d<=q b=not G R=b and R b=d>=q b=G and b R=b or R b=11558684-(-340462)F=R and b R=-523412+14598733 F=F or R else Y=Z(-393661+403929)n=310007+19027995977637 h=Z(706813+-696667)D=i[h]y=Q[O[-504747-(-504748)]]W=Q[O[-475789+475791]]U=W(Y,n)h=y[U]t=D[h]h=Q[O[-1027228-(-1027229)]]U=Z(-267096+277416)y=Q[O[-122372+122374]]Y=-602877+25651635347877 W=y(U,Y)D=h[W]j=t[D]W=Z(54525-44301)D=Q[O[532035+-532034]]h=Q[O[228937-228935]]U=543266+7535619244947 y=h(W,U)t=D[y]W=12064722931317-620675 y=Z(-497665+507956)e=j[t]t=Q[O[242098-242097]]D=Q[O[-723343+723345]]h=D(y,W)j=t[h]F=e[j]j=Q[O[990578-990577]]W=14551867519065-693729 t=Q[O[-93777-(-93779)]]h=Z(204417+-193999)y=-435380+21011028183788 D=t(h,y)e=j[D]t=Q[O[24012-24011]]D=Q[O[631596-631594]]y=Z(496458-486339)h=D(y,W)j=t[h]F[e]=j F=i[Z(-474382+484472)]e={}end else if F<15673579-661306 then y=Z(-777804+788253)e=Z(798739+-788593)W=-229886+2227848644107 F=i[e]t=Q[O[625998-625997]]D=Q[O[-308341-(-308343)]]h=D(y,W)e=Z(1004640-994345)j=t[h]e=F[e]D=Z(1041709-1031563)n=4551573609668-(-732035)e=e(F,j)j=P()Q[j]=e Y=Z(-104679+114945)t=i[D]y=Q[O[-184035-(-184036)]]W=Q[O[-765445+765447]]U=W(Y,n)D=Z(-507258-(-517553))h=y[U]D=t[D]D=D(t,h)Y=19611735592858-(-70674)U=Z(-687017+697449)h=Q[O[-271195+271196]]y=Q[O[591537+-591535]]W=y(U,Y)t=h[W]U=12040454908507-(-682891)W=Z(1033315+-1023260)e=D[t]D=Q[O[189794+-189793]]h=Q[O[-1016471-(-1016473)]]y=h(W,U)t=D[y]F=e[t]e=Z(-557842+567894)e=F[e]t=c(3041681-367619,{j;O[546832-546831],O[-472586-(-472588)]})e=e(F,t)j=w(j)F=i[Z(-176817-(-187301))]e={}else F=Q[O[-318225+318232]]F=F and 211037+7314856 or-751166+7916384 end end else if F<14653245-(-711990)then if F<14498311-(-791128)then n=470837+27580724249334 h=Z(241967+-231821)D=i[h]y=Q[O[-768376+768377]]W=Q[O[-993654+993656]]Y=Z(615516+-605381)U=W(Y,n)h=y[U]t=D[h]h=Q[O[1047339-1047338]]Y=22906729778200-(-679314)U=Z(-88911-(-99337))y=Q[O[29787+-29785]]W=y(U,Y)D=h[W]W=Z(432449+-422476)j=t[D]D=Q[O[-541043-(-541044)]]U=21994860596480-173310 h=Q[O[85412+-85410]]y=h(W,U)t=D[y]e=j[t]y=Z(-350716-(-360880))W=28914749325310-445286 t=Q[O[718537+-718536]]D=Q[O[654202-654200]]h=D(y,W)j=t[h]h=Z(-240663+250738)W=-959560+7583076282899 F=e[j]j=Q[O[-637450-(-637451)]]y=-278185+26757489209172 t=Q[O[-27140+27142]]D=t(h,y)e=j[D]t=Q[O[973115+-973114]]y=Z(117786-107536)D=Q[O[492091+-492089]]h=D(y,W)j=t[h]F[e]=j F=i[Z(-1028868-(-1039020))]e={}else Y=Z(537410-527147)h=Z(790882+-780736)D=i[h]y=Q[O[-637001-(-637002)]]W=Q[O[-195272+195274]]n=35002948051047-516284 U=W(Y,n)h=y[U]t=D[h]h=Q[O[816596+-816595]]y=Q[O[368475-368473]]U=Z(501920+-491616)Y=25866404323625-(-822755)W=y(U,Y)D=h[W]W=Z(376886-366789)U=28673070133968-(-49495)j=t[D]D=Q[O[1030603+-1030602]]h=Q[O[799505+-799503]]y=h(W,U)t=D[y]e=j[t]W=32803097211813-(-641030)y=Z(-80206+90768)t=Q[O[631630+-631629]]D=Q[O[-314976+314978]]h=D(y,W)j=t[h]F=e[j]y=-822309+15412232529965 h=Z(970551-960527)j=Q[O[-214345-(-214346)]]t=Q[O[-936679+936681]]D=t(h,y)e=j[D]W=25652494820514-(-461319)y=Z(-70672+81226)t=Q[O[-34139-(-34140)]]D=Q[O[-666363-(-666365)]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(585700+-575662)]end else if F<15977827-487624 then h=Z(-107290-(-117436))D=i[h]Y=Z(227090-216566)y=Q[O[243971-243970]]W=Q[O[-378475-(-378477)]]n=10683547884041-132763 U=W(Y,n)h=y[U]t=D[h]Y=11676571905599-(-222974)h=Q[O[375354+-375353]]U=Z(-979560+989690)y=Q[O[401353-401351]]W=y(U,Y)D=h[W]W=Z(-1031236-(-1041648))j=t[D]U=23354109320581-422666 D=Q[O[890811-890810]]h=Q[O[188959+-188957]]y=h(W,U)W=135983+27055221939719 t=D[y]e=j[t]y=Z(655186+-645198)t=Q[O[687340-687339]]D=Q[O[1282-1280]]h=D(y,W)j=t[h]F=e[j]h=Z(712617+-702278)j=Q[O[557017+-557016]]y=26462593561136-(-376306)t=Q[O[-409635+409637]]D=t(h,y)e=j[D]t=Q[O[-724352-(-724353)]]y=Z(-299509+310009)W=30556252807663-(-316837)D=Q[O[-346308-(-346310)]]h=D(y,W)j=t[h]F[e]=j e={}F=i[Z(601320+-591147)]else G=Z(-57835-(-68236))o=P()b=-34525-(-34625)Q[o]=X e=i[G]G=Z(274899+-264741)F=e[G]G=47832+-47831 e=F(G,b)B=-627191+627446 G=P()Q[G]=e b=309789+-309789 F=Q[U]e=F(b,B)b=P()N=-202952+212952 K=-473373+473375 C=Z(-875720-(-885903))B=-692280-(-692281)Q[b]=e g=142543+-142542 F=Q[U]L=Q[G]J=-954364+954364 e=F(B,L)B=P()Q[B]=e e=Q[U]L=e(g,K)e=-752618-(-752619)F=L==e e=Z(713240-703081)L=P()Q[L]=F K=Z(-28170-(-38166))M=i[C]l=Q[U]F=Z(-263755-(-273745))a={l(J,N)}C=M(I(a))M=Z(549265+-539269)ib=C..M g=K..ib F=R[F]F=F(R,e,g)g=P()K=Z(903705-893470)Q[g]=F e=i[K]ib=k(-681120-(-1021830),{U;o;S;D;t;d,L;g,G;B,b;n})K={e(ib)}F={I(K)}K=F F=Q[L]F=F and 4414617-660755 or 693733+2029033 end end end else if F<15411402-(-886083)then if F<17107915-866868 then if F<-453837+16667311 then H=Q[t]X=H F=H and 13373244-(-142152)or 112914+14326562 else e=n F=S F=n and 373797+8889811 or-474444+8268689 end else if F<847438+15433418 then Y=Z(-597573-(-608025))h=Z(-498477-(-508623))n=740905+11096147019270 D=i[h]y=Q[O[901790-901789]]W=Q[O[653778+-653776]]U=W(Y,n)Y=-724117+8098251217744 h=y[U]t=D[h]U=Z(-898550-(-909013))h=Q[O[-214156-(-214157)]]y=Q[O[564929-564927]]W=y(U,Y)D=h[W]W=Z(-215203+225286)j=t[D]D=Q[O[-769432+769433]]U=25517043193732-960794 h=Q[O[93384-93382]]y=h(W,U)t=D[y]e=j[t]W=20838944257520-(-1044471)t=Q[O[460034+-460033]]y=Z(294519-284473)D=Q[O[1008063+-1008061]]h=D(y,W)y=-766569+1232847680679 j=t[h]h=Z(716490-706030)F=e[j]j=Q[O[-985287-(-985288)]]t=Q[O[753454+-753452]]W=23328085061467-17645 D=t(h,y)e=j[D]y=Z(-105508-(-115980))t=Q[O[588306+-588305]]D=Q[O[-805544+805546]]h=D(y,W)j=t[h]F[e]=j F=i[Z(-790021+800127)]e={}else q=Z(-197473+208034)F=i[q]q=Z(-173172+183613)i[q]=F F=-469472+8907660 end end else if F<-786263+17421860 then if F<15837023-(-592749)then F=9218374-151299 W=Q[y]e=W else j=Q[O[-811857+811858]]e=#j j=1013896-1013896 F=e==j F=F and-894631+5337454 or-555266+11660748 end else if F<-164628+16845272 then h=Z(-315345-(-325491))n=-343239+21768605688927 D=i[h]Y=Z(-869034-(-879146))y=Q[O[-222959+222960]]W=Q[O[560871+-560869]]U=W(Y,n)h=y[U]Y=9330888970742-(-982787)U=Z(-616648-(-626769))t=D[h]h=Q[O[498337-498336]]y=Q[O[-966608-(-966610)]]W=y(U,Y)D=h[W]U=23715989085392-(-134739)W=Z(-22449+32471)j=t[D]D=Q[O[-381419+381420]]h=Q[O[-593221+593223]]y=h(W,U)W=32864752913157-(-209090)t=D[y]e=j[t]t=Q[O[764881-764880]]y=Z(676484-666102)D=Q[O[-1030034+1030036]]h=D(y,W)j=t[h]F=e[j]h=Z(338118+-327683)y=77263+17429140369893 j=Q[O[479040+-479039]]t=Q[O[714796+-714794]]D=t(h,y)e=j[D]y=Z(-731531+741548)t=Q[O[14546+-14545]]W=14048659365309-1072 D=Q[O[-1041511+1041513]]h=D(y,W)j=t[h]F[e]=j F=i[Z(-50684-(-61089))]e={}else q=-421347-(-421347)d=#v R=d==q F=R and 949105+9555322 or 705892+2798748 end end end end end end end end F=#T return I(e)end,function(i,Z)local I=D(Z)local z=function(z,O,T)return F(i,{z,O,T},Z,I)end return z end,{}return(y(-347246+9975105,{}))(I(e))end)(getfenv and getfenv()or _ENV,unpack or table[Z(-587904-(-597931))],newproxy,setmetatable,getmetatable,select,{...})end)(...)"
YDwPbCmG,Untitled,MysteriaFool,Lua,Wednesday 23rd of April 2025 10:42:08 AM CDT,"-- Get the Services.
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local Players = game:GetService(""Players"")
local Workspace = game:GetService(""Workspace"")
local CollectionService = game:GetService(""CollectionService"")
local RunService = game:GetService(""RunService"")
local TweenService = game:GetService(""TweenService"")

-- Obby Module.
local Obby = {}

-- a small function to initialize the game and start all required processes.
function Obby.OnStart() 
	Obby.CreateKillParts() -- Creates the kill parts.
	Obby.CreateSpawnLocations() -- Sets up the spawn locations.
	Obby.CreateFakePlatforms() -- Sets up fake platforms.
	Obby.CreateMovingPlatforms() -- Sets up moving platforms.
	Obby.CreateColorChangingPlatforms() -- Sets up Color-Changing platforms.

	Players.PlayerAdded:Connect(function(player: Player) -- When a new player joins the game. 
		if not player:FindFirstChild(""leaderstats"") then -- If the player doesn't have leaderstats.
			Obby.CreateLeaderstats(player) -- create it.
		end


		player.CharacterAdded:Connect(function(character) -- When the player's character is added.
			character:SetAttribute(""SpawnTime"", tick()) -- sometimes players get assigned higher stages when they first spawn into the game. this is to prevent that,
			Obby.HandlePlayerRespawn(player) -- Sets up the Respawn.
			Obby.HandlePlayerDeath(player, character) -- Sets up the Death.
		end)
	end)
end

-- Handles the Leaderstats For The Obby.
function Obby.CreateLeaderstats(player: Player)
	local leaderstats = Instance.new(""Folder"") -- Folder to hold player stats.
	leaderstats.Name = ""leaderstats"" -- folder name is ""leaderstats"".
	leaderstats.Parent = player -- folder's parent is ""player"".

	local stage = Instance.new(""NumberValue"") -- create a numbervalue inside the folder.
	stage.Name = ""Stage"" -- numbervalue's name is ""Stage""
	stage.Value = 1 -- Tracks what stage the player is at.
	stage.Parent = leaderstats -- parent it to leaderstats

	local deaths = Instance.new(""NumberValue"") -- create a numbervalue inside the folder.
	deaths.Name = ""Deaths"" -- numbervalue's name is ""Deaths""
	deaths.Value = 0 -- Tracks how many times the player has died.
	deaths.Parent = leaderstats -- parent it to leaderstats.
end

-- Handles player's respawn and Stage updates.
function Obby.HandlePlayerRespawn(player: Player)
    local leaderstats = player:FindFirstChild(""leaderstats"") -- Get the leaderstats folder for the player.
    if not leaderstats then return end -- end if no leaderstats.

    local Stages = leaderstats:FindFirstChild(""Stage"") -- Get the Stage from leaderstats.
    if not Stages then return end -- end if no Stages.

    local stage = Stages.Value -- Store the player's current stage value.

    for _, spawn in ipairs(CollectionService:GetTagged(""CheckpointSpawn"")) do -- Loop through all spawn points tagged with ""CheckpointSpawn"".
        if spawn:IsA(""SpawnLocation"") and spawn:GetAttribute(""Stage"") == stage then -- Check if the spawn is a valid ""SpawnLocation"" and matches the player's current stage.

            local character = player.Character -- Get the player's character.
            if character then -- Check if the character exists.
                character:PivotTo(spawn.CFrame) -- Respawn the player at the spawn point.
            end

            break -- Exit the loop after respawning the player at the spawn point.
        end
    end
	--[[ 
	HandlePlayerRespawn System:
	- Tag: ""CheckpointSpawn""

	- Attribute: ""Stage"" (number) - Represents the stage the player is at.
	
	- Behavior: Respawns the player at the correct checkpoint based on their current stage.
	--]]
end

-- Handles the player's death.
function Obby.HandlePlayerDeath(player: Player, character: Model)
	local deathMessages = { -- list of messages that can appear when the player dies.
	""You Died."",
	""Better luck next time."",
	""That's unlucky."",
	""Oops!"",
	""Try again!"",
	""Not like this..."",
	""Close one!"",
	""One more time!"",
}
    local humanoid = character:FindFirstChildOfClass(""Humanoid"") -- Get the player's humanoid object.
    if not humanoid then return end -- end if no humanoid.

    humanoid.Died:Connect(function() -- Triggered when the player's humanoid dies.
        local leaderstats = player:FindFirstChild(""leaderstats"") -- Find the player's leaderstats folder.
        if not leaderstats then return end -- end if no leaderstats.
        
        local deaths = leaderstats:FindFirstChild(""Deaths"") -- Find the ""Deaths"" stat in leaderstats.
        if deaths then -- If the ""Deaths"" stat exists.
            deaths.Value += 1 -- Increase the death count by 1.
        end

		Obby.ShowUIMessage(player, ""DeathUI"", deathMessages) -- Display UI After Player Dies.
    end)
	--[[ 
	HandlePlayerDeath System:
	- Event: ""Died"" (triggered when the humanoid dies)

	- Attribute: ""Deaths"" (number) - Tracks the player's death count.

	- Behavior: Increases the death count each time the player dies.
	--]]
end

-- Handles Teleporting the player to other Places.
function Obby.CreatePortal(portal: BasePart, destination: BasePart)
	portal.Touched:Connect(function(other) -- Triggered when something touches the portal.
		local char = other.Parent -- Get the character.
		if not char:FindFirstChildOfClass(""Humanoid"") then return end -- end if it's not a player character.

		local root = char:FindFirstChild(""HumanoidRootPart"") -- Get the player's root.
		if root then -- if root found.
			root.CFrame = destination * CFrame.new(0, 3, 0) -- Teleport the player to the destination, offset slightly upward to prevent getting stuck.
		end
	end)
end

-- Handles The Spawnlocations and The player's Progression.
function Obby.CreateSpawnLocations()
	local spawns = CollectionService:GetTagged(""CheckpointSpawn"") -- Get all parts tagged as checkpoint spawns.

	for _, spawn in ipairs(spawns) do -- Loop through each checkpoint part.
		spawn.Touched:Connect(function(otherPart: BasePart) -- Runs when a player touches the checkpoint.
			local character = otherPart.Parent -- Get the player's character.
			if not character or not character:IsA(""Model"") then return end -- end if no character.

			local player = Players:GetPlayerFromCharacter(character) -- Get the Player instance from the character.
			if not player then return end -- end if no player.

			local spawnTime = character:GetAttribute(""SpawnTime"") -- Cooldown to prevent triggering checkpoint too early after respawn.
			if spawnTime and tick() - spawnTime < 2 then return end -- end if cooldown hasn't passed.

			local leaderstats = player:FindFirstChild(""leaderstats"") -- Access the player's leaderstats folder.
			if not leaderstats then return end -- end if no leaderstats.

			local stageValue = leaderstats:FindFirstChild(""Stage"") -- Get the current stage number so we can update it.
			if not stageValue then return end -- end if no stagevalue found.

			local newStage = tonumber(spawn:GetAttribute(""Stage"")) -- Get the checkpoint's current stage from the ""Stage"" Attribute NumberValue.
			if newStage and newStage > stageValue.Value then -- Only update the stage if it's ahead of the player's current stage.
				stageValue.Value = newStage -- Save progress to the new stage.
				Obby.ShowUIMessage(player, ""CheckpointUI"")-- Display checkpoint reached UI to the player.
			end
		end)
	end
	--[[
	Checkpoint System:
	- Tag: ""CheckpointSpawn""
	
	- Attributes:
		""Stage"" (number) - The stage number associated with the checkpoint.
	
	- Behavior:
		- When a player touches the checkpoint, the player's stage progress is updated.
		- Displays UI for the player indicating the checkpoint has been reached.
	--]]
end

-- Handles Parts that damage players on touch.
function Obby.CreateKillParts()
    local killParts = CollectionService:GetTagged(""Kill"") -- Get all parts tagged with ""Kill"".
    
    for _, part in ipairs(killParts) do -- Loop through each part tagged as ""Kill"".

        part.Touched:Connect(function(otherPart: BasePart) -- Triggered when a player touches a ""Kill"" part.
            local character = otherPart.Parent -- Get the character model from the touched part.
            if character and character:IsA(""Model"") then -- If the touched part belongs to a character.
                local humanoid = character:FindFirstChildOfClass(""Humanoid"") -- Look for the humanoid within the character.
                if humanoid and humanoid.Health > 0 then -- Check if the humanoid exists and is alive.
                    humanoid:TakeDamage(100) -- Apply 100 damage to the player.
                end
            end
        end)
	--[[
    KillPart System:
    - Tag: ""Kill""

    - Behavior: Instantly damages the player (100 HP) on touch.
    --]]
    end
end

-- Handles Parts that disappear on player's touch.
function Obby.CreateFakePlatforms()
	local fakePlatforms = CollectionService:GetTagged(""FakePlatform"") -- Get all parts tagged with ""FakePlatForm"".

	for _, part in ipairs(fakePlatforms) do -- Loop through each fakePlatforms part. 

			part.Touched:Connect(function(otherPart) -- Triggered when a player touches a ""FakePlatForm"" part.

				if part:GetAttribute(""IsFalling"") then return end -- Debounce per platform to prevent it from triggering multiple times.

				local character = otherPart.Parent -- get the character.
				if not character or not character:IsA(""Model"") then return end -- end if character not found.

				local humanoid = character:FindFirstChildOfClass(""Humanoid"") -- find humanoid.
				if not humanoid or humanoid.Health <= 0 then return end -- end if humanoid not found.

				part:SetAttribute(""IsFalling"", true) -- Set a temporary flag.

				part.Transparency = 1 -- Make the platform invisible.
				part.CanCollide = false -- Disable collisions so players fall through.

				local resetTime = part:GetAttribute(""ResetTime"") or 3 -- Get The ResetTime Attribute or Use Default 3 seconds timer.
				task.wait(resetTime) -- Wait

				part.Transparency = 0.35 -- Make the platform visible again.
				part.CanCollide = true -- Re-enable collisions.

				part:SetAttribute(""IsFalling"", false) -- Allow it to trigger again.
			end)
		end
		--[[
		 FakePlatform System:
		 - Tag: ""FakePlatform""

		 - Attribute:
		 ""ResetTime"" (number, seconds) - How long the platform stays gone.

		 - Behavior: Disappears on player touch, reappears after reset.
		--]]
end

-- Handles Parts That move between two points using tweens.
function Obby.CreateMovingPlatforms()
	local movingPlatforms = CollectionService:GetTagged(""MovingPlatform"") -- Get all parts tagged with ""MovingPlatform"".

	for _, platform in ipairs(movingPlatforms) do -- Loop through each movingPlatforms part. 

		local targetPosition = platform:GetAttribute(""TargetPosition"") -- Get the target position attribute. This is where the platform will tween to. 
		if not targetPosition then return end -- end if no targetPosition.

		local moveTime = platform:GetAttribute(""MoveTime"") or 3 -- How long the platform takes to reach the target position.

		local endPos = Vector3.new(targetPosition.X, targetPosition.Y, targetPosition.Z) -- Convert the target position into a Vector3.
		local tweenInfo = TweenInfo.new(moveTime, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true) -- Create a TweenInfo with infinite reversals
		local tween = TweenService:Create(platform, tweenInfo, {Position = endPos}) -- Create the tween to move the platform between its current and target positions.
		tween:Play() -- Play the Tween
	end
	--[[
	MovingPlatform System:
	- Tag: ""MovingPlatform""

	- Attributes:
		""TargetPosition"" (Vector3) - The destination position for the platform.
		""MoveTime"" (number, seconds) - Duration for the platform to complete its move.

	- Behavior:
		- Tweens the platform between its current position and the target position.
		- The platform moves back and forth infinitely with Eeasing style and direction.
	--]]
end

-- Handles Color Changing Platforms that kill the player when red.
function Obby.CreateColorChangingPlatforms()
    local colorChangingPlatforms = CollectionService:GetTagged(""ColorChanging"") -- Get all parts tagged with ""ColorChanging"".

    for _, platform in ipairs(colorChangingPlatforms) do -- Loop through each platform tagged as ""ColorChanging"".

        local originalColor = platform.Color -- Store the original color of the platform.

        local function ChangeColor() -- Function to periodically change the platform color to red and back to the original color.
            while true do
                platform.Color = Color3.fromRGB(255, 0, 0) -- Change platform color to red.
                task.wait(2) -- Wait for 2 seconds before switching back to original color.

                platform.Color = originalColor -- Change platform color back to original.
                task.wait(2) -- Wait for 2 seconds before changing again.
            end
        end

        task.spawn(ChangeColor) -- Start the color changing process in a separate thread.

        platform.Touched:Connect(function(otherPart) -- Triggered when a player touches the platform.
            local character = otherPart.Parent -- Get the character model from the touched part.
            if not character or not character:IsA(""Model"") then return end -- end if no character.

            local humanoid = character:FindFirstChildOfClass(""Humanoid"") -- Look for the humanoid within the character.
            if not humanoid or humanoid.Health <= 0 then return end -- end if no humanoid.


            if platform.Color == Color3.fromRGB(255, 0, 0) then -- If the platform is red, then
                humanoid:TakeDamage(100) -- Apply damage to the player (100 HP).
            end
        end)
    end
	--[[
	ColorChangingPlatform System:
	- Tag: ""ColorChanging"" 

	- Behavior:
	- The platform changes color periodically between red and back to its original color every 2 seconds.
	- If the platform turns red and a player touches it, the player takes damage.
	- The platform color is changed in a continuous loop in the background.
	--]]
end

-- Handles displaying UI messages to the player.
function Obby.ShowUIMessage(player, guiName, messages)
	local playerGui = player:FindFirstChildOfClass(""PlayerGui"") -- Access the PlayerGui of the player.
	if not playerGui then return end -- end if no playergui.

	local ui = playerGui:FindFirstChild(guiName) or (ReplicatedStorage:FindFirstChild(guiName) and ReplicatedStorage[guiName]:Clone()) -- Clone the UI from ReplicatedStorage if it's not already in PlayerGui
	if not ui then return end -- end if no UI.

	ui.Parent = playerGui -- Parent the UI to the player's PlayerGui.

	local label = ui:FindFirstChildOfClass(""TextLabel"") -- Find the TextLabel inside the UI.
	if not label then return end -- End if no TextLabel

	if messages and #messages > 0 then -- If messages are provided and not empty,
		label.Text = messages[math.random(1, #messages)] -- Randomly pick one and set it as the label's text.
	end

	label.Visible = true -- Make the label visible.
	label.TextTransparency = 1 -- Start fully transparent.
	for i = 0, 1, 0.1 do -- Gradually make text visible.
		label.TextTransparency = 1 - i
		task.wait(0.03)
	end

	task.wait(1.5) -- Wait and Display the message briefly.

	-- UI Fade Out
	for i = 0, 1, 0.1 do -- Gradually make text invisible.
		label.TextTransparency = i
		task.wait(0.03)
	end

	label.Visible = false -- Hide the label.
	--[[
	ShowUIMessage System:

	- Parameters:
	- player (Player): The player to whom the message will be shown.
	- guiName (string): The name of the GUI object located in ReplicatedStorage.
	- messages (table of strings) [optional]: A list of messages to randomly choose from.

	- Behavior:	
	- Clones a GUI from ReplicatedStorage into the Player's PlayerGui if not already present.
	- Displays a message by fading the TextLabel in and out.
	--]]
end

return Obby"
NctPLTM4,Chaturbate with Tokens,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 10:41:18 AM CDT,89999 Accounts Posted On https://t.me/leakedbyeminem
EYuXXW8i,Crypto Accounts,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 10:25:55 AM CDT,87001 Accounts Posted On https://t.me/leakedbyeminem
8zi0wGea,PayPal with Balance,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 10:10:21 AM CDT,26145 Accounts Posted On https://t.me/leakedbyeminem
2wTMN9cP,Products.js,Ratqueenkslskskwkw,JavaScript,Wednesday 23rd of April 2025 10:10:18 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/46927/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
rkUYWqsm,Leaked Accounts - Fresh Hits,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 09:54:59 AM CDT,85873 Accounts Posted On https://t.me/leakedbyeminem
w1BGbvnc,Order.js,Ratqueenkslskskwkw,JavaScript,Wednesday 23rd of April 2025 09:54:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/00098/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
vmSHM3DJ,2025-04-23T08:50:05.576418,powerampache,PHP,Wednesday 23rd of April 2025 09:50:03 AM CDT,"1.01-79-play (79) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - passphrase does not match"",""errorType"":""system""}
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.tryAuthorize(MusicRepositoryImpl.kt:268)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl.access$tryAuthorize(MusicRepositoryImpl.kt:83)
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$tryAuthorize$1.invokeSuspend(Unknown Source:18)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:991)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loopOnce(Looper.java:232)
	at android.os.Looper.loop(Looper.java:317)
	at android.app.ActivityThread.main(ActivityThread.java:8934)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:591)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:911)

authorize() - {""errorAction"":""handshake"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - passphrase does not match"",""errorType"":""system""}"
dka1EqVm,2025-04-23T08:48:43.046921,powerampache,PHP,Wednesday 23rd of April 2025 09:48:41 AM CDT,"1.01-79-play (79) - DB: 83
retrofit2.HttpException: HTTP 404 
	at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)
	at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)
	at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:529)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)
	at java.lang.Thread.run(Thread.java:1012)

register() - cannot load data HttpException {""code"":404,""message"":"""",""detailMessage"":""HTTP 404 "",""stackTrace"":[]}"
CK6ayf9P,Market.js,Ratqueenkslskskwkw,JavaScript,Wednesday 23rd of April 2025 09:39:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33289/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ELh1Gxuy,Chaturbate with Tokens,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 09:39:14 AM CDT,37402 Accounts Posted On https://t.me/leakedbyeminem
tTFYYstQ,Untitled,Ratqueenkslskskwkw,JavaScript,Wednesday 23rd of April 2025 09:24:09 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/87173/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iUrfb3TW,Crypto Accounts,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 09:23:51 AM CDT,48645 Accounts Posted On https://t.me/leakedbyeminem
SA1rbB7a,PayPal with Balance,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 09:08:23 AM CDT,10411 Accounts Posted On https://t.me/leakedbyeminem
knzpdgiC,Untitled,Epiphemeral,JavaScript,Wednesday 23rd of April 2025 09:08:20 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/19531/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
dRmGJZf9,EXP2_Intent,vvccs,Java,Wednesday 23rd of April 2025 09:06:56 AM CDT,"#LEAVE THE NAME OF THE APP AS ""My Application""
#MainActivity.java

package com.example.myapplication;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button btnSwitchActivity = findViewById(R.id.btnSwitchActivity);
        btnSwitchActivity.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Create an Intent to start SecondActivity
                Intent intent = new Intent(MainActivity.this, SecondActivity.class);
                startActivity(intent);
            }
        });
    }
}

#############################################################################

#SecondActivity.java

package com.example.myapplication;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);

        Button btnBackToMain = findViewById(R.id.btnBackToMain);
        btnBackToMain.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Create an Intent to go back to MainActivity
                Intent intent = new Intent(SecondActivity.this, MainActivity.class);
                startActivity(intent);
                // Finish current activity
                finish();
            }
        });
    }
} 

#############################################################################

#activity_main.xml

<?xml version=""1.0"" encoding=""utf-8""?>
<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:gravity=""center""
    android:padding=""16dp"">

    <TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Main Activity""
        android:textSize=""24sp""
        android:layout_marginBottom=""32dp""/>

    <Button
        android:id=""@+id/btnSwitchActivity""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Go to Second Activity""/>

</LinearLayout>

#############################################################################

#activity_second.xml

<?xml version=""1.0"" encoding=""utf-8""?>
<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:gravity=""center""
    android:padding=""16dp"">

    <TextView
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Second Activity""
        android:textSize=""24sp""
        android:layout_marginBottom=""32dp""/>

    <Button
        android:id=""@+id/btnBackToMain""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Back to Main Activity""/>

</LinearLayout> 

#############################################################################

#AndroidManifest.xml

<?xml version=""1.0"" encoding=""utf-8""?>
<manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools"">

    <application
        android:allowBackup=""true""
        android:dataExtractionRules=""@xml/data_extraction_rules""
        android:fullBackupContent=""@xml/backup_rules""
        android:icon=""@mipmap/ic_launcher""
        android:label=""@string/app_name""
        android:roundIcon=""@mipmap/ic_launcher_round""
        android:supportsRtl=""true""
        android:theme=""@style/Theme.myapplication""
        tools:targetApi=""31"">
        <activity
            android:name="".MainActivity""
            android:exported=""true"">
            <intent-filter>
                <action android:name=""android.intent.action.MAIN"" />

                <category android:name=""android.intent.category.LAUNCHER"" />
            </intent-filter>
        </activity>
        <activity
            android:name="".SecondActivity""
            android:exported=""false"" />
    </application>

</manifest>
"
eSLp2wVq,EXP1_Layouts,vvccs,Java,Wednesday 23rd of April 2025 08:56:05 AM CDT,"#LEAVE THE NAME OF THE APP AS ""My Application""
#MainActivity.java

package com.example.myapplication;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}

#############################################################################

#activity_main.xml

<?xml version=""1.0"" encoding=""utf-8""?>
<ScrollView xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:app=""http://schemas.android.com/apk/res-auto""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent"">

    <LinearLayout
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:orientation=""vertical""
        android:padding=""16dp""
        android:gravity=""center_horizontal"">

        <!-- LinearLayout Example -->
        <LinearLayout
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""
            android:orientation=""horizontal""
            android:background=""#FFEBEE""
            android:padding=""16dp""
            android:layout_marginBottom=""16dp"">

            <TextView
                android:layout_width=""wrap_content""
                android:layout_height=""wrap_content""
                android:text=""LinearLayout""
                android:textSize=""18sp""
                android:layout_marginEnd=""16dp"" />

            <Button
                android:layout_width=""wrap_content""
                android:layout_height=""wrap_content""
                android:text=""Click Me"" />
        </LinearLayout>

        <!-- RelativeLayout Example -->
        <RelativeLayout
            android:layout_width=""match_parent""
            android:layout_height=""150dp""
            android:background=""#E8F5E9""
            android:layout_marginBottom=""16dp""
            android:padding=""16dp"">

            <TextView
                android:id=""@+id/relativeText""
                android:layout_width=""wrap_content""
                android:layout_height=""wrap_content""
                android:text=""RelativeLayout""
                android:textSize=""18sp"" />

            <Button
                android:layout_width=""wrap_content""
                android:layout_height=""wrap_content""
                android:text=""Click Me""
                android:layout_below=""@id/relativeText""
                android:layout_marginTop=""10dp"" />
        </RelativeLayout>

        <!-- ConstraintLayout Example -->
        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width=""match_parent""
            android:layout_height=""150dp""
            android:background=""#E3F2FD""
            android:padding=""16dp"">

            <TextView
                android:id=""@+id/constraintText""
                android:layout_width=""wrap_content""
                android:layout_height=""wrap_content""
                android:text=""ConstraintLayout""
                android:textSize=""18sp""
                android:layout_marginTop=""10dp""
                android:layout_marginStart=""16dp""
                app:layout_constraintStart_toStartOf=""parent""
                app:layout_constraintTop_toTopOf=""parent"" />

            <Button
                android:layout_width=""wrap_content""
                android:layout_height=""wrap_content""
                android:text=""Click Me""
                app:layout_constraintTop_toBottomOf=""@id/constraintText""
                app:layout_constraintStart_toStartOf=""parent""
                android:layout_marginTop=""10dp"" />

        </androidx.constraintlayout.widget.ConstraintLayout>

    </LinearLayout>
</ScrollView>

#############################################################################

#AndroidMainfest.xml

<?xml version=""1.0"" encoding=""utf-8""?>
<manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools"">

    <application
        android:allowBackup=""true""
        android:dataExtractionRules=""@xml/data_extraction_rules""
        android:fullBackupContent=""@xml/backup_rules""
        android:icon=""@mipmap/ic_launcher""
        android:label=""@string/app_name""
        android:roundIcon=""@mipmap/ic_launcher_round""
        android:supportsRtl=""true""
        android:theme=""@style/Theme.myapplication""
        tools:targetApi=""31"">
        <activity
            android:name="".MainActivity""
            android:exported=""true"">
            <intent-filter>
                <action android:name=""android.intent.action.MAIN"" />

                <category android:name=""android.intent.category.LAUNCHER"" />
            </intent-filter>
        </activity>
    </application>

</manifest>"
Yrhc9jPK,2025-04-23T15:53:39.887003,powerampache,PHP,Wednesday 23rd of April 2025 08:53:39 AM CDT,"1.01-78 (78) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.NullSessionException: Session is NULL
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.authToken(BaseAmpacheRepository.kt:87)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$authToken$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:942)
	at android.os.Handler.dispatchMessage(Handler.java:99)
	at android.os.Looper.loopOnce(Looper.java:210)
	at android.os.Looper.loop(Looper.java:299)
	at android.app.ActivityThread.main(ActivityThread.java:8261)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:559)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:954)

scrobble() - generic exception {""detailMessage"":""Session is NULL"",""stackTrace"":[]}"
GB9ASbPX,Untitled,Andrfaer,HTML,Wednesday 23rd of April 2025 08:44:26 AM CDT,"<size=30><color=#808080><b>FORGOTTEN PLACE</size></color></b>
 
<color=#808080>Forgotten place-лучший сервер по SCP:SL!</color> <color=#ADFF2F>Есть плагины и добавленные комнаты.</color> <color=#7FFF00>Добрая администрация всегда готовая помочь.</color>
 
<size=20>Правила Forgotten place</size> 
 
<color=#808080>[FP1]</color> <b>- Запрещены ЧИТЫ и Сторонние ПО.</b> 
 
<color=#808080>[FP2]</color> <b>- Запрещен багоюз.</b>
 
<color=#808080>[FP3]</color> <b>- Запрещено проведение рейдерских атак.</b>
 
<color=#808080>[FP4]</color> <b>- Обход наказаний.</b>
 
<color=#808080>[FP5]</color> <b>- Оскорбления и SOUNDPAD.</b>
 
<color=#808080>[FP6]</color> <b>- Помеха работе администрации.</b>
 
<color=#808080>[FP7]</color> <b>- Реклама сторонних ресурсов.</b>
 
<color=#808080>[FP8]</color> <b>- Задержка раунда.</b>
 
<color=#808080>[FP9]</color> <b>- Тим между враждебными классами.</b>
 
<color=#808080>[FP10]</color> <b>- Помеха игре союзникам.</b>

<color=#808080>[FP11]</color> <b>- Убийство без причины связанных, безоружных игроков.</b>

<color=#808080>[FP12]</color> <b>- Призыв к нарушению правил.</b>

<color=#808080>[FP13]</color> <b>- Нахождение в AFK.</b>

<color=#000000><size=20>С подробными правилами вы можете ознакомиться в DISCORD сервере проекта.</size></color>
 
<color=#4169E1>Наш Discord</color> <a href=https://discord.gg/T9YYRBE4vN></a>"
S8nENWzx,[NP] Online Shop,dzocesrce,Java,Wednesday 23rd of April 2025 08:39:22 AM CDT,"import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.Comparator;

class Product {
    final static Comparator<Product> OLDEST_FIRST = Comparator.comparing(Product::getCreatedAt);
    final static Comparator<Product> LOWEST_PRICE_FIRST = Comparator.comparing(Product::getPrice);
    final static Comparator<Product> LEAST_SOLD_FIRST = Comparator.comparing(Product::getQuantitySold);

    String category;
    String id;
    String name;
    LocalDateTime createdAt;
    double price;
    int quantitySold;


    public Product(String category, String id, String name, LocalDateTime createdAt, double price) {
        this.category = category;
        this.id = id;
        this.name = name;
        this.createdAt = createdAt;
        this.price = price;
        this.quantitySold= 0;
    }

    public int getQuantitySold() {
        return quantitySold;
    }

    public String getCategory() {
        return category;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public double getPrice() {
        return price;
    }

    public double getTransaction(int quantity){
        quantitySold+=quantity;
        return price*quantitySold;
    }

    @Override
    public String toString() {
        return ""Product{"" +
             
                ""id='"" + id + '\'' +
                "", name='"" + name + '\'' +
                "", createdAt="" + createdAt +
                "", price="" + price +
                "", quantitySold="" + quantitySold +
                '}';
    }
}
class OnlineShop {
    Map<String,Product> products;


    OnlineShop() {
    products= new HashMap<>();
    }

    void addProduct(String category, String id, String name, LocalDateTime createdAt, double price){
        products.putIfAbsent(id,new Product(category,id,name,createdAt,price));
    }

    double buyProduct(String id, int quantity) throws ProductNotFoundException{
        if(products.get(id)==null)
            throw new ProductNotFoundException(id);
        return products.get(id).getTransaction(quantity);
        //return 0.0;
    }

    List<List<Product>> listProducts(String category, ComparatorType comparatorType, int pageSize) {
        List<List<Product>> result = new ArrayList<>();
        Comparator<Product> comparator;
        if(comparatorType.equals(ComparatorType.HIGHEST_PRICE_FIRST))
            comparator= Product.LOWEST_PRICE_FIRST.reversed();
        else if(comparatorType.equals(ComparatorType.MOST_SOLD_FIRST))
            comparator= Product.LEAST_SOLD_FIRST.reversed();
        else if(comparatorType.equals(ComparatorType.LEAST_SOLD_FIRST))
            comparator= Product.LEAST_SOLD_FIRST;
        else if(comparatorType.equals(ComparatorType.LOWEST_PRICE_FIRST))
            comparator= Product.LOWEST_PRICE_FIRST;
        else if(comparatorType.equals(ComparatorType.NEWEST_FIRST))
            comparator= Product.OLDEST_FIRST.reversed();
        else
            comparator= Product.OLDEST_FIRST;

        List<Product> productsFromCategory = products.values().stream().filter(i->i.getCategory()
                .equals(category))
                .sorted(comparator)
                .collect(Collectors.toList());
        if(productsFromCategory.size()==0)
            productsFromCategory= products.values().stream().sorted(comparator).collect(Collectors.toList());
        for(int i=0;i<productsFromCategory.size();i+=pageSize){
            List<Product> page = new ArrayList<>();
            for(int j=0;j<pageSize;j++){
                if(i+j==productsFromCategory.size())
                    break;
                page.add(productsFromCategory.get(i+j));
            }

            result.add(page);
        }
        return result;
    }

}
enum ComparatorType {
    NEWEST_FIRST,
    OLDEST_FIRST,
    LOWEST_PRICE_FIRST,
    HIGHEST_PRICE_FIRST,
    MOST_SOLD_FIRST,
    LEAST_SOLD_FIRST
}

class ProductNotFoundException extends Exception {
    ProductNotFoundException(String id) {
        super(String.format(""Product with id %s does not exist in the online shop!"",id));
    }
}



public class OnlineShopTest {

    public static void main(String[] args) {
        OnlineShop onlineShop = new OnlineShop();
        double totalAmount = 0.0;
        Scanner sc = new Scanner(System.in);
        String line;
        while (sc.hasNextLine()) {
            line = sc.nextLine();
            String[] parts = line.split(""\\s+"");
            if (parts[0].equalsIgnoreCase(""addproduct"")) {
                String category = parts[1];
                String id = parts[2];
                String name = parts[3];
                LocalDateTime createdAt = LocalDateTime.parse(parts[4]);
                double price = Double.parseDouble(parts[5]);
                onlineShop.addProduct(category, id, name, createdAt, price);
            } else if (parts[0].equalsIgnoreCase(""buyproduct"")) {
                String id = parts[1];
                int quantity = Integer.parseInt(parts[2]);
                try {
                    totalAmount += onlineShop.buyProduct(id, quantity);
                } catch (ProductNotFoundException e) {
                    System.out.println(e.getMessage());
                }
            } else {
                String category = parts[1];
                if (category.equalsIgnoreCase(""null""))
                    category=null;
                String comparatorString = parts[2];
                int pageSize = Integer.parseInt(parts[3]);
                ComparatorType comparatorType = ComparatorType.valueOf(comparatorString);
                printPages(onlineShop.listProducts(category, comparatorType, pageSize));
            }
        }
        System.out.println(""Total revenue of the online shop is: "" + totalAmount);

    }

    private static void printPages(List<List<Product>> listProducts) {
        for (int i = 0; i < listProducts.size(); i++) {
            System.out.println(""PAGE "" + (i + 1));
            listProducts.get(i).forEach(System.out::println);
        }
    }
}

"
