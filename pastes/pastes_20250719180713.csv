id,title,username,language,date,content
qjFDH4wS,Sisters R2,TableTopLive,PHP,Saturday 19th of July 2025 01:01:06 PM CDT,"Champions (1995 points)

Adepta Sororitas
Strike Force (2000 points)
Champions of Faith


CHARACTERS

Canoness with Jump Pack (105 points)
• 1x Blessed halberd
• Enhancement: Mark of Devotion

Hospitaller (65 points)
• 1x Bolt pistol
1x Chirurgeon’s tools
• Enhancement: Triptych of Judgement

Hospitaller (50 points)
• 1x Bolt pistol
1x Chirurgeon’s tools

Junith Eruita (80 points)
• 1x Mace of Castigation
1x Twin Ministorum heavy flamer

Morvenn Vahl (170 points)
• Warlord
• 1x Fidelis
1x Lance of Illumination
1x Paragon missile launcher


BATTLELINE

Battle Sisters Squad (105 points)
• 1x Sister Superior
• 1x Bolt pistol
1x Chainsword
1x Close combat weapon
1x Combi-weapon
• 9x Battle Sister
• 9x Bolt pistol
7x Boltgun
9x Close combat weapon
1x Meltagun
1x Multi-melta
1x Simulacrum Imperialis

Battle Sisters Squad (105 points)
• 1x Sister Superior
• 1x Bolt pistol
1x Close combat weapon
1x Combi-weapon
1x Power weapon
• 9x Battle Sister
• 9x Bolt pistol
7x Boltgun
9x Close combat weapon
1x Meltagun
1x Multi-melta
1x Simulacrum Imperialis


DEDICATED TRANSPORTS

Immolator (115 points)
• 1x Armoured tracks
1x Heavy bolter
1x Hunter-killer missile
1x Twin multi-melta

Sororitas Rhino (75 points)
• 1x Armoured tracks
1x Hunter-killer missile
1x Storm bolter

Sororitas Rhino (75 points)
• 1x Armoured tracks
1x Hunter-killer missile
1x Storm bolter


OTHER DATASHEETS

Castigator (160 points)
• 1x Armoured tracks
1x Castigator battle cannon
3x Heavy bolter
1x Hunter-killer missile
1x Storm bolter

Castigator (160 points)
• 1x Armoured tracks
1x Castigator battle cannon
3x Heavy bolter
1x Hunter-killer missile
1x Storm bolter

Celestian Sacresants (130 points)
• 1x Sacresant Superior
• 1x Inferno pistol
1x Spear of the faithful
• 9x Celestian Sacresant
• 9x Anointed halberd
9x Bolt pistol

Celestian Sacresants (130 points)
• 1x Sacresant Superior
• 1x Inferno pistol
1x Spear of the faithful
• 9x Celestian Sacresant
• 9x Bolt pistol
9x Hallowed mace

Paragon Warsuits (210 points)
• 1x Paragon Superior
• 1x Bolt pistol
1x Multi-melta
1x Paragon storm bolters
1x Paragon war blade
• 2x Paragon
• 2x Bolt pistol
2x Multi-melta
2x Paragon storm bolters
2x Paragon war blade

Seraphim Squad (80 points)
• 1x Seraphim Superior
• 1x Bolt pistol
1x Close combat weapon
1x Plasma pistol
• 4x Seraphim
• 4x Bolt pistol
4x Close combat weapon
4x Ministorum hand flamer

Sisters Novitiate Squad (100 points)
• 1x Novitiate Superior
• 1x Bolt pistol
1x Boltgun
1x Close combat weapon
• 9x Sister Novitiate
• 6x Autogun
9x Autopistol
9x Close combat weapon
2x Ministorum flamer
1x Simulacrum Imperialis

Zephyrim Squad (80 points)
• 1x Zephyrim Superior
• 1x Plasma pistol
1x Power weapon
1x Sacred Banner
• 4x Zephyrim
• 4x Bolt pistol
4x Power Weapon"
2RUh7p63,DG R2,TableTopLive,PHP,Saturday 19th of July 2025 01:00:43 PM CDT,"Hammer (2000 Points)

Death Guard
Mortarion’s Hammer
Strike Force (2,000 Points)

CHARACTERS

Lord of Contagion (110 Points)
• 1x Manreaper

Lord of Contagion (110 Points)
• 1x Manreaper

Lord of Virulence (110 Points)
• Warlord
• 1x Power fist
• 1x Twin plague spewer
• Enhancements: Tendrilous Emissions

OTHER DATASHEETS

Chaos Predator Destructor (145 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Havoc launcher
• 2x Heavy bolter
• 1x Predator autocannon

Chaos Predator Destructor (145 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Havoc launcher
• 2x Heavy bolter
• 1x Predator autocannon

Chaos Spawn (80 Points)
• 2x Chaos Spawn
◦ 2x Hideous mutations

Deathshroud Terminators (140 Points)
• 1x Deathshroud Champion
◦ 1x Manreaper
◦ 1x Plaguespurt gauntlet
• 2x Deathshroud Terminator
◦ 2x Manreaper
◦ 2x Plaguespurt gauntlet

Deathshroud Terminators (140 Points)
• 1x Deathshroud Champion
◦ 1x Manreaper
◦ 1x Plaguespurt gauntlet
• 2x Deathshroud Terminator
◦ 2x Manreaper
◦ 2x Plaguespurt gauntlet

Foetid Bloat-Drone (90 Points)
• 1x Fleshmower
• 1x Plague probe

Foetid Bloat-Drone (90 Points)
• 1x Fleshmower
• 1x Plague probe

Foetid Bloat-Drone (90 Points)
• 1x Fleshmower
• 1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 Points)
• 1x Heavy blight launcher
• 1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 Points)
• 1x Heavy blight launcher
• 1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 Points)
• 1x Heavy blight launcher
• 1x Plague probe

Myphitic Blight-Haulers (90 Points)
• 1x Bile spurt
• 1x Gnashing maw
• 1x Missile launcher
• 1x Multi-melta

Myphitic Blight-Haulers (90 Points)
• 1x Bile spurt
• 1x Gnashing maw
• 1x Missile launcher
• 1x Multi-melta

Myphitic Blight-Haulers (90 Points)
• 1x Bile spurt
• 1x Gnashing maw
• 1x Missile launcher
• 1x Multi-melta

Poxwalkers (60 Points)
• 10x Poxwalker
◦ 10x Improvised weapon

Poxwalkers (60 Points)
• 10x Poxwalker
◦ 10x Improvised weapon

Poxwalkers (60 Points)
• 10x Poxwalker
◦ 10x Improvised weapon
"
6CXpbtMi,2025-07-19T19:38:39.352,powerampache,PHP,Saturday 19th of July 2025 12:38:39 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167912070,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167912070,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
xgwVs8T0,2025-07-19T19:38:35.990,powerampache,PHP,Saturday 19th of July 2025 12:38:36 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167908703,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167908703,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
MYpPc61v,2025-07-19T19:38:32.690,powerampache,PHP,Saturday 19th of July 2025 12:38:33 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167905397,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167905397,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
y75zdDhs,2025-07-19T19:38:29.342,powerampache,PHP,Saturday 19th of July 2025 12:38:29 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167902067,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167902067,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
UM5mauW0,2025-07-19T19:38:26.024,powerampache,PHP,Saturday 19th of July 2025 12:38:26 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167898739,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167898739,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
qmysk0Ub,2025-07-19T19:38:22.676,powerampache,PHP,Saturday 19th of July 2025 12:38:23 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167895390,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":72},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167895390,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
FkaSFemz,2025-07-19T19:38:19.046,powerampache,PHP,Saturday 19th of July 2025 12:38:19 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":71},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167891751,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":71},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167891751,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
wT0MQ5tb,2025-07-19T19:38:15.676,powerampache,PHP,Saturday 19th of July 2025 12:38:16 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":71},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167888358,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":71},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167888358,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
VVnANyZZ,2025-07-19T19:38:12.343,powerampache,PHP,Saturday 19th of July 2025 12:38:12 PM CDT,"1.01-76 (76) - DB: 83
androidx.media3.exoplayer.ExoPlaybackException: Source error
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleIoException(ExoPlayerImplInternal.java:737)
	at androidx.media3.exoplayer.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:709)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:236)
	at android.os.HandlerThread.run(HandlerThread.java:67)
Caused by: androidx.media3.datasource.HttpDataSource$HttpDataSourceException: java.net.SocketException: Connection reset
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:370)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:215)
	at java.net.SocketInputStream.read(SocketInputStream.java:144)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.readFromSocket(ConscryptEngineSocket.java:936)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.processDataFromSocket(ConscryptEngineSocket.java:900)
	at com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream.access$100(ConscryptEngineSocket.java:722)
	at com.android.org.conscrypt.ConscryptEngineSocket.doHandshake(ConscryptEngineSocket.java:238)
	at com.android.org.conscrypt.ConscryptEngineSocket.startHandshake(ConscryptEngineSocket.java:217)
	at com.android.okhttp.internal.io.RealConnection.connectTls(RealConnection.java:196)
	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:153)
	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:644)
	at androidx.media3.datasource.DefaultHttpDataSource.makeConnection(DefaultHttpDataSource.java:525)
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:364)
	... 7 more

onPlayerError HttpDataSourceException - PlaybackException 
Error Code: 2001. Erreur lors de la lecture de ce morceau.
{""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":70},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167884971,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}
 {""isRecoverable"":false,""mediaPeriodId"":{""adGroupIndex"":-1,""adIndexInAdGroup"":-1,""nextAdGroupIndex"":-1,""periodUid"":{""first"":{},""second"":{}},""windowSequenceNumber"":70},""rendererFormatSupport"":4,""rendererIndex"":-1,""type"":0,""errorCode"":2001,""extras"":{""mMap"":{}},""timestampMs"":167884971,""cause"":{""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2001,""cause"":{""detailMessage"":""Connection reset"",""stackTrace"":[{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":215,""methodName"":""read""},{""declaringClass"":""java.net.SocketInputStream"",""fileName"":""SocketInputStream.java"",""lineNumber"":144,""methodName"":""read""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":936,""methodName"":""readFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":900,""methodName"":""processDataFromSocket""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket$SSLInputStream"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":722,""methodName"":""access$100""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":238,""methodName"":""doHandshake""},{""declaringClass"":""com.android.org.conscrypt.ConscryptEngineSocket"",""fileName"":""ConscryptEngineSocket.java"",""lineNumber"":217,""methodName"":""startHandshake""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":196,""methodName"":""connectTls""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":153,""methodName"":""connectSocket""},{""declaringClass"":""com.android.okhttp.internal.io.RealConnection"",""fileName"":""RealConnection.java"",""lineNumber"":116,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":186,""methodName"":""findConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":128,""methodName"":""findHealthyConnection""},{""declaringClass"":""com.android.okhttp.internal.http.StreamAllocation"",""fileName"":""StreamAllocation.java"",""lineNumber"":97,""methodName"":""newStream""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":289,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.http.HttpEngine"",""fileName"":""HttpEngine.java"",""lineNumber"":232,""methodName"":""sendRequest""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":465,""methodName"":""execute""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpURLConnectionImpl"",""fileName"":""HttpURLConnectionImpl.java"",""lineNumber"":131,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.DelegatingHttpsURLConnection"",""fileName"":""DelegatingHttpsURLConnection.java"",""lineNumber"":90,""methodName"":""connect""},{""declaringClass"":""com.android.okhttp.internal.huc.HttpsURLConnectionImpl"",""fileName"":""HttpsURLConnectionImpl.java"",""lineNumber"":30,""methodName"":""connect""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":644,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":525,""methodName"":""makeConnection""},{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":364,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""java.net.SocketException: Connection reset"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":370,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]},""detailMessage"":""Source error"",""stackTrace"":[{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":737,""methodName"":""handleIoException""},{""declaringClass"":""androidx.media3.exoplayer.ExoPlayerImplInternal"",""fileName"":""ExoPlayerImplInternal.java"",""lineNumber"":709,""methodName"":""handleMessage""},{""declaringClass"":""android.os.Handler"",""fileName"":""Handler.java"",""lineNumber"":102,""methodName"":""dispatchMessage""},{""declaringClass"":""android.os.Looper"",""fileName"":""Looper.java"",""lineNumber"":236,""methodName"":""loop""},{""declaringClass"":""android.os.HandlerThread"",""fileName"":""HandlerThread.java"",""lineNumber"":67,""methodName"":""run""}],""suppressedExceptions"":[]}"
Z3RxSPNi,2025-07-19T20:30:47.869140,powerampache,PHP,Saturday 19th of July 2025 12:30:48 PM CDT,"1.00-68 (68) - DB: 82
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""album_songs"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - invalid session token"",""errorType"":""system""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$getSongsFromAlbum$2.invokeSuspend(SongsRepositoryImpl.kt:246)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.app.ActivityThread.main(ActivityThread.java:9638)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:619)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:929)

getSongsFromAlbum() - {""errorAction"":""album_songs"",""errorCode"":""4701"",""errorMessage"":""Invalid Login - invalid session token"",""errorType"":""system""}"
LrcvjpiC,2025-07-19T20:30:47.866376,powerampache,PHP,Saturday 19th of July 2025 12:30:48 PM CDT,"1.00-68 (68) - DB: 82
java.lang.NullPointerException: Parameter specified as non-null is null: method luci.sixsixsix.powerampache2.domain.models.User.<init>, parameter id
	at luci.sixsixsix.powerampache2.domain.models.User.<init>(Unknown Source:20)
	at luci.sixsixsix.powerampache2.data.remote.dto.UserDtoKt.toUser(UserDto.kt:94)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository.getUserNetwork(BaseAmpacheRepository.kt:128)
	at luci.sixsixsix.powerampache2.data.BaseAmpacheRepository$getUserNetwork$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
FdUrnecZ,Untitled,Scripting_King,Lua,Saturday 19th of July 2025 12:07:06 PM CDT,"--[[ 
Squid Game Round Handler
uses knit service
]]
--by the_king_here
--Geting Modules
local Knit = require(game:GetService(""ReplicatedStorage"").Packages.Knit)
local Manager = require(game.ServerScriptService.PlayerData.Manager)

--//SERVICES
local TweenService = game:GetService(""TweenService"")
local RunService = game:GetService(""RunService"")
local MPS = game:GetService(""MarketplaceService"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local InsertService = game:GetService(""InsertService"")
local SoundService = game:GetService(""SoundService"")

--Creating knit service
local MapHandlerService = Knit.CreateService{
	Name = ""MapHandlerService"",
	--these are events similar to remoteEvents which can be used to communicate with client
	Client = {
		Timer = Knit.CreateSignal(),
		Message = Knit.CreateSignal(),
		AnimateRopes = Knit.CreateSignal(),
		BlockGoingBack = Knit.CreateSignal(),
		RoundEnd = Knit.CreateSignal(),
		NameTag = Knit.CreateSignal(),
		UpdateRewardStatus = Knit.CreateSignal(),
		MusicEvent = Knit.CreateSignal(), 
		SquidMusic = Knit.CreateSignal(), 
	}
}


--//VARIABLES
local Maps = workspace:FindFirstChild(""Maps"")

local notificationRemote = ReplicatedStorage.Events:WaitForChild(""NotificationRemote"") -- RemoteEvent for notifications/it sends notification/message to all player or specific player

local RedlightSound = Maps.HadRopeMap.Doll.HumanoidRootPart:FindFirstChild(""RedLight"") --refrence to the sound that plays when the light turns red
local GreenLightSound = Maps.HadRopeMap.Doll.HumanoidRootPart:FindFirstChild(""GreenLight"") --refrence to the sound that plays when the light turns green

local collider = workspace.Maps.EasyRopemap:WaitForChild(""HitRope"").PrimaryPart --refrence to the collider (I made it because I am animating rope in client for smooth animation but it wasn't interacting with player properly like hitting so I made an invisible collider which runs on server while synced with client one and it hits the player properly because physics work properly on server sided parts) for the easy rope map
local collider2 = workspace.Maps.HadRopeMap:WaitForChild(""HitRope"").PrimaryPart

local SquidGameMusic = SoundService:FindFirstChild(""Music"") --refrence to the music which runs whenever rope starts spinning and stops whenever rop animation stops
local BackgroundMusic = SoundService:FindFirstChild(""LobbyMusic"") --refrence to the music which runs when players are in lobby and no round is on going yet


--Tables to keep track of certain actions
local PlayerInEasyRopeGame = {}
local PlayerInHardRopeGame = {}
local teleportedPlayers = {}
local HardTeleportedPlayers = {}


--I am storing developerProducts ids in a table to make it easily accessible
local Products = {
	EliminatePlayers = 3312415657, 
	SpeedTroll = 3312416017,
	KillRandomPersonTroll = 3312444642,
	TakeCoinsTroll = 3312417586,
}

--these are also developerProducts but for a pushTool
local PushProducts = {
	Push1 = 3313283431, 
	Push2 = 3313283430,
	Push5 = 3313283433,
	Push7 = 3313283424,
	Push10 = 3313286623,
}

--variables to keep track of certain actions
local ShouldAnimateDoll = false
local ShouldAnimateRopeLight = false

local IsRopeGreenLight

local EasyRopeAnimationConnection = nil
local HardRopeAnimationConnection = nil

local initialCFrameEasyRope = collider.CFrame
local initialCFrameHardRope = collider2.CFrame

--it Handles post-round teleport and cleanup everything like tables, connections etc
function MapHandlerService:handlePostRoundPlayers(lobbyTeleportPoints, animationConnection, teleportedTable, mode)
	for _, player in ipairs(game.Players:GetPlayers()) do --loop to loop through all players
		local selectedMode = player:FindFirstChild(""PlayerSelectedMode"") --returns the player selected round mode (it can be Easy OR Hard)
		if not selectedMode or selectedMode.Value ~= mode then continue end

		local char = player.Character --getting player character so I can teleport it to the looby
		if not char then continue end --skips this loop if player character does not exist

		local humanoid = char:FindFirstChildOfClass(""Humanoid"") --getting humanoid of player character
		if humanoid and humanoid.Health <= 0 then continue end --if player is death then it will not teleport it to lobby and skips the loop

		self.Client.SquidMusic:Fire(player, ""Stop"") --it stops playing the squid music which players whenever rope starts spinning

		local center = lobbyTeleportPoints:FindFirstChild(""Center"") --getting a part named ""Center"" which I placed in lobby so I can check player distance from the lobby
		if not center then continue end

		if (char.PrimaryPart.Position - center.Position).Magnitude > 130 then --it make sure that player is not already in the lobby before teleporting by checking player distance from the center of the lobby
			local allPoints = lobbyTeleportPoints:GetChildren()
			char:PivotTo(allPoints[math.random(1, #allPoints)].CFrame) --it teleports player to the random lobby teleport point
		end
	end

	--Disconnect animation connection and clear teleported data
	if animationConnection then animationConnection:Disconnect() end
	if teleportedTable then table.clear(teleportedTable) end
end


--Function to handle all logics which are neccessory to execute when rope game ends
function MapHandlerService:EndRopeGame(mode)
	local isEasy = (mode == ""Easy"") --boolen value returns true if mode is Easy and false if mode is Hard

	-- Reseting rope by assigning initial CFrame (the CFrame which rope had before it starting spinning) to the rope
	if isEasy then
		collider.CFrame = initialCFrameEasyRope
	else
		ShouldAnimateRopeLight = false
		collider2.CFrame = initialCFrameHardRope
	end

	-- Stop background music
	SquidGameMusic:Stop()

	-- Notify players in mode
	for _, player in ipairs(game.Players:GetPlayers()) do
		local selectedMode = player:FindFirstChild(""PlayerSelectedMode"") --getting player selected mode e.g easy or hard
		if not selectedMode or selectedMode.Value ~= mode then continue end
		self.Client.RoundEnd:Fire(player, mode) --Ends the round from the client side (like stopping rope animation from the client, clearing specific tables, connections etc)
	end

	local success, err = pcall(function()
		if isEasy then
			self:handlePostRoundPlayers(workspace.Maps.EasyLobby.TeleportPoints, EasyRopeAnimationConnection, teleportedPlayers, mode) --telepoprting all players back to the easy map lobby
		else
			self:handlePostRoundPlayers(workspace.Maps.HardLobby.TeleportPoints, HardRopeAnimationConnection, HardTeleportedPlayers, mode) --telepoprting all players back to hard map lobby
		end
	end)

	if not success then
		warn(""[EndRopeGame Error -"", mode, ""]:"", err) --it log error to output if error occurs since I am using pcal which caches the error but prevent script from breaking due to error so I am printing it to console so I able to know if there was any error in pcal and I will able to fix it
	end
end


--returns the number of players that are in easy or hard mode
function MapHandlerService:PlayersInMode(mode)
	local count = 0 --setting intial count as 0
	for _, player in pairs(game.Players:GetPlayers()) do
		if player:FindFirstChild(""PlayerSelectedMode"") and player.PlayerSelectedMode.Value == mode then
			count += 1 -- and then increasing it by 1 by each player that is in the specific mode
		end
	end
	return count --and then returning the count at the end
end


--function to teleport player inside the train track (starting of a round), I call this function when game starts and it teleports players to the train track of the map from where round starts it selectes track depending on the selected mode
function MapHandlerService:TeleportPlayerToTheMap(mapName)
	local map = Maps:FindFirstChild(mapName) --getting map by mapName parametor
	if not map then
		warn(""No map found with the name: "" .. tostring(mapName)) --logs the error to output if map is not found
		return --stops the execution of the function if map is not found
	end

	local isEasy = mapName == ""EasyRopemap"" --it is a boolen value which gets false if map name is HardRopeMap or other and true if it is EasyRopemap
	local isHard = mapName == ""HadRopeMap"" --it is a boolen value which gets false if map name is EasyRopemap or other and true if it is HardRopeMap

	if not isEasy and not isHard then
		warn(""Unsupported map name for rope teleport:"", mapName) --logs the error if both are false (e.g mapName is neither EasyRopemap nor HadRopeMap)
		return
	end

	local playerList = isEasy and PlayerInEasyRopeGame or PlayerInHardRopeGame --it assigns playerlist to PlayerInEasyRopeGame if isEasy is true otherwise it assigns playerList variable to PlayerInHardRopeGame table if isEasy is false
	local startPoints = map:FindFirstChild(""StartPoints"") --refrence to the points where players will be teleported when round beigns

	if not startPoints or #startPoints:GetChildren() == 0 then
		warn(""No StartPoints found in map:"", mapName) --if there is no startPoints then it stops the execution of function and logs the error to output
		return
	end

	for _, player in ipairs(game.Players:GetPlayers()) do
		local selectedMode = player:FindFirstChild(""PlayerSelectedMode"")
		if not selectedMode then continue end

		if (isEasy and selectedMode.Value ~= ""Easy"") or (isHard and selectedMode.Value ~= ""Hard"") then
			continue --it skips the loop if the map for which the loop is running is easy but player is in hard and same for the hard map where it stops if player is in easy mode while function is called with the name of hard map
		end

		local character = player.Character --refrence to the player character
		if not character then continue end --skips the loop if player character is not found

		local randomPoint = startPoints:GetChildren()[math.random(1, #startPoints:GetChildren())] --it gets the random part from a startPoints folder, it first get's all child of the startpoints folder using GetChildren() in-built function which actually returns a table then I am getting random index using math.random and in math.random I am putting minimum value to be 1 and maximum value to be number of instancs that folder have so it should never select that number which is not in the table
		if not randomPoint then continue end --if due to any reason randompoint is not found it skips this specific loop only

		--Teleports and track players
		character:PivotTo(randomPoint.CFrame)
		table.insert(playerList, player)

		--it handles on-death removal from the table
		local humanoid = character:FindFirstChildOfClass(""Humanoid"")
		if not humanoid then return end
		humanoid.Died:Connect(function() --Event that runs whenever player dies, I am using it to clear the player from the table which tracks current players in game whenever he dies because he will be no longer in game
			local index = table.find(playerList, player) --getting the index where the player is 
			if not index then return end --if player is not in playerList table then it stops the execution of the died event
			table.remove(playerList, index) --if player is found in playerList then it removes the player from the playerList table so the player is not anymore in the table which tracks only players that are currently in playing round
		end)
	end
end


--Function to teleport players to the map
function MapHandlerService:TeleportPlayerToInGame(mode)
	local mapName = (mode == ""Easy"") and ""EasyRopemap"" or ""HadRopeMap""
	local map = Maps:FindFirstChild(mapName)
	if not map then
		warn(""[TeleportPlayerToInGame] Map not found for mode:"", mode) --if no map found with the name ""mapName"" then it logs warning to the console
		return
	end

	local teleportPoints = map:FindFirstChild(""InGameTeleport"") --refrence to the teleportPoints foler, it includes multiple parts placed at different positions so all players don's get spawned on the same spot
	if not teleportPoints then
		warn(""[TeleportPlayerToInGame] No InGameTeleport folder found in map:"", mapName) --if unable to find teleport points folder then it logs warning to the console
		return
	end

	local points = teleportPoints:GetChildren() --if teleportPoints folder exist then it is getting all child of that teleportPoints folder
	if #points == 0 then
		warn(""[TeleportPlayerToInGame] No teleport points found for mode:"", mode) --if there is no child/points to teleport player in the teleportPoints folder then it logs warning to the console
		return --stops the execution of the function
	end

	local isEasy = (mode == ""Easy"") --it is a boolen value which gets true if mode is equal to ""Easy"" otherwise it get's false
	local teleportedList = isEasy and teleportedPlayers or HardTeleportedPlayers --it assigns teleportedPlayers table to teleportedList variable if isEasy is true otherwise it assigns playerList variable to HardTeleportedPlayers table
	local playerModeCheck = isEasy and ""Easy"" or ""Hard"" --it assigns the string ""Easy"" to playerModeCheck variable if isEasy is true otherwise it assigns the string ""Hard"" to playerModeCheck variable
	local playerModeCount = isEasy and self:PlayersInMode(""Easy"") or self:PlayersInMode(""Hard"") --gets the number of players who have selected specific mode

	-- Get players not yet teleported
	local unteleportedPlayers = {}
	for _, player in ipairs(game.Players:GetPlayers()) do
		local selectedMode = player:FindFirstChild(""PlayerSelectedMode"")
		if not selectedMode or selectedMode.Value ~= playerModeCheck or table.find(teleportedList, player) then continue end
		table.insert(unteleportedPlayers, player) --inserting unteleported player to the unteleportedPlayers table
	end

	if #unteleportedPlayers == 0 then
		warn(""[TeleportPlayerToInGame] All players in mode"", mode, ""have already been teleported."")
		return --if all palyer has been teleported then it stops the execution of the function
	end

	-- Shuffle players randomly
	for i = #unteleportedPlayers, 2, -1 do
		local j = math.random(1, i) --getting random value between 1 and i
		unteleportedPlayers[i], unteleportedPlayers[j] = unteleportedPlayers[j], unteleportedPlayers[i] -- Swapong player at index i with a random player at index j to shuffle the list
	end

	-- Calculate how many players still need to be teleported (cannot exceed the number of unteleported players)
	local maxToTeleport = math.clamp(playerModeCount - #teleportedList, 0, #unteleportedPlayers)

	for i = 1, maxToTeleport do --looping through the number of players that should be teleported
		local player = unteleportedPlayers[i] --it gets the next player from the shuffled list

		local character = player.Character --getting the player's character model

		local targetPoint = points[1] --picking the first available teleport point from the map

		if not character or not targetPoint then continue end --skipping the player if character is missing or teleport point doesn't exist

		character:PivotTo(targetPoint.CFrame) --it teleports the character to the selected point

		table.insert(teleportedList, player) -- Track this player as already teleported, to avoid double-teleporting
	end
end


--function to format seconds in 00:00 format
function MapHandlerService:FormatTime(seconds)
	local minutes = math.floor(seconds / 60)
	local secs = seconds % 60

	return string.format(""%02d:%02d"", minutes, secs)
end

--Functiion to increment stat values safely
function MapHandlerService:AddToValue(player, statName, amount)
	local stat = player:FindFirstChild(statName) --getting player stats with the specific name
	if not stat then return end
	stat.Value += amount --increasing player stat value with the amount given as input in parametor
end

--Functiion to increment stat values from leaderstats safely
function MapHandlerService:AddToLeaderstat(player, statName, amount)
	local stats = player:FindFirstChild(""leaderstats"") --getting player leaderstats
	local stat = stats and stats:FindFirstChild(statName) --getting player stat with the specific name
	if not stat then return end --if no stat exists then it stops the function
	stat.Value += amount --increasing player stat value with the amount given as input in parametor
end

--function to send specific player notification on client side
local function notifyPlayer(player, message)
	notificationRemote:FireClient(player, message, { Bad = false })
end


--this is a troll function which elliminates all players
local function eliminateAllPlayers(buyer)
	for _, player in ipairs(game.Players:GetPlayers()) do
		if player == buyer then continue end --this is to prevent that buyer do not get trolled itself
		local humanoid = player.Character:FindFirstChildOfClass(""Humanoid"") --getting player's humanoid
		if not humanoid then return end --if no humanoid exists then it stops the function
		humanoid:TakeDamage(humanoid.MaxHealth) --I am using inbuilt function ""TakeDamage"" to kill player
		notifyPlayer(player, ""You Got Trolled!"") --I am notifing player about the troll that is just happened
	end
end

--this is another troll function which kills random player
local function killRandomPlayer(buyer)
	local players = game.Players:GetPlayers() --getting all players in a table
	if #players <= 1 then return end

	local randomPlayer --variable to keep track of random player that is being selected
	repeat
		randomPlayer = players[math.random(1, #players)] --getting random player from the table
	until randomPlayer and randomPlayer ~= buyer

	local humanoid = randomPlayer.Character:FindFirstChildOfClass(""Humanoid"") --getting player's humanoid
	if not humanoid then return end --if no humanoid exists then it stops the function
	humanoid:TakeDamage(humanoid.MaxHealth) --I am using inbuilt function ""TakeDamage"" to kill player
end

--this is another troll function which increases the speed of all players
local function speedTroll(buyer)
	for _, player in ipairs(game.Players:GetPlayers()) do
		if player == buyer then continue end
		local humanoid = player.Character:FindFirstChildOfClass(""Humanoid"") --getting player's humanoid
		if not humanoid then return end --if no humanoid exists then it stops the function
		notifyPlayer(player, ""You Got Trolled!"") --I am then notifing player about the troll that is just happened
	end
end

--This is another troll using this troller can steal 10, 10 coins from all players
local function stealCoins(buyer)
	local totalTaken = 0 --setting initial collected coins to 0
	for _, player in ipairs(game.Players:GetPlayers()) do
		if player == buyer then continue end --if player is the buyer then it will not take coins from him
		local stats = player:FindFirstChild(""leaderstats"") --getting player's leaderstats
		local coins = stats and stats:FindFirstChild(""Coins"") --then getting coins of the player from leaderstats
		if not coins then return end --skips this loop if player don't have value named Coins inside of his leaderstats
		local amount = math.min(coins.Value, 10) --Geting the minimum value between coins and 10 so if player have more then 10 coins then it will cut 10 coins but if player have less then 10 coins then it will cut the coins that player currently own
		coins.Value -= amount --Decrease the coins of the player
		totalTaken += amount --Plus the taken coins from the player to the TotalTaken coins which actually keeps the track of the taken coins
		notifyPlayer(player, ""Someone Took Your Coins, Happy Troll!"")  --It is to notiy player that he just got trolled
	end

	local buyerStats = buyer:FindFirstChild(""leaderstats"") --getting buyers leaderstats
	local buyerCoins = buyerStats and buyerStats:FindFirstChild(""Coins"") --now getting buyers coins from leaderstats after getting leaderstats
	if not buyerCoins then return end -- if no buyer coins instance exist in leaderstats then it stops the execution of the code
	buyerCoins.Value += totalTaken --giving the coins to the troller that has been taken from all players
end

--this function handles purchasing of developer products
function MapHandlerService:HandleDeveloperProductsFunctioning(buyer, productId)
	--this table include all products and their respecitve functions
	local productActions = {
		--trolling developer products
		[Products.EliminatePlayers] = function() eliminateAllPlayers(buyer) end, --kill all players that are in game
		[Products.KillRandomPersonTroll] = function() killRandomPlayer(buyer) end, --gets random player from the game and kill him
		[Products.SpeedTroll] = function() speedTroll(buyer) end, --increases speed of all players
		[Products.TakeCoinsTroll] = function() stealCoins(buyer) end, --steal 10, 10 coins from all players and give it to the buyer

		-- Push Products
		[PushProducts.Push1]  = function() self:AddToValue(buyer, ""Pushes"", 1) end, --increases player push by 1 which is then used with the push tool to push players
		[PushProducts.Push2]  = function() self:AddToValue(buyer, ""Pushes"", 2) end, --increases player push by 2 which is then used with the push tool to push players
		[PushProducts.Push5]  = function() self:AddToValue(buyer, ""Pushes"", 5) end, --increases player push by 5 which is then used with the push tool to push players
		[PushProducts.Push7]  = function() self:AddToValue(buyer, ""Pushes"", 7) end, --increases player push by 7 which is then used with the push tool to push players
		[PushProducts.Push10] = function() self:AddToValue(buyer, ""Pushes"", 10) end, --increases player push by 10 which is then used with the push tool to push players

		-- Coin Boosts
		[3314212399] = function() self:AddToLeaderstat(buyer, ""Coins"", 50) end, --increases player coins by 50
		[3314212620] = function() self:AddToLeaderstat(buyer, ""Coins"", 100) end, --increases player coins by 100
		[3314213085] = function() self:AddToLeaderstat(buyer, ""Coins"", 300) end, --increases player coins by 300
		[3314213295] = function() self:AddToLeaderstat(buyer, ""Coins"", 500) end, --increases player coins by 500
		[3314214142] = function() self:AddToLeaderstat(buyer, ""Coins"", 1000) end, --increases player coins by 100

		-- Extra Life / Gravity / NameTag
		[3314996213] = function() self:AddToValue(buyer, ""ExtraLifes"", 1) end, --gives player 1 extraLife so if player accidently falls down from the train track it teleports player back to the nearest checkpoint that is on train track
		[3314996574] = function() self:AddToValue(buyer, ""LessGravity"", 1) end, --decreases the gravity for the player which gives him extra benifit
		[3314996930] = function() self.Client.NameTag:Fire(buyer) end,
	}

	local action = productActions[productId] --calling correct function from the product id
	if action then
		local success, err = pcall(action)
		if not success then
			warn(""[ProductHandler Error]:"", err) --if there was any error in the called function then it logs that error the output console
		end
	else
		warn(""[Unhandled Product ID]:"", productId) --if the product id wasn't in that table then it logs this out on the output console
	end
end

--Handles the developerproduct functionality after it is purcahsed
function MapHandlerService:DeveloperProductsHandler()
	MPS.PromptProductPurchaseFinished:Connect(function(userId, productId, isPurchased) --event that runs after developer product prompt has closed, either by closing or by purchasing
		if not isPurchased then return end --making sure player only get benfits if he has actually purchased product and not just opened the prompt and cencelled it
		print(""Purchase processed:"", isPurchased, productId)

		local buyer = game.Players:GetPlayerByUserId(userId)
		if not buyer then return end

		self:HandleDeveloperProductsFunctioning(buyer, productId) --Giving the benifits of purchasing product to the buyer
	end)
end

local function generateRainbowColorSequence(offset, num, wave) --function to generate a ColorSequence based on a phase offset
	local colorKeys = table.create(num + 1)	 -- Create a table with num + 1 color keypoints

	-- Loop to generate RGB values with sine waves for rainbow effect
	for i = 0, num do
		local r = 127 * math.sin(wave * i + offset) + 128 --Red channel
		local g = 127 * math.sin(wave * i + 2 * math.pi / 3 + offset) + 128 --Green channel
		local b = 127 * math.sin(wave * i + 4 * math.pi / 3 + offset) + 128 --Blue channel
		local color = Color3.fromRGB(r, g, b) --combined to Color3
		colorKeys[i + 1] = ColorSequenceKeypoint.new(i / num, color) --add keypoint at position
	end

	return ColorSequence.new(colorKeys) -- Return the full ColorSequence object
end

--function to apply rainbowTweening to the nameTag
function MapHandlerService:applyRainbowTween(label)
	local gradient = label:FindFirstChild(""UIGradient"") -- Try to find the UIGradient object inside the label (it uses for color shifting)

	-- If no gradient exists, warn and stop the function
	if not gradient then
		warn(""No UIGradient found in label"")
		return
	end

	local counter = 0 --counter to track color shift offset over time
	local wave = math.pi / 12 --controls how tightly the color wave is spaced (smaller = smoother curve)
	local num = 15 --number of gradient color steps (more means smoother transition)
	local frames = 0 --frame counter to control update frequency

	-- Continuously update the gradient color each frame
	RunService.Heartbeat:Connect(function()
		if frames % 2 ~= 0 then -- Only update every other frame (updates every 2nd frame) to reduce performance cost
			frames += 1
			return
		end

		--set new rainbow color gradient on each update
		gradient.Color = generateRainbowColorSequence(counter, num, wave)
		counter -= math.pi / 40 --shifts the wave offset slightly to create animated rainbow effect

		if counter >= math.pi * 2 then --reset counter if full cycle (2 pi) is completed to loop smoothly
			counter = 0
		end

		frames = (frames + 1) % 1000 --increment and wrap frame counter (keeps it in a reasonable range)
	end)
end

--fuction to handle gamepasses, currently it's handeling only 1 which is rainbow nametag
function MapHandlerService:HandleGamepasses()
	MPS.PromptGamePassPurchaseFinished:Connect(function(UserId, ganmepassId, IsPurchased) --event that runs after gamepass prompt has closed, either by closing or by purchasing
		if not IsPurchased then return end --making sure player only get benfits if he has actually purchased gamepass and not just opened the prompt and cencelled it
		local player = game.Players:GetPlayerByUserId(UserId) --getting the buyer using userId
		if ganmepassId == 1274510513 then --condition to check if the id of gamepass which he purchased mathces with the rainbow name tag gamepass id or not
			local NameTag = ReplicatedStorage.Assets:FindFirstChild(""nametagui"") --getting rainbow name tag from replicatedStorage
			if not NameTag then return end --if no nameTag found then it stops the execution of the event

			local PreviousNameTag = player.Character:FindFirstChild(""Head""):FindFirstChild(NameTag.Name) --get's the name tag if player already have one

			if PreviousNameTag then --if player already have name tag then it deletes it because it will probably be a simple one and not rainbow
				PreviousNameTag:Destroy() --using destroy to remove nametag 
			end

			local CloneNameTag = NameTag:Clone() --making a copy of the name tag that is in replicatedStorage
			CloneNameTag.Parent = player.Character:FindFirstChild(""Head"") --placing nametag to player's head
			CloneNameTag.ntframe.username.Text = player.Name --adding player's name to the usertanem text of nametag

			self:applyRainbowTween(CloneNameTag.ntframe.username) --finally applying the rainbow effect to the name tag
		end
	end)
end

--function the kill the player if walking, it excludes those players whose only jumping by getting only veloctiy of the x and z compnents and leaving the y one
function MapHandlerService:KillIfWalking(player: Player)
	local character = player.Character --getting player's character
	if not character then return end --stops the function if no character is found

	local humanoid = character:FindFirstChildOfClass(""Humanoid"") --getting player's humanoid
	local hrp = character:FindFirstChild(""HumanoidRootPart"") -- getting player's humanoidRootPart

	if not humanoid or not hrp or humanoid.Health <= 0 then -- if there is no humanoid or humanoidrootpart or player is died then it ignores that player by stopping the execution of function
		return
	end

	if IsRopeGreenLight then return end --if light is green then it do not kill the player and player can move freely

	local velocity = hrp.AssemblyLinearVelocity --getting player's humanoidRootPart velocty
	local horizontalSpeed = Vector3.new(velocity.X, 0, velocity.Z).Magnitude --converting x and z direction vectors values into scalar (magnitude) and ignore y component because I don't want players jump to be count as velocity

	local HORIZONTAL_SPEED_THRESHOLD = 3 --this is the speed limit in which player needs to be to prevent from getting killed

	if horizontalSpeed <= HORIZONTAL_SPEED_THRESHOLD then
		return --stops the function if player speed is equal to or less then 3
	else
		humanoid.Health = 0 --and if it is more then 3 then it kills the player
	end
end

--function to update the light state whether to green or red
function MapHandlerService:updateLightState(isGreen, redLight, greenLight)
	if isGreen then
		redLight.Material = Enum.Material.SmoothPlastic --changes the material of the light to smoothplastic to give it turned off look
		redLight.Color = Color3.new(0, 0, 0) --changes the color of the light to black to give it turned off look
		greenLight.Material = Enum.Material.Neon --changes the greenlight material of the light to neon to give it turned ON look
		greenLight.Color = Color3.new(0, 1, 0) --changes the greenlight color of the light to green
		GreenLightSound:Play() --plays the sound which says ""Green light""
	else
		redLight.Material = Enum.Material.Neon  --changes the redLight material of the light to neon to give it turned ON look
		redLight.Color = Color3.new(1, 0, 0) --changes the redLight color of the light to Red
		greenLight.Material = Enum.Material.SmoothPlastic --changes the material of the light to smoothplastic to give it turned off look
		greenLight.Color = Color3.new(0, 0, 0) --changes the color of the light to black to give it turned off look
		RedlightSound:Play()  --plays the sound which says ""Red light""
	end
end

--Handles the turning of light to green and red
function MapHandlerService:AnimateLights()
	local redLight = workspace.Maps.HadRopeMap.Light.RedLight.Part --refrence to the redlight
	local greenLight = workspace.Maps.HadRopeMap.Light.GreenLight.Part --refrence to the greenlight

	ShouldAnimateRopeLight = true
	IsRopeGreenLight = true

	--it Starts the light cycle
	task.spawn(function()
		self:updateLightState(true, redLight, greenLight) --turns greenlight ON and turn the redlight OFF

		wait(2)

		while ShouldAnimateRopeLight do
			warn(""Light loop running"")
			wait(math.random(4, 7))

			if not ShouldAnimateRopeLight then break end

			IsRopeGreenLight = not IsRopeGreenLight
			self:updateLightState(IsRopeGreenLight, redLight, greenLight) --turns light to red if green and to green if red
		end

		-- Reset lights to default (off) state
		redLight.Material = Enum.Material.SmoothPlastic
		redLight.Color = Color3.new(0, 0, 0)
		greenLight.Material = Enum.Material.SmoothPlastic
		greenLight.Color = Color3.new(0, 0, 0)
	end)
end


-- Helper: Start Rope Rotation Animation
function MapHandlerService:StartRopeAnimation(mode, collider, initialCFrame)
	local accelTime = 3  --defining duration (in seconds) for the rope to accelerate up to full speed

	local maxSpeed = math.rad(mode == ""Easy"" and 250 or 210) --Setting max rotation speed (in radians per second), different for Easy/Hard mode

	--connecting to Heartbeat to animate rope rotation every frame
	local animationConnection = RunService.Heartbeat:Connect(function()
		local rotation
		local t = math.clamp(workspace:GetServerTimeNow(), 0, accelTime) --time since animation started, clamped to acceleration time

		--calculate rope rotation angle based on acceleration curve
		if t < accelTime then
			rotation = 0.33 * maxSpeed * (t / accelTime) ^ 3 * accelTime --accelerating phase: use cubic easing for smooth buildup
		else
			rotation = 0.33 * maxSpeed * accelTime + maxSpeed * (t - accelTime) --constant speed phase after reaching full acceleration
		end

		collider.CFrame = initialCFrame * CFrame.Angles(rotation, 0, 0) --applying rotation to rope's collider relative to its initial position

		-- In Hard mode, check if players are walking during red light if they are then eliminate them
		if mode == ""Hard"" then
			for _, player in pairs(PlayerInHardRopeGame) do
				self:KillIfWalking(player)
			end
		end
	end)

	-- Store the connection reference for later cleanup (e.g disconnecting on round end)
	if mode == ""Easy"" then
		self.EasyRopeAnimationConnection = animationConnection
	else
		self.HardRopeAnimationConnection = animationConnection
	end
end

--countdown timer which counts the time for the round and ends the round when timer reaches 0
function MapHandlerService:CountDown(mode, playerList, map)
	for i = 120, 0, -1 do
		wait(1)
		local timerLabel = map.Timer.Part.SurfaceGui:FindFirstChild(""TextLabel"") --refrence to the textlabel to display the timer

		if timerLabel then continue end --if no timer label founds then it skips this loop
		timerLabel.Text = self:FormatTime(i) --format the time into 00:00 formate before displaying it on the textlabel

		if #playerList == 0 then --if all players are eliminated then stop the timer immediately
			break
		end
	end

	self:EndRopeGame(mode) --logic to handle ending of the round like clearing the tables, connections etc
	table.clear(playerList) --clearing the playerList table on round end
end

-- Starts Countdown
function MapHandlerService:StartRopeCountdown(mode, playerList)
	local mapName = (mode == ""Easy"") and ""EasyRopemap"" or ""HadRopeMap"" --if mode is equal to ""Easy"" then makes mapNam equal to EasyRopemap otherwise it makes mapName variable equal to ""HadRopeMap""
	local map = Maps[mapName] --getting map from the mapName
	if not map then
		warn(""[StartRopeCountdown] Map not found for mode:"", mode) --if no map found with that name then it logs error to the output and stops the function
		return
	end

	task.spawn(self:CountDown(mode, playerList, map)) --starts countdown, I am using task.spawm for it so it don't disturb rest of the script
end

--Binding Event Connections
function MapHandlerService:BindRopeTouchedEvents(mode, playerList)
	local map = Maps[mode == ""Easy"" and ""EasyRopemap"" or ""HadRopeMap""] --getting the map with the name EasyRopemap is mode is ""Easy"" otherwise getting map with the name HadRopeMap

	local finishConn
	finishConn = map.FinishPoint.Touched:Connect(function(hit) --event that runs whenever player bodyPart touches specific part, in this case it runs whenever player touches finishline and then it rewards the player with win and coins
		local player = game.Players:GetPlayerFromCharacter(hit.Parent) or game.Players:GetPlayerFromCharacter(hit.Parent.Parent) --I am getting player from the player character and if player body part like head, righthand, lefthand etc toched the part that it can get the character directly from hit.Parent but if handle of the accessory player wearing has touched the part then it will not able to get character from character.Parent since it's not inside character but inside character.Accessory so in that case next line will get the character using character.Parent.Parent
		if not player or not table.find(playerList, player) then return end --if no player found or player is not inside playerlist table then it stops the execution of event
		table.remove(playerList, table.find(playerList, player)) --if player is in playerList table then it will remove the player from the that table
		local stats = player:WaitForChild(""leaderstats"") --getting leaderstats of player
		stats:WaitForChild(""Wins"").Value += 1 --increases player win by 1
		stats:WaitForChild(""Coins"").Value += 50	--increases player coins by 50
		if #playerList ~= 0 then return end	 --if there is players inside playerList table then it stops the function and do not runs below lines, below lines ends the game and we don't want game to get end before time if there are players playing in the round
		self:EndRopeGame(mode) --function to end the rope game round and it clears all tables and connections that needed to clear
		table.clear(playerList) --clears the playerList table just in case if anything leftover
		finishConn:Disconnect() --disconnecting the finishpoint touche event so it won't run when anyone touch when round is over plus when next time round starts the previous connected event won't overlap with the new one
	end)
	
	--it stops player from going back if player has reached the finish area
	map.BlockGoingBack.Touched:Connect(function(hit)
		local player = game.Players:GetPlayerFromCharacter(hit.Parent) or game.Players:GetPlayerFromCharacter(hit.Parent.Parent) 
		if not player then return end
		self.Client.BlockGoingBack:Fire(player, mode) --fires client to make going back block collideable so it only get collideable for that player and still players who haven't reached ending yet will able to cross that part and reach finish line
	end)
end


--Handling the entire RopeMap round functionality
function MapHandlerService:RopeMap(mode)
	local isEasy = (mode == ""Easy"") --it is a boolen value which gets true if mode is equal to ""Easy"" otherwise it get's false
	local mapName = isEasy and ""EasyRopemap"" or ""HadRopeMap"" --if isEasy is true then it make mapName equal to ""EasyRopemap"" else it makes mapName equal to ""HadRopeMap""
	local playerList = isEasy and PlayerInEasyRopeGame or PlayerInHardRopeGame --same logic with this line
	local colliderRef = isEasy and collider or collider2 --and same logic with this
	local initialCFrameRef = isEasy and initialCFrameEasyRope or initialCFrameHardRope
	local animationConnectionRef = isEasy and ""EasyRopeAnimationConnection"" or ""HardRopeAnimationConnection""

	--teleport players and prepare map
	self:TeleportPlayerToTheMap(mapName)
	wait(8)
	--teleports player to the train track from where the actual round starts
	self:TeleportPlayerToInGame(mode)

	--start Music
	for _, player in pairs(playerList) do
		self.Client.SquidMusic:Fire(player, ""Play"")
	end

	--handles early Exit if all players get eliminated
	task.spawn(function()
		while wait(1) do
			if #playerList ~= 0 then return end
			wait(5)
			table.clear(playerList)
			self:EndRopeGame(mode) --Ends the round of rope map and clears all table and connections that are needd to
			break --stops the loop
		end
	end)

	--calling function to animate Rope
	self:StartRopeAnimation(mode, colliderRef, initialCFrameRef, animationConnectionRef)

	--playing rope animation on the client too and syncing it with the server and making sure it starts at the same time for all players
	for _, player in pairs(playerList) do
		self.Client.AnimateRopes:Fire(player, workspace:GetServerTimeNow() + 3, mode)
	end

	--animating Lights (only if it's hard mode)
	if not isEasy then
		self:AnimateLights()
	end

	--start Countdown Timer
	self:StartRopeCountdown(mode, playerList)

	--Connects Rope touch events
	self:BindRopeTouchedEvents(mode, playerList)
end

--fucntion to give player extra lifes/if player have extra lifes and accidently get fall down from the train track then it get teleported back to the train track to the closest checkpoint
function MapHandlerService.Client:ExtraLifes(player:Player)
	local ExtraLifes = player:FindFirstChild(""ExtraLifes"") --getting ExtraLifes instance from the player
	if not ExtraLifes then return end --if no ExtraLifes named instance found in player then it stops the execution of function
	ExtraLifes.Value += 1 --if extralifes found then it increases the extraLifes of player by 1
end

--gives player nametag
function MapHandlerService.Client:GiveNameTags(player:Player, TextColor)
	local NameTag = ReplicatedStorage.Assets:FindFirstChild(""nametagui"") --getting nametag from the replicatedStorage
	if not NameTag then return end --if there is no nametag then it stops the execution of the function
	local PreviousNameTag = player.Character:FindFirstChild(""Head""):FindFirstChild(NameTag.Name) --tries to find previous nameTag

	if PreviousNameTag then --if player already have nametag then it deletes it
		PreviousNameTag:Destroy() --uses inbuilt function Destory() to delete previous nametag
	end

	local CloneNameTag = NameTag:Clone() --Copies name tag from the replicatedStorage
	CloneNameTag.Parent = player.Character:FindFirstChild(""Head"") --set parent of new name tag to the player's head
	CloneNameTag.ntframe.username.Text = player.Name --sets nametag text to the username of player
	CloneNameTag.ntframe.username.UIGradient.Enabled = false --disables UIGradient of nametag
	CloneNameTag.ntframe.username.TextColor3 = TextColor --sets the textcolor of the playerName to the name player has selected using color wheel UI
end

--increases or decreases lessgravity value of player depending on argument
function MapHandlerService.Client:LessGravity(player:Player, argument)
	if argument == ""IncreaseGravityValue"" then
		local LessGravity = player:FindFirstChild(""LessGravity"") --refrence to the lessgravity value which is inside player
		if not LessGravity then return end --if no lessgravity value found in player then it stops the execution of this function
		LessGravity.Value += 1 --increases the value of the ""LessGravity"" value by 1
	else
		local LessGravity = player:FindFirstChild(""LessGravity"") --refrence to the lessgravity value which is inside player
		if not LessGravity then return end --if no lessgravity value found in player then it stops the execution of this function
		LessGravity.Value -= 1 --increases the value of the ""LessGravity"" value by 1
	end
end

-- Utility table to map asset types to accessory categories and optional transparency flags
local AssetTypes = {
	[8]  = { type = Enum.AccessoryType.Hat, transparency = nil },
	[42] = { type = Enum.AccessoryType.Face, transparency = nil },
	[46] = { type = Enum.AccessoryType.Neck, transparency = nil },
	[67] = { type = Enum.AccessoryType.LeftShoe, transparency = true }, -- Invisible character if accessoryType is leftShoe because it's actually a character
}

--destroys accessories of a specific type
local function clearAccessories(character, accessoryType)
	for _, child in pairs(character:GetDescendants()) do --looping through the players character and deleteing accessories of the specific accessory type
		if not child:IsA(""Accessory"") or child.AccessoryType ~= accessoryType then return end
		child:Destroy()
	end
end

--changing transparency of character (used for type 67 accessory)
local function setCharacterTransparency(character, alpha)
	for _, part in pairs(character:GetDescendants()) do
		if not (part:IsA(""MeshPart"") or part:IsA(""BasePart"") or part:IsA(""Decal"")) then return end
		part.Transparency = alpha
	end
end

--it loads and apply accessory
local function applyAccessory(assetId, character, accessoryType)
	local success, model = pcall(function()
		return InsertService:LoadAsset(assetId) --uses inserservice to load the asset from roblox marketplace and place it on the player's character
	end)

	if not success or not model:IsA(""Model"") then return end
	local accessory = model:FindFirstChildOfClass(""Accessory"")
	if  not accessory then return end
	accessory.AccessoryType = accessoryType
	accessory.Parent = character
	model:Destroy() --first getting the accessory from the model out and then removing model
end

--Handing Brainrot wearing, it runs whenever client firesServer
function MapHandlerService.Client:WearBrainRot(player: Player, assetId, argument, rewardTemplate)
	local success, info = pcall(function()
		return MPS:GetProductInfo(assetId)--gets the accessory info
	end)

	if not success or not info or not info.AssetTypeId then
		warn(""Failed to get asset info."") --if failed to load then it logs out warning to the console and stops the execution of the function
		return
	end

	local data = AssetTypes[info.AssetTypeId] --getting proper assettype Data from assettype id
	if not data then
		warn(""Unsupported asset type:"", info.AssetTypeId) --if unable to retrieve data (e.g asset type id is not available in that table) then it logs the warning to the console and then stops the execution of the function 
		return
	end

	local character = player.Character --getting player's character
	if not character then
		warn(""Character not found for player:"", player.Name) --if unable to find player character then it logs the warning to the console and stops the execution of the function
		return
	end

	-- Handle accessory logic
	if argument == ""Wear"" then --if argument is equal to wear then it clears out the accessory of the same assetType from player and ware the new one
		clearAccessories(character, data.type)
		if data.transparency then
			setCharacterTransparency(character, 1)
		end
		
		applyAccessory(assetId, character, data.type)
	else
		--removes accessory & restores visibility (if needed)
		clearAccessories(character, data.type)
		if data.transparency then
			setCharacterTransparency(character, 0)
		end
	end
end

--Update Countdown Timer UI
function MapHandlerService:UpdateCountdownUIForMode(mode, timeLeft)
	for _, player in ipairs(game.Players:GetPlayers()) do --it loop through all of the players and update their time that is left
		local success, selectedMode = pcall(function()
			return player:WaitForChild(""PlayerSelectedMode"", 3).Value --gets the player selected mode and if it don't exist then it keep checking for 3 sec and if still there is no then it returns error
		end)
		if not success or selectedMode ~= mode then return end

		local gui = player:FindFirstChild(""PlayerGui"") --getting the playerGUI
		if not gui then return end
		local timer = gui:FindFirstChild(""Timer"") --getting the timerUI
		if not timer then return end
		local roundTimer = timer:FindFirstChild(""RoundTimer"") --getting the timer textLabel
		if not roundTimer then return end

		roundTimer.Visible = true --making the timer visible before updating time
		roundTimer.Text = ""Round Will Start In: "" .. timeLeft --Updates the display textlabel with the latest time
		if timeLeft ~= 0 then continue end
		task.delay(1, function()
			roundTimer.Visible = false -- if timeLeft is 0 then it waits for 1 sec and then make the roundTimer UI invisible
		end)
	end
end

function MapHandlerService:HandleMode(isEasy, mode)
	local getPlayerMode = function(player)
		local success, selectedMode = pcall(function()
			return player:WaitForChild(""PlayerSelectedMode"", 3).Value --gets the player selected mode and if it don't exist then it keep checking for 3 sec and if still there is no then it returns error
		end)
		return success and selectedMode == mode
	end


	--Play Music for Players in Mode
	for _, player in ipairs(game.Players:GetPlayers()) do
		if not getPlayerMode(player) then continue end
		pcall(function()
			self.Client.MusicEvent:Fire(player, ""Play"")
		end)
	end

	-- Countdown
	for i = 20, 0, -1 do
		task.wait(1)
		print(""Countdown Running"", mode)
		self:UpdateCountdownUIForMode(mode, i) --updates the countdown UI for players
	end

	--Stops Music for players
	for _, player in ipairs(game.Players:GetPlayers()) do
		if not getPlayerMode(player) then continue end
		pcall(function()
			self.Client.MusicEvent:Fire(player, ""Stop"")
		end)
	end

	--Start Game, I am using Pcall for it so in any case it gives error the error won't break the entire script
	local success, err = pcall(function()
		self:RopeMap(mode)
	end)
	if not success then warn(""[RopeMap Error]"", mode, "":"", err) end --logs the error to the console if it gave any error

	--Wait until game finishes
	local waitTime = 0
	repeat
		wait(1)
		waitTime += 1
	until ((isEasy and #PlayerInEasyRopeGame == 0) or (not isEasy and #PlayerInHardRopeGame == 0)) or waitTime > 60
end

--Starts round Loop for rope map
function MapHandlerService:StartModeLoop(mode)
	local isEasy = (mode == ""Easy"")

	while true do
		task.wait()
		self:HandleMode(isEasy, mode)
	end
end

--KnitStart FUNCTION, this is the function which runs first whenever server starts
function MapHandlerService:KnitStart()
	self:DeveloperProductsHandler()
	repeat wait() until #game.Players:GetPlayers() > 0

	task.spawn(self:StartModeLoop(""Easy""))
	task.spawn(self:StartModeLoop(""Hard""))
end

return MapHandlerService"
g0krLAhC,ANTI-AFK,tarmaster,Lua,Saturday 19th of July 2025 11:57:17 AM CDT,"local gui = cloneref(game:GetService(""GuiService""))
local a = cloneref(game:GetService(""VirtualUser""))
local teleport = cloneref(game:GetService(""TeleportService""))

game.Players.LocalPlayer.Idled:Connect(function()
    a:CaptureController()
    a:ClickButton2(Vector2.new())
end)
gui.ErrorMessageChanged:Connect(function()
    task.spawn(function()
        while task.wait(5) do
            teleport:Teleport(game.PlaceId, game.Players.LocalPlayer)
        end
    end)
end)"
H1ayMPeK,Hitbox module (Finjer),Finjer,Lua,Saturday 19th of July 2025 11:03:56 AM CDT,"local hitboxModule = {}
--// Service //--
local Players = game:GetService('Players')
--// Etc //--
--// Function //-- 
function hitboxModule.CreateOnceHitbox(character, size, offset, showHitbox)
	
	local player = Players:GetPlayerFromCharacter(character)
	local humanoidRootPart = character:FindFirstChild('HumanoidRootPart')
	local enemyCharacter
	
	local params = OverlapParams.new()
	params.FilterDescendantsInstances = {character}
	
	if showHitbox == true then
		
		local result = Instance.new('Part')
		result.Size = size
		result.CFrame = character.HumanoidRootPart.CFrame * offset
		result.Color = Color3.fromRGB(255)
		result.Transparency = 0.9
		result.Material = Enum.Material.Plastic
		result.Anchored = true
		result.CanCollide = false
		result.CanTouch = false
		result.CanQuery = false
		result.Parent = workspace
		
		game.Debris:AddItem(result, 1)
		
	end
	
	local hitboxContent = workspace:GetPartBoundsInBox(character.HumanoidRootPart.CFrame * offset, size, params)
	
	local hitCharacter = {}
	
	for _, part in hitboxContent do
		
		if part.Parent:FindFirstChild('Humanoid') and not table.find(hitCharacter, part.Parent) then
			
			enemyCharacter = part.Parent
			table.insert(hitCharacter, enemyCharacter)
		end
		
	end
	
	return enemyCharacter
	
end
function hitboxModule.CreateHitbox(character, size, offset, showHitbox)
	local player = Players:GetPlayerFromCharacter(character)
	local humanoidRootPart = character:FindFirstChild('HumanoidRootPart')
	local enemyCharacter
	local params = OverlapParams.new()
	params.FilterDescendantsInstances = {character}
	if showHitbox == true then
		local result = Instance.new('Part')
		result.Size = size
		result.CFrame = character.HumanoidRootPart.CFrame * offset
		result.Color = Color3.fromRGB(255)
		result.Transparency = 0.9
		result.Material = Enum.Material.Plastic
		result.Anchored = true
		result.CanCollide = false
		result.CanTouch = false
		result.CanQuery = false
		result.Parent = workspace
		game.Debris:AddItem(result, 1)
	end
	local hitboxContent = workspace:GetPartBoundsInBox(character.HumanoidRootPart.CFrame * offset, size, params)
	local hitCharacter = {}
	for _, part in hitboxContent do
		if part.Parent:FindFirstChild('Humanoid') and not table.find(hitCharacter, part.Parent) then
			enemyCharacter = part.Parent
			table.insert(hitCharacter, enemyCharacter)
		end
	end
	return hitCharacter
end

--finjer

function hitboxModule.CreateHitboxWithoutChar(pos : Vector3, size, shape, showHitbox)
	
	local enemyCharacter
	if showHitbox == true then
		local result = Instance.new('Part')
		result.Size = Vector3.new(size, size, size)
		result.CFrame = CFrame.new(pos)
		result.Color = Color3.fromRGB(255)
		result.Transparency = 0.2
		result.Anchored = true
		result.CanCollide = false
		result.CanTouch = false
		result.CanQuery = false
		result.Shape = Enum.PartType[shape]
		result.Parent = workspace
		game.Debris:AddItem(result, 1)
	end
	local hitboxContent
		
	if shape == 'Ball' then
		hitboxContent = workspace:GetPartBoundsInRadius(pos, size)
	elseif shape == 'Block' then
		hitboxContent = workspace:GetPartBoundsInBox(CFrame.new(math.round(pos.X), math.round(pos.Y), math.round(pos.Z)), size)
	end
	
	local hitCharacter = {}
	for _, part in hitboxContent do
		if part.Parent:FindFirstChild('Humanoid') and not table.find(hitCharacter, part.Parent) then
			enemyCharacter = part.Parent
			table.insert(hitCharacter, enemyCharacter)
		end
	end
	return hitCharacter
end
return hitboxModule"
BjNDbYVp,hiddendevs.com / rb:@64khyraaa / dc:@arquez application 2nd try,Eymens,Lua,Saturday 19th of July 2025 10:45:23 AM CDT,"-- services
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local ServerScriptService = game:GetService(""ServerScriptService"")
local Workspace = game:GetService(""Workspace"")
local Debris = game:GetService(""Debris"")

-- modules
-- References to various server-side modules are defined here.
-- These modules manage different aspects of the game, such as item carrying, paper tracking, plot management, upgrades, and settings.
local CarryEvent = ReplicatedStorage.Remotes:WaitForChild(""CarryEvent"")
local PaperEvent = ReplicatedStorage.Remotes:WaitForChild(""PaperEvent"")
local UpgradeServer = require(ServerScriptService.Modules.UpgradeServer)
local PaperTracker = require(ServerScriptService.Modules.PaperTracker)
local PlotManager = require(ServerScriptService.Modules.PlotManager)
local Settings = require(ServerScriptService.Modules.Settings)
local Chance = require(ReplicatedStorage.Modules.Chance)

-- constants and state variables
local papersFolder = Workspace:WaitForChild(""Papers"") -- The folder in the game world where all paper instances are stored.
local pickupdist = 15 -- The maximum distance a player can be from a paper to pick it up.
local recyclercooldown = 1.2 -- The cooldown duration between consecutive sales at the recycler (selling mechanism).

-- tables to track player state
-- These tables are used to track players' current states and the papers they are carrying on the server side.
local serverCarriedPapers = {} -- [player] = { {paper=instance}, ... } -> Stores a list of paper instances currently carried by each player.
local allCarriedPaperInstances = {} -- [paperInstance] = true -> Used as a set (hashmap) for quick lookup of all paper instances currently being carried across the server.
local originalPlayerSpeeds = {} -- [player] = originalSpeed -> Stores players' original walk speeds, as their speed is reduced when carrying papers.
local sellCooldowns = {} -- [player] = true -> Tracks selling cooldowns for players to prevent spamming the selling mechanism.
local promptConnections = {} -- [player] = {Prompt=conn, Touch=conn} -> Stores connections for selling triggers (ProximityPrompt and Touched event) associated with each player's plot. This is crucial for properly disconnecting connections when a player leaves or their plot changes.

-- caches for better performance
-- Tables used to improve performance by caching frequently calculated values.
local paperCapacityCache = {} -- [player] = capacity -> Caches the maximum paper carrying capacity for each player.
local speedReductionCache = {} -- [player] = reduction -> Caches the speed reduction per paper carried for each player.
local sellBonusChanceTables = {} -- [level] = chanceTable -> Caches chance tables for different sell bonus levels, avoiding their recreation on every sale.

-- This function retrieves the maximum number of papers a player can carry.
-- It utilizes a cache to avoid recalculating the value repeatedly, which is beneficial for performance.
local function getMaxPapers(player)
    if not player then return 5 end -- Returns a default value if the player is invalid.
    if paperCapacityCache[player] then return paperCapacityCache[player] end -- Returns from cache if the value is already present.

    local maxPapers = UpgradeServer.GetValue(player, ""CarryCapacity"") or 5 -- Retrieves the carry capacity from UpgradeServer, defaults to 5 if not found.
    paperCapacityCache[player] = maxPapers -- Caches the calculated value.
    return maxPapers
end

-- This function determines how much a player slows down per paper carried.
-- It also uses a cache, similar to the previous function, for performance optimization.
local function getSpeedReduction(player)
    if not player then return 1.5 end -- Returns a default value if the player is invalid.
    if speedReductionCache[player] then return speedReductionCache[player] end -- Returns from cache if the value is already present.

    local speedReduction = UpgradeServer.GetValue(player, ""CarryBalance"") or 1.5 -- Retrieves the balance (speed reduction) value from UpgradeServer, defaults to 1.5 if not found.
    speedReductionCache[player] = speedReduction -- Caches the calculated value.
    return speedReduction
end

-- Clears the relevant caches when a player upgrades something.
-- This ensures that the next time the `getMaxPapers` or `getSpeedReduction` functions are called, they re-calculate the updated values.
local function clearCachesOnUpgrade(player, key)
    if key == ""CarryCapacity"" then
        paperCapacityCache[player] = nil -- Invalidates the paper capacity cache.
    elseif key == ""CarryBalance"" then
        speedReductionCache[player] = nil -- Invalidates the speed reduction cache.
    end
end

--visual and audio effects

-- This function makes the gears on the recycler model spin.
-- It runs in a new thread (task.spawn) to prevent blocking the main script execution.
local function spinRecyclerGears(recyclerModel, recyclerUnion)
    task.spawn(function()
        local gears = {}
        -- Finds all ""Gear"" named UnionOperation parts within the recycler model.
        for _, child in ipairs(recyclerModel:GetDescendants()) do
            if child.Name == ""Gear"" and child:IsA(""UnionOperation"") then
                table.insert(gears, child)
            end
        end

        if #gears == 0 then return end

        -- start sound
        -- Plays the recycler start-up sound. The sound is cloned and then cleaned up by the Debris service after playback.
        local sndMachineStart = recyclerModel:FindFirstChild(""MachineStart"", true)
        if sndMachineStart and recyclerUnion then
            local sound = sndMachineStart:Clone()
            sound.Parent = recyclerUnion
            sound:Play()
            Debris:AddItem(sound, 1)
        end

        -- spin them
        -- Rotates the gears for a specified duration.
        local startTime, duration, ROTATION_SPEED = os.clock(), 1.0, 120
        while os.clock() - startTime < duration do
            local dt = task.wait() -- Waits for the next frame and gets the elapsed time.
            local rotationCFrame = CFrame.Angles(0, 0, math.rad(ROTATION_SPEED * dt)) -- Calculates how much the gears should rotate in each step.
            for _, gear in ipairs(gears) do
                gear.CFrame = gear.CFrame * rotationCFrame -- Updates the gear's CFrame to apply the rotation.
            end
        end

        -- end sound
        -- Plays the recycler shut-down sound.
        local sndMachineEnd = recyclerModel:FindFirstChild(""MachineEnd"", true)
        if sndMachineEnd and recyclerUnion then
            local sound = sndMachineEnd:Clone()
            sound.Parent = recyclerUnion
            sound:Play()
            Debris:AddItem(sound, sound.TimeLength + 1)
        end
    end)
end

-- This function triggers all visual and audio effects when a player sells paper.
-- These include playing a sell sound, triggering a local screen shake for the player, and spinning the recycler gears.
local function triggerRecyclerEffects(player)
    local playerPlot = PlotManager.GetPlayerPlot(player) -- Retrieves the player's plot.
    if not playerPlot then return end

    local recyclerModel = playerPlot:FindFirstChild(""Recycler"") -- Finds the recycler model within the plot.
    if not recyclerModel then return end

    local recyclerUnion = recyclerModel:FindFirstChild(""Recycler"") -- Finds the main union part of the recycler.
    if recyclerUnion then
        local sndSell = recyclerModel:FindFirstChild(""Sell"", true) -- Finds the sell sound.
        if sndSell then
            local sound = sndSell:Clone()
            sound.Parent = recyclerUnion
            sound.PlaybackSpeed = 0.9 + math.random() * (1.05 - 0.9) -- Randomizes the playback speed of the sound.
            sound:Play()
            Debris:AddItem(sound, sound.TimeLength + 1) -- Ensures the sound is automatically cleaned up after playing.
        end
    end

    CarryEvent:FireClient(player, ""PlayLocalShake"", recyclerModel) -- Fires a client event to play a local screen shake effect for the player.
    spinRecyclerGears(recyclerModel, recyclerUnion) -- Initiates the gear spinning animation for the recycler.
end

--selling logic

-- This function calculates the total money multiplier from all boosts and mutations.
-- It accounts for cash boosts from player upgrades, mutation multipliers of the paper, and a chance-based sell bonus.
local function calculateSaleMultiplier(player, paperInstance)
    local multiplier = 1.0

    -- 1. cash boost from upgrades
    local boostLvl = UpgradeServer.GetLevel(player, ""CashBoost"") -- Gets the player's ""CashBoost"" upgrade level.
    multiplier += (0.05 * boostLvl) -- Adds a 5% bonus for each level.

    -- 2. mutations multiplier
    local mutation = paperInstance:GetAttribute(""Mutation"") -- Checks the mutation attribute of the paper.
    if mutation == ""Rainbow"" then
        multiplier *= Settings.Mutations.Rainbow.ValueMultiplier -- Applies a specific multiplier for ""Rainbow"" mutation.
    elseif mutation == ""Shiny"" then
        multiplier *= Settings.Mutations.Shiny.ValueMultiplier -- Applies a specific multiplier for ""Shiny"" mutation.
    end

    -- 3. sell bonus chance
    local sellBonusLevel = UpgradeServer.GetLevel(player, ""SellBonus"") -- Gets the player's ""SellBonus"" upgrade level.
    local sellBonusActivated = false
    if sellBonusLevel > 0 then
        -- Uses the `sellBonusChanceTables` cache to create or retrieve a chance table for each bonus level.
        if not sellBonusChanceTables[sellBonusLevel] then
            sellBonusChanceTables[sellBonusLevel] = Chance.new({
                [""Success""] = sellBonusLevel, -- Success chance is equal to the upgrade level.
                [""Fail""] = 100 - sellBonusLevel, -- Fail chance is 100 minus the upgrade level.
            })
        end

        if sellBonusChanceTables[sellBonusLevel]:Run() == ""Success"" then -- Runs the chance table to check if the bonus is triggered.
            multiplier *= 2 -- Doubles the multiplier if the bonus is activated.
            sellBonusActivated = true
        end
    end

    return multiplier, sellBonusActivated, mutation -- Returns the calculated multiplier, whether the bonus was activated, and the mutation type.
end

-- This is the main sale function that performs all the core selling logic.
-- It is called by other selling functions (e.g., when a paper is touched or a prompt is triggered).
local function processPaperSale(player, paperInstance)
    local guid = paperInstance:GetAttribute(""GUID"") -- Retrieves the unique ID of the paper.
    local baseCash = PaperTracker.SellPaper(player, guid) -- Sells the paper via the PaperTracker module and gets its base cash value.
    if not baseCash then return end -- Exits if the sale fails (e.g., invalid paper).

    -- Get all the bonuses
    local multiplier, sellBonusActivated, mutation = calculateSaleMultiplier(player, paperInstance) -- Calculates all multipliers for the paper.
    local totalCashFromSale = math.floor(baseCash * multiplier + 0.5) -- Calculates the total cash amount and rounds it.

    -- Give the player money
    UpgradeServer.AddCoins(player, totalCashFromSale) -- Adds the earned coins to the player.

    -- Inform the player they received money with cool popups
    PaperEvent:FireClient(player, ""showIncome"", totalCashFromSale) -- Sends a client event to show an income popup.
    if sellBonusActivated then
        PaperEvent:FireClient(player, ""showBonus"", ""2x BONUS!"") -- Shows a 2x bonus popup if the sell bonus was activated.
    end
    if mutation then
        PaperEvent:FireClient(player, ""showMutation"", mutation .. "" PAPER!"") -- Shows a mutation popup if a mutated paper was sold.
    end

    -- Play sounds and effects and destroy the paper
    triggerRecyclerEffects(player) -- Triggers the selling effects (sound, screen shake, gear animation).
    paperInstance:Destroy() -- Removes the sold paper instance from the game world.

    return true -- Indicates that the sale was successful.
end

-- This function sells a paper when it touches the recycler's hitbox.
local function sellTouchedPaper(paperInstance)
    local ownerId = paperInstance:GetAttribute(""OwnerId"") -- Gets the owner's User ID from the paper.
    if not ownerId then return end

    local player = Players:GetPlayerByUserId(ownerId) -- Retrieves the player object using the owner ID.
    if not player then return end

    -- Check if the paper is already being sold or carried, or if the machine is on cooldown.
    if paperInstance:GetAttribute(""IsBeingSold"") or paperInstance:GetAttribute(""IsCarried"") then return end
    if sellCooldowns[player] then return end

    -- Set cooldown to prevent spamming.
    sellCooldowns[player] = true -- Activates the selling cooldown for the player.
    task.delay(recyclercooldown, function() sellCooldowns[player] = nil end) -- Resets the cooldown after a specified duration.

    paperInstance:SetAttribute(""IsBeingSold"", true) -- Sets an attribute on the paper indicating it's being sold.

    if not processPaperSale(player, paperInstance) then -- Calls the main paper selling function.
        -- If the sale fails for some reason, unset the flag and reset the cooldown.
        paperInstance:SetAttribute(""IsBeingSold"", nil)
        sellCooldowns[player] = nil
    end
end

-- This function sells the last paper a player picked up when they activate a ProximityPrompt.
local function sellLastCarriedPaper(player)
    if sellCooldowns[player] then return end -- Exits if the selling cooldown is active.

    local stack = serverCarriedPapers[player] -- Retrieves the player's stack of carried papers.
    if not stack or #stack == 0 then return end -- Exits if the stack is empty.

    -- Cooldown to prevent spamming.
    sellCooldowns[player] = true -- Activates the selling cooldown for the player.
    task.delay(recyclercooldown, function() sellCooldowns[player] = nil end) -- Resets the cooldown after a specified duration.

    local paperData = table.remove(stack) -- Removes the topmost (most recently picked up) paper from the stack.
    local paper = paperData.paper
    if not paper or not paper.Parent then -- Exits if the paper is invalid or no longer exists in the workspace.
        sellCooldowns[player] = nil
        return
    end

    paper:SetAttribute(""IsBeingSold"", true) -- Sets an attribute on the paper indicating it's being sold.
    local success = processPaperSale(player, paper) -- Calls the main paper selling function.

    if not success then
        -- If the sale failed, re-insert the paper back into the stack.
        table.insert(stack, paperData)
        paper:SetAttribute(""IsBeingSold"", nil)
        sellCooldowns[player] = nil
        return
    end

    -- Update player speed since they are carrying one less item.
    local character = player.Character
    if not character or not originalPlayerSpeeds[player] then return end
    local humanoid = character:FindFirstChildOfClass(""Humanoid"")
    if not humanoid then return end

    if #stack == 0 then -- If the player is no longer carrying any papers, reset their speed to original and stop the carry animation.
        humanoid.WalkSpeed = originalPlayerSpeeds[player]
        originalPlayerSpeeds[player] = nil
        CarryEvent:FireClient(player, ""StopCarryAnim"")
    else -- If they are still carrying papers, adjust their speed based on the updated stack size.
        humanoid.WalkSpeed = originalPlayerSpeeds[player] - (#stack * getSpeedReduction(player))
    end
end


-- carrying and dropping logic

-- This function handles a player's request to pick up a paper.
-- It performs validation checks and then attaches the paper to the player's character, adjusting their speed.
local function handlePickupRequest(player, targetPaper)
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass(""Humanoid"")
    local playerRoot = character and character.HumanoidRootPart
    if not humanoid or not playerRoot then return end -- Exits if the player's character or essential parts are missing.

    -- Validation checks
    if not targetPaper or not targetPaper:IsDescendantOf(papersFolder) then return end -- Checks if the target paper is valid and in the correct folder.
    if targetPaper:GetAttribute(""OwnerId"") ~= player.UserId then return end -- Ensures the paper belongs to the requesting player.
    if allCarriedPaperInstances[targetPaper] then return end -- Checks if the paper is already being carried.
    if (playerRoot.Position - targetPaper.Position).Magnitude > pickupdist then return end -- Checks if the player is within pickup distance.

    local playerStack = serverCarriedPapers[player] -- Retrieves the player's paper stack.
    if #playerStack >= getMaxPapers(player) then return end -- Checks if the player has reached their maximum carrying capacity.

    -- Save old speed if not already saved.
    -- Stores the player's original speed, so it can be restored when papers are dropped.
    if not originalPlayerSpeeds[player] then
        originalPlayerSpeeds[player] = humanoid.WalkSpeed
    end

    -- Attach the paper to the player.
    -- Welds the paper to the player (using WeldConstraint) and sets its physical properties.
    local mainPart = targetPaper:IsA(""Model"") and targetPaper.PrimaryPart or targetPaper -- Determines the main part of the paper (PrimaryPart if a model, or the part itself).
    mainPart.CanCollide = false -- Disables collisions for the paper.
    mainPart.Massless = true -- Sets the paper's mass to zero, so it doesn't affect player movement.
    targetPaper:SetAttribute(""IsCarried"", true) -- Sets an attribute indicating the paper is being carried.

    local anchorPart = (#playerStack == 0) and playerRoot or playerStack[#playerStack].paper -- Determines the part to which the paper will be welded (player's HumanoidRootPart for the first paper, or the previous paper in the stack).
    local randomRotation = CFrame.Angles(0, math.rad(math.random(-5, 5)), 0) -- Adds a slight random rotation for visual variety.
    local anchorCFrame = anchorPart:IsA(""Model"") and anchorPart.PrimaryPart.CFrame or anchorPart.CFrame -- Gets the CFrame of the anchor part.

    if #playerStack == 0 then -- If it's the first paper, position it in front of the character.
        mainPart.CFrame = anchorCFrame * CFrame.new(0, 1, -2.1) * randomRotation
    else -- Position subsequent papers slightly above the previous one in the stack.
        mainPart.CFrame = anchorCFrame * CFrame.new(0, 0.1, 0) * randomRotation
    end

    local weld = Instance.new(""WeldConstraint"") -- Creates a WeldConstraint to physically attach the paper.
    weld.Part0 = mainPart
    weld.Part1 = anchorPart:IsA(""Model"") and anchorPart.PrimaryPart or anchorPart
    weld.Parent = mainPart

    -- Add to our tracking tables.
    table.insert(playerStack, { paper = targetPaper }) -- Adds the paper to the player's stack.
    allCarriedPaperInstances[targetPaper] = true -- Adds to the global set of carried paper instances.

    -- Slow the player down.
    humanoid.WalkSpeed = originalPlayerSpeeds[player] - (#playerStack * getSpeedReduction(player)) -- Reduces the player's walk speed based on the number of papers carried.

    -- Play animations and sounds.
    if #playerStack == 1 then -- If it's the first paper, start the carry animation.
        CarryEvent:FireClient(player, ""PlayCarryAnim"")
    end
    CarryEvent:FireClient(player, ""PlaySound"", ""Pickup"") -- Plays a pickup sound.
end

-- This function handles a player's request to drop a paper.
-- It detaches the paper from the player, restores its physical properties, and adjusts the player's speed.
local function handleDropRequest(player, dropCFrame)
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass(""Humanoid"")
    if not humanoid then return end

    local playerStack = serverCarriedPapers[player] -- Retrieves the player's paper stack.
    if #playerStack == 0 then return end -- Exits if the stack is empty.

    local paperData = table.remove(playerStack) -- Removes the topmost paper from the stack.
    local paperToDrop = paperData.paper

    if not paperToDrop or not paperToDrop.Parent then return end

    -- Unweld the paper and make it a normal object again.
    -- Detaches the paper from the player and restores its original physical properties.
    local mainPart = paperToDrop:IsA(""Model"") and paperToDrop.PrimaryPart or paperToDrop
    local weld = mainPart:FindFirstChildOfClass(""WeldConstraint"") -- Finds the WeldConstraint on the paper.
    if weld then weld:Destroy() end -- Destroys the WeldConstraint, freeing the paper.

    mainPart.CanCollide = true -- Re-enables collisions for the paper.
    mainPart.Massless = false -- Restores the paper's mass.
    paperToDrop:SetAttribute(""IsCarried"", nil) -- Clears the attribute indicating the paper is carried.
    mainPart:PivotTo(dropCFrame) -- Moves the paper to the specified drop location.

    -- Remove from tracking table.
    allCarriedPaperInstances[paperToDrop] = nil -- Removes from the global set of carried paper instances.

    -- Fix player speed.
    -- Adjusts the player's speed based on the remaining number of papers.
    if #playerStack == 0 and originalPlayerSpeeds[player] then -- If the player is no longer carrying any papers, restore their original speed.
        humanoid.WalkSpeed = originalPlayerSpeeds[player]
        originalPlayerSpeeds[player] = nil
    elseif originalPlayerSpeeds[player] then -- If still carrying papers, adjust speed based on the updated stack size.
        humanoid.WalkSpeed = originalPlayerSpeeds[player] - (#playerStack * getSpeedReduction(player))
    end

    -- Play animations and sounds.
    CarryEvent:FireClient(player, ""PlayDropAnim"") -- Plays a drop animation.
    CarryEvent:FireClient(player, ""PlaySound"", ""Drop"") -- Plays a drop sound.
    if #playerStack == 0 then -- If the player has dropped all papers, stop the carry animation.
        CarryEvent:FireClient(player, ""StopCarryAnim"")
    end
end

-- Listens for events from the client (player) via the CarryEvent RemoteEvent.
CarryEvent.OnServerEvent:Connect(function(player, action, data)
    if action == ""RequestPickup"" then
        handlePickupRequest(player, data) -- Handles a paper pickup request.
    elseif action == ""RequestDrop"" then
        handleDropRequest(player, data) -- Handles a paper drop request.
    end
end)


--player and connection management

-- This function is called when a player dies or leaves the game.
-- It ensures that any papers they were carrying are automatically dropped (and destroyed).
-- This prevents inconsistent states and ""stuck"" papers in the game world.
local function forceDropAll(player)
    local stack = serverCarriedPapers[player]
    if not stack or #stack == 0 then return end

    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass(""Humanoid"")
        if humanoid and originalPlayerSpeeds[player] then
            humanoid.WalkSpeed = originalPlayerSpeeds[player] -- Restores the player's speed to their original value.
        end
    end

    originalPlayerSpeeds[player] = nil -- Clears the original speed record.

    for _, paperData in ipairs(stack) do -- Iterates through each paper in the stack.
        if paperData.paper and paperData.paper.Parent then
            allCarriedPaperInstances[paperData.paper] = nil -- Removes from the global set of carried paper instances.
            paperData.paper:Destroy() -- Destroys the paper instance.
        end
    end

    serverCarriedPapers[player] = {} -- Resets the player's paper stack.
end

-- This function sets up the sell prompt and hitbox for a player's plot.
-- It includes a delay if the plot hasn't loaded yet, accommodating the asynchronous nature of plot loading.
local function connectSellTriggersForPlayer(player)
    -- Clears existing connections to prevent duplicates and ensure fresh connections are established.
    if promptConnections[player] then
        if promptConnections[player].Prompt then promptConnections[player].Prompt:Disconnect() end
        if promptConnections[player].Touch then promptConnections[player].Touch:Disconnect() end
        promptConnections[player] = nil
    end

    local playerPlot = PlotManager.GetPlayerPlot(player) -- Retrieves the player's plot.
    if not playerPlot then
        task.delay(2, function() connectSellTriggersForPlayer(player) end) -- If the plot is not found, retries after 2 seconds.
        return
    end

    local recyclerModel = playerPlot:FindFirstChild(""Recycler"") -- Finds the recycler model within the plot.
    if not recyclerModel then return end

    local prompt = recyclerModel:FindFirstChildOfClass(""ProximityPrompt"") -- Finds the ProximityPrompt within the recycler.
    local hitbox = recyclerModel:FindFirstChild(""RecycleHitbox"") -- Finds the touch hitbox within the recycler.
    local connections = {}

    if prompt then
        -- Connects the ProximityPrompt's Triggered event to the `sellLastCarriedPaper` function.
        connections.Prompt = prompt.Triggered:Connect(function() sellLastCarriedPaper(player) end)
    end

    if hitbox then
        -- Connects the hitbox's Touched event to the `sellTouchedPaper` function.
        connections.Touch = hitbox.Touched:Connect(function(hit)
            -- Validates if the touched part is a valid paper instance.
            if hit and hit.Parent and hit:IsDescendantOf(papersFolder) and hit:GetAttribute(""GUID"") then
                sellTouchedPaper(hit)
            end
        end)
    end

    promptConnections[player] = connections -- Stores the created connections.
end

-- This function sets up a player when they join the game.
-- It initializes player-specific data tables, connects attribute change signals to clear caches, and sets up selling triggers.
local function onPlayerAdded(player)
    -- Create tables to store their data.
    serverCarriedPapers[player] = {} -- Creates an empty paper stack table for the player.
    paperCapacityCache[player] = nil -- Clears player-specific caches.
    speedReductionCache[player] = nil
    sellCooldowns[player] = nil

    -- If they upgrade, we need to clear the cache.
    -- Connects signals to clear caches when ""CarryCapacity"" or ""CarryBalance"" attributes change.
    player:GetAttributeChangedSignal(""CarryCapacity""):Connect(function() clearCachesOnUpgrade(player, ""CarryCapacity"") end)
    player:GetAttributeChangedSignal(""CarryBalance""):Connect(function() clearCachesOnUpgrade(player, ""CarryBalance"") end)

    task.spawn(connectSellTriggersForPlayer, player) -- Spawns a new task to set up the player's selling triggers.

    player.CharacterAdded:Connect(function(character) -- Connects to the CharacterAdded event (triggered when a player's character spawns or respawns).
        forceDropAll(player) -- Forces dropping any leftover papers from a previous life (for a clean start).
        local humanoid = character:WaitForChild(""Humanoid"")
        humanoid.Died:Connect(function() -- Connects to the Humanoid.Died event (triggered when the player's character dies).
            forceDropAll(player) -- Ensures papers are dropped upon death.
        end)
    end)
end

-- This function cleans up data when a player leaves the game.
-- It ensures all associated data and connections are cleared to prevent memory leaks and unnecessary processing.
local function onPlayerRemoving(player)
    forceDropAll(player) -- Forces dropping all carried papers before the player leaves.

    -- Clear all data associated with the player.
    serverCarriedPapers[player] = nil
    originalPlayerSpeeds[player] = nil
    sellCooldowns[player] = nil
    paperCapacityCache[player] = nil
    speedReductionCache[player] = nil

    -- Disconnects and cleans up selling trigger connections.
    if promptConnections[player] then
        if promptConnections[player].Prompt then promptConnections[player].Prompt:Disconnect() end
        if promptConnections[player].Touch then promptConnections[player].Touch:Disconnect() end
        promptConnections[player] = nil
    end
end

-- Connect the functions to game events.
-- Binds the `onPlayerAdded` and `onPlayerRemoving` functions to the respective player events.
Players.PlayerAdded:Connect(onPlayerAdded)
Players.PlayerRemoving:Connect(onPlayerRemoving)

-- Set up for any players who are already in the game when the script runs.
-- This loop ensures that `onPlayerAdded` is called for any players already present when the script is initialized,
-- which is important for hot reloads or if the script starts late.
for _, player in ipairs(Players:GetPlayers()) do
    task.spawn(onPlayerAdded, player) -- Spawns a new task to set up each existing player.
end"
6JTrtpVG,LED Control rev_01,pleasedontcode,Arduino,Saturday 19th of July 2025 10:21:55 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: LED Control
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2025-07-19 15:21:29

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* turn on led on esp 32 itelf after i press button */
	/* on remotexy */
/****** END SYSTEM REQUIREMENTS *****/

/* START CODE */

/****** DEFINITION OF LIBRARIES *****/
// You need to include the RemoteXY library for the control interface
#include <RemoteXY.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/* USER CODE START */

uint8_t RemoteXY_CONF[] =   // 29 bytes
  { 255,1,0,0,0,22,0,19,0,0,0,0,31,1,106,200,1,1,1,0,
  1,47,67,24,24,0,2,31,0 };

// this structure defines all the variables and events of your control interface 
struct {

    // input variables
  uint8_t button_01; // =1 if button pressed, else =0

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0

} RemoteXY;   

// Define the built-in LED pin for ESP32 (usually GPIO 2)
const int ledPin = 2;

/* USER CODE END */

void setup(void)
{
  // put your setup code here, to run once:
  RemoteXY_Init(); // Initialize RemoteXY interface
  pinMode(ledPin, OUTPUT); // Initialize the LED pin as output
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  RemoteXY_Handler(); // Handle RemoteXY communication

  // Turn on LED if button is pressed
  if (RemoteXY.button_01 == 1) {
    digitalWrite(ledPin, HIGH); // Turn on the built-in LED
  } else {
    digitalWrite(ledPin, LOW); // Turn off the built-in LED
  }
}

/* END CODE */"
SKE1zVJ7,RRLoading,Stxrlight,Lua,Saturday 19th of July 2025 09:41:39 AM CDT,"-- For when teleporting to game
local text1, text2 = 'NOW', 'LOADING'
local forceContinue = false
local teleportGui
game:GetService('TeleportService').LocalPlayerArrivedFromTeleport:connect(function(gui, data)
	local player = game:GetService('Players').LocalPlayer
	local userId = player.UserId
	teleportGui = gui
	if not data or type(data) ~= 'table' or data.passcode ~= 'PBB_RTD_1214CD-14dW4289' then return end
	if data.userId ~= userId then wait(); player:Kick('Teleport error: player ID mismatch') end
	forceContinue = true
	if data.text1 and data.text2 then
		text1 = data.text1
		text2 = data.text2
	end
end)

local player = game:GetService('Players').LocalPlayer
local userId = player.UserId
local gui = Instance.new('ScreenGui')

local Timing = {
	easeOutCubic = function(d)
		return function(t)
			t = t / d - 1
			return t^3 + 1
		end
	end
}
local stepped = game:GetService('RunService').RenderStepped
function Tween(duration, timing, fn)
	if type(timing) == 'string' then
		timing = Timing[timing](duration)
	end
	local st = tick()
	fn(0)
	while true do
		stepped:wait()
		local et = tick()-st
		if et >= duration then
			fn(1)
			return
		end
		local a = et/duration
		if timing then
			a = timing(et)
		end
		if fn(a) == false then return end
	end
end
function create(instanceType)
	return function(data)
		local obj = Instance.new(instanceType)
		for k, v in pairs(data) do
			local s, e = pcall(function()
				if type(k) == 'number' then
					v.Parent = obj
				elseif type(v) == 'function' then
					obj[k]:connect(v)
				else
					obj[k] = v
				end
			end)
			if not s then
				error('Create: could not set property '..k..' of '..instanceType..' ('..e..')', 2)
			end
		end
		return obj
	end
end


--
local PlayerGui = player:WaitForChild('PlayerGui')
gui.Name = 'LoadingGui'
gui.Parent = PlayerGui

local container = create 'Frame' {
	BackgroundColor3 = Color3.new(0, 0, 0),
	BorderSizePixel = 0,
	Size = UDim2.new(1.0, 0, 1.0, 36),
	Position = UDim2.new(0.0, 0, 0.0, -36),
	Parent = gui
}
local top = create 'Frame' {
	BackgroundTransparency = 1.0,
	Size = UDim2.new(1.0, 0, 0.5, 0),-- 36),
	Position = UDim2.new(0.0, 0, 0.0, 0),-- -36),
	ClipsDescendants = true,
	Parent = container,
}
local bottom = create 'Frame' {
	BackgroundTransparency = 1.0,
	Size = UDim2.new(1.0, 0, 0.5, 0),
	Position = UDim2.new(0.0, 0, 0.5, 0),
	ClipsDescendants = true,
	Parent = container,

	create 'Frame' {
		Name = 'div',
		BackgroundTransparency = 1.0,
		Size = UDim2.new(1.0, 0, 2.0, 0),-- 36),
		Position = UDim2.new(0.0, 0, -1.0, 0),-- -36),
	}
}
function tileBackgroundTexture(frameToFill)
	frameToFill:ClearAllChildren()
	local backgroundTextureSize = Vector2.new(512, 512)
	for i = 0, math.ceil(frameToFill.AbsoluteSize.X/backgroundTextureSize.X) do
		for j = 0, math.ceil(frameToFill.AbsoluteSize.Y/backgroundTextureSize.Y) do
			create 'ImageLabel' {
				BackgroundTransparency = 1,
				Image = 'rbxasset://textures/loading/darkLoadingTexture.png',
				Position = UDim2.new(0, i*backgroundTextureSize.X, 0, j*backgroundTextureSize.Y),
				Size = UDim2.new(0, backgroundTextureSize.X, 0, backgroundTextureSize.Y),
				ZIndex = 2,
				Parent = frameToFill,
			}
		end
	end
end
local sq = create 'Frame' {
	BackgroundTransparency = 1.0,
	SizeConstraint = Enum.SizeConstraint.RelativeYY,
	Size = UDim2.new(1.0, 0, 1.0, 0),
	Parent = container,
}
local function onScreenSizeChanged(prop)
	if prop ~= 'AbsoluteSize' then return end
	tileBackgroundTexture(top)
	tileBackgroundTexture(bottom.div)
	sq.Position = UDim2.new(0.5, -sq.AbsoluteSize.X/2, 0.0, 0)
end

local circle = create 'ImageLabel' {
	BackgroundTransparency = 1.0,
	Image = 'rbxassetid://6138628626',
	ImageColor3 = Color3.new(0, 0, 0),
	Size = UDim2.new(0.0, 1, 0.0, 1),
	Position = UDim2.new(0.1, 0, 0.5, 0),
	ZIndex = 3,
	Parent = sq,
}
local ball = create 'ImageLabel' {
	BackgroundTransparency = 1.0,
	Image = 'rbxassetid://6142797850',-- 288676138
	Size = UDim2.new(0.0, 1, 0.0, 1),
	Position = UDim2.new(0.1, 0, 0.5, 0),
	ZIndex = 4,
	Parent = sq,
}
spawn(function()
	local s = tick()
	while ball.Parent do
		stepped:wait()
		ball.Rotation = (tick()-s)*250
	end
end)
local s = 0.1
local nowcontainer = create 'Frame' {
	BackgroundTransparency = 1.0,
	ClipsDescendants = true,
	Size = UDim2.new(1.0, 0, s, 0),
	Position = UDim2.new(-0.5-s*2.5/2, 0, 0.5-s/2, 0),
	Parent = sq,
}
wait(.1)
local now = create 'TextLabel' {
	BackgroundTransparency = 1.0,
	Size = UDim2.new(1.0, 0, 1.0, 0),
	Position = UDim2.new(1.0, 0, 0.0, 0),
	Text = text1,
	TextXAlignment = Enum.TextXAlignment.Right,
	Font = Enum.Font.SourceSansBold,
	TextScaled = true,
	TextColor3 = Color3.new(.3, .3, .3),
	ZIndex = 5,
	Parent = nowcontainer,
}
local loadingcontainer = create 'Frame' {
	BackgroundTransparency = 1.0,
	ClipsDescendants = true,
	Size = UDim2.new(1.0, 0, s, 0),
	Position = UDim2.new(0.5+s*2.5/2, 0, 0.5-s/2, 0),
	Parent = sq,
}
local loading = create 'TextLabel' {
	BackgroundTransparency = 1.0,
	Size = UDim2.new(1.0, 0, 1.0, 0),
	Position = UDim2.new(-1.0, 0, 0.0, 0),
	Text = text2,
	TextXAlignment = Enum.TextXAlignment.Left,
	Font = Enum.Font.SourceSansBold,
	TextScaled = true,
	TextColor3 = Color3.new(.3, .3, .3),
	ZIndex = 5,
	Parent = loadingcontainer,
}

wait(.1)
local ch = gui.Changed:connect(onScreenSizeChanged)
onScreenSizeChanged('AbsoluteSize')
game:GetService('ReplicatedFirst'):RemoveDefaultLoadingScreen()
wait(.1)
if teleportGui then
	teleportGui:Destroy()
end

local b = s*2.25
delay(.5, function()
	Tween(.7, 'easeOutCubic', function(a)
		ball.Size = UDim2.new(b*a, 0, b*a, 0)
		ball.Position = UDim2.new(0.5-b*a/2, 0, 0.5-b*a/2, 0)
	end)
end)
Tween(1, 'easeOutCubic', function(a)
	top.Position = UDim2.new(0.0, 0, -s/2*a, 0)-- -36)
	bottom.Position = UDim2.new(0.0, 0, 0.5+s/2*a, 0)
	circle.Size = UDim2.new(s*2.5*a, 0, s*2.5*a, 0)
	circle.Position = UDim2.new(0.5-s*2.5*a/2, 0, 0.5-s*2.5*a/2, 0)
end)
Tween(.5, 'easeOutCubic', function(a)
	now.Position = UDim2.new(1-a, 0, -0.01, 0)
	loading.Position = UDim2.new(-1+a, 0, -0.01, 0)
end)


wait(.5)
while true do
	wait(.5)
	if game:IsLoaded() then break end
	wait(.5)
end
game:GetService('StarterGui'):SetCoreGuiEnabled(Enum.CoreGuiType.All, false)

local comTag = script.Parent:WaitForChild('Waiting')

local fader = create 'Frame' {
	BackgroundColor3 = Color3.new(0, 0, 0),
	BorderSizePixel = 0,
	Size = UDim2.new(1.0, 0, 1.0, 0),
	ZIndex = 10,
	Parent = container,
}
Tween(1.6, 'easeOutCubic', function(a)
	local o = 1-a
	top.Position = UDim2.new(0.0, 0, -s/2*o, 0)-- -36)
	bottom.Position = UDim2.new(0.0, 0, 0.5+s/2*o, 0)
	circle.Size = UDim2.new(s*2.5*o, 0, s*2.5*o, 0)
	circle.Position = UDim2.new(0.5-s*2.5*o/2, 0, 0.5-s*2.5*o/2, 0)

	now.Position = UDim2.new(a, 0, -0.01, 0)
	loading.Position = UDim2.new(-a, 0, -0.01, 0)

	ball.ImageColor3 = Color3.new(o, o, o)
	ball.Size = UDim2.new(b+3*a, 0, b+3*a, 0)
	ball.Position = UDim2.new(0.5-b/2-3*a/2, 0, 0.5-b/2-3*a/2, 0)
	fader.BackgroundTransparency = o
end)

ch:disconnect()
if gui then
	comTag.Value = gui
end
if forceContinue then
	comTag.Name = 'ForceContinue'
else
	comTag.Name = 'Ready'
end
script:Destroy()"
EXKqgMcD,2.1I,GochiPC,Lua,Saturday 19th of July 2025 09:26:42 AM CDT,"term.clear()
term.setCursorPos(1,1)
print(""Please wait..."")
sleep(3)
term.clear()
term.setCursorPos(1,1)
print(""Welcome to MineOS 2.1 Installer"")
print(""type start/exit"")
print(""warning if you have other os it will removes startup file"")
local choice = read()

if choice == ""start"" then
  print(""Please wait this will take secs"")
  sleep(1)
  shell.run(""delete startup.lua"")
  shell.run(""pastebin get 1uU92QqU startup.lua"")
  print(""rebooting..."")
  sleep(3)
  os.reboot()
elseif choice == ""exit"" then
  print(""exiting the installer"")
  return
else
  print(""Invalid option"")
end"
arF9MZFV,2.0I,GochiPC,Lua,Saturday 19th of July 2025 09:20:42 AM CDT,"term.clear()
term.setCursorPos(1,1)
print(""Please wait..."")
sleep(3)
term.clear()
term.setCursorPos(1,1)
print(""Welcome to MineOS 2.0 Installer"")
print(""type start/exit"")
print(""warning if you have other os it will removes startup file"")
local choice = read()

if choice == ""start"" then
  print(""Please wait this will take secs"")
  sleep(1)
  shell.run(""delete startup.lua"")
  shell.run(""pastebin get VS5buKVU startup.lua"")
  print(""rebooting..."")
  sleep(3)
  os.reboot()
elseif choice == ""exit"" then
  print(""exiting the installer"")
  return
else
  print(""Invalid option"")
end
"
6f3HuFXH,Engine.ini - DA_RADEON,zerox2501,INI file,Saturday 19th of July 2025 09:06:29 AM CDT,"[SystemSettings]
r.FidelityFX.FSR3.UseNativeDX12=1
r.FidelityFX.FI.overrideSwapChainDX12=1
D3D12.PSO.DriverOptimizedDiskCache=1
D3D12.PSO.DiskCache=0

[/Script/Engine.RendererSettings]
niagara.CreateShadersOnLoad=1
r.AsyncPipelineCompile=1
r.Cache.DrawInterpolationPoints=1
r.Cache.UpdateEveryFrame=0
r.CompileShadersForDevelopment=0
r.CreateShadersOnLoad=0
r.ShaderComplexity.CacheShaders=1
r.ShaderPipelineCache.AlwaysGenerateOSCache=0
r.ShaderPipelineCache.BackgroundBatchSize=5
r.ShaderPipelineCache.BackgroundBatchTime=10
r.ShaderPipelineCache.BatchSize=256
r.ShaderPipelineCache.BatchTime=82
r.ShaderPipelineCache.Enabled=1
r.ShaderPipelineCache.GameFileMaskEnabled=1
r.ShaderPipelineCache.LazyLoadShadersWhenPSOCacheIsPresent=1
r.ShaderPipelineCache.LogPSO=1
r.ShaderPipelineCache.PrecompileBatchSize=256
r.ShaderPipelineCache.PrecompileBatchTime=52
r.ShaderPipelineCache.PreOptimizeEnabled=1
r.ShaderPipelineCache.ReportPSO=0
r.ShaderPipelineCache.SaveBoundPSOLog=1
r.ShaderPipelineCache.SaveUserCache=1
r.ShaderPipelineCache.StartupMode=2
r.ShaderPipelines=1
r.Shaders.FastMath=1
r.Shaders.Optimize=1
r.Shaders.ZeroInitialise=1
r.Shadow.CachePreshadow=1
r.UseAsyncShaderPrecompilation=1
r.UseShaderBinaryCache=1
r.UseShaderCaching=1
r.UseShaderPredraw=1
"
sbtRpSKR,DG,TableTopLive,PHP,Saturday 19th of July 2025 09:02:23 AM CDT,"Virulent Vectorium (1995 Points)

Death Guard
Virulent Vectorium
Strike Force (2,000 Points)

CHARACTERS

Biologus Putrifier (70 Points)
• 1x Hyper blight grenades
• 1x Injector pistol
• 1x Plague knives
• Enhancements: Arch Contaminator

Daemon Prince of Nurgle (215 Points)
• Warlord
• 1x Hellforged weapons
• 1x Infernal cannon
• Enhancements: Revolting Regeneration

Foul Blightspawn (60 Points)
• 1x Close combat weapon
• 1x Plague sprayer

Lord of Poxes (75 Points)
• 1x Great plague blade
• 1x Plasma pistol

Tallyman (40 Points)
• 1x Close combat weapon
• 1x Plasma pistol

BATTLELINE

Plague Marines (190 Points)
• 1x Plague Champion
◦ 1x Plasma gun
◦ 1x Power fist
• 9x Plague Marine
◦ 1x Blight launcher
◦ 4x Heavy plague weapon
◦ 2x Meltagun
◦ 9x Plague knives
◦ 2x Plague spewer

Plague Marines (95 Points)
• 1x Plague Champion
◦ 1x Plasma gun
◦ 1x Power fist
• 4x Plague Marine
◦ 2x Heavy plague weapon
◦ 1x Meltagun
◦ 4x Plague knives
◦ 1x Plague spewer

Plague Marines (95 Points)
• 1x Plague Champion
◦ 1x Plasma gun
◦ 1x Power fist
• 4x Plague Marine
◦ 2x Heavy plague weapon
◦ 1x Meltagun
◦ 4x Plague knives
◦ 1x Plague spewer

DEDICATED TRANSPORTS

Chaos Rhino (85 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Combi-bolter
• 1x Havoc launcher

OTHER DATASHEETS

Chaos Predator Destructor (145 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Havoc launcher
• 2x Lascannon
• 1x Predator autocannon

Chaos Predator Destructor (145 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Havoc launcher
• 2x Lascannon
• 1x Predator autocannon

Chaos Spawn (80 Points)
• 2x Chaos Spawn
◦ 2x Hideous mutations

Deathshroud Terminators (140 Points)
• 1x Deathshroud Champion
◦ 1x Manreaper
◦ 2x Plaguespurt gauntlet
• 2x Deathshroud Terminator
◦ 2x Manreaper
◦ 2x Plaguespurt gauntlet
... (30 lines left)
Collapse
HistoriconList.txt
3 KB
﻿
mansam
mansam.

Virulent Vectorium (1995 Points)

Death Guard
Virulent Vectorium
Strike Force (2,000 Points)

CHARACTERS

Biologus Putrifier (70 Points)
• 1x Hyper blight grenades
• 1x Injector pistol
• 1x Plague knives
• Enhancements: Arch Contaminator

Daemon Prince of Nurgle (215 Points)
• Warlord
• 1x Hellforged weapons
• 1x Infernal cannon
• Enhancements: Revolting Regeneration

Foul Blightspawn (60 Points)
• 1x Close combat weapon
• 1x Plague sprayer

Lord of Poxes (75 Points)
• 1x Great plague blade
• 1x Plasma pistol

Tallyman (40 Points)
• 1x Close combat weapon
• 1x Plasma pistol

BATTLELINE

Plague Marines (190 Points)
• 1x Plague Champion
◦ 1x Plasma gun
◦ 1x Power fist
• 9x Plague Marine
◦ 1x Blight launcher
◦ 4x Heavy plague weapon
◦ 2x Meltagun
◦ 9x Plague knives
◦ 2x Plague spewer

Plague Marines (95 Points)
• 1x Plague Champion
◦ 1x Plasma gun
◦ 1x Power fist
• 4x Plague Marine
◦ 2x Heavy plague weapon
◦ 1x Meltagun
◦ 4x Plague knives
◦ 1x Plague spewer

Plague Marines (95 Points)
• 1x Plague Champion
◦ 1x Plasma gun
◦ 1x Power fist
• 4x Plague Marine
◦ 2x Heavy plague weapon
◦ 1x Meltagun
◦ 4x Plague knives
◦ 1x Plague spewer

DEDICATED TRANSPORTS

Chaos Rhino (85 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Combi-bolter
• 1x Havoc launcher

OTHER DATASHEETS

Chaos Predator Destructor (145 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Havoc launcher
• 2x Lascannon
• 1x Predator autocannon

Chaos Predator Destructor (145 Points)
• 1x Armoured tracks
• 1x Combi-bolter
• 1x Havoc launcher
• 2x Lascannon
• 1x Predator autocannon

Chaos Spawn (80 Points)
• 2x Chaos Spawn
◦ 2x Hideous mutations

Deathshroud Terminators (140 Points)
• 1x Deathshroud Champion
◦ 1x Manreaper
◦ 2x Plaguespurt gauntlet
• 2x Deathshroud Terminator
◦ 2x Manreaper
◦ 2x Plaguespurt gauntlet

Deathshroud Terminators (140 Points)
• 1x Deathshroud Champion
◦ 1x Manreaper
◦ 2x Plaguespurt gauntlet
• 2x Deathshroud Terminator
◦ 2x Manreaper
◦ 2x Plaguespurt gauntlet

Foetid Bloat-Drone with Heavy Blight Launcher (100 Points)
• 1x Heavy blight launcher
• 1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 Points)
• 1x Heavy blight launcher
• 1x Plague probe

Foetid Bloat-Drone with Heavy Blight Launcher (100 Points)
• 1x Heavy blight launcher
• 1x Plague probe

Poxwalkers (60 Points)
• 10x Poxwalker
◦ 10x Improvised weapon

Poxwalkers (60 Points)
• 10x Poxwalker
◦ 10x Improvised weapon"
0aPMxtLA,CK,TableTopLive,PHP,Saturday 19th of July 2025 09:01:10 AM CDT,"Chaos Knights
Strike Force (2000 points)
Lords of Dread


CHARACTERS

Chaos Cerastus Knight Atrapos (385 points)
• 1x Atrapos lascutter
1x Graviton singularity cannon
• Enhancement: Mirror of Fates

Chaos Cerastus Knight Lancer (375 points)
• 1x Cerastus shock lance
• Enhancement: Blessing of the Dark Master

Knight Despoiler (345 points)
• 1x Daemonbreath meltagun
2x Daemonbreath thermal cannon
1x Ruinspear rocket pod
1x Titanic feet
• Enhancement: Warp-borne Stalker

Knight Despoiler (335 points)
• Warlord
• 1x Daemonbreath meltagun
2x Despoiler gatling cannon
1x Havoc missile pod
2x Heavy darkflamer
1x Titanic feet

Knight Rampager (335 points)
• 1x Diabolus heavy stubber
1x Reaper chainsword
1x Warpstrike claw


ALLIED UNITS

Beasts of Nurgle (65 points)
• 1x Putrid appendages

Nurglings (40 points)
• 3x Nurgling Swarm
• 3x Diseased claws and teeth

Nurglings (40 points)
• 3x Nurgling Swarm
• 3x Diseased claws and teeth

Nurglings (40 points)
• 3x Nurgling Swarm
• 3x Diseased claws and teeth

Nurglings (40 points)
• 3x Nurgling Swarm
• 3x Diseased claws and teeth"
eHd0dcee,Chaos Knights,TableTopLive,PHP,Saturday 19th of July 2025 08:59:20 AM CDT,"DUR HURR BIG WOBOT GO BRRRRRRRRR (2000 points)

Chaos Knights
Strike Force (2000 points)
Lords of Dread


CHARACTERS

Chaos Cerastus Knight Atrapos (385 points)
• 1x Atrapos lascutter
1x Graviton singularity cannon
• Enhancement: Mirror of Fates

Chaos Cerastus Knight Lancer (375 points)
• 1x Cerastus shock lance
• Enhancement: Blessing of the Dark Master

Knight Despoiler (345 points)
• 1x Daemonbreath meltagun
2x Daemonbreath thermal cannon
1x Ruinspear rocket pod
1x Titanic feet
• Enhancement: Warp-borne Stalker

Knight Despoiler (335 points)
• Warlord
• 1x Daemonbreath meltagun
2x Despoiler gatling cannon
1x Havoc missile pod
2x Heavy darkflamer
1x Titanic feet

Knight Rampager (335 points)
• 1x Diabolus heavy stubber
1x Reaper chainsword
1x Warpstrike claw


ALLIED UNITS

Beasts of Nurgle (65 points)
• 1x Putrid appendages

Nurglings (40 points)
• 3x Nurgling Swarm
• 3x Diseased claws and teeth

Nurglings (40 points)
• 3x Nurgling Swarm
• 3x Diseased claws and teeth

Nurglings (40 points)
• 3x Nurgling Swarm
• 3x Diseased claws and teeth

Nurglings (40 points)
• 3x Nurgling Swarm
• 3x Diseased claws and teeth"
Ju3VCBBp,Engine.ini - DA_NVIDIA,zerox2501,INI file,Saturday 19th of July 2025 08:56:08 AM CDT,"[SystemSettings]
D3D12.PSO.DriverOptimizedDiskCache=1
D3D12.PSO.DiskCache=0

[/Script/Engine.RendererSettings]
niagara.CreateShadersOnLoad=1
r.AsyncPipelineCompile=1
r.Cache.DrawInterpolationPoints=1
r.Cache.UpdateEveryFrame=0
r.CompileShadersForDevelopment=0
r.CreateShadersOnLoad=0
r.ShaderComplexity.CacheShaders=1
r.ShaderPipelineCache.AlwaysGenerateOSCache=0
r.ShaderPipelineCache.BackgroundBatchSize=5
r.ShaderPipelineCache.BackgroundBatchTime=10
r.ShaderPipelineCache.BatchSize=256
r.ShaderPipelineCache.BatchTime=82
r.ShaderPipelineCache.Enabled=1
r.ShaderPipelineCache.GameFileMaskEnabled=1
r.ShaderPipelineCache.LazyLoadShadersWhenPSOCacheIsPresent=1
r.ShaderPipelineCache.LogPSO=1
r.ShaderPipelineCache.PrecompileBatchSize=256
r.ShaderPipelineCache.PrecompileBatchTime=52
r.ShaderPipelineCache.PreOptimizeEnabled=1
r.ShaderPipelineCache.ReportPSO=0
r.ShaderPipelineCache.SaveBoundPSOLog=1
r.ShaderPipelineCache.SaveUserCache=1
r.ShaderPipelineCache.StartupMode=2
r.ShaderPipelines=1
r.Shaders.FastMath=1
r.Shaders.Optimize=1
r.Shaders.ZeroInitialise=1
r.Shadow.CachePreshadow=1
r.UseAsyncShaderPrecompilation=1
r.UseShaderBinaryCache=1
r.UseShaderCaching=1
r.UseShaderPredraw=1"
55tqZuGh,Studnia odwadniająca sterowanie pompą,gednet,YAML,Saturday 19th of July 2025 08:39:06 AM CDT,"substitutions:
  devicename: esp32-odwodnienie
  v_flood_low:   ""1.9""       # próg startu pompy
  v_dry_low:     ""2.5""       # próg pompa off
  v_flood_high:  ""1.3""       # próg alarmu
  v_clear_high:  ""2.9""       # anulowanie alarmu

esphome:
  name: $devicename
  on_boot:
    priority: 600
    then:
      - output.turn_on: sonda_power
      - delay: 80ms  
      - component.update: adc_low
      - delay: 20ms
      - component.update: adc_high
      - delay: 20ms
      - output.turn_off: sonda_power
      - script.execute: apply_pump_logic


esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
  
web_server:
    port: 80

time:
  - platform: homeassistant
    id: homeassistant_time

api:

ota:
  platform: esphome
  password: ""xxxxxxxxxxxxxxxxxxxxxxxxxx""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.240
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  ap:
    ssid: ""Esp32-Odwodnienie Fallback Hotspot""
    password: ""xxxxxxxxxx""

captive_portal:

globals:
  - id: pump_active
    type: bool
    restore_value: yes
    initial_value: 'false'

  - id: post_run_running
    type: bool
    restore_value: no
    initial_value: 'false'

  # Licznik kolejnych cykli, w których górna sonda wskazuje wodę a dolna NIE.
  - id: low_probe_fault_timer
    type: int
    restore_value: no
    initial_value: '0'

  # Aktualny stan awarii (publikowany przez binary_sensor)
  - id: low_probe_fault_state
    type: bool
    restore_value: no
    initial_value: 'false'

button:
  - platform: restart
    name: 'Kotlownia restart'

output:
  - platform: gpio
    id: sonda_power
    pin: GPIO25
  - platform: gpio
    id: pump_output
    pin:
      number: GPIO23
      mode: OUTPUT
      inverted: false   

text_sensor:
  - platform: version
    name: ESPHome Version
  - platform: wifi_info
    ip_address:
      name: $devicename IP
    ssid:
      name: $devicename SSID
    bssid:
      name: $devicename BSSID

sensor:
  - platform: adc
    id: adc_low
    name: ""Napięcie sondy (pompa)""
    pin: GPIO36
    attenuation: 11db
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: ""V""
    device_class: ""voltage""
    filters:
      - lambda: |-
          return floor(x * 10.0f) / 10.0f;

  - platform: adc
    id: adc_high
    name: ""Napięcie sondy (alarm)""
    pin: GPIO33
    attenuation: 11db
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: ""V""
    device_class: ""voltage""
    filters:
      - lambda: |-
          return floor(x * 10.0f) / 10.0f;

binary_sensor:
  - platform: template
    name: ""Zalanie (włącz pompę)""
    id: flood_low
    device_class: moisture
    lambda: |-
      static bool flooded = false;
      const float V = id(adc_low).state;
      if (flooded && V > ${v_dry_low})  flooded = false;
      else if (!flooded && V < ${v_flood_low}) flooded = true;
      return flooded;

  - platform: template
    name: ""Zalanie (alarm)""
    id: flood_high
    device_class: safety
    lambda: |-
      static bool high = false;
      const float V = id(adc_high).state;
      if (high && V > ${v_clear_high})  high = false;
      else if (!high && V < ${v_flood_high}) high = true;
      return high;
    on_press:
      - switch.turn_on: pump_switch             # spróbuj ratować
#      - delay: 2s
#      - homeassistant.service:
#          service: notify.mobile_app_telefon
#          data:
#            message: ""‼️ Wysoki poziom w studzience – pompa nie nadąża!""

  - platform: template
    name: ""Awaria sondy niskiej""
    id: low_probe_fault
    device_class: problem
    entity_category: diagnostic
    lambda: |-
      return id(low_probe_fault_state);

  - platform: template
    name: ""Tryb dobiegu pompy""
    lambda: |-
      return id(post_run_running);
    entity_category: diagnostic

interval:
  - interval: 10s
    then:
      - output.turn_on: sonda_power
      - delay: 80ms  
      - component.update: adc_low
      - delay: 20ms
      - component.update: adc_high
      - delay: 20ms
      - output.turn_off: sonda_power
      - script.execute: apply_pump_logic

switch:
  - platform: output
    name: ""Pompa odpompowująca""
    id: pump_switch
    output: pump_output
    restore_mode: RESTORE_DEFAULT_OFF

script:
  - id: pump_off_delayed
    mode: restart
    then:
      - lambda: |-
          id(post_run_running) = true;
          ESP_LOGD(""pump"",""Post-run started"");
      - delay: 5min
      - lambda: |-
          float Vl = id(adc_low).state;
          float Vh = id(adc_high).state;
          bool both_dry = (Vl > ${v_dry_low}) && (Vh > ${v_clear_high});
          if (both_dry) {
            ESP_LOGI(""pump"",""Post-run finished (Vl=%.2f V, Vh=%.2f V) -> pump OFF"", Vl, Vh);
            id(pump_switch).turn_off();
            id(pump_active) = false;
          } else {
            ESP_LOGW(""pump"",""Post-run aborted (Vl=%.2f V, Vh=%.2f V) -> keep pump ON"", Vl, Vh);
            // Pompa zostaje ON; wciąż zalanie lub powrót zalania
          }
          id(post_run_running) = false;

  # Główna logika – wywoływana na starcie i po każdym cyklu pomiarowym
  - id: apply_pump_logic
    mode: queued
    then:
      - lambda: |-
          float Vl = id(adc_low).state;    // napięcie sondy sterującej pompą
          float Vh = id(adc_high).state;   // napięcie sondy alarmowej (wysokiej)
          
          // Warunki zalania (dowolny poziom aktywny)
          bool flood_low_cond  = (Vl < ${v_flood_low});
          bool flood_high_cond = (Vh < ${v_flood_high});
          bool any_flood = flood_low_cond || flood_high_cond;

          // Warunek pozwalający rozpocząć dobieganie: obie sondy wskazują ""sucho""
            // (Wyższe progi dla opuszczenia stanu zalania)
          bool can_stop = (Vl > ${v_dry_low}) && (Vh > ${v_clear_high});

          // --- Sterowanie pompą ---
          if (any_flood) {
            // Wymuś / utrzymaj ON
            if (!id(pump_switch).state) {
              ESP_LOGW(""pump"",""Forcing pump ON (Vl=%.2f < %.2f || Vh=%.2f < %.2f)"",
                        Vl, (float)${v_flood_low}, Vh, (float)${v_flood_high});
              id(pump_switch).turn_on();
            }
            id(pump_active) = true;

            // Jeśli trwał post-run i znów pojawiło się zalanie – przerwij
            if (id(post_run_running)) {
              ESP_LOGD(""pump"",""Cancelling post-run due to renewed flood (Vl=%.2f, Vh=%.2f)"", Vl, Vh);
              id(pump_off_delayed).stop();
              id(post_run_running) = false;
            }
          } else {
            // Brak aktywnego zalania; jeśli wcześniej było – możemy przejść do post-run
            if (id(pump_active)) {
              if (can_stop) {
                if (!id(post_run_running)) {
                  ESP_LOGD(""pump"",""Starting post-run (Vl=%.2f > %.2f && Vh=%.2f > %.2f)"",
                            Vl, (float)${v_dry_low}, Vh, (float)${v_clear_high});
                  id(pump_off_delayed).execute();
                }
              } else {
                // (teoretycznie tu nie trafimy – bo gdyby jedna sonda była mokra, any_flood byłby true)
                if (!id(pump_switch).state) {
                  id(pump_switch).turn_on();
                }
              }
            }
          }

          // --- DETEKCJA AWARII DOLNEJ SONDY ---
          // Kryterium: górna sonda stale zalana (flood_high_cond == true) przez N kolejnych cykli,
          // podczas gdy dolna nie sygnalizuje (flood_low_cond == false).
          // N * (interval) = czas opóźnienia zgłoszenia (tu 6 * 10 s = 60 s).
          const int FAULT_CYCLES = 3;

          if (flood_high_cond && !flood_low_cond) {
            id(low_probe_fault_timer)++;
            if (id(low_probe_fault_timer) > FAULT_CYCLES) {
              if (!id(low_probe_fault_state)) {
                id(low_probe_fault_state) = true;
                id(low_probe_fault).publish_state(true);
                ESP_LOGE(""pump"",""LOW PROBE FAULT suspected: High flooded, low dry (Vl=%.2f, Vh=%.2f)"", Vl, Vh);
              }
            }
          } else {
            // Warunki dla zalania niskiego lub brak wysokiego poziomu – reset licznika/awarii
            if (id(low_probe_fault_state)) {
              id(low_probe_fault_state) = false;
              id(low_probe_fault).publish_state(false);
              ESP_LOGI(""pump"",""LOW PROBE FAULT cleared (Vl=%.2f, Vh=%.2f)"", Vl, Vh);
            }
            id(low_probe_fault_timer) = 0;
          }"
H5VBpfZB,obj.js,eqeqwan21,JavaScript,Saturday 19th of July 2025 08:36:54 AM CDT,"$(function () {
  const saved = localStorage.getItem('showStats') !== '0';
  $('#toggleStats').prop('checked', saved);

  $('#toggleStats').on('change', function () {
    $('#divstat').toggle(this.checked);
    localStorage.setItem('showStats', this.checked ? '1' : '0');
  });
  applyStatsVisibility();
});
function applyStatsVisibility() {
  if (localStorage.getItem('showStats') === '0') {
    $('#divstat').hide();
  }
}"
jChYdCWC,obj.html,eqeqwan21,HTML,Saturday 19th of July 2025 08:35:11 AM CDT,"            <div class=""pl-1 mt-2"">
                <div class=""custom-control custom-switch"">
                    <input type=""checkbox""
                           class=""custom-control-input""
                           id=""toggleStats""
                           checked>
                    <label class=""custom-control-label"" for=""toggleStats"">
                        {% trans ""Show statistics"" %}
                    </label>
                </div>
            </div>"
bYrPvDvk,apppage.html,eqeqwan21,HTML,Saturday 19th of July 2025 08:32:48 AM CDT,"<li class=""nav-item"">
	<a class=""nav-link"" href=""{{ base_uri }}/users"">{% trans ""Users"" %}</a>
</li>"
gqYydies,login.html,eqeqwan21,HTML,Saturday 19th of July 2025 08:31:52 AM CDT,"{% if loginfail == 'show' %}
    <div class=""alert alert-danger text-center alert-dismissible fade show"" role=""alert"">
        {% trans ""Invalid credentials"" %}
        <button type=""button"" class=""close"" data-dismiss=""alert"">&times;</button>
    </div>
    {% endif %}

    {% if _GET.iperr is defined %}
    <div class=""alert alert-warning text-center alert-dismissible fade show"" role=""alert"">
        {% trans ""Access denied: unknown IP or device"" %}
        <button type=""button"" class=""close"" data-dismiss=""alert"">&times;</button>
    </div>
    {% endif %}"
vr5hXRjd,Untitled,CoopreenWooD,Lua,Saturday 19th of July 2025 08:29:20 AM CDT,"-- Функция для строительства квадрата
function build(sideLength)
    -- Проверка, является ли аргумент числом
    if type(sideLength) ~= ""number"" or sideLength < 1 then
        print(""Ошибка: укажите длину стороны (положительное число)."")
        return
    end

    -- Проверка наличия блоков в инвентаре
    local function checkInventory()
        for slot = 1, 16 do
            if turtle.getItemCount(slot) > 0 then
                turtle.select(slot)
                return true
            end
        end
        print(""Ошибка: в инвентаре нет блоков!"")
        return false
    end

    -- Основной цикл строительства
    for i = 1, sideLength do
        -- Построить одну сторону квадрата
        for j = 1, sideLength - 1 do
            -- Проверяем, есть ли блоки в инвентаре
            if not checkInventory() then
                print(""Строительство прервано: закончились блоки."")
                return
            end

            -- Устанавливаем блок
            turtle.placeDown()

            -- Двигаемся назад
            if not turtle.back() then
                print(""Ошибка: не могу двигаться назад!"")
                return
            end
        end

        -- Поворачиваем на 90 градусов вправо для следующей стороны
        turtle.turnRight()

        -- Проверяем, остались ли блоки
        if i < sideLength and not checkInventory() then
            print(""Строительство прервано: закончились блоки."")
            return
        end
    end

    print(""Квадрат "" .. sideLength .. ""x"" .. sideLength .. "" построен!"")
end

-- Обработка ввода аргументов
local args = {...}
if #args == 0 then
    print(""Использование: build <длина_стороны>"")
else
    build(tonumber(args[1]))
end"
ENJvJ6Wz,ods_admin.php,eqeqwan21,PHP,Saturday 19th of July 2025 08:28:56 AM CDT,"<?php

class ods_admin
{
    private $pdo;

    public function __construct(PDO $pdo)
    {
        $this->pdo = $pdo;
    }

    public function createUser(array $data)
    {
        $login = trim($data['login'] ?? '');
        $pass = $data['pass'] ?? '';
        $role = $data['role'] ?? 'user';

        if ($login === '' || $pass === '') {
            throw new Exception('empty');
        }

        $hash = password_hash($pass, PASSWORD_DEFAULT);

        $sql = 'INSERT INTO user (login, password_hash, role) VALUES (?,?,?)';
        $this->pdo->prepare($sql)->execute([$login, $hash, $role]);
    }

    public function resetIp(int $uid): void
    {
        $this->pdo->prepare('UPDATE user SET legit_ips=""[]"" WHERE id=?')->execute([$uid]);
    }

    public function resetDevice(int $uid): void
    {
        $this->pdo->prepare('UPDATE user SET dev_token=NULL WHERE id=?')->execute([$uid]);
    }

    public function listUsers(): array
    {
        $rows = $this->pdo->query(
            'SELECT id, login, role,
                JSON_UNQUOTE(JSON_EXTRACT(legit_ips, ""$""))   AS ip_json,
                dev_token
         FROM   user
         ORDER  BY login'
        )->fetchAll();

        foreach ($rows as &$r) {
            $ips = json_decode($r['ip_json'] ?: '[]', true);
            $r['ip_list'] = $ips ? implode("", "", $ips) : ""-"";
            unset($r['ip_json']);
        }
        return $rows;
    }

    public function deleteUser(int $uid): void
    {
        $this->pdo->prepare('DELETE FROM user WHERE id = ?')->execute([$uid]);
    }

    public function lockIps(int $uid): void
    {
        $stmt = $this->pdo->prepare('SELECT legit_ips FROM user WHERE id = ?');
        $stmt->execute([$uid]);
        $raw = $stmt->fetchColumn();

        $ips = $raw ? json_decode($raw, true) : [];

        if (!$ips) {
            return;
        }

        while (count($ips) < 10) {
            $ips[] = $ips[0];
        }

        $this->pdo
            ->prepare('UPDATE user SET legit_ips = ? WHERE id = ?')
            ->execute([json_encode($ips, JSON_UNESCAPED_UNICODE), $uid]);
    }
}"
SvYQQsDz,index.php,eqeqwan21,PHP,Saturday 19th of July 2025 08:26:49 AM CDT,"<?php
require_once 'config/config.php';
require_once 'program/include/iniset.php';

session_name(""Asteroid2Id"");
session_start(['use_strict_mode' => true]);

$odb = new ods_db();
if (!$odb->open()) {
    var_dump('DB connect error: ' . $odb->error->getMessage());
}
$pdo = $odb->db;

if (!empty($_SESSION['uid'])) {
    guardIp($pdo, $_SESSION['uid']);
}

$route = $_GET['do'] ?? 'home';

if ($route === 'login' && $_SERVER['REQUEST_METHOD'] === 'POST') {

    $login = trim($_POST['login'] ?? $_POST['inputLogin'] ?? '');
    $pass = $_POST['pass'] ?? $_POST['inputPassword'] ?? '';

    $stmt = $pdo->prepare('SELECT id, password_hash, role FROM user WHERE login = ?');
    $stmt->execute([$login]);
    $u = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($u && password_verify($pass, $u['password_hash'])) {

        $_SESSION['uid'] = $u['id'];
        $_SESSION['role'] = $u['role'];
        $_SESSION['userid'] = $login;
        $_SESSION['admin'] = ($u['role'] === 'admin');
        $_SESSION['login'] = $login;

        guardIp($pdo, $u['id'], $u['role']);

        header('Location: ./');
        exit;
    }

    $error = 'Неверный логин или пароль';
}

$base_uri = dirname($_SERVER[""PHP_SELF""]);
if ($base_uri == '/')
    $base_uri = '';


if (isset($_GET['n'])) {
    $ds = new ods_device();
    $ds->run();
    exit;
}

if (isset($_GET['asterisk'])) {
    if (in_array($_SERVER['REMOTE_ADDR'], $config['aster_whitelist'])) {
        $aster = new ods_aster();

        if (isset($_GET['fn']) && $_GET['fn'] == 'callconfirm') {
            if (isset($_GET['id']) && isset($_GET['dialstatus']) && isset($_GET['hangupcause'])) {
                $ok = $aster->callconfirm($_GET['id'], $_GET['hangupcause'], $_GET['dialstatus']);
                echo $ok ? 'OK' : 'ERROR';
            }
        }

        if (isset($_GET['fn']) && $_GET['fn'] == 'incall') {
            if (isset($_GET['cid']) && isset($_GET['did'])) {
                $ok = $aster->incall($_GET['did'], $_GET['cid']);
                echo $ok ? 'OK' : 'ERROR';
            }
        }
    } else {
        header(""HTTP/1.1 403 Forbidden"");
        echo 'Access denied';
    }
    exit;
}

if (strpos($_SERVER['REQUEST_URI'], 'images/tiles/') !== false) {
    session_write_close();
    if (isset($_SESSION['userid'])) {
        $tiles = new ods_tiles();
        $tiles->run($base_uri);
    } else
        header(""HTTP/1.1 401 Unauthorized"");

    exit;
}


if (strpos($_SERVER['REQUEST_URI'], 'images/') !== false) {
    session_write_close();
    if (isset($_SESSION['userid'])) {
        $svg = new ods_svg();
        $svg->run();
    } else
        header(""HTTP/1.1 401 Unauthorized"");
    exit;
}

$mui = new ods_mui();
$language = $mui->langDetect();
$mui->changeLang($language);

if (strpos($_SERVER['REQUEST_URI'], 'js/') !== false) {
    session_write_close();
    if (isset($_SESSION['userid'])) {
        $js = new ods_js();
        $js->run();
    } else
        header(""HTTP/1.1 401 Unauthorized"");
    exit;
}

if ('api' == @$_GET['do']) {
    session_write_close();
    if (isset($_SESSION['userid'])) {
        $api = new ods_api();
        $api->run();
    } else
        header(""HTTP/1.1 401 Unauthorized"");
    exit;
}

$loader = new Twig_Loader_Filesystem('templates');
$options = array();
if ($config['debug'])
    $options['cache'] = false;
else
    $options['cache'] = 'cache/twig_c_cache';
$twig = new Twig_Environment($loader, $options);
$twig->addExtension(new Twig_Extensions_Extension_I18n());

$loginfail = ""hide"";

//$template = 'apppage.html';
$template = 'map.html';
if ('login' == @$_GET['do']) {
    $template = 'login.html';
    if (isset($_SESSION['userid']))
        unset($_SESSION['userid']);
} else {
    if (!isset($_SESSION['userid'])) {
        $loc = $base_uri . '/' . '?do=login';
        $uri = $_SERVER['REQUEST_URI'];
        if (!empty($uri) && !stristr($uri, ""login""))
            $loc .= '&b=' . urlencode($uri);
        if (empty($_SERVER['HTTPS'])) {
            sleep(2);
            $loc = $base_uri . '/' . '?do=login';
        }
        header(""Location: $loc"");
    }
}
if ($template != 'login.html') {
    $do = 'form';
    if (isset($_GET['do']))
        $do = $_GET['do'];

    $clearuri = strtok($_SERVER['REQUEST_URI'], '?');

    if (in_array($clearuri, [$base_uri, $base_uri . '/'])) {
        //$fn='map';
        $loc = $base_uri . '/' . 'map';
        header(""Location: $loc"");
        exit();
    } else
        $fn = basename($clearuri);

    if (isset($_GET['fn']))
        $fn = $_GET['fn'];

    if ('form' == $do)
        $template = $fn . '.html';
}

try {
    $template = $twig->loadTemplate($template);
} catch (Exception $e) {
    $debug['error'] = $e->getMessage();
    $template = $twig->loadTemplate('404.html');
}

//$form = new ods_form();

$head['title'] = _(""Asteroid"");

$params = array(
    'version' => $config['version'],
    'configtime' => $config['time'],
    'languages' => $config['languages'],
    'language' => $language,
    'language_ts' => $mui->poTime(),
    'head' => $head,
    'user' => @ $_SESSION['userid'],
    'admin' => @ $_SESSION['admin'],
    'demo' => @ $_SESSION['demo'],
    '_GET' => @$_GET,
    'base_uri' => $base_uri,
    'debugmode' => $config['debug'],
    'dim_width' => $config['dim_width'],
    'dim_maxvalue' => $config['dim_maxvalue'],
    'dim_percent' => $config['dim_percent'],
    'wide_tiles' => $config['wide_tiles'],
    'phone_letters' => $config['phone_letters'],
    'phone_format' => $config['phone_format'],
    'domain' => $_SERVER['SERVER_NAME'],
    'appdata' => $appdata,
    'template' => $template
);

if ($params['debugmode'])
    $params['debug'] = $debug;
header(""Content-Security-Policy: default-src 'self' 'unsafe-inline'; img-src * 'self' data: https:;"");
//	header(""Content-Security-Policy: default-src 'self' 'unsafe-inline'; img-src 'self' data:;"");
if ($template == 'login.html') {
    $params['loginfail'] = $loginfail;
    header('Cache-Control:  no-cache, must-revalidate');
} elseif ($template == '404.html') {
    header('Cache-Control:  no-store, no-cache, must-revalidate, max-age=0');
    header($_SERVER['SERVER_PROTOCOL'] . "" 404 Not Found"");
} elseif (isset($_SESSION['userid'])) {
    $kstr = filemtime('templates/' . $template);
    $kstr .= filemtime('config/config.php');
    $kstr .= filemtime('index.php');
    $kstr .= @$_SESSION['userid'];
    $etag = md5($kstr) . '.' . $language;

    if (substr_count($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip')) {
        header('Content-Encoding: gzip');
        ob_start('ob_gzhandler');
    }
    header('Cache-Control: private, must-revalidate');
    header(""Etag: $etag"");
    header('Vary: Accept-Encoding, Cookie');
    header_remove(""Pragma"");
    header_remove(""Expires"");

    if (isset($_SERVER['HTTP_IF_NONE_MATCH']) && trim($_SERVER['HTTP_IF_NONE_MATCH']) == $etag) {
        header($_SERVER['SERVER_PROTOCOL'] . "" 304 Not Modified"");
        exit;
    }
}
if (strpos($_SERVER['REQUEST_URI'], '/users') !== false) {
    if (empty($_SESSION['admin']) || !$_SESSION['admin']) {
        header('HTTP/1.1 403 Forbidden');
        exit('Access denied');
    }

    require_once 'program/include/ods_admin.php';
    $adm = new ods_admin($pdo);

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        if (@$_POST['action'] === 'reset_ip') {
            $adm->resetIp((int)$_POST['uid']);
            $resetok = true;
        }
        elseif (@$_POST['action'] === 'reset_device') {
            $adm->resetDevice((int)$_POST['uid']);
            $devok = true;
        }
        elseif (@$_POST['action'] === 'lock_ips') {
            $adm->lockIps((int)$_POST['uid']);
            $lockok = true;
        }
        elseif (@$_POST['action'] === 'delete_user') {
            $uid = (int)$_POST['uid'];
            if ($uid !== (int)$_SESSION['uid']) {
                $adm->deleteUser($uid);
                $delok = true;
            } else {
                $error = 'Cannot delete your own account';
            }
        }
        else {
            try {
                $adm->createUser($_POST);
                $ok = $_POST['login'];
            } catch (Exception $e) {
                $error = $e->getMessage();
            }
        }
    }

    $users = $adm->listUsers();
    $template = $twig->loadTemplate('users.html');
    $page = [
        'ok' => $ok ?? null,
        'error' => $error ?? null,
        'resetok' => $resetok ?? null,
        'delok' => $delok ?? null,
        'devok' => $devok ?? null,
        'lockok' => $lockok ?? null,
        'users' => $users,
    ];

    echo $twig->render('users.html', array_merge($params, $page));
    $odb->close();
    exit;
}
echo $template->render($params);
$odb->close();"
7fe3bssz,iniset.php,eqeqwan21,PHP,Saturday 19th of July 2025 08:25:24 AM CDT,"function guardIp(PDO $db, int $userId, string $role = 'user'): bool
{
    if ($role === 'admin') {
        return true;
    }
    $ip = $_SERVER['REMOTE_ADDR'];
    if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
        $ip = trim(explode(',', $_SERVER['HTTP_X_FORWARDED_FOR'])[0]);
    }
    $token = $_COOKIE['ast_dev'] ?? null;

    $st = $db->prepare('SELECT legit_ips, dev_token FROM user WHERE id=? FOR UPDATE');
    $st->execute([$userId]);
    $u = $st->fetch(PDO::FETCH_ASSOC) ?: [];

    $ips = json_decode($u['legit_ips'] ?: '[]', true);

    if (!$u['dev_token']) {
        if (!$token) {
            $token = bin2hex(random_bytes(32));
            setcookie('ast_dev', $token, [
                'expires'  => time()+86400*90,
                'path'     => '/',
                'secure'   => true,
                'httponly' => true,
                'samesite' => 'Lax'
            ]);
        }
        if (!in_array($ip, $ips, true) && count($ips) < 10) {
            $ips[] = $ip;
        }
        $db->prepare('UPDATE user SET legit_ips=?, dev_token=? WHERE id=?')
            ->execute([json_encode($ips), $token, $userId]);
        return true;
    }

    if (in_array($ip, $ips, true)) {
        return true;
    }

    if ($token && $token === $u['dev_token']) {
        if (!in_array($ip, $ips, true) && count($ips) < 10) {
            $ips[] = $ip;
            $db->prepare('UPDATE user SET legit_ips=? WHERE id=?')
                ->execute([json_encode($ips), $userId]);
        }
        return true;
    }

    session_unset();
    session_destroy();
    header('Location: ./?do=login&iperr=1');
    exit;
}"
1hhQdZ2Q,new table and insert admin,eqeqwan21,MySQL,Saturday 19th of July 2025 08:23:53 AM CDT,"CREATE TABLE `user` (
  id            INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  login         VARCHAR(64)         NOT NULL,
  password_hash VARCHAR(255)            NOT NULL,
  phone         VARCHAR(20)         NULL,
  role          ENUM('admin','user') DEFAULT 'user',

  legit_ips     JSON NULL,
  dev_token     VARCHAR(255)  NULL,

  created_at    DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at    DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  UNIQUE KEY uk_login (login),
  INDEX ix_role  (role)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

INSERT INTO user (login, password_hash, role, legit_ips)
VALUES ('odmin',
        '$2y$10$Zapji.VO3ejywwxBJxKA5OU.GtAGc11QskEuQxSlWxk3b2vG60aIC',
        'admin',
        JSON_ARRAY());"
ypUmSbyQ,2.1U,GochiPC,Lua,Saturday 19th of July 2025 08:18:36 AM CDT,"local label = os.getComputerLabel()

if label == ""2.1"" then
  print(""You allready have this version"" .. label)
  return
end

if label == ""2.0"" then
    term.clear()
    term.setCursorPos(1,1)
    print(""Welcome to MineUpdater"")
    print(""please wait to update 2.1"")
    sleep(2)
    print(""removing old file"")
    shell.run(""delete startup.lua"")
    sleep(5)
    print(""installing new files"")
    sleep(2)
    shell.run(""pastebin get VS5buKVU startup.lua"")
    sleep(2)
    print(""the update complete"")
    print(""please wait this will reboot"")
    sleep(4)
    os.reboot()
end"
1uU92QqU,2.1,GochiPC,Lua,Saturday 19th of July 2025 08:15:13 AM CDT,"-- WARNING DO NOT EDIT SCRIPT THIS EILL BUG OS
-- if you are best at script why you give it an try
-- to see make an os but if you are an noob
-- dont edit

-- MineOS
local running = true

-- start at first
os.setComputerLabel(""2.1"")
term.setCursorPos(1,1)
term.clear()
term.setTextColor(colors.yellow)
print(""Welcome Player!"")
sleep(3)
term.clear()
term.setCursorPos(1,1)
print(""MineOS2"")

-- prompt
while running do
    term.setTextColor(colors.yellow)
    io.write(""> "")
    term.setTextColor(colors.white)
    local input = read()
    local args = {}
    for word in string.gmatch(input, ""[^%s]+"") do
        table.insert(args, word)
    end

    local command = args[1]

-- commands

    if command == ""about"" then
        term.setTextColor(colors.orange)
        print(""About"")
        term.setTextColor(colors.white)
        print(""   _______    MineOS"")
        print(""  |   |   |   Version: 2.1"")
        print(""  | S | e |   Kernel: DEV2"")
        print(""  | O | n |   CCID: "" .. os.getComputerID())
        print(""  |   | i |   Uptime: "" .. math.floor(os.clock()) .. ""s"")
        print(""  | > | M |   CR: 2023 - 2025"")
        if term.isColor() then
            print(""              Color: true"")
        else
            print(""              Color: false"")
        end
    elseif command == ""help"" then
        term.setTextColor(colors.orange)
        print(""Help"")
        term.setTextColor(colors.white)
        print(""tipe 'plist' or 'mlist'"")
        
    elseif command == ""plist"" then
        term.setTextColor(colors.orange)
        print(""Programs"")
        term.setTextColor(colors.white)
        local files = fs.list(""/"")
        for _, file in ipairs(files) do
            local isStartup = string.match(file, ""^startup$"") or string.match(file, ""^startup%..+"")
            if not isStartup and file ~= ""rom"" then
            print(file)
            end
        end
        
    elseif command == ""hello"" then
        term.clear()
        term.setCursorPos(1,1)
        term.setTextColor(colors.orange)
        textutils.slowPrint(""Hello World!"")
        sleep(3)
        term.clear()
        term.setCursorPos(1,1)
        
    elseif command == ""pedit"" then
        local filename = args[2]
        if filename then
            local lower = string.lower(filename)
            if lower == ""startup"" or lower == ""startup.lua"" then
                print(""warning this is startup file that stores everything"")
                sleep(3)
                shell.run(""edit startup.lua"")
            else
                shell.run(""edit"", filename)
            end
        end
        
    elseif command == ""popen"" then
        local progName = args[2]
        if progName then
            local lower = string.lower(progName)
            if lower == ""startup"" or lower == ""startup.lua"" then
                print(""Error opening that file"")
            elseif shell.resolveProgram(progName) then
                print(""Running "" .. progName)
                shell.run(progName)
            else
                print(""Unknown Program to open"")
            end
        end
    
    elseif command == ""mlist"" then
        term.setTextColor(colors.orange)
        print(""MPrograms"")
        term.setTextColor(colors.white)
        print(""hello  -- hello world"")
        print(""about  -- about system"")
        print(""shutoff  -- shutdowns"")
        print(""popen <1>  -- opens program"")
        print(""pedit <1> -- edits program"")
        print(""reboot -- restarts"")
        print(""cls -- clears screen"")
        print(""shell -- shows text start"")
        print(""cal <math> -- calculator"")
        print(""plist -- lists programs "")
        print(""mlist -- lists mineos programs"")
        print(""pdelete <1> -- deletes program"")
        print(""pir <ins/run> -- installs program"")
        print(""prename <1> <2> -- renames program"")
        
    elseif command == ""shutoff"" then
        term.clear()
        term.setCursorPos(1,1)
        print(""Please Wait..."")
        sleep(1)
        term.setCursorPos(1,1)
        term.setTextColor(colors.red)
        print(""ShuttingOFF..."")
        sleep(4)
        running = false
        os.shutdown()
    
    elseif command == ""reboot"" then
        term.clear()
        term.setCursorPos(1,1)
        print(""Please Wait..."")
        sleep(1)
        term.clear()
        term.setCursorPos(1,1)
        term.setTextColor(colors.red)
        print(""Rebooting..."")
        sleep(4)
        running = false
        os.reboot()
    
    elseif command == ""cls"" then
        term.clear()
        term.setCursorPos(1,1)
    
    elseif command == ""shell"" then
        term.setTextColor(colors.yellow)
        print(""MineOS2"")
        
    elseif command == ""cal"" then
        local expression = input:sub(5) -- everything after 'cal '
        local fn, err = load(""return "" .. expression)
        if fn then
            local ok, result = pcall(fn)
            if ok then
                print(result)
            else
                print(""Error"")
            end
        end
        
    elseif command == ""pdelete"" then
        local filename = args[2]
        if filename then
            local lower = string.lower(filename)
            if lower == ""startup"" or lower == ""startup.lua"" then
                print(""Error deleting that file"")
            elseif fs.exists(filename) then
                fs.delete(filename)
                print(""Deleted "" .. filename)
            else
                print(""Unknown Program to delete"")
            end
        end
        
    elseif command == ""pir"" then
            local action = args[2]
            local code = args[3]

            if action == ""ins"" and code then
                local url = ""https://pastebin.com/raw/"" .. code
                local response = http.get(url)

                if response then
                    local content = response.readAll()
                    response.close()
                    local filename = ""pir_"" .. code .. "".lua""

                    if fs.exists(filename) then
                        print(""File already exists "" .. filename)
                    else
                        local file = fs.open(filename, ""w"")
                        file.write(content)
                        file.close()
                        print(""Installed as "" .. filename)
                    end
                else
                    print(""Failed to fetch"")
                end

            elseif action == ""run"" and code then
                local url = ""https://pastebin.com/raw/"" .. code
                local response = http.get(url)

                if response then
                    local content = response.readAll()
                    response.close()
                    local fn, err = load(content, ""pir_"" .. code)
                    if fn then
                         print(""Running code"")
                         local ok, msg = pcall(fn)
                         if not ok then
                            print(""Error running code script = "" .. msg)
                         end
                    end
                else
                    print(""Error code "" .. (err or ""Unknown error""))
                end
            else
               print(""Failed to fetch"")
            end
        
    elseif command == ""prename"" then
       local oldName = args[2]
       local newName = args[3]

       if not oldName or not newName then
       else
         oldName = oldName .. "".lua""
         newName = newName .. "".lua""

         if oldName == ""startup.lua"" or newName == ""startup.lua"" then
           print(""Error renaming that file"")
         elseif not fs.exists(oldName) then
           print(""File not exist"")
         elseif fs.exists(newName) then
           print(""Already exist"" .. newName)
         else
           fs.move(oldName, newName)
           print(""Renamed "" .. newName)
         end
       end
        
    else
        print(""Unknown MProgram to open"")
    end
end
"
VS5buKVU,2.0,GochiPC,Lua,Saturday 19th of July 2025 08:12:34 AM CDT,"-- WARNING DO NOT EDIT SCRIPT THIS WILL BUG OS
-- if you are best at script why you give it an try
-- to see make an os but if you are an noob
-- dont edit

-- MineOS
local running = true

-- start at first
os.setComputerLabel(""2.0"")
term.setCursorPos(1,1)
term.clear()
term.setTextColor(colors.yellow)
print(""Welcome Player!"")
sleep(3)
term.clear()
term.setCursorPos(1,1)
print(""MineOS2"")

-- prompt
while running do
    term.setTextColor(colors.yellow)
    io.write(""> "")
    term.setTextColor(colors.white)
    local input = read()
    local args = {}
    for word in string.gmatch(input, ""[^%s]+"") do
        table.insert(args, word)
    end

    local command = args[1]

-- commands

    if command == ""about"" then
        term.setTextColor(colors.orange)
        print(""About"")
        term.setTextColor(colors.white)
        print(""   _______    MineOS"")
        print(""  |   |   |   Version: 2.0"")
        print(""  | S | e |   Kernel: DEV2"")
        print(""  | O | n |   CCID: "" .. os.getComputerID())
        print(""  |   | i |   Uptime: "" .. math.floor(os.clock()) .. ""s"")
        print(""  | > | M |   CR: 2023 - 2025"")
        if term.isColor() then
            print(""              Color: true"")
        else
            print(""              Color: false"")
        end
    elseif command == ""help"" then
        term.setTextColor(colors.orange)
        print(""Help"")
        term.setTextColor(colors.white)
        print(""tipe 'plist' or 'mlist'"")
        
    elseif command == ""plist"" then
        term.setTextColor(colors.orange)
        print(""Programs"")
        term.setTextColor(colors.white)
        local files = fs.list(""/"")
        for _, file in ipairs(files) do
            local isStartup = string.match(file, ""^startup$"") or string.match(file, ""^startup%..+"")
            if not isStartup and file ~= ""rom"" then
            print(file)
            end
        end
        
    elseif command == ""hello"" then
        term.clear()
        term.setCursorPos(1,1)
        term.setTextColor(colors.orange)
        textutils.slowPrint(""Hello World!"")
        sleep(3)
        term.clear()
        term.setCursorPos(1,1)
        
    elseif command == ""pedit"" then
        local filename = args[2]
        if filename then
            local lower = string.lower(filename)
            if lower == ""startup"" or lower == ""startup.lua"" then
                print(""warning this is startup file that stores everything"")
                sleep(3)
                shell.run(""edit startup.lua"")
            else
                shell.run(""edit"", filename)
            end
        end
        
    elseif command == ""popen"" then
        local progName = args[2]
        if progName then
            local lower = string.lower(progName)
            if lower == ""startup"" or lower == ""startup.lua"" then
                print(""Error opening that file"")
            elseif shell.resolveProgram(progName) then
                print(""Running "" .. progName)
                shell.run(progName)
            else
                print(""Unknown Program to open"")
            end
        end
    
    elseif command == ""mlist"" then
        term.setTextColor(colors.orange)
        print(""MPrograms"")
        term.setTextColor(colors.white)
        print(""hello  -- hello world"")
        print(""about  -- about system"")
        print(""shutoff  -- shutdowns"")
        print(""popen <program>  -- opens program"")
        print(""pedit <program> -- edits program"")
        print(""reboot -- restarts"")
        print(""cls -- clears screen"")
        print(""shell -- shows text start"")
        print(""cal <math> -- calculator"")
        print(""plist -- lists programs "")
        print(""mlist -- lists mineos programs"")
        print(""pdelete <program> -- deletes program"")
        print(""pir <ins/run> -- installs program"")
        
    elseif command == ""shutoff"" then
        term.clear()
        term.setCursorPos(1,1)
        print(""Please Wait..."")
        sleep(1)
        term.setCursorPos(1,1)
        term.setTextColor(colors.red)
        print(""ShuttingOFF..."")
        sleep(4)
        running = false
        os.shutdown()
    
    elseif command == ""reboot"" then
        term.clear()
        term.setCursorPos(1,1)
        print(""Please Wait..."")
        sleep(1)
        term.clear()
        term.setCursorPos(1,1)
        term.setTextColor(colors.red)
        print(""Rebooting..."")
        sleep(4)
        running = false
        os.reboot()
    
    elseif command == ""cls"" then
        term.clear()
        term.setCursorPos(1,1)
    
    elseif command == ""shell"" then
        term.setTextColor(colors.yellow)
        print(""MineOS2"")
        
    elseif command == ""cal"" then
        local expression = input:sub(5) -- everything after 'cal '
        local fn, err = load(""return "" .. expression)
        if fn then
            local ok, result = pcall(fn)
            if ok then
                print(result)
            else
                print(""Error"")
            end
        end
        
    elseif command == ""pdelete"" then
        local filename = args[2]
        if filename then
            local lower = string.lower(filename)
            if lower == ""startup"" or lower == ""startup.lua"" then
                print(""Error deleting that file"")
            elseif fs.exists(filename) then
                fs.delete(filename)
                print(""Deleted "" .. filename)
            else
                print(""Unknown Program to delete"")
            end
        end
        
    elseif command == ""pir"" then
            local action = args[2]
            local code = args[3]

            if action == ""ins"" and code then
                local url = ""https://pastebin.com/raw/"" .. code
                local response = http.get(url)

                if response then
                    local content = response.readAll()
                    response.close()
                    local filename = ""pir_"" .. code .. "".lua""

                    if fs.exists(filename) then
                        print(""File already exists "" .. filename)
                    else
                        local file = fs.open(filename, ""w"")
                        file.write(content)
                        file.close()
                        print(""Installed as "" .. filename)
                    end
                else
                    print(""Failed to fetch"")
                end

            elseif action == ""run"" and code then
                local url = ""https://pastebin.com/raw/"" .. code
                local response = http.get(url)

                if response then
                    local content = response.readAll()
                    response.close()
                    local fn, err = load(content, ""pir_"" .. code)
                    if fn then
                         print(""Running code"")
                         local ok, msg = pcall(fn)
                         if not ok then
                            print(""Error running code script = "" .. msg)
                         end
                    end
                else
                    print(""Error code "" .. (err or ""Unknown error""))
                end
            else
               print(""Failed to fetch"")
            end

    else
        print(""Unknown MProgram to open"")
    end
end
"
xgmFLwmJ,PlasmaOSinstall,blank_code_,Lua,Saturday 19th of July 2025 08:11:46 AM CDT,"shell.run(""pastebin get 1WVxBzpT confirm"")
shell.run(""confirm rm /*"")
shell.run(""pastebin get pJgFREAG startup.lua"")
shell.run(""pastebin get pua6rt8P plasmaos.lua"")"
XvhdVupy,Untitled,gandalfbialy,C#,Saturday 19th of July 2025 08:05:23 AM CDT,"using UnityEngine;
using TMPro;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class MenuManager : MonoBehaviour
{
    public TextMeshProUGUI highscoreValue;
    public TextMeshProUGUI coinsValue;
    public TextMeshProUGUI soundButtonText;

    private int highscore = 0;
    private int coins = 0;

    public GameObject mainMenuPanel;
    public GameObject upgradesStorePanel;

    public Text magnetLevelText;
    public Text magnetButtonText;

    public Text immortalityLevelText;
    public Text immortalityButtonText;

    public Powerup magnet;
    public Powerup immortality;

    public void OpenUpgradeStore()
    {
        mainMenuPanel.SetActive(false);
        upgradesStorePanel.SetActive(true);
    }

    public void CloseUpgradeStore()
    {
        mainMenuPanel.SetActive(true);
        upgradesStorePanel.SetActive(false);
    }

    void Start()
    {
        if (PlayerPrefs.HasKey(""HighscoreValue""))
        {
            highscore = PlayerPrefs.GetInt(""HighscoreValue"");
        }

        if (PlayerPrefs.HasKey(""Coins""))
        {
            coins = PlayerPrefs.GetInt(""Coins"");
        }

        UpdateUI();
    }

    public void UpdateUI()
    {
        highscoreValue.text = highscore.ToString();
        coinsValue.text = coins.ToString();

        if (SoundManager.instance.GetMuted())
        {
            soundButtonText.text = ""Music ON"";
        }
        else
        {
            soundButtonText.text = ""Music OFF"";
        }

        immortalityLevelText.text = immortality.ToString();
        immortalityButtonText.text = immortality.UpgradeCostString();
        magnetLevelText.text = magnet.ToString();
        magnetButtonText.text = magnet.UpgradeCostString();
    }

    public void UpgradeImmortalityButton()
    {
        UpgradePowerup(immortality);
    }

    public void UpgradeMagnetButton()
    {
        UpgradePowerup(magnet);
    }
    private void UpgradePowerup(Powerup powerup)
    {
        if (coins >= powerup.GetNextUpgradeCost() && !powerup.IsMaxedOut())
        {
            ReduceCoinsAmount(powerup.GetNextUpgradeCost());
            powerup.Upgrade();
            UpdateUI();
        }
    }
    private void ReduceCoinsAmount(int amount)
    {
        coins -= amount;
        PlayerPrefs.SetInt(""Coins"", coins);
    }

    public void PlayButtonClicked()
    {
        SceneManager.LoadScene(""Game"");
    }
    public void SoundButtonClicked()
    {
        SoundManager.instance.ToggleMuted();
        UpdateUI();
    }


    void Update()
    {
        
    }
}
"
AbvNX6p5,Untitled,gandalfbialy,C#,Saturday 19th of July 2025 08:04:00 AM CDT,"using UnityEngine;
[CreateAssetMenu(fileName = ""Magnet"", menuName = ""Powerup/Magnet"")]
public class Magnet : Powerup
{
    [SerializeField]
    private PowerupStats range;
    public float GetRange() { return range.GetValue(currentLevel); }
    [SerializeField]
    private PowerupStats speed;
    public float GetSpeed() { return speed.GetValue(currentLevel); }
}"
qvgzYhes,Untitled,gandalfbialy,C#,Saturday 19th of July 2025 08:01:24 AM CDT,"using UnityEngine;
public abstract class Powerup : ScriptableObject
{
    public bool isActive;
    [SerializeField]
    protected int[] UpgradeCosts;
    [SerializeField]
    protected int currentLevel = 1;
    [SerializeField]
    protected int maxLevel = 3;
    [SerializeField]
    protected PowerupStats duration;
    public float GetDuration() { return duration.GetValue(currentLevel); }
    private void Awake()
    {
        LoadPowerupLevel();
    }
    private void OnValidate()
    {
        currentLevel = Mathf.Min(currentLevel, maxLevel);
        currentLevel = Mathf.Max(currentLevel, 1);
    }
    public bool IsMaxedOut()
    {
        return currentLevel == maxLevel;
    }
    public int GetNextUpgradeCost()
    {
        if (!IsMaxedOut())
        {
            return UpgradeCosts[currentLevel - 1];
        }
        else
        {
            return -1;
        }
    }
    public void Upgrade()
    {
        if (IsMaxedOut()) return;
        currentLevel++;
        SavePowerupLevel();
    }
    // potrzeba zapisać oraz wczytać do/z PlayerPrefs poziom powerupa, aby po zbudowaniu był zapamiętywany obecny poziom powerupa
private void SavePowerupLevel()
    {
        string key = name + ""Level"";
        PlayerPrefs.SetInt(key, currentLevel);
    }
    private void LoadPowerupLevel()
    {
        string key = name + ""Level"";
        if (PlayerPrefs.HasKey(key))
        {
            currentLevel = PlayerPrefs.GetInt(key);
        }
    }
    public override string ToString()
    {
        string text = $""{name}\nLVL. {currentLevel}"";
        if (IsMaxedOut())
            text += "" (MAX)"";
        return text;
    }
    public string UpgradeCostString()
    {
        if (!IsMaxedOut())
            return $""UPGRADE\nCOST: {GetNextUpgradeCost()}"";
        else
            return ""MAXED OUT"";
    }
}"
WQgiZpf5,config_entry-esphome-01K0FNTAFKHYDFH5TVC2QHFVFV,Kat81inTX,JSON,Saturday 19th of July 2025 07:07:09 AM CDT,"{
  ""home_assistant"": {
    ""installation_type"": ""Home Assistant OS"",
    ""version"": ""2025.7.2"",
    ""dev"": false,
    ""hassio"": true,
    ""virtualenv"": false,
    ""python_version"": ""3.13.3"",
    ""docker"": true,
    ""arch"": ""aarch64"",
    ""timezone"": ""America/Chicago"",
    ""os_name"": ""Linux"",
    ""os_version"": ""6.12.25-haos-raspi"",
    ""container_arch"": ""aarch64"",
    ""supervisor"": ""2025.07.1"",
    ""host_os"": ""Home Assistant OS 16.0"",
    ""docker_version"": ""28.3.0"",
    ""chassis"": ""embedded"",
    ""run_as_root"": true
  },
  ""custom_components"": {
    ""battery_notes"": {
      ""documentation"": ""https://andrew-codechimp.github.io/HA-Battery-Notes/"",
      ""version"": ""2.10.8"",
      ""requirements"": []
    },
    ""spook"": {
      ""documentation"": ""https://spook.boo"",
      ""version"": ""3.1.0"",
      ""requirements"": []
    },
    ""openweathermaphistory"": {
      ""documentation"": ""https://github.com/petergridge/openweathermaphistory"",
      ""version"": ""2025.06.03"",
      ""requirements"": [
        ""pyopenweathermap==0.2.2""
      ]
    },
    ""hacs"": {
      ""documentation"": ""https://hacs.xyz/docs/use/"",
      ""version"": ""2.0.5"",
      ""requirements"": [
        ""aiogithubapi>=22.10.1""
      ]
    },
    ""webrtc"": {
      ""documentation"": ""https://github.com/AlexxIT/WebRTC"",
      ""version"": ""v3.6.0"",
      ""requirements"": []
    },
    ""meross_cloud"": {
      ""documentation"": ""https://www.home-assistant.io/components/meross_cloud"",
      ""version"": ""1.3.7"",
      ""requirements"": [
        ""meross_iot==0.4.9.0""
      ]
    },
    ""smarthub"": {
      ""documentation"": ""https://github.com/gagata/ha-smarthub-energy-sensor"",
      ""version"": ""v1.0.0"",
      ""requirements"": [
        ""aiohttp""
      ]
    },
    ""spook_inverse"": {
      ""documentation"": ""https://spook.boo"",
      ""version"": ""3.1.0"",
      ""requirements"": []
    },
    ""icloud3"": {
      ""documentation"": ""https://gcobb321.github.io/icloud3_v3_docs/#/"",
      ""version"": ""3.2.2.3"",
      ""requirements"": [
        ""srp""
      ]
    },
    ""linksys_velop"": {
      ""documentation"": ""https://github.com/uvjim/linksys_velop"",
      ""version"": ""2025.5.1"",
      ""requirements"": [
        ""pyvelop==2025.4.2""
      ]
    },
    ""ha_electric_usage_downloader"": {
      ""documentation"": ""https://github.com/smue86/ha-electric-usage-downloader"",
      ""version"": ""1.0.0"",
      ""requirements"": [
        ""beautifulsoup4==4.12.3"",
        ""aiohttp==3.10.10""
      ]
    },
    ""bermuda"": {
      ""documentation"": ""https://github.com/agittins/bermuda"",
      ""version"": ""0.8.4"",
      ""requirements"": []
    },
    ""watchman"": {
      ""documentation"": ""https://github.com/dummylabs/thewatchman"",
      ""version"": ""0.6.5"",
      ""requirements"": [
        ""prettytable==3.12.0""
      ]
    },
    ""localtuya"": {
      ""documentation"": ""https://github.com/rospogrigio/localtuya/"",
      ""version"": ""5.2.3"",
      ""requirements"": []
    }
  },
  ""integration_manifest"": {
    ""domain"": ""esphome"",
    ""name"": ""ESPHome"",
    ""after_dependencies"": [
      ""hassio"",
      ""zeroconf"",
      ""tag""
    ],
    ""codeowners"": [
      ""OttoWinter"",
      ""jesserockz"",
      ""kbx81"",
      ""bdraco""
    ],
    ""config_flow"": true,
    ""dependencies"": [
      ""assist_pipeline"",
      ""bluetooth"",
      ""intent"",
      ""ffmpeg"",
      ""http""
    ],
    ""dhcp"": [
      {
        ""registered_devices"": true
      }
    ],
    ""documentation"": ""https://www.home-assistant.io/integrations/esphome"",
    ""integration_type"": ""device"",
    ""iot_class"": ""local_push"",
    ""loggers"": [
      ""aioesphomeapi"",
      ""noiseprotocol"",
      ""bleak_esphome""
    ],
    ""mqtt"": [
      ""esphome/discover/#""
    ],
    ""quality_scale"": ""platinum"",
    ""requirements"": [
      ""aioesphomeapi==33.1.1"",
      ""esphome-dashboard-api==1.3.0"",
      ""bleak-esphome==2.16.0""
    ],
    ""zeroconf"": [
      ""_esphomelib._tcp.local.""
    ],
    ""is_built_in"": true,
    ""overwrites_built_in"": false
  },
  ""setup_times"": {},
  ""data"": {
    ""config"": {
      ""created_at"": ""2025-07-18T21:07:36.051656+00:00"",
      ""data"": {
        ""host"": ""192.168.1.125"",
        ""port"": 6053,
        ""password"": """",
        ""noise_psk"": """",
        ""device_name"": ""esp32-s3-geek"",
        ""bluetooth_mac_address"": ""**REDACTED**""
      },
      ""discovery_keys"": {
        ""zeroconf"": [
          {
            ""__type"": ""<class 'homeassistant.helpers.discovery_flow.DiscoveryKey'>"",
            ""repr"": ""DiscoveryKey(domain='zeroconf', key=('_esphomelib._tcp.local.', 'esp32-s3-geek._esphomelib._tcp.local.'), version=1)""
          }
        ],
        ""dhcp"": [
          {
            ""__type"": ""<class 'homeassistant.helpers.discovery_flow.DiscoveryKey'>"",
            ""repr"": ""DiscoveryKey(domain='dhcp', key='84fce6518194', version=1)""
          }
        ]
      },
      ""disabled_by"": null,
      ""domain"": ""esphome"",
      ""entry_id"": ""01K0FNTAFKHYDFH5TVC2QHFVFV"",
      ""minor_version"": 1,
      ""modified_at"": ""2025-07-18T21:07:46.299343+00:00"",
      ""options"": {
        ""allow_service_calls"": false
      },
      ""pref_disable_new_entities"": false,
      ""pref_disable_polling"": false,
      ""source"": ""zeroconf"",
      ""subentries"": [],
      ""title"": ""ESP32-S3-GEEK Client Bridge/Proxy/Tracker"",
      ""unique_id"": ""84:fc:e6:51:81:94"",
      ""version"": 1
    },
    ""storage_data"": {
      ""device_info"": {
        ""uses_password"": false,
        ""name"": ""esp32-s3-geek"",
        ""friendly_name"": ""ESP32-S3-GEEK Client Bridge/Proxy/Tracker"",
        ""mac_address"": ""**REDACTED**"",
        ""compilation_time"": ""Jul 18 2025, 16:05:53"",
        ""model"": ""esp32-s3-devkitc-1"",
        ""manufacturer"": ""Espressif"",
        ""has_deep_sleep"": false,
        ""esphome_version"": ""2025.7.1"",
        ""project_name"": """",
        ""project_version"": """",
        ""webserver_port"": 0,
        ""legacy_voice_assistant_version"": 0,
        ""voice_assistant_feature_flags"": 0,
        ""legacy_bluetooth_proxy_version"": 5,
        ""bluetooth_proxy_feature_flags"": 127,
        ""suggested_area"": ""Garage Entry"",
        ""bluetooth_mac_address"": ""**REDACTED**"",
        ""devices"": [
          {
            ""device_id"": 2789552890,
            ""name"": ""Water Tank Sensor"",
            ""area_id"": 2579288416
          }
        ],
        ""areas"": [
          {
            ""area_id"": 4046731393,
            ""name"": ""Garage Entry""
          },
          {
            ""area_id"": 2579288416,
            ""name"": ""Garage""
          }
        ],
        ""area"": {
          ""area_id"": 0,
          ""name"": """"
        }
      },
      ""services"": [],
      ""api_version"": {
        ""major"": 1,
        ""minor"": 10
      },
      ""button"": [
        {
          ""object_id"": ""safe_mode_boot"",
          ""key"": 2037531703,
          ""name"": ""Safe Mode Boot"",
          ""unique_id"": ""esp32-s3-geekbuttonsafe_mode_boot"",
          ""disabled_by_default"": false,
          ""icon"": ""mdi:restart-alert"",
          ""entity_category"": 1,
          ""device_id"": 0,
          ""device_class"": ""restart""
        },
        {
          ""object_id"": ""factory_reset"",
          ""key"": 3740619177,
          ""name"": ""Factory reset"",
          ""unique_id"": ""esp32-s3-geekbuttonfactory_reset"",
          ""disabled_by_default"": false,
          ""icon"": ""mdi:restart-alert"",
          ""entity_category"": 1,
          ""device_id"": 0,
          ""device_class"": ""restart""
        }
      ],
      ""sensor"": [
        {
          ""object_id"": ""pressure"",
          ""key"": 1205348660,
          ""name"": ""Pressure"",
          ""unique_id"": ""esp32-s3-geeksensorpressure"",
          ""disabled_by_default"": false,
          ""icon"": """",
          ""entity_category"": 0,
          ""device_id"": 2789552890,
          ""device_class"": ""pressure"",
          ""unit_of_measurement"": ""psi"",
          ""accuracy_decimals"": 1,
          ""force_update"": false,
          ""state_class"": 0,
          ""legacy_last_reset_type"": 0
        },
        {
          ""object_id"": ""temperature"",
          ""key"": 899752953,
          ""name"": ""Temperature"",
          ""unique_id"": ""esp32-s3-geeksensortemperature"",
          ""disabled_by_default"": false,
          ""icon"": """",
          ""entity_category"": 0,
          ""device_id"": 2789552890,
          ""device_class"": ""temperature"",
          ""unit_of_measurement"": ""\u00b0F"",
          ""accuracy_decimals"": 1,
          ""force_update"": false,
          ""state_class"": 0,
          ""legacy_last_reset_type"": 0
        },
        {
          ""object_id"": ""battery"",
          ""key"": 2326215132,
          ""name"": ""Battery"",
          ""unique_id"": ""esp32-s3-geeksensorbattery"",
          ""disabled_by_default"": false,
          ""icon"": ""mdi:battery"",
          ""entity_category"": 0,
          ""device_id"": 2789552890,
          ""device_class"": ""battery"",
          ""unit_of_measurement"": ""%"",
          ""accuracy_decimals"": 0,
          ""force_update"": false,
          ""state_class"": 1,
          ""legacy_last_reset_type"": 0
        }
      ],
      ""text_sensor"": [
        {
          ""object_id"": ""model_number"",
          ""key"": 523973644,
          ""name"": ""Model Number"",
          ""unique_id"": ""esp32-s3-geektext_sensormodel_number"",
          ""disabled_by_default"": false,
          ""icon"": ""mdi:information-outline"",
          ""entity_category"": 0,
          ""device_id"": 2789552890,
          ""device_class"": """"
        },
        {
          ""object_id"": ""manufacturer"",
          ""key"": 2739570378,
          ""name"": ""Manufacturer"",
          ""unique_id"": ""esp32-s3-geektext_sensormanufacturer"",
          ""disabled_by_default"": false,
          ""icon"": ""mdi:information-outline"",
          ""entity_category"": 0,
          ""device_id"": 2789552890,
          ""device_class"": """"
        },
        {
          ""object_id"": ""serial_number"",
          ""key"": 412222983,
          ""name"": ""Serial Number"",
          ""unique_id"": ""esp32-s3-geektext_sensorserial_number"",
          ""disabled_by_default"": false,
          ""icon"": ""mdi:information-outline"",
          ""entity_category"": 0,
          ""device_id"": 2789552890,
          ""device_class"": """"
        },
        {
          ""object_id"": ""firmware_revision"",
          ""key"": 1074843366,
          ""name"": ""Firmware Revision"",
          ""unique_id"": ""esp32-s3-geektext_sensorfirmware_revision"",
          ""disabled_by_default"": false,
          ""icon"": ""mdi:information-outline"",
          ""entity_category"": 0,
          ""device_id"": 2789552890,
          ""device_class"": """"
        }
      ],
      ""update"": []
    },
    ""bluetooth"": {
      ""connections_free"": 3,
      ""connections_limit"": 3,
      ""available"": true,
      ""scanner"": {
        ""name"": ""esp32-s3-geek (84:FC:E6:51:81:96)"",
        ""connectable"": true,
        ""start_time"": 45949.156483688,
        ""source"": ""84:FC:E6:51:81:96"",
        ""scanning"": true,
        ""requested_mode"": {
          ""__type"": ""<enum 'BluetoothScanningMode'>"",
          ""repr"": ""<BluetoothScanningMode.ACTIVE: 'active'>""
        },
        ""current_mode"": {
          ""__type"": ""<enum 'BluetoothScanningMode'>"",
          ""repr"": ""<BluetoothScanningMode.ACTIVE: 'active'>""
        },
        ""type"": ""ESPHomeScanner"",
        ""last_detection"": 57277.078373348,
        ""monotonic_time"": 57277.094373352,
        ""discovered_devices_and_advertisement_data"": [
          {
            ""name"": null,
            ""address"": ""F0:B3:EC:53:D3:D5"",
            ""rssi"": -89,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b\""\\x10\\x05\\n\\x14'8\\xb9\""""
                }
              },
              {},
              [],
              12,
              -89,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 0
            }
          },
          {
            ""name"": null,
            ""address"": ""C0:95:6D:A5:29:43"",
            ""rssi"": -81,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x10\\x05\\x0b\\x14\\xddAr'""
                }
              },
              {},
              [],
              12,
              -81,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 0
            }
          },
          {
            ""name"": ""ELK-BLEDDM    "",
            ""address"": ""BE:27:C5:00:DD:86"",
            ""rssi"": -89,
            ""advertisement_data"": [
              ""ELK-BLEDDM    "",
              {},
              {},
              [],
              -127,
              -89,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 0
            }
          },
          {
            ""name"": ""Signe gradient floor"",
            ""address"": ""F2:28:25:97:CE:67"",
            ""rssi"": -90,
            ""advertisement_data"": [
              ""Signe gradient floor"",
              {},
              {
                ""0000fe0f-0000-1000-8000-00805f9b34fb"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'm\\x10\\xff\\xff\\x02'""
                }
              },
              [
                ""0000fe0f-0000-1000-8000-00805f9b34fb""
              ],
              10,
              -90,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": ""Linksys"",
            ""address"": ""E8:9F:80:69:F3:3D"",
            ""rssi"": -84,
            ""advertisement_data"": [
              ""Linksys"",
              {
                ""92"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x01\\x01'""
                }
              },
              {},
              [
                ""00002080-8eab-46c2-b788-0e9440016fd1""
              ],
              -127,
              -84,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 0
            }
          },
          {
            ""name"": null,
            ""address"": ""79:60:F5:AC:96:2C"",
            ""rssi"": -94,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x10\\x05\\x04\\x1c\\xf6\\xbf\\xcc'""
                }
              },
              {},
              [],
              -127,
              -94,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": ""tps"",
            ""address"": ""49:25:03:27:07:D8"",
            ""rssi"": -96,
            ""advertisement_data"": [
              ""tps"",
              {
                ""260"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xd4<d\\x08'""
                },
                ""270"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00L=d\\x08'""
                },
                ""280"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\x05\\xfed\\x08'""
                },
                ""290"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xdd\\xfbd\\x08'""
                },
                ""300"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xb4:d\\x08'""
                },
                ""310"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xed\\xf8d\\x08'""
                },
                ""320"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00$3d\\x08'""
                },
                ""330"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xbc2d\\x08'""
                },
                ""340"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\x140d\\x08'""
                },
                ""350"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\x8c1d\\x08'""
                },
                ""360"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00D5d\\x08'""
                },
                ""370"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\x1d\\xf7d\\x08'""
                },
                ""380"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00t6d\\x08'""
                },
                ""390"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xac\""d\\x08'""
                },
                ""400"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xe5\\xe1d\\x08'""
                },
                ""410"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00}\\xe0d\\x08'""
                },
                ""250"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xfc\\x14d\\x08'""
                },
                ""240"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00d\\x15d\\x08'""
                },
                ""230"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00-\\xd6d\\x08'""
                },
                ""220"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xf5\\xd3d\\x08'""
                },
                ""210"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\x9c\\x12d\\x08'""
                },
                ""420"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00T%d\\x08'""
                },
                ""160"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x00\\x00\\xa4\\x19d\\x08'""
                }
              },
              {},
              [
                ""0000fff0-0000-1000-8000-00805f9b34fb""
              ],
              -127,
              -96,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 0
            }
          },
          {
            ""name"": ""GVH5075_EA71"",
            ""address"": ""A4:C1:38:5B:EA:71"",
            ""rssi"": -88,
            ""advertisement_data"": [
              ""GVH5075_EA71"",
              {
                ""60552"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x00\\x03\\x8f\\xecA\\x00'""
                },
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x02\\x15INTELLI_ROCKS_HWPu\\xf2\\xff\\x0c'""
                }
              },
              {},
              [
                ""0000ec88-0000-1000-8000-00805f9b34fb""
              ],
              -127,
              -88,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 0
            }
          },
          {
            ""name"": null,
            ""address"": ""43:60:B0:2E:9F:2F"",
            ""rssi"": -80,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b\""\\x0f\\x05\\x90\\x00q\\x85\\xae\\x10\\x02'\\x04\""""
                }
              },
              {},
              [],
              0,
              -80,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""41:3F:19:5C:6D:C5"",
            ""rssi"": -87,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\t\\x08\\x13\\x97\\xc0\\xa8\\x01h\\x1bX\\x16\\x08\\x00\\xaeV,\\xb3\\x05\\xce\\xc1'""
                }
              },
              {},
              [],
              -127,
              -87,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""03:C9:F9:00:CA:48"",
            ""rssi"": -87,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x13\\x08Z\\x0c\\x97\\t\\xe9\\xa4\\x10\\x00'""
                }
              },
              {},
              [],
              -127,
              -87,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""6C:9A:BC:1A:C8:6D"",
            ""rssi"": -87,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10'""
                }
              },
              {},
              [],
              12,
              -87,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""6D:7C:6B:77:4F:B1"",
            ""rssi"": -87,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x0c\\x0e\\x00\""x`0y7J<\\x9c\\xdc\\xcd\\x97\\x8e\\x10\\x05N\\x1c\\x04eF'""
                }
              },
              {},
              [],
              -127,
              -87,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""42:B7:B0:8B:61:E2"",
            ""rssi"": -85,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\t\\x08\\x13\\x10\\xc0\\xa8\\x01\\xee\\x1bX\\x16\\x08\\x00\\xc8\\xe6\\x0b\\x06\\xed\\x07\\xb5'""
                }
              },
              {},
              [],
              -127,
              -85,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""69:84:04:94:C9:F1"",
            ""rssi"": -92,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x10\\x05\""\\x98\\xba<C'""
                }
              },
              {},
              [],
              0,
              -92,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""F8:7D:05:37:15:62"",
            ""rssi"": -98,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x12\\x02\\x00\\x03'""
                }
              },
              {},
              [],
              -127,
              -98,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""6B:85:81:A9:52:09"",
            ""rssi"": -89,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x0f\\x05\\x90\\x00\\x7f\\xa3~\\x10\\x02.\\x04'""
                }
              },
              {},
              [],
              0,
              -89,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""30:F4:EA:04:F2:48"",
            ""rssi"": -89,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x13\\x08J5\\xb6,\\xf9\\xe4\\xde\\x00'""
                }
              },
              {},
              [],
              -127,
              -89,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""55:CF:8B:5C:02:FB"",
            ""rssi"": -88,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\t\\x08\\x13\\x04\\xc0\\xa8\\x01\\x1d\\x1bX\\x16\\x08\\x00i(G5\\x19R2'""
                }
              },
              {},
              [],
              -127,
              -88,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": ""S54 3DBA LE"",
            ""address"": ""4B:BF:FC:FC:54:9D"",
            ""rssi"": -89,
            ""advertisement_data"": [
              ""S54 3DBA LE"",
              {
                ""1447"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x08\\xf5\\xec\\x14\\xbe40\\x95\\xeb'""
                }
              },
              {},
              [
                ""0000fe07-0000-1000-8000-00805f9b34fb""
              ],
              15,
              -89,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""53:3F:E2:9E:6A:31"",
            ""rssi"": -94,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10'""
                }
              },
              {},
              [],
              12,
              -94,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""65:CD:B2:70:5F:CC"",
            ""rssi"": -91,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\t\\x08\\x13m\\xc0\\xa8\\x01\\xe3\\x1bX\\x16\\x08\\x00\\xf0S\\xa5{uU}'""
                }
              },
              {},
              [],
              -127,
              -91,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""75:DE:19:95:B8:95"",
            ""rssi"": -95,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x10\\x02!\\x00'""
                }
              },
              {},
              [],
              0,
              -95,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""62:C6:AE:E8:C9:69"",
            ""rssi"": -90,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x0f\\x05\\x90\\x00\\xe9\\xed\\xd1\\x10\\x02#\\x04'""
                }
              },
              {},
              [],
              0,
              -90,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""31:24:DF:F7:67:ED"",
            ""rssi"": -92,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x13\\x08J\\xc6\\xcew\\xc0j\\x89\\x00'""
                }
              },
              {},
              [],
              -127,
              -92,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""45:54:CA:14:1A:06"",
            ""rssi"": -91,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\t\\x08\\x13\\x00\\xc0\\xa8\\x01\\x1a\\x1bX\\x16\\x08\\x00/k\\x14h\\xfd\\xd4\\xa1'""
                }
              },
              {},
              [],
              -127,
              -91,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""D0:F6:F3:F2:00:F6"",
            ""rssi"": -87,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x12\\x02\\x00\\x03'""
                }
              },
              {},
              [],
              -127,
              -87,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""FA:55:19:47:C3:D8"",
            ""rssi"": -94,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x12\\x02\\x00\\x03'""
                }
              },
              {},
              [],
              -127,
              -94,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""E0:00:40:E0:5F:CF"",
            ""rssi"": -89,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x12\\x02\\x00\\x00'""
                }
              },
              {},
              [],
              -127,
              -89,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""C6:D2:60:1C:55:8C"",
            ""rssi"": -89,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\x12\\x02\\x00\\x00'""
                }
              },
              {},
              [],
              -127,
              -89,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          },
          {
            ""name"": null,
            ""address"": ""68:6E:74:72:B2:5C"",
            ""rssi"": -92,
            ""advertisement_data"": [
              null,
              {
                ""76"": {
                  ""__type"": ""<class 'bytes'>"",
                  ""repr"": ""b'\\n\\x01\\x80'""
                }
              },
              {},
              [],
              -127,
              -92,
              []
            ],
            ""details"": {
              ""source"": ""84:FC:E6:51:81:96"",
              ""address_type"": 1
            }
          }
        ],
        ""discovered_device_timestamps"": {
          ""F0:B3:EC:53:D3:D5"": 57275.850373049,
          ""C0:95:6D:A5:29:43"": 57276.462373198,
          ""BE:27:C5:00:DD:86"": 57276.158373124,
          ""F2:28:25:97:CE:67"": 57274.322372678,
          ""E8:9F:80:69:F3:3D"": 57264.922370413,
          ""79:60:F5:AC:96:2C"": 57276.158373124,
          ""49:25:03:27:07:D8"": 57262.978369948,
          ""A4:C1:38:5B:EA:71"": 57258.898368976,
          ""43:60:B0:2E:9F:2F"": 57275.44237295,
          ""41:3F:19:5C:6D:C5"": 57275.850373049,
          ""03:C9:F9:00:CA:48"": 57275.850373049,
          ""6C:9A:BC:1A:C8:6D"": 57275.750373025,
          ""6D:7C:6B:77:4F:B1"": 57277.078373348,
          ""42:B7:B0:8B:61:E2"": 57276.462373198,
          ""69:84:04:94:C9:F1"": 57270.730371809,
          ""F8:7D:05:37:15:62"": 57264.922370413,
          ""6B:85:81:A9:52:09"": 57277.078373348,
          ""30:F4:EA:04:F2:48"": 57277.078373348,
          ""55:CF:8B:5C:02:FB"": 57276.462373198,
          ""4B:BF:FC:FC:54:9D"": 57272.922372339,
          ""53:3F:E2:9E:6A:31"": 57274.114372628,
          ""65:CD:B2:70:5F:CC"": 57275.134372875,
          ""75:DE:19:95:B8:95"": 57273.598372503,
          ""62:C6:AE:E8:C9:69"": 57276.158373124,
          ""31:24:DF:F7:67:ED"": 57271.038371883,
          ""45:54:CA:14:1A:06"": 57266.570370808,
          ""D0:F6:F3:F2:00:F6"": 57270.422371735,
          ""FA:55:19:47:C3:D8"": 57264.610370338,
          ""E0:00:40:E0:5F:CF"": 57127.266340872,
          ""C6:D2:60:1C:55:8C"": 57209.698357711,
          ""68:6E:74:72:B2:5C"": 57094.702335002
        },
        ""raw_advertisement_data"": {
          ""F0:B3:EC:53:D3:D5"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b\""\\x02\\x01\\x1a\\x02\\n\\x0c\\n\\xffL\\x00\\x10\\x05\\n\\x14'8\\xb9\""""
          },
          ""C0:95:6D:A5:29:43"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x02\\n\\x0c\\n\\xffL\\x00\\x10\\x05\\x0b\\x14\\xddAr'""
          },
          ""BE:27:C5:00:DD:86"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x06\\x0f\\tELK-BLEDDM    \\x0f\\tELK-BLEDDM    '""
          },
          ""F2:28:25:97:CE:67"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x06\\x03\\x02\\x0f\\xfe\\x08\\x16\\x0f\\xfem\\x10\\xff\\xff\\x02\\x02\\n\\n\\x15\\tSigne gradient floor'""
          },
          ""E8:9F:80:69:F3:3D"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x06\\x08\\tLinksys'""
          },
          ""79:60:F5:AC:96:2C"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x06\\n\\xffL\\x00\\x10\\x05\\x04\\x1c\\xf6\\xbf\\xcc'""
          },
          ""49:25:03:27:07:D8"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x06\\x03\\x02\\xf0\\xff\\x04\\ttps\\n\\xff\\xf0\\x00\\x00\\x00\\x00d\\x15d\\x08'""
          },
          ""A4:C1:38:5B:EA:71"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\r\\tGVH5075_EA71\\x03\\x03\\x88\\xec\\x02\\x01\\x05\\t\\xff\\x88\\xec\\x00\\x03\\x8f\\xecA\\x00\\x1a\\xffL\\x00\\x02\\x15INTELLI_ROCKS_HWPu\\xf2\\xff\\x0c'""
          },
          ""43:60:B0:2E:9F:2F"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b\""\\x02\\x01\\x1a\\x0e\\xffL\\x00\\x0f\\x05\\x90\\x00q\\x85\\xae\\x10\\x02'\\x04\\x02\\n\\x00\""""
          },
          ""41:3F:19:5C:6D:C5"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x17\\xffL\\x00\\t\\x08\\x13\\x97\\xc0\\xa8\\x01h\\x1bX\\x16\\x08\\x00\\xaeV,\\xb3\\x05\\xce\\xc1'""
          },
          ""03:C9:F9:00:CA:48"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\r\\xffL\\x00\\x13\\x08Z\\x0c\\x97\\t\\xe9\\xa4\\x10\\x00'""
          },
          ""6C:9A:BC:1A:C8:6D"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x02\\n\\x0c\\x0b\\xffL\\x00\\x10\\x068\\x1e\\x9d\\x1e\\x94`\\x14\\xffL\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10'""
          },
          ""6D:7C:6B:77:4F:B1"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x1a\\xffL\\x00\\x0c\\x0e\\x00\""x`0y7J<\\x9c\\xdc\\xcd\\x97\\x8e\\x10\\x05N\\x1c\\x04eF'""
          },
          ""42:B7:B0:8B:61:E2"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x17\\xffL\\x00\\t\\x08\\x13\\x10\\xc0\\xa8\\x01\\xee\\x1bX\\x16\\x08\\x00\\xc8\\xe6\\x0b\\x06\\xed\\x07\\xb5'""
          },
          ""69:84:04:94:C9:F1"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\n\\xffL\\x00\\x10\\x05\""\\x98\\xba<C\\x02\\n\\x00'""
          },
          ""F8:7D:05:37:15:62"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x07\\xffL\\x00\\x12\\x02\\x00\\x03'""
          },
          ""6B:85:81:A9:52:09"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x0e\\xffL\\x00\\x0f\\x05\\x90\\x00\\x7f\\xa3~\\x10\\x02.\\x04\\x02\\n\\x00'""
          },
          ""30:F4:EA:04:F2:48"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\r\\xffL\\x00\\x13\\x08J5\\xb6,\\xf9\\xe4\\xde\\x00'""
          },
          ""55:CF:8B:5C:02:FB"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x17\\xffL\\x00\\t\\x08\\x13\\x04\\xc0\\xa8\\x01\\x1d\\x1bX\\x16\\x08\\x00i(G5\\x19R2'""
          },
          ""4B:BF:FC:FC:54:9D"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x02\\x14\\xff\\xa7\\x05\\x06\\x00\\x12 )\\x00\\xca\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\n\\x0f\\x03\\x03\\x07\\xfe\\x0c\\tS54 3DBA LE\\x0c\\xff\\xa7\\x05\\x08\\xf5\\xec\\x14\\xbe40\\x95\\xeb'""
          },
          ""53:3F:E2:9E:6A:31"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x02\\n\\x0c\\x0c\\xffL\\x00\\x10\\x07>\\x1f\\xe5\\x11\\xb1\\xf6\\x18\\x14\\xffL\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10'""
          },
          ""65:CD:B2:70:5F:CC"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x17\\xffL\\x00\\t\\x08\\x13m\\xc0\\xa8\\x01\\xe3\\x1bX\\x16\\x08\\x00\\xf0S\\xa5{uU}'""
          },
          ""75:DE:19:95:B8:95"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x07\\xffL\\x00\\x10\\x02!\\x00\\x02\\n\\x00'""
          },
          ""62:C6:AE:E8:C9:69"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x0e\\xffL\\x00\\x0f\\x05\\x90\\x00\\xe9\\xed\\xd1\\x10\\x02#\\x04\\x02\\n\\x00'""
          },
          ""31:24:DF:F7:67:ED"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\r\\xffL\\x00\\x13\\x08J\\xc6\\xcew\\xc0j\\x89\\x00'""
          },
          ""45:54:CA:14:1A:06"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x17\\xffL\\x00\\t\\x08\\x13\\x00\\xc0\\xa8\\x01\\x1a\\x1bX\\x16\\x08\\x00/k\\x14h\\xfd\\xd4\\xa1'""
          },
          ""D0:F6:F3:F2:00:F6"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x07\\xffL\\x00\\x12\\x02\\x00\\x03'""
          },
          ""FA:55:19:47:C3:D8"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x07\\xffL\\x00\\x12\\x02\\x00\\x03'""
          },
          ""E0:00:40:E0:5F:CF"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x07\\xffL\\x00\\x12\\x02\\x00\\x00'""
          },
          ""C6:D2:60:1C:55:8C"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x07\\xffL\\x00\\x12\\x02\\x00\\x00'""
          },
          ""68:6E:74:72:B2:5C"": {
            ""__type"": ""<class 'bytes'>"",
            ""repr"": ""b'\\x02\\x01\\x1a\\x06\\xffL\\x00\\n\\x01\\x80'""
          }
        },
        ""time_since_last_device_detection"": {
          ""F0:B3:EC:53:D3:D5"": 1.2440003030060325,
          ""C0:95:6D:A5:29:43"": 0.632000154000707,
          ""BE:27:C5:00:DD:86"": 0.9360002280009212,
          ""F2:28:25:97:CE:67"": 2.7720006740055396,
          ""E8:9F:80:69:F3:3D"": 12.172002939005324,
          ""79:60:F5:AC:96:2C"": 0.9360002280009212,
          ""49:25:03:27:07:D8"": 14.116003404000367,
          ""A4:C1:38:5B:EA:71"": 18.196004376004566,
          ""43:60:B0:2E:9F:2F"": 1.6520004020057968,
          ""41:3F:19:5C:6D:C5"": 1.2440003030060325,
          ""03:C9:F9:00:CA:48"": 1.2440003030060325,
          ""6C:9A:BC:1A:C8:6D"": 1.3440003270006855,
          ""6D:7C:6B:77:4F:B1"": 0.016000004005036317,
          ""42:B7:B0:8B:61:E2"": 0.632000154000707,
          ""69:84:04:94:C9:F1"": 6.364001543006452,
          ""F8:7D:05:37:15:62"": 12.172002939005324,
          ""6B:85:81:A9:52:09"": 0.016000004005036317,
          ""30:F4:EA:04:F2:48"": 0.016000004005036317,
          ""55:CF:8B:5C:02:FB"": 0.632000154000707,
          ""4B:BF:FC:FC:54:9D"": 4.172001013001136,
          ""53:3F:E2:9E:6A:31"": 2.98000072400464,
          ""65:CD:B2:70:5F:CC"": 1.9600004770036321,
          ""75:DE:19:95:B8:95"": 3.4960008490015753,
          ""62:C6:AE:E8:C9:69"": 0.9360002280009212,
          ""31:24:DF:F7:67:ED"": 6.056001469005423,
          ""45:54:CA:14:1A:06"": 10.52400254400709,
          ""D0:F6:F3:F2:00:F6"": 6.672001617000205,
          ""FA:55:19:47:C3:D8"": 12.484003014003974,
          ""E0:00:40:E0:5F:CF"": 149.8280324800071,
          ""C6:D2:60:1C:55:8C"": 67.39601564100303,
          ""68:6E:74:72:B2:5C"": 182.3920383500008
        }
      }
    },
    ""dashboard"": {
      ""configured"": true,
      ""supports_update"": null,
      ""last_update_success"": false,
      ""last_exception"": {
        ""__type"": ""<class 'aiohttp.client_exceptions.ClientConnectorError'>"",
        ""repr"": ""ClientConnectorError(ConnectionKey(host='127.0.0.1', port=62999, is_ssl=False, ssl=True, proxy=None, proxy_auth=None, proxy_headers_hash=None), ConnectionRefusedError(111, \""Connect call failed ('127.0.0.1', 62999)\""))""
      },
      ""addon"": ""5c53de3b_esphome""
    }
  }
}"
wBKMfXR9,Untitled,gandalfbialy,Python,Saturday 19th of July 2025 06:21:22 AM CDT,"sentence_pairs = [
    (""The cat is sitting on the mat."", ""The feline rests on the rug.""),
    (""The store closes at 8 PM today."", ""The shop shuts its doors at 20:00 today.""),
    (""The weather is sunny today."", ""It is bright and sunny outside.""),
    (""He drove his car to work."", ""He took the bus to the office.""),
]

for sent1, sent2 in sentence_pairs:
    emb1 = model.encode(sent1, convert_to_tensor=True)
    emb2 = model.encode(sent2, convert_to_tensor=True)
    sim = util.cos_sim(emb1, emb2).item()
    is_paraphrase = sim > 0.65
    print(f""Similarity: {sim:.3f} | Paraphrase: {is_paraphrase}"")
    print(f""  1: {sent1}\n  2: {sent2}\n"")"
90NiyNnM,Trolling,Mautiku,Lua,Saturday 19th of July 2025 06:14:36 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/Mautiku/Mautiku/main/Kick%20ppl.txt"", true))()
-- fixed"
UJFPqMQ4,SessionController.php,wzee1,PHP,Saturday 19th of July 2025 06:09:10 AM CDT,"<?php

namespace App\Http\Controllers\Auth;

use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Date;
use MongoDB\BSON\ObjectId;

class SessionController extends Controller
{
    /**
     * List all sessions for the authenticated user.
     */
    public function index(Request $request)
    {
        $userId = (string) Auth::id();

        $collection = DB::connection('mongodb')->getMongoClient()
            ->selectDatabase(config('database.connections.mongodb.database'))
            ->selectCollection('sessions');

        // Find sessions by user_id and sort by last_activity desc
        $cursor = $collection->find(
            ['user_id' => $userId],
            ['sort' => ['last_activity' => -1]]
        );

        $sessions = [];
        foreach ($cursor as $session) {
            $sessions[] = [
                'id' => (string) $session->_id,
                'ip_address' => $session->ip_address ?? null,
                'user_agent' => $session->user_agent ?? null,
                'last_activity' => isset($session->last_activity) 
                    ? Date::createFromTimestamp($session->last_activity)->toDateTimeString()
                    : null,
                'expires_at' => isset($session->expires_at) 
                    ? Date::parse($session->expires_at)->toDateTimeString()
                    : null,
            ];
        }

        return response()->json($sessions);
    }

    /**
     * Revoke a session by ID.
     */
    public function destroy(Request $request, string $id)
    {
        $userId = (string) Auth::id();

        $collection = DB::connection('mongodb')->getMongoClient()
            ->selectDatabase(config('database.connections.mongodb.database'))
            ->selectCollection('sessions');

        // Convert string id to ObjectId
        //try {
        //    $objectId = new ObjectId($id);
        //} catch (\Exception $e) {
        //    return response()->json(['message' => 'Invalid session ID.'], 400);
        //}

        // Find session by _id
        //$session = $collection->findOne(['_id' => $objectId]);
        $session = $collection->findOne(['_id' => $id]);

        if (!$session || ($session->user_id ?? null) !== $userId) {
            return response()->json(['message' => 'Session not found or unauthorized.'], 404);
        }

        // Delete the session
        //$result = $collection->deleteOne(['_id' => $objectId]);
        $result = $collection->deleteOne(['_id' => $id]);

        if ($result->getDeletedCount() === 1) {
            return response()->json(['message' => 'Session revoked successfully.']);
        } else {
            return response()->json(['message' => 'Failed to revoke session.'], 500);
        }
    }
}
"
L1WuDvvV,AuthenticatedSessionController.php,wzee1,PHP,Saturday 19th of July 2025 06:07:50 AM CDT,"<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;
use Symfony\Component\HttpFoundation\Cookie;
use Illuminate\Validation\ValidationException;

class AuthenticatedSessionController extends Controller
{
    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): JsonResponse
    {

        $request->validate([
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ]);

        // This will temporarily log the user in if credentials are correct.
        // It sets the session cookie for Sanctum SPA authentication.
        if (! Auth::attempt($request->only('email', 'password'), $request->boolean('remember'))) {
            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        //  the user IS authenticated (temporarily)
        $user = Auth::user();

        // 3. Check if the user's email is verified.
        if (! $user->hasVerifiedEmail()) {
            Auth::guard('web')->logout();
            $request->session()->invalidate();
            $request->session()->regenerateToken();


            return response()->json([
                'message' => 'Email is not verified. Please check your inbox or request a new verification link.'
            ], 403);
        }

        // Inject authenticated user's ID into session collection record when the user logs in
        $request->session()->put('user_id', $request->user()->id);

        // Create a new Personal Access Token for the user
        //$token = $user->createToken('api_token')->plainTextToken;


        $token = $user->createToken(
            'api_token', // Name for the token
            ['*'],       // Abilities
            Carbon::now()->addDays(30) // Token expires in 30 days
        );

        // Return the user and the new token as a JSON response
        return response()->json([
            'user' => $user,
            'token' => substr($token->plainTextToken, 1),
        ], 200)->withCookie(
            new Cookie(
                'authToken',
                substr($token->plainTextToken, 1),
                Carbon::now()->addDays(30),
                '/',
                null,
                false,
                true, // HttpOnly
                false,
                false,
                'Strict'
            )
        );
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): JsonResponse
    {

        $request->user()->currentAccessToken()->delete();

        // Return a successful, empty response
        return response()->json(null, 204);
    }
}
"
NMAAVsDr,dataNone,TestGuy1,JSON,Saturday 19th of July 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'c7860f9b35fe961c9d15fd8cc90722d2f01c136eb09f348e63247386533fef3898e83922adbc2cd621b88fe623b5e1542fd1f37ca974f956058bf5158505271d687bc976e0929728866a3b78529dca741f841746553e45253c5b3ba0e651f58075b022919d06993eb1e1f9c9dbd2e773709841f9f2e3ce16a2125759dbde3fa0',
  otherdata: [
    '0a503cacb6fcbeed2ddde86a09fbb4c5',
    '99d75b34cd07274df4b1c1be364d7dfc',
    'a3272ffe0f2741259e907dcbc07b2831',
    'e1eaaab7bc41d0d21944754ffe9e0fd5',
    '025c2bd56d58a63aed4a111ad482aadc',
    '4a845300f225f1ab5a6763ad2f149239',
    '06789e033dba3d1e1706c9b00da89f88',
    '82463fe629551a28cd64c7c15350ef86'
  ]
}"
G7mfsXRT,key,HARIN7,JSON,Saturday 19th of July 2025 05:25:11 AM CDT,"{
  ""Signature"": ""cc2849c77e25ca6911a37c13ca487e62441ad6d0""
}"
