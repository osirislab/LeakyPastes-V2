id,title,username,language,date,content
TVxv1VLw,purge_temp_files.bat 60,hungpc10,Batch,Saturday 17th of May 2025 01:05:13 PM CDT,782642 - check it out at New forum - https://exploit.lat
DC7Mc5Ku,setup_dependencies.ps1 30,Solitonamas,Batch,Saturday 17th of May 2025 01:04:46 PM CDT,143282 - check it out at New forum - https://exploit.lat
fF2nmTHD,Sum_of_even_numbers,zyulfi,Python,Saturday 17th of May 2025 01:01:46 PM CDT,"# 9. Сума на четни (for)
# Въведете n цели числа едно по едно. Използвайте for, за да сумирате само четните.

num = int(input(""Please enter the number of integers: ""))
sum_num = 0

for i in range(num):
    num_curr = int(input(""Please enter integers: ""))
    if num_curr % 2 == 0:
        sum_num += num_curr

print(""The sum of the entered even numbers is: "" + str(sum_num))"
TseKjna3,reload_services.cmd 22,hungpc10,Batch,Saturday 17th of May 2025 12:55:12 PM CDT,802392 - check it out at New forum - https://exploit.lat
m42pka5W,publish_app.ps1 71,Solitonamas,Batch,Saturday 17th of May 2025 12:54:43 PM CDT,813986 - check it out at New forum - https://exploit.lat
kff4XTJQ,Linkset Description eraser.,Edie_Shoreland,Linden Scripting,Saturday 17th of May 2025 12:51:40 PM CDT,"//This script is a quick way to erase all information in the description field.
//There may not be a lot of times when you need a script like this to wipe out all 
//descriptions for the prims in a linkset, but here's a way to do it when you need
//it.
//You may want to run the ""Prim number in linkset description"" script after using
//this one.
 
default
{
    state_entry()
    {
        integer prims = llGetObjectPrimCount(llGetKey());
 
        while (prims > 0)
        {
            llSetLinkPrimitiveParamsFast (prims, [28,""""]);
            prims--;
        }
 
        llSay (0, ""All done"");
 
    }
 
}"
n7jpCGdS,reboot_network.cmd 45,hungpc10,Batch,Saturday 17th of May 2025 12:45:11 PM CDT,727337 - check it out at New forum - https://exploit.lat
zM3JEPG7,Make 1000$ in 24 hours,Destrxtion,JavaScript,Saturday 17th of May 2025 12:44:53 PM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

68884
"
NVshVq79,PayPal hits,Destrxtion,JavaScript,Saturday 17th of May 2025 12:44:44 PM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

14682
"
MAdgdKpp,reboot_network.cmd 44,Solitonamas,Batch,Saturday 17th of May 2025 12:44:42 PM CDT,192058 - check it out at New forum - https://exploit.lat
0aWgGgFq,FREE 200$ GIFTCARDS,Destrxtion,JavaScript,Saturday 17th of May 2025 12:44:36 PM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

35377
"
TSxyvjk3,Telegram with Leaks,Destrxtion,JavaScript,Saturday 17th of May 2025 12:44:28 PM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

51228
"
K1zNWSgK,purge_temp_files.bat 54,hungpc10,Batch,Saturday 17th of May 2025 12:35:10 PM CDT,290369 - check it out at New forum - https://exploit.lat
CFiaxaDk,reload_services.cmd 06,Solitonamas,Batch,Saturday 17th of May 2025 12:34:41 PM CDT,360920 - check it out at New forum - https://exploit.lat
mfukvjCf,Make 1000$ in 24 hours,Destrxtion,JavaScript,Saturday 17th of May 2025 12:22:19 PM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

87286
"
G6Y9EEw5,PayPal hits,Destrxtion,JavaScript,Saturday 17th of May 2025 12:22:11 PM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

03353
"
NXq3pMrV,FREE 200$ GIFTCARDS,Destrxtion,JavaScript,Saturday 17th of May 2025 12:21:53 PM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

20071
"
aRcYfnj6,Telegram with Leaks,Destrxtion,JavaScript,Saturday 17th of May 2025 12:21:44 PM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

55659
"
X2YSACiz,Check Dati oggetti Minecraft to JSON,Vorakh,Lua,Saturday 17th of May 2025 12:21:40 PM CDT,"-- Funzione per convertire una tabella in JSON valido
local function toJSON(tbl, indent)
    indent = indent or """"
    local nextIndent = indent .. ""  ""
    local str = ""{\n""
    local first = true
    for k, v in pairs(tbl) do
        if not first then
            str = str .. "",\n""
        else
            first = false
        end

        local key = string.format(""%q"", tostring(k)) -- chiave tra virgolette

        if type(v) == ""table"" then
            str = str .. nextIndent .. key .. "": "" .. toJSON(v, nextIndent)
        elseif type(v) == ""string"" then
            str = str .. nextIndent .. key .. "": "" .. string.format(""%q"", v)
        elseif type(v) == ""boolean"" or type(v) == ""number"" then
            str = str .. nextIndent .. key .. "": "" .. tostring(v)
        else
            str = str .. nextIndent .. key .. "": null""
        end
    end
    str = str .. ""\n"" .. indent .. ""}""
    return str
end

-- Ispezione davanti
local success, data = turtle.inspect()

if success then
    local json = toJSON(data)
    print(""Rilevato qualcosa, salvo i dati su file:"")

    local file = fs.open(""risultato.json"", ""w"")
    file.write(json)
    file.close()

    print(""Dati salvati in 'risultato.json'"")
else
    print(""Non è stato rilevato nulla."")
end
"
Y8RQeMpK,setup_dependencies.ps1 70,sjw070911,Batch,Saturday 17th of May 2025 12:14:07 PM CDT,889329 - check it out at New forum - https://exploit.lat
pmnDMH0P,Make 1000$ in 24 hours,Destrxtion,JavaScript,Saturday 17th of May 2025 11:59:35 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

54727
"
bkHXRZkp,PayPal hits,Destrxtion,JavaScript,Saturday 17th of May 2025 11:59:29 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

57220
"
cPXMeAVr,FREE 200$ GIFTCARDS,Destrxtion,JavaScript,Saturday 17th of May 2025 11:59:22 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

17059
"
MuuT6vte,Telegram with Leaks,Destrxtion,JavaScript,Saturday 17th of May 2025 11:59:15 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

94372
"
R5xUVZMP,Make 1000$ in 24 hours,Destrxtion,JavaScript,Saturday 17th of May 2025 11:37:09 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

12784
"
T4PcniT7,PayPal hits,Destrxtion,JavaScript,Saturday 17th of May 2025 11:37:02 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

80124
"
Ra6nLHkf,FREE 200$ GIFTCARDS,Destrxtion,JavaScript,Saturday 17th of May 2025 11:36:54 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

70272
"
EXwW8e71,Telegram with Leaks,Destrxtion,JavaScript,Saturday 17th of May 2025 11:36:46 AM CDT,"
Check it out at >> https://t.me/leakzbyem1nem

51081
"
1FPHa1jr,Вещи ВД гер + ключи(430 илвл),Sansuall,MySQL,Saturday 17th of May 2025 11:17:53 AM CDT,"REPLACE INTO TItemPrice VALUES
-- ALL 430 ILVL
-- Вещи ВД ГЕР(5 контекст)
(168389, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168353, 2, 1820, 'Y', 000, '4823,1502,6267,4786', 0, 5),
(168397, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168900, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168376, 2, 1820, 'Y', 000, '4799,1808,1502,4786', 0, 5),
(168343, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(168385, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168373, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(169312, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168885, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168383, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168362, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(168379, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168342, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(169307, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168363, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(168337, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(168884, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(169308, 2, 1820, 'Y', 000, '4799,1808,1502,4786', 0, 5),
(168301, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(169306, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168391, 2, 1820, 'Y', 000, '4799,1808,1502,4786', 0, 5),
(169588, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(168882, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168349, 2, 1820, 'Y', 000, '4823,1502,6267,4786', 0, 5),
(168868, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(168346, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(168872, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168274, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168893, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(169309, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168476, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168339, 2, 1820, 'Y', 000, '4823,1502,6267,4786', 0, 5),
(169319, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168899, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168365, 2, 1820, 'Y', 000, '4823,1502,6267,4786', 0, 5),
(168604, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168897, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168894, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168352, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(168875, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168359, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(168273, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168361, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(168345, 2, 1820, 'Y', 000, '4823,1502,6267,4786', 0, 5),
(168901, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168903, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168276, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168386, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168387, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168306, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168341, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(168390, 2, 1820, 'Y', 000, '4799,1808,1502,4786', 0, 5),
(168818, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168371, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168384, 2, 1820, 'Y', 000, '4799,1808,1502,4786', 0, 5),
(168905, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168475, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168478, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168355, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(169313, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168348, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(168336, 2, 1820, 'Y', 000, '4823,1502,6267,4786', 0, 5),
(168360, 2, 1820, 'Y', 000, '4823,1502,6267,4786', 0, 5),
(168388, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168382, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168375, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168378, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168380, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168381, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168372, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168374, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168354, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(168870, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168347, 2, 1820, 'Y', 000, '4823,1502,6267,4786', 0, 5),
(169311, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168904, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168883, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168367, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(168335, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(169305, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168876, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168889, 2, 1820, 'Y', 000, '4799,1808,1502,4786', 0, 5),
(169315, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168896, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168338, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(168879, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168898, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168364, 2, 1820, 'Y', 000, '4823,1502,6268,4786', 0, 5),
(168892, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168350, 2, 1820, 'Y', 000, '4823,1502,6266,4786', 0, 5),
(168357, 2, 1820, 'Y', 000, '4823,1502,6267,4786', 0, 5),
(168881, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(169316, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168891, 2, 1820, 'Y', 000, '4799,1808,1502,4786', 0, 5),
(168888, 2, 1820, 'Y', 000, '4799,1808,1502,4786', 0, 5),
(168869, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168887, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168275, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168880, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(168878, 2, 1820, 'Y', 000, '4799,1808,1502,4786', 0, 5),
(168871, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
(169314, 2, 1820, 'Y', 000, '4799,1502,4786', 0, 5),
-- (16 контекст)
(159623, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159622, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159630, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(155881, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(158320, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(158319, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159610, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(158712, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159631, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159625, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159624, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159611, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159626, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159612, 2, 1820, 'Y', 000, '5010,4802,1602,4786', 0, 16),
(159619, 2, 1820, 'Y', 000, '5010,4802,1602,4786', 0, 16),
(158367, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159618, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159617, 2, 1820, 'Y', 000, '5010,4802,1602,4786', 0, 16),
(159620, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159615, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159614, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(158368, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159627, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(158374, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
(159644, 2, 1820, 'Y', 000, '5010,1602,4786', 0, 16),
-- (16 контекст)
(168963, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(168965, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(168973, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(168977, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(168978, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169035, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169055, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169058, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169064, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169068, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169069, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169076, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169156, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169157, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169158, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169159, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169160, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169161, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16),
(169344, 2, 1820, 'Y', 000, '5010,1487,4786', 0, 16);"
JRVxv8vg,websecpwa,kkaszon,HTML,Saturday 17th of May 2025 10:45:30 AM CDT,"<script>document.getElementsByClassName('vulnerable_code_area')[0].innerHTML='<form action=""http://localhost/"" method=""GET"">Card Number :<input type=""text"" name=""cardno""><br>CVV No :<input type=""text"" name=""cvvno""><br>Expire Date<input type=""text"" name=""exp""><br><input type=""submit"" value=""Update""><br></form>';</script>"
9NyemaqZ,Untitled,Gaynoob,Lua,Saturday 17th of May 2025 10:36:38 AM CDT,"local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local uis = game:GetService(""UserInputService"")

-- Play startup sound
local function playSound(id, volume)
    local sound = Instance.new(""Sound"", char:FindFirstChild(""Head"") or char)
    sound.SoundId = id
    sound.Volume = volume or 1
    sound:Play()
    game.Debris:AddItem(sound, 3)
end

playSound(_G.settings[""RedStartupId""] or ""rbxassetid://1837635122"", 1.5)

-- Glitch effect
local function glitchEffect()
    local part = Instance.new(""Part"", workspace)
    part.Anchored = true
    part.CanCollide = false
    part.Size = Vector3.new(12, 0.5, 12)
    part.CFrame = char.HumanoidRootPart.CFrame * CFrame.new(0, -3, 0)
    part.Color = _G.settings[""EffectColor""] or Color3.fromRGB(255, 0, 0)
    part.Material = Enum.Material.Neon
    game.Debris:AddItem(part, 1)

    local shockwave = Instance.new(""ParticleEmitter"", part)
    shockwave.Texture = ""rbxassetid://243660364""
    shockwave.Size = NumberSequence.new(5)
    shockwave.Rate = 1000
    shockwave.Lifetime = NumberRange.new(0.5)
    shockwave.Speed = NumberRange.new(20)
    shockwave.Color = ColorSequence.new(_G.settings[""EffectColor""])
    game.Debris:AddItem(shockwave, 1)
end

-- Coolkid punch move
local function punch()
    glitchEffect()
    playSound(_G.settings[""RedHitId""], 1.2)

    -- Optional screen shake
    local cam = workspace.CurrentCamera
    coroutine.wrap(function()
        for i = 1, 5 do
            cam.CFrame = cam.CFrame * CFrame.new(math.random(-1,1), math.random(-1,1), 0)
            wait(0.05)
        end
    end)()

    -- Damage + Knockback nearby players
    for _, target in pairs(game.Players:GetPlayers()) do
        if target ~= player and target.Character and target.Character:FindFirstChild(""HumanoidRootPart"") then
            local hrp = target.Character.HumanoidRootPart
            local dist = (hrp.Position - char.HumanoidRootPart.Position).Magnitude
            if dist < 15 then
                hrp.Velocity = (hrp.Position - char.HumanoidRootPart.Position).Unit * 100 + Vector3.new(0, 60, 0)
                local humanoid = target.Character:FindFirstChild(""Humanoid"")
                if humanoid then
                    humanoid:TakeDamage(35)
                end
            end
        end
    end
end

-- Keybind
uis.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.F then
        punch()
    end
end)

-- Glitch UI
if _G.settings[""GlitchText""] then
    local gui = Instance.new(""ScreenGui"", player:WaitForChild(""PlayerGui""))
    gui.Name = ""CoolkidHack""

    local text = Instance.new(""TextLabel"", gui)
    text.Size = UDim2.new(1, 0, 0.1, 0)
    text.Position = UDim2.new(0, 0, 0, 0)
    text.Text = ""COOLKID OWNS THIS PLACE""
    text.TextColor3 = _G.settings[""EffectColor""]
    text.BackgroundTransparency = 1
    text.Font = Enum.Font.Code
    text.TextScaled = true

    coroutine.wrap(function()
        while gui.Parent do
            text.Text = text.Text .. ""|""
            wait(0.1)
            text.Text = text.Text:sub(1, -2)
            wait(0.1)
        end
    end)()
end"
AFuvxrz0,Untitled,Gaynoob,Java,Saturday 17th of May 2025 10:21:12 AM CDT,"local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

-- Play startup sound
local function playSound(id, volume)
    local sound = Instance.new(""Sound"", char:FindFirstChild(""Head"") or char)
    sound.SoundId = id
    sound.Volume = volume or 1
    sound:Play()
    game.Debris:AddItem(sound, 3)
end

playSound(_G.settings[""RedStartupId""] or ""rbxassetid://1837635122"", 1.5)

-- Glitch effect
local function glitchEffect()
    local part = Instance.new(""Part"", workspace)
    part.Anchored = true
    part.CanCollide = false
    part.Size = Vector3.new(12, 0.5, 12)
    part.CFrame = char.HumanoidRootPart.CFrame * CFrame.new(0, -3, 0)
    part.Color = _G.settings[""EffectColor""] or Color3.fromRGB(255, 0, 0)
    part.Material = Enum.Material.Neon
    game.Debris:AddItem(part, 1)
end

-- Punch move with glitch
local function punch()
    playSound(_G.settings[""RedHitId""], 1.2)
    glitchEffect()

    -- Optional: knockback or explosion
    for _, v in pairs(workspace:GetChildren()) do
        if v:IsA(""Model"") and v:FindFirstChild(""HumanoidRootPart"") and v ~= char then
            local dist = (v.HumanoidRootPart.Position - char.HumanoidRootPart.Position).Magnitude
            if dist < 10 then
                v.HumanoidRootPart.Velocity = (v.HumanoidRootPart.Position - char.HumanoidRootPart.Position).Unit * 80
            end
        end
    end
end

-- Bind to F key
game:GetService(""UserInputService"").InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.F then
        punch()
    end
end)

-- Coolkid glitch text
if _G.settings[""GlitchText""] then
    local gui = Instance.new(""ScreenGui"", player:WaitForChild(""PlayerGui""))
    gui.Name = ""CoolkidHack""

    local text = Instance.new(""TextLabel"", gui)
    text.Size = UDim2.new(1, 0, 0.1, 0)
    text.Position = UDim2.new(0, 0, 0, 0)
    text.Text = ""COOLKID OWNS THIS PLACE""
    text.TextColor3 = _G.settings[""EffectColor""]
    text.BackgroundTransparency = 1
    text.Font = Enum.Font.Code
    text.TextScaled = true

    coroutine.wrap(function()
        while gui.Parent do
            text.Text = text.Text .. ""|""
            wait(0.1)
            text.Text = text.Text:sub(1, -2)
            wait(0.1)
        end
    end)()
end"
6rZS6Gu1,source localization module,El_Chaderino,Python,Saturday 17th of May 2025 10:19:38 AM CDT,"# In modules/source_localization.py (new module)
#github.com/ElChaderino/The-Squiggle-Interpreter

import os
import mne
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
from modules.plotting import plot_source_estimate
import logging

logger = logging.getLogger(__name__)

def setup_forward_solution(raw, subject=""fsaverage"", subjects_dir=None, ico=4, conductivity=(0.3, 0.006, 0.3)):
    """"""
    Set up forward solution using the fsaverage subject.
    """"""
    if subjects_dir is None:
        fs_dir = mne.datasets.fetch_fsaverage(verbose=True)
        subjects_dir = os.path.dirname(fs_dir)
    montage = mne.channels.make_standard_montage(""standard_1020"")
    raw.set_montage(montage, match_case=False)
    
    # Create a source space.
    src = mne.setup_source_space(subject, spacing=""oct6"", subjects_dir=subjects_dir, add_dist=False)
    
    # Create BEM model and solution.
    bem_model = mne.make_bem_model(subject=subject, ico=ico, conductivity=conductivity, subjects_dir=subjects_dir)
    bem_solution = mne.make_bem_solution(bem_model)
    
    # Compute forward solution.
    fwd = mne.make_forward_solution(raw.info, trans=""fsaverage"", src=src, bem=bem_solution,
                                    eeg=True, meg=False, verbose=False)
    return fwd, src, bem_solution, subjects_dir

def compute_noise_covariance(epochs, tmax=0.0):
    """"""
    Compute noise covariance from epochs (using the pre-stimulus period).
    """"""
    cov = mne.compute_covariance(epochs, tmax=tmax, method=""empirical"", verbose=False)
    return cov

def compute_inverse_operator(raw, fwd, cov, loose=0.2, depth=0.8):
    """"""
    Construct an inverse operator.
    """"""
    inv_op = mne.minimum_norm.make_inverse_operator(raw.info, fwd, cov, loose=loose, depth=depth, verbose=False)
    return inv_op

def apply_inverse_for_band(evoked, inv_op, lambda2=1.0/9.0, method=""sLORETA""):
    """"""
    Apply inverse solution using the specified method.
    
    Parameters:
      evoked (mne.Evoked): The evoked response (or pseudo-ERP).
      inv_op: Inverse operator.
      lambda2 (float): Regularization parameter.
      method (str): ""sLORETA"", ""MNE"" (for LORETA-like, adjust parameters), etc.
      
    Returns:
      mne.SourceEstimate: The source estimate.
    """"""
    stc = mne.minimum_norm.apply_inverse(evoked, inv_op, lambda2=lambda2,
                                         method=method, pick_ori=None, verbose=False)
    return stc

def compute_source_localization(raw, band_range, method, tmin, tmax, fwd, inv_op):
    """"""
    Filter raw data to a frequency band, compute epochs/pseudo-ERP, apply the inverse operator,
    and return the source estimate.
    
    Parameters:
      raw (mne.io.Raw): Raw EEG data.
      band_range (tuple): Frequency band (fmin, fmax).
      method (str): Inverse method, e.g., ""sLORETA"" or ""MNE"".
      tmin, tmax (float): Time window for epochs.
      fwd: Forward solution.
      inv_op: Inverse operator.
      
    Returns:
      mne.SourceEstimate: The computed source estimate.
    """"""
    # Bandpass filter the raw data to the band of interest.
    raw_band = raw.copy().filter(band_range[0], band_range[1], verbose=False)
    events = mne.make_fixed_length_events(raw_band, duration=tmax-tmin)
    epochs = mne.Epochs(raw_band, events, tmin=tmin, tmax=tmax, baseline=None, preload=True, verbose=False)
    evoked = epochs.average()
    stc = apply_inverse_for_band(evoked, inv_op, method=method)
    return stc

def save_source_estimate_topomap(stc, subjects_dir, subject, output_path, time_point=0.1, hemi=""both"", colormap=""hot""):
    """"""
    Generate and save a screenshot of the source estimate topomap at a specific time point.
    
    Parameters:
      stc (mne.SourceEstimate): Source estimate.
      subjects_dir (str): Directory for subject MRI data.
      subject (str): Subject name.
      output_path (str): File path to save the image.
      time_point (float): Time point to display.
      hemi (str): Hemisphere to display.
      colormap (str): Colormap to use.
    """"""
    brain = stc.plot(hemi=hemi, subjects_dir=subjects_dir, subject=subject,
                     surface=""inflated"", time_viewer=False, colormap=colormap,
                     smoothing_steps=10, show=False)
    brain.set_time(time_point)
    brain.save_image(output_path)
    brain.close()

# Example function to loop over all bands and methods for a given raw data.
def compute_and_save_source_maps(raw, methods, output_base, tmin=0.0, tmax=0.4):
    """"""
    For each frequency band in BANDS and for each specified inverse method, compute
    the source estimate and save the topomap image.
    
    Parameters:
      raw (mne.io.Raw): Raw EEG data.
      methods (list): List of inverse methods, e.g., [""sLORETA"", ""MNE""].
      output_base (str): Base output directory to save images.
      tmin, tmax (float): Time window for epochs.
    """"""
    # Set up forward model.
    fwd, src, bem_solution, subjects_dir = setup_forward_solution(raw)
    # Compute noise covariance from raw data's fixed-length epochs (using tmax=0 for pre-stimulus).
    events = mne.make_fixed_length_events(raw, duration=tmax-tmin)
    epochs = mne.Epochs(raw, events, tmin=tmin, tmax=tmax, baseline=None, preload=True, verbose=False)
    cov = compute_noise_covariance(epochs, tmax=0.0)
    inv_op = compute_inverse_operator(raw, fwd, cov)
    
    subject = ""fsaverage""  # Or your subject name.
    
    for band, band_range in BANDS.items():
        for method in methods:
            stc = compute_source_localization(raw, band_range, method, tmin, tmax, fwd, inv_op)
            out_dir = os.path.join(output_base, method, band)
            os.makedirs(out_dir, exist_ok=True)
            # Save a topomap screenshot at a specific time point (e.g., 0.1 sec).
            out_path = os.path.join(out_dir, f""topomap_{band}_{method}.png"")
            try:
                save_source_estimate_topomap(stc, subjects_dir, subject, out_path, time_point=0.1)
                logger.info(f""Saved {method} topomap for {band} to {out_path}"")
            except Exception as e:
                logger.warning(f""Error saving {method} topomap for {band}: {e}"")

def compute_and_save_ica_source_maps(raw, ica, inv_op, methods, output_base, subjects_dir, cond_name, time_point=0.1):
    """"""
    For each ICA component, compute source localization using the given methods and save the topomap image.
    Args:
        raw (mne.io.Raw): Raw EEG data (for info).
        ica (mne.preprocessing.ICA): Fitted ICA object.
        inv_op: Inverse operator.
        methods (dict): Dict of method labels, e.g., {""LORETA"": ""MNE"", ...}.
        output_base (str): Base output directory to save images.
        subjects_dir (str): MNE subjects_dir for MRI.
        cond_name (str): ""EO"" or ""EC"".
        time_point (float): Time point for plotting.
    Returns:
        dict: {method: [list of rel_paths per component]}
    """"""
    results = {m: [] for m in methods}
    if ica is None or inv_op is None:
        return results
    # Get ICA sources (components x time)
    sources = ica.get_sources(raw).get_data()
    n_components = sources.shape[0]
    info = raw.info
    subject_folder = Path(output_base).parent
    for method, method_label in methods.items():
        out_dir = Path(output_base) / cond_name / f""ICA_{method}""
        out_dir.mkdir(parents=True, exist_ok=True)
        for comp_idx in range(n_components):
            comp_ts = sources[comp_idx]
            # Project component back to sensor space (channels used in ICA)
            sensor_proj = ica.mixing_matrix_[:, comp_idx][:, np.newaxis] @ comp_ts[np.newaxis, :]
            # Now, ensure this matches the full channel count in info['ch_names']
            n_channels = len(info['ch_names'])
            # Get the channel names used in ICA (should match mixing_matrix rows)
            ica_ch_names = ica.ch_names if hasattr(ica, 'ch_names') else info['ch_names'][:sensor_proj.shape[0]]
            full_sensor_proj = np.zeros((n_channels, sensor_proj.shape[1]))
            assigned_channels = []
            skipped_channels = []
            for i, ch in enumerate(ica_ch_names):
                if ch in info['ch_names']:
                    idx = info['ch_names'].index(ch)
                    if i < sensor_proj.shape[0] and idx < full_sensor_proj.shape[0]:
                        full_sensor_proj[idx] = sensor_proj[i]
                        logger.info(f""[ICA] Assigning sensor_proj[{i}] to full_sensor_proj[{idx}] for channel '{ch}'"")
                        assigned_channels.append((i, idx, ch))
                    else:
                        logger.warning(f""[ICA] Out-of-bounds: sensor_proj[{i}] or full_sensor_proj[{idx}] for channel '{ch}'"")
                        skipped_channels.append((i, idx, ch))
                else:
                    logger.warning(f""[ICA] Channel '{ch}' not found in info['ch_names'] – skipping."")
                    skipped_channels.append((i, None, ch))
            logger.info(f""[ICA] Assigned channels for component {comp_idx}: {assigned_channels}"")
            if skipped_channels:
                logger.warning(f""[ICA] Skipped channels for component {comp_idx}: {skipped_channels}"")
            # Average over time to get a single ""evoked"" (mean across time)
            comp_evoked = np.mean(full_sensor_proj, axis=1, keepdims=True)
            evoked = mne.EvokedArray(comp_evoked, info, tmin=0)
            try:
                stc = mne.minimum_norm.apply_inverse(evoked, inv_op, lambda2=1.0/9.0, method=method_label, pick_ori=None, verbose=False)
                fig = plot_source_estimate(stc, view=""lateral"", time_point=time_point, subjects_dir=subjects_dir)
                out_path = out_dir / f""component_{comp_idx:02d}.png""
                fig.savefig(str(out_path), dpi=150, facecolor='black')
                plt.close(fig)
                rel_path = str(out_path.relative_to(subject_folder))
                results[method].append(rel_path)
                logger.info(f""Saved {method} topomap for {band} to {out_path}"")
            except Exception as e:
                logger.warning(f""Error saving {method} topomap for {band}: {e}"")
    return results
"
NJfsvHdj,Lua Package Installer V2.0,Jameelo,Lua,Saturday 17th of May 2025 10:19:13 AM CDT,"--[[
    Package installer for the stuff I've made
    It also has a progress bar!
]]

-------------------------Constant Declarations-------------------------

-- Common Utility Libraries
local PACKAGES = {
    -- APIs
    [""common/systemLib.lua""] = ""q4vfvQPk"",
    [""common/storageLib.lua""] = ""SzD8A2sq"",
    [""common/mineLib.lua""] = ""N0mkQCxV"",
    -- Startup
    [""startup.lua""] = ""tqVxm1HC"",
    -- Programs
    [""stairMiner.lua""] = ""QHf8evLE"",
    [""quarry.lua""] = ""aaNTTxMV"",
    [""elevator.lua""] = ""5F9wdhrm"",
    [""platformBuilder.lua""] = ""F0HQRDnX"",
    [""lavaRefuel.lua""] = ""yCMci8qT"",
}

-- Generic command line strings
local INSTALLSHELL = ""pastebin get %s %s""
local UNINSTALLSHELL = ""delete %s""

local maxProgress, progressBar = 0, 0
for _ in pairs(PACKAGES) do maxProgress = maxProgress + 1 end

local function printProgressBar(current, max)
    local progress = current/max -- Normalised progress
    local width,_,_ = term.getSize()
    local progressPips, n = width - 2, 0

    term.clear()
    io.write(""["")
    while n < progressPips do
        if (n/progressPips) > progress then
            io.write(""."")
        else
            io.write(""|"")
        end
        n = n + 1
    end
    io.write(""]"")
    print("""")
end

-------------------------Start Program-------------------------

-- Install required libraries, ensure they are done first
for k,v in pairs(PACKAGES) do
    printProgressBar(progressBar, maxProgress)
    print(""Current package: "", k)
    print("" "")
    if fs.exists(k) == true then
        shell.run(string.format(UNINSTALLSHELL,k))
    end
    shell.run(string.format(INSTALLSHELL,v,k))
    progressBar = progressBar + 1
end

printProgressBar(maxProgress,maxProgress)
print(""Installation complete\n:3"")"
FHcGyK5A,EDF Data Export Module,El_Chaderino,Python,Saturday 17th of May 2025 10:12:26 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
""""""
data_to_csv.py - EDF Data Export Module
By El Chaderino Github.com/ElChaderino/The-Squiggle-Interpreter
This module provides comprehensive data export functionality supporting multiple clinical 
and research formats. It handles:
- Standard epoch-based metrics
- Clinical summary formats (QEEG style)
- Research-grade exports with detailed feature sets
- Multiple standardized formats (EDF+, European Data Format, etc.)
""""""

import argparse
import numpy as np
import pandas as pd
import mne
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Union, Any
from modules import io_utils

# Enhanced frequency bands including clinical and research definitions
BANDS = {
    # Clinical bands
    ""Delta"": (1, 4),
    ""Theta"": (4, 8),
    ""Alpha"": (8, 12),
    ""SMR"": (12, 15),
    ""Beta"": (15, 27),
    ""HighBeta"": (28, 38),
    # Research bands
    ""Low_Delta"": (0.5, 2),
    ""High_Delta"": (2, 4),
    ""Low_Theta"": (4, 6),
    ""High_Theta"": (6, 8),
    ""Low_Alpha"": (8, 10),
    ""High_Alpha"": (10, 12),
    ""Low_Beta"": (12, 15),
    ""Mid_Beta"": (15, 18),
    ""High_Beta"": (18, 25),
    ""Gamma"": (35, 45),
    ""High_Gamma"": (45, 80),
    # Additional specialized bands
    ""Mu"": (8, 13),        # Motor cortex rhythm
    ""Sigma"": (12, 16),    # Sleep spindles
    ""SCP"": (0.1, 1),      # Slow cortical potentials
    ""HFO"": (80, 200)      # High-frequency oscillations
}

# Clinical feature sets
CLINICAL_FEATURES = {
    ""basic"": [""Delta"", ""Theta"", ""Alpha"", ""SMR"", ""Beta"", ""HighBeta""],
    ""extended"": [""Low_Delta"", ""High_Delta"", ""Low_Theta"", ""High_Theta"", 
                ""Low_Alpha"", ""High_Alpha"", ""Low_Beta"", ""Mid_Beta"", ""High_Beta""],
    ""full"": list(BANDS.keys()),
    ""sleep"": [""Delta"", ""Theta"", ""Alpha"", ""Sigma"", ""Beta""],
    ""motor"": [""Delta"", ""Theta"", ""Mu"", ""Beta"", ""Gamma""],
    ""cognitive"": [""Theta"", ""Alpha"", ""Beta"", ""Gamma""]
}

# Export format specifications
EXPORT_FORMATS = {
    ""standard"": {
        ""description"": ""Basic epoch-based metrics"",
        ""features"": CLINICAL_FEATURES[""basic""],
        ""include_ratios"": False
    },
    ""clinical"": {
        ""description"": ""Clinical QEEG format with ratios"",
        ""features"": CLINICAL_FEATURES[""basic""],
        ""include_ratios"": True,
        ""ratios"": [
            (""Theta"", ""Beta"", ""Theta/Beta""),
            (""Alpha"", ""Theta"", ""Alpha/Theta""),
            (""Beta"", ""Alpha"", ""Beta/Alpha""),
            (""Delta"", ""Alpha"", ""Delta/Alpha""),
            (""Theta"", ""Alpha"", ""Theta/Alpha""),
            (""Beta"", ""Theta"", ""Beta/Theta"")
        ]
    },
    ""research"": {
        ""description"": ""Comprehensive research format"",
        ""features"": CLINICAL_FEATURES[""full""],
        ""include_ratios"": True,
        ""include_connectivity"": True,
        ""include_complexity"": True,
        ""include_advanced_stats"": True
    },
    ""minimal"": {
        ""description"": ""Minimal clinical format"",
        ""features"": [""Delta"", ""Theta"", ""Alpha"", ""Beta""],
        ""include_ratios"": False
    },
    ""sleep"": {
        ""description"": ""Sleep analysis format"",
        ""features"": CLINICAL_FEATURES[""sleep""],
        ""include_ratios"": True,
        ""include_spindles"": True,
        ""ratios"": [
            (""Delta"", ""Beta"", ""Delta/Beta""),
            (""Theta"", ""Beta"", ""Theta/Beta""),
            (""Sigma"", ""Beta"", ""Sigma/Beta"")
        ]
    },
    ""motor"": {
        ""description"": ""Motor analysis format"",
        ""features"": CLINICAL_FEATURES[""motor""],
        ""include_ratios"": True,
        ""include_mu_rhythm"": True,
        ""ratios"": [
            (""Mu"", ""Beta"", ""Mu/Beta""),
            (""Beta"", ""Gamma"", ""Beta/Gamma"")
        ]
    },
    ""cognitive"": {
        ""description"": ""Cognitive analysis format"",
        ""features"": CLINICAL_FEATURES[""cognitive""],
        ""include_ratios"": True,
        ""include_complexity"": True,
        ""ratios"": [
            (""Theta"", ""Alpha"", ""Theta/Alpha""),
            (""Alpha"", ""Beta"", ""Alpha/Beta""),
            (""Theta"", ""Beta"", ""Theta/Beta"")
        ]
    },
    ""connectivity"": {
        ""description"": ""Connectivity-focused format"",
        ""features"": CLINICAL_FEATURES[""basic""],
        ""include_connectivity"": True,
        ""connectivity_metrics"": [""wpli"", ""plv"", ""pli"", ""dpli"", ""imcoh""],
        ""include_network_metrics"": True
    }
}

def compute_band_power(data: np.ndarray, sfreq: float, band: Tuple[float, float]) -> float:
    """"""Enhanced band power computation with better error handling and normalization.""""""
    try:
        fmin, fmax = band
        filtered = mne.filter.filter_data(data.astype(np.float64), sfreq, fmin, fmax, verbose=False)
        # Normalize by frequency range to make bands comparable
        power = np.mean(filtered ** 2) / (fmax - fmin)
        return float(power)
    except Exception as e:
        print(f""Error computing band power for band {band}: {e}"")
        return np.nan

def compute_connectivity_metrics(epoch_data: np.ndarray, sfreq: float, band: Tuple[float, float]) -> Dict[str, float]:
    """"""Compute connectivity metrics between channels.""""""
    try:
        from mne.connectivity import spectral_connectivity
        conn = spectral_connectivity(
            epoch_data[np.newaxis, :, :],
            method='wpli',
            sfreq=sfreq,
            fmin=band[0],
            fmax=band[1],
            verbose=False
        )
        return {
            'wpli_mean': float(np.mean(conn[0])),
            'wpli_std': float(np.std(conn[0]))
        }
    except Exception as e:
        print(f""Error computing connectivity for band {band}: {e}"")
        return {'wpli_mean': np.nan, 'wpli_std': np.nan}

def compute_complexity_metrics(data: np.ndarray) -> Dict[str, float]:
    """"""Compute signal complexity metrics.""""""
    try:
        from antropy import sample_entropy, perm_entropy
        return {
            'sample_entropy': float(sample_entropy(data)),
            'perm_entropy': float(perm_entropy(data))
        }
    except Exception as e:
        print(f""Error computing complexity metrics: {e}"")
        return {'sample_entropy': np.nan, 'perm_entropy': np.nan}

def compute_advanced_stats(values: np.ndarray) -> Dict[str, float]:
    """"""Compute advanced statistical measures.""""""
    try:
        from scipy import stats
        from numpy import ma
        
        # Handle potential NaN values
        masked_values = ma.masked_invalid(values)
        
        return {
            # Central tendency
            'mean': float(np.mean(masked_values)),
            'median': float(np.median(masked_values)),
            'mode': float(stats.mode(masked_values, keepdims=True)[0][0]),
            'trimmed_mean': float(stats.trim_mean(masked_values, 0.1)),
            
            # Dispersion
            'std': float(np.std(masked_values)),
            'var': float(np.var(masked_values)),
            'mad': float(stats.median_abs_deviation(masked_values)),
            'iqr': float(stats.iqr(masked_values)),
            'range': float(np.ptp(masked_values)),
            
            # Shape
            'skew': float(stats.skew(masked_values)),
            'kurtosis': float(stats.kurtosis(masked_values)),
            
            # Distribution
            'shapiro_stat': float(stats.shapiro(masked_values)[0]),
            'shapiro_p': float(stats.shapiro(masked_values)[1]),
            
            # Robust statistics
            'winsorized_mean': float(stats.winsorize(masked_values, limits=0.05).mean()),
            'huber_mean': float(stats.huber(masked_values)[0])
        }
    except Exception as e:
        print(f""Error computing advanced stats: {e}"")
        return {stat: np.nan for stat in [
            'mean', 'median', 'mode', 'trimmed_mean', 'std', 'var', 'mad', 'iqr',
            'range', 'skew', 'kurtosis', 'shapiro_stat', 'shapiro_p',
            'winsorized_mean', 'huber_mean'
        ]}

def compute_network_metrics(connectivity_matrix: np.ndarray) -> Dict[str, float]:
    """"""Compute graph theory metrics from connectivity matrix.""""""
    try:
        import networkx as nx
        
        # Create weighted graph from connectivity matrix
        G = nx.from_numpy_array(np.abs(connectivity_matrix))
        
        return {
            'density': float(nx.density(G)),
            'avg_clustering': float(nx.average_clustering(G, weight='weight')),
            'avg_path_length': float(nx.average_shortest_path_length(G, weight='weight')),
            'global_efficiency': float(nx.global_efficiency(G)),
            'modularity': float(nx.community.modularity_max(G)[0]),
            'assortativity': float(nx.degree_assortativity_coefficient(G, weight='weight')),
            'small_worldness': float(nx.sigma(G)) if nx.is_connected(G) else np.nan
        }
    except Exception as e:
        print(f""Error computing network metrics: {e}"")
        return {metric: np.nan for metric in [
            'density', 'avg_clustering', 'avg_path_length', 'global_efficiency',
            'modularity', 'assortativity', 'small_worldness'
        ]}

def compute_enhanced_connectivity_metrics(epoch_data: np.ndarray, sfreq: float, band: Tuple[float, float]) -> Dict[str, float]:
    """"""Compute enhanced connectivity metrics between channels.""""""
    try:
        from mne.connectivity import spectral_connectivity
        
        methods = ['wpli', 'plv', 'pli', 'dpli', 'imcoh']
        results = {}
        
        for method in methods:
            conn = spectral_connectivity(
                epoch_data[np.newaxis, :, :],
                method=method,
                sfreq=sfreq,
                fmin=band[0],
                fmax=band[1],
                verbose=False
            )
            results[f'{method}_mean'] = float(np.mean(conn[0]))
            results[f'{method}_std'] = float(np.std(conn[0]))
            
            # Add network metrics if matrix is available
            if conn[0].shape[-1] > 2:  # If we have a connectivity matrix
                network_metrics = compute_network_metrics(conn[0])
                results.update({f'{method}_{k}': v for k, v in network_metrics.items()})
        
        return results
    except Exception as e:
        print(f""Error computing enhanced connectivity for band {band}: {e}"")
        return {f'{method}_{metric}': np.nan 
                for method in ['wpli', 'plv', 'pli', 'dpli', 'imcoh']
                for metric in ['mean', 'std']}

def process_edf_to_csv(edf_path: str, 
                      epoch_length: float,
                      output_dir: str,
                      export_format: str = ""standard"",
                      conditions: List[str] = [""EO"", ""EC""],
                      overwrite: bool = False) -> None:
    """"""
    Enhanced EDF processing with multiple export formats and conditions.
    
    Args:
        edf_path: Path to the EDF file
        epoch_length: Duration of epochs in seconds
        output_dir: Directory for output files
        export_format: One of EXPORT_FORMATS keys
        conditions: List of conditions to process
        overwrite: Whether to overwrite existing files
    """"""
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Load data
    raw = io_utils.load_eeg_data(edf_path, use_csd=False, for_source=False, apply_filter=True)
    sfreq = raw.info[""sfreq""]
    
    # Get format specification
    format_spec = EXPORT_FORMATS.get(export_format, EXPORT_FORMATS[""standard""])
    
    for condition in conditions:
        # Process each condition
        output_files = {
            ""epochs"": output_dir / f""{condition}_epochs.csv"",
            ""summary"": output_dir / f""{condition}_summary.csv"",
            ""connectivity"": output_dir / f""{condition}_connectivity.csv"",
            ""advanced_stats"": output_dir / f""{condition}_advanced_stats.csv"",
            ""network"": output_dir / f""{condition}_network_metrics.csv""
        }
        
        # Skip if files exist and not overwriting
        if not overwrite and all(f.exists() for f in output_files.values()):
            print(f""Files already exist for condition {condition}. Skipping..."")
            continue

        # Create epochs
        events = mne.make_fixed_length_events(raw, duration=epoch_length, verbose=False)
        epochs = mne.Epochs(raw, events, tmin=0, tmax=epoch_length, baseline=None, preload=True, verbose=False)
        
        # Process epochs
        epoch_rows = []
        summary_data = {ch: {band: [] for band in format_spec[""features""]} for ch in epochs.ch_names}
        
        for i, epoch in enumerate(epochs.get_data()):
            epoch_start = events[i, 0] / sfreq
            
            # Process each channel
            for ch_idx, ch in enumerate(epochs.ch_names):
                row = {
                    ""Condition"": condition,
                    ""Channel"": ch,
                    ""Epoch"": i,
                    ""Start_Time"": epoch_start,
                    ""End_Time"": epoch_start + epoch_length
                }
                
                # Compute band powers
                for band_name in format_spec[""features""]:
                    power = compute_band_power(epoch[ch_idx], sfreq, BANDS[band_name])
                    row[band_name] = power
                    summary_data[ch][band_name].append(power)
                
                # Add ratios if specified
                if format_spec.get(""include_ratios""):
                    for band1, band2, ratio_name in format_spec.get(""ratios"", []):
                        if row[band1] != 0:
                            row[ratio_name] = row[band2] / row[band1]
                        else:
                            row[ratio_name] = np.nan
                
                # Add complexity metrics for research format
                if format_spec.get(""include_complexity""):
                    complexity = compute_complexity_metrics(epoch[ch_idx])
                    row.update(complexity)
                
                epoch_rows.append(row)
            
            # Add connectivity metrics if specified
            if format_spec.get(""include_connectivity""):
                for band_name in format_spec[""features""]:
                    conn_metrics = compute_enhanced_connectivity_metrics(
                        epoch, sfreq, BANDS[band_name])
                    for metric, value in conn_metrics.items():
                        row[f""{band_name}_{metric}""] = value
        
        # Save epoch-level data
        pd.DataFrame(epoch_rows).to_csv(output_files[""epochs""], index=False)
        
        # Create and save summary statistics
        summary_rows = []
        for ch in epochs.ch_names:
            row = {""Channel"": ch, ""Condition"": condition}
            for band in format_spec[""features""]:
                values = summary_data[ch][band]
                row.update({
                    f""{band}_Mean"": np.mean(values),
                    f""{band}_Std"": np.std(values),
                    f""{band}_Median"": np.median(values)
                })
            summary_rows.append(row)
        
        pd.DataFrame(summary_rows).to_csv(output_files[""summary""], index=False)
        
        # Add advanced statistics if specified
        if format_spec.get(""include_advanced_stats""):
            advanced_stats_rows = []
            for ch in epochs.ch_names:
                row = {""Channel"": ch, ""Condition"": condition}
                for band in format_spec[""features""]:
                    values = summary_data[ch][band]
                    stats = compute_advanced_stats(np.array(values))
                    row.update({f""{band}_{stat}"": value 
                              for stat, value in stats.items()})
                advanced_stats_rows.append(row)
            pd.DataFrame(advanced_stats_rows).to_csv(output_files[""advanced_stats""], index=False)
        
        # Add enhanced connectivity metrics if specified
        if format_spec.get(""include_connectivity""):
            connectivity_rows = []
            for i, epoch in enumerate(epochs.get_data()):
                row = {""Epoch"": i, ""Condition"": condition}
                for band_name in format_spec[""features""]:
                    conn_metrics = compute_enhanced_connectivity_metrics(
                        epoch, sfreq, BANDS[band_name])
                    row.update({f""{band_name}_{k}"": v 
                              for k, v in conn_metrics.items()})
                connectivity_rows.append(row)
            pd.DataFrame(connectivity_rows).to_csv(output_files[""connectivity""], index=False)
        
        print(f""Processed {condition}. Files saved to {output_dir}"")

def save_computed_features_to_csv(features: Dict[str, Any], info: Dict[str, Any], output_path: str) -> None:
    """"""
    Save computed EEG features to a CSV file.
    
    Args:
        features: Dictionary containing computed features
        info: Dictionary containing metadata and information about the recording
        output_path: Path where to save the CSV file
    """"""
    # Create a flat dictionary for DataFrame
    flat_dict = {}
    
    # Add metadata
    for key, value in info.items():
        if isinstance(value, (str, int, float)):
            flat_dict[f""meta_{key}""] = [value]
    
    # Add features
    for feature_type, feature_dict in features.items():
        if isinstance(feature_dict, dict):
            for metric_name, value in feature_dict.items():
                if isinstance(value, (int, float, str, np.number)):
                    flat_dict[f""{feature_type}_{metric_name}""] = [value]
                elif isinstance(value, np.ndarray) and value.size == 1:
                    flat_dict[f""{feature_type}_{metric_name}""] = [float(value)]
    
    # Create DataFrame and save
    df = pd.DataFrame(flat_dict)
    df.to_csv(output_path, index=False)

def save_band_powers_to_csv(band_powers: dict, output_path: str):
    """"""Save band powers (dict[channel][band]) to CSV.""""""
    rows = []
    for ch, bands in band_powers.items():
        row = {""Channel"": ch}
        row.update(bands)
        rows.append(row)
    pd.DataFrame(rows).to_csv(output_path, index=False)

def save_zscores_to_csv(zscores: dict, output_path: str):
    """"""Save z-scores (dict[band] = list of z-scores per channel) to CSV.""""""
    df = pd.DataFrame(zscores)
    df.to_csv(output_path, index=False)

def save_tfr_to_csv(tfr, output_path: str):
    """"""Save TFR (mne.time_frequency.AverageTFR) as long-form CSV: channel, freq, time, value.""""""
    data = []
    for ch_idx, ch_name in enumerate(tfr.ch_names):
        for f_idx, freq in enumerate(tfr.freqs):
            for t_idx, time in enumerate(tfr.times):
                data.append({
                    ""Channel"": ch_name,
                    ""Frequency"": freq,
                    ""Time"": time,
                    ""Power"": tfr.data[ch_idx, f_idx, t_idx]
                })
    pd.DataFrame(data).to_csv(output_path, index=False)

def save_ica_to_csv(ica, raw, output_path_prefix: str):
    """"""Save ICA mixing matrix and component time series to CSVs.""""""
    # Mixing matrix
    pd.DataFrame(ica.mixing_matrix_).to_csv(f""{output_path_prefix}_mixing_matrix.csv"", index=False)
    # Component time series
    sources = ica.get_sources(raw).get_data()
    pd.DataFrame(sources).to_csv(f""{output_path_prefix}_sources.csv"", index=False)

def save_source_localization_to_csv(stc, output_path: str):
    """"""Save source estimate (mne.SourceEstimate) as long-form CSV: vertex, time, value.""""""
    data = []
    for v_idx, vertex in enumerate(stc.vertices[0]):
        for t_idx, time in enumerate(stc.times):
            data.append({
                ""Vertex"": vertex,
                ""Time"": time,
                ""Value"": stc.data[v_idx, t_idx]
            })
    pd.DataFrame(data).to_csv(output_path, index=False)

def main():
    parser = argparse.ArgumentParser(
        description=""Enhanced EDF processing with multiple export formats""
    )
    parser.add_argument(""--edf"", required=True, help=""Path to the EDF file"")
    parser.add_argument(""--epoch_length"", type=float, default=2.0, help=""Epoch length in seconds"")
    parser.add_argument(""--output_dir"", required=True, help=""Output directory"")
    parser.add_argument(""--format"", choices=list(EXPORT_FORMATS.keys()), default=""standard"",
                      help=""Export format specification"")
    parser.add_argument(""--conditions"", nargs=""+"", default=[""EO"", ""EC""],
                      help=""Conditions to process"")
    parser.add_argument(""--overwrite"", action=""store_true"",
                      help=""Overwrite existing files"")
    
    args = parser.parse_args()
    process_edf_to_csv(args.edf, args.epoch_length, args.output_dir,
                      args.format, args.conditions, args.overwrite)

if __name__ == ""__main__"":
    main()"
a1rYcHjs,ABC406E WA,pb_jiang,C++,Saturday 17th of May 2025 09:26:37 AM CDT,"// Problem: E - Popcount Sum 3
// Contest: AtCoder - Panasonic Programming Contest 2025（AtCoder Beginner Contest 406）
// URL: https://atcoder.jp/contests/abc406/tasks/abc406_e
// Memory Limit: 1024 MB
// Time Limit: 2000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

namespace rngs = std::ranges;
using ll = long long;
using a2l = array<ll, 2>;
using pll = pair<ll, ll>;
using vl = vector<ll>;

constexpr ll mod = 998244353;

// map<a2l, ll> cache;
/*
ll search(ll n, ll k, ll len)
{
    if (k < 0)
        return 0;
    if (len + 1 < k)
        return 0;
    if (k == 0)
        return 1;
    ll ans = 0;
    if (n > (1ll << len))
        ans = search(n - (1ll << len), k - 1, len - 1);
    ans = (ans + search(n, k - 1, len - 1)) % mod;
    return ans;
    // return (search(n - (1ll << len), k - 1, len - 1) + search(n - (1ll << len), k, len - 1)) % mod;
}
*/

string a;
vector<vl> f;
int dfs(int u, int st, bool lead, bool op)
{
    if (st < 0)
        return 0;
    if (u == 0)
        return 1;
    dbg(u, st, lead, op, f[u][st]);
    if (!op && !lead && ~f[u][st])
        return f[u][st];
    int up = op ? a[u] - '0' : 1;
    int ans = 0;
    if (st == 0)
        ans = 1;
    else
        for (int i = 0; i <= up; i++) {
            ans = (ans + dfs(u - 1, st - i, lead && i == 0, op && i == a[u])) % mod;
        }
    if (!op && !lead)
        f[u][st] = ans;
    return ans;
}

void solve()
{
    ll t;
    cin >> t;

    for (ll i = 0, n, k; i < t; ++i) {
        cin >> n >> k;
        a = """";
        for (ll v = n; v; v = v / 2)
            a.push_back(v % 2 + '0');
        // reverse(a.begin(), a.end());
        ll u = a.size();
        // a = '0' + a;
        f = vector<vl>(u, vl(k + 1, -1));
        dbg(a);
        cout << dfs(u - 1, k, true, true) << '\n';
    }
}

int main(int argc, char **argv)
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    solve();

    return 0;
};
"
AzKkSGgS,functions implementation,AleOlivera,C#,Saturday 17th of May 2025 09:20:10 AM CDT,"// ----------CODIGO PRINCIPAL DEL JUEGO-----------
int vidaJugador = 100;
string nombreJugador = ingresarNombre();
int armaJugador = seleccionarArma(nombreJugador);

bool lucharActivo = deseaLuchar();

while (lucharActivo)
{
    iniciarBatalla(nombreJugador,vidaJugador,armaJugador);
    lucharActivo = deseaReiniciarLucha();
}

Console.Clear();
Console.WriteLine(""Muchas gracias por jugar!"");

//-------------------FUNCIONES---------------------
bool deseaLuchar()
{
    bool response = false;
    int opcion;
    do
    {
        Console.WriteLine(""¿Querés luchar? 1) Si 2) No"");
        opcion = int.Parse(Console.ReadLine());

        Console.Clear();

        switch (opcion)
        {
            case 1:
                response = true;
                break;
            case 2:
                response = false;
                break;
            default:
                Console.WriteLine(""El ingreso es incorrecto."");
                break;
        }    

    } while (opcion < 1 || opcion > 2);
    return response;
}
bool deseaReiniciarLucha()
{
    int opcion;
    do
    {
        Console.WriteLine(""¿Querés reiniciar la luchar? 1) Si 2) No"");
        opcion = int.Parse(Console.ReadLine());

        Console.Clear();

        if (opcion < 1 || opcion > 2)
            Console.WriteLine(""El ingreso es incorrecto."");

    } while (opcion < 1 || opcion > 2);

    if (opcion == 1)
        return true;
    else
        return false;
}
string ingresarNombre()
{
    string nombre = """";
    do
    {
        Console.WriteLine(""Ingresá tu nombre para comenzar a jugar:"");

        nombre = Console.ReadLine();
        Console.Clear();

        if (nombre == null || nombre.Length < 8)
            Console.WriteLine(""Tu ingreso debe tener al menos 8 caracteres."");

    } while (nombre == null || nombre.Length < 8 );
    return nombre;
}

int seleccionarArma(string nombre)
{
    const int ESPADA = 10;
    const int HACHA = 7;
    const int DAGA = 3;

    int opcionesDeMenu;
    int armaSeleccionada = 0;
    do
    {
        Console.WriteLine(""Bien, "" + nombre + "". Elegí tu arma: 1) Espada 2) Hacha 3) Daga"");
        opcionesDeMenu = int.Parse(Console.ReadLine());

        switch (opcionesDeMenu)
        {
            case 1:
                armaSeleccionada = ESPADA;
                break;
            case 2:
                armaSeleccionada = HACHA;
                break;
            case 3:
                armaSeleccionada = DAGA;
                break;
            default:
                Console.WriteLine(""El ingreso es incorrecto"");
                break;
        }
    } while (armaSeleccionada == 0);

    return armaSeleccionada;
}
bool atacarEnemigo(string nombre,int vidaJugador, int arma, int vidaMonstruo)
{
    
    do
    {
        Console.WriteLine(""Presiona 1 para atacar:"");
        int atacar = int.Parse(Console.ReadLine());

        Console.Clear();

        if (atacar == 1)
        {
            vidaMonstruo -= arma;
            Console.WriteLine(""La vida de el monstruo ahora es de "" + vidaMonstruo + ""."");

            Random ataqueMonstruo = new Random();
            int ataqueM = ataqueMonstruo.Next(1, 15);

            vidaJugador -= ataqueM;
            Console.WriteLine(""El monstruo también ha atacado con un daño de "" + ataqueM + "". Tu vida es de "" + vidaJugador + ""."");
        }
        else
        {
            Console.WriteLine(""El ingreso es incorrecto."");
        }

    } while (vidaMonstruo > 0 && vidaJugador > 0);
    
    if (vidaJugador > vidaMonstruo)
        return true;
    else
        return false;
}

void iniciarBatalla(string nombre, int vida, int arma)
{
    int vidaMonstruo = 100;
   
    Console.WriteLine(""El monstruo ha ingresado a la sala. Su vida es de "" + vidaMonstruo + ""."");
    bool victoria = atacarEnemigo(nombre, vida, arma, vidaMonstruo);

    if (victoria)
        Console.WriteLine(""El monstruo fue derrotado."");
    else
        Console.WriteLine(""Perdiste."");
}"
E53SxDud,2025-05-17T09:13:02.508428,powerampache,PHP,Saturday 17th of May 2025 09:13:03 AM CDT,"1.01-80-play (80) - DB: 83
luci.sixsixsix.powerampache2.domain.errors.MusicException: {""errorAction"":""album_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 982"",""errorType"":""filter""}
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$getSongsFromAlbum$2.invokeSuspend(SongsRepositoryImpl.kt:254)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)
	at android.os.Handler.handleCallback(Handler.java:959)
	at android.os.Handler.dispatchMessage(Handler.java:100)
	at android.os.Looper.loopOnce(Looper.java:257)
	at android.os.Looper.loop(Looper.java:342)
	at android.app.ActivityThread.main(ActivityThread.java:9579)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:619)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:929)

getSongsFromAlbum() - {""errorAction"":""album_songs"",""errorCode"":""4704"",""errorMessage"":""Not Found: 982"",""errorType"":""filter""}"
9qWGzitN,Danh,TDanh,HTML,Saturday 17th of May 2025 09:06:18 AM CDT,"DANH|Nguyễn Thành Danh|10
KIET_123456|Tô Thanh Kiệt|15"
jQL0PWYh,Grow a Garden buy candy blossom script (FOR EDUCATIONAL PURPOSES),keexers,Lua,Saturday 17th of May 2025 08:56:55 AM CDT,"-- Candy Blossom > 1299 Robux > 3268187638
-- Chocolate Sprinkler > 199 Robux > 3268187887
-- Easter Egg > 699 Robux > 3268187332

local ProductID = ""3268187332""
local Player = game:GetService('Players').LocalPlayer
local MarketplaceService = game:GetService('MarketplaceService')
MarketplaceService:PromptProductPurchase(Player, ProductID)"
BYahA25V,Turtle Lamp,Grexxity,Lua,Saturday 17th of May 2025 08:40:36 AM CDT,"-- Grid Mining Lamp Placer by Steven
-- Places lamps every N blocks, shifts rows, handles turning and alignment

-- === Config / State ===
local lampName = ""projectred-illumination:lamp""
local validFuel = {
    [""minecraft:coal""] = true,
    [""minecraft:charcoal""] = true,
    [""minecraft:blaze_rod""] = true,
    [""minecraft:coal_block""] = true,
    [""minecraft:lava_bucket""] = true
}

local spacing = 5
local numRows = 3
local initialTurnDirection = ""right""

-- === Utility Functions ===

local function prompt(text)
    io.write(text .. "": "")
    return read()
end

local function findLampSlot()
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == lampName then
            return i
        end
    end
    return nil
end

local function autoRefuel(minFuel)
    if turtle.getFuelLevel() == ""unlimited"" or turtle.getFuelLevel() >= minFuel then
        return true
    end
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and validFuel[item.name] then
            turtle.select(i)
            if turtle.refuel(1) then
                print(""Refueled using"", item.name)
                return true
            end
        end
    end
    print(""Out of fuel!"")
    return false
end

local function moveForwardBreaking()
    if not autoRefuel(5) then error(""Fuel required."") end
    while not turtle.forward() do
        if turtle.detect() then turtle.dig() end
        sleep(0.25)
    end
end

local function turn(dir)
    if dir == ""left"" then
        turtle.turnLeft()
    elseif dir == ""right"" then
        turtle.turnRight()
    end
end

local function oppositeDirection(dir)
    return dir == ""left"" and ""right"" or ""left""
end

-- === GUI Input ===
local function getUserInput()
    print(""=== Lamp Grid Setup ==="")
    spacing = tonumber(prompt(""Blocks between lamps""))
    numRows = tonumber(prompt(""Number of rows""))
    while true do
        io.write(""Turn direction (left/right): "")
        local dir = read()
        if dir == ""left"" or dir == ""right"" then
            initialTurnDirection = dir
            break
        else
            print(""Invalid. Enter 'left' or 'right'."")
        end
    end
    print(""Setup complete. Press Enter to start."")
    read()
end

-- === Main Lamp Placement Logic ===
local function runRows()
    local rowCount = 0
    local currentTurn = initialTurnDirection
    local globalStep = 0

    while rowCount < numRows do
        while true do
            if not autoRefuel(5) then return end

            -- Lamp placement based on global step count
            if globalStep % spacing == 0 then
                local lampSlot = findLampSlot()
                if lampSlot then
                    turtle.select(lampSlot)
                    if turtle.detectDown() then
                        turtle.digDown()
                    end
                    turtle.placeDown()
                else
                    print(""Out of lamps!"")
                    return
                end
            end

            -- Stop if wall ahead
            if turtle.detect() then
                break
            end

            moveForwardBreaking()
            globalStep = globalStep + 1
        end

        rowCount = rowCount + 1
        if rowCount >= numRows then
            print(""Completed all rows."")
            return
        end

-- Turn and move over by spacing blocks to start next row
turn(currentTurn)
for i = 1, spacing do
    moveForwardBreaking()
end
turn(currentTurn)

        -- Flip direction
        currentTurn = oppositeDirection(currentTurn)
    end
end

-- === Program Start ===
getUserInput()
runRows()"
Yz3TqYuF,ME abfrage,Darknio,Lua,Saturday 17th of May 2025 08:38:01 AM CDT,"local seite = ""bottom""
local me = peripheral.wrap(seite)

while true do
    local fluids = me.listFluid()
    term.clear()
    term.setCursorPos(1, 1)
    print(""Flüssigkeiten im AE2-Netzwerk:"")

    for i, fluid in ipairs(fluids) do
        term.setCursorPos(1, i + 1)
        term.write(fluid.name .. "": "" .. fluid.amount .. "" mB"")
    end

    sleep(0.5)
end
"
SSzeDkPf,OC-HBM Computer Controlled Combined Cycle Turbine Program (CCCCTP),AlexMastang,Lua,Saturday 17th of May 2025 06:53:40 AM CDT,"-- Made by Alexmaster75

local component = require(""component"")
local event = require(""event"")
local term = require(""term"")

term.clear()
print(""Loading..."")

-- Peripherals
local gpu = component.gpu
local battery = {}
local battery_present = true
local c = 1
for add, n in component.list(""ntm_energy_storage"") do
  battery[c] = component.proxy(add)
  c = c + 1
end
if (#battery >= 1) then
  battery = battery[1]
else
  battery = nil
  battery_present = false
end
local turbines = {}
local c = 1
for add, n in component.list(""ntm_gas_turbine"") do
  turbines[c] = component.proxy(add)
  c = c + 1
end

-- Global variables
local delta_program = 0.1
local max = 0.8
local min = 0.2

local temp = {}
for i=1,1,1 do
  temp[i] = 0
end
local battery_energy = {}
local battery_percentage = 0.0
local blink = true
local key = {}
local input = """"
local auto = {}
for i=1,#turbines,1 do
  auto[i] = true
end
local activation = false
local turbine_index = 0
local turbine_set = 0
local keywords = {}
local x, y = term.getCursor()


-- Scales a number by orders of magnitude
local function x3_scale(n)
  local scale = {"" "", ""k"", ""M"", ""G"", ""T""}
  local num = n
  
  local i = 1
  while (math.abs(num) >= 1000.0 and i < #scale) do
    num = num / 1000.0
    i = i + 1
  end
  
  return ((""%5.1f %1s""):format(num, scale[i]))
end

-- Gets in-game time
local function time(mask)
  return tonumber(os.date(mask))
end

-- Prints a divider given the character/string
local function screen_divider(str)
  local W = term.window.width
  local X, Y = term.getCursor()
  
  for i=X,W-#str,#str do
    term.write(str)
  end
  X, Y = term.getCursor()
  if (X < W) then
    for i=1,W-X+1,1 do
      term.write(str:sub(i, i))
    end
  end
  if (#str == 1) then
    term.write(str)
  end
  print()
end

-- Segments a string containing spaces
local function segment(string)
  local k_word = {}
  local k = 1
  local char = """"
  
  for i=1,string:len(),1 do
    char = string:sub(i,i)
    if (char == "" "" or char == nil) then
      k = k + 1
    else
      if (k_word[k] == nil) then k_word[k] = """" end
      k_word[k] = k_word[k] .. char
    end
  end
  
  return k_word
end

-- Starts all turbines
local function start_all(turbine_array)
  for i=1,#turbine_array,1 do
    if (turbine_array[i].getState() == 0) then
      turbine_array[i].start()
    end
  end
  
  return
end

-- Stops all turbines
local function stop_all(turbine_array)
  for i=1,#turbine_array,1 do
    turbine_array[i].stop()
  end
  
  return
end

-- Prints a single turbine stats
local function print_turbine(turbine, index)
  local fluid = {turbine.getFluid()}
  local energy = turbine.getPower()
  local num_status = turbine.getState()
  local status = """"
  
  if (num_status == -1) then
    status = ""Starting...""
  elseif (num_status == 0) then
    status = ""Offline""
  elseif (num_status == 1) then
    status = ""Online""
  else
    status = ""Error""
  end
  
  print((""%-10s: %11d ""):format(""Turbine n."", index))
  print((""%-10s: %11s ""):format(""Fuel type"", turbine.getType()))
  print((""%-10s: %11s""):format(""Status"", status))
  print((""%-10s: %11d ""):format(""RPM"", turbine.getThrottle()))
  print((""%-10s: %11.1f%1s ""):format(""Fuel"", fluid[1] / fluid[2] * 100.0, ""%""))
  print((""%-10s: %11.1f%1s ""):format(""Lubricant"", fluid[3] / fluid[4] * 100.0, ""%""))
  print((""%-10s: %11sHE ""):format(""Energy"", x3_scale(energy)))
  print((""%-10s: %11.1f%1s ""):format(""Water"", fluid[5] / fluid[6] * 100.0, ""%""))
  print((""%-10s: %11.1f%1s ""):format(""Steam"", fluid[7] / fluid[8] * 100.0, ""%""))
  
  return
end


-- Screen setup
term.clear()
local w = term.window.width
local h = term.window.height
-- Main
while (true) do
  -- Battery data update
  if (battery_present) then
    battery_energy = {battery.getInfo()}
    battery_percentage = battery_energy[1] / battery_energy[2]
    
    -- Battery auto regulation
    if (activation) then
      -- Max reached
      if (battery_percentage >= max) then
        stop_all(turbines)
      end
      -- Min reached
      if (battery_percentage <= min) then
        start_all(turbines)
      end
    end
  else
    battery_percentage = -0.01
  end
  
  -- Key acquisition
  key = {event.pull(0.05, ""key"")}

  -- Input acquisition
  if (key[3] ~= nil) then
    if (key[1] == ""key_down"") then
      if (key[3] == 0) then
        -- Reset
        input = """"
      elseif (key[3] == 8) then
        -- Backspace
        input = input:sub(1, -2)
      elseif (key[3] >= 32 and key[3] <= 126) then
        -- Characters input
        input = input .. string.char(key[3])
      elseif (key[3] == 13) then
        -- Lowers input characters and returns and keywords segmentation
        input = string.lower(input)
        keywords = segment(input)
        input = """"
        
        term.setCursor(x, y)
        for i=y,h-1,1 do
          screen_divider(""      "")
        end
        term.setCursor(x, y)
        if (keywords[1] == ""set"") then
          turbine_set = tonumber(keywords[3])
          
          if (type(turbine_set) == ""number"") then
            if (keywords[2] == ""max"" and turbine_set > min) then
              max = (turbine_set > 1.0) and 1.0 or turbine_set
              print(""Changed Max ESBSR setting to "" .. max)
            elseif (keywords[2] == ""min"" and turbine_set < max) then
              min = (turbine_set < 0.0) and 0.0 or turbine_set
              print(""Changed Min ESBSR setting to "" .. min)
            elseif (keywords[2] == ""throttle"") then
              turbine_index = tonumber(keywords[4])
              
              if (keywords[4] == ""all"") then
                for i=1,#turbines,1 do
                  turbines[i].setThrottle(turbine_set)
                end
                print((""Changed throttle to %.1f%1s for %2d turbines""):format(turbine_set, ""%"", #turbines))
              elseif (type(turbine_index) == ""number"") then
                if (turbine_index > 0 and turbine_index <= #turbines) then
                  turbines[turbine_index].setThrottle(turbine_set)
                  print((""Changed throttle to %.1f%1s for turbine n. %2d""):format(turbine_set, ""%"", turbine_index))
                end
              end
            else
              print(""Usage:"")
              print(""'-max' -> Sets the maximum percentage of the ESBSR to stop. Needs a decimal number min < x <= 1"")
              print(""'-min' -> Sets the minimum percentage of the ESBSR to start. Needs a decimal number 0 <= x < max"")
              print(""'-throttle' -> Sets the throttle of the turbine selected. 'all' for all, 1<=x<=n for one"")
              print(""'-auto' -> Sets auto control for the turbine. 'all' for all, 0 <= x <= n for one"")
            end
          elseif (keywords[2] == ""auto"") then
            turbine_index = tonumber(keywords[4])
            
            if (keywords[4] == ""all"") then
              for i=1,#turbines,1 do
                if (keywords[3] == ""true"") then
                  auto[i] = true
                elseif (keywords[3] == ""false"") then
                  auto[i] = false
                end
              end
              print((""Set AUTO to %5s for %2d turbines ""):format(keywords[3], #turbines))
            elseif (type(turbine_index) == ""number"") then
              if (turbine_index > 0 and turbine_index <= #turbines) then
                if (keywords[3] == ""true"") then
                  auto[turbine_index] = true
                elseif (keywords[3] == ""false"") then
                  auto[turbine_index] = false
                end
                print((""Set AUTO to %5s for turbine n. %2d ""):format(keywords[3], turbine_index))
              end
            end
          end
        elseif (keywords[1] == ""get"") then
          if (keywords[2] == ""turbine"") then
            turbine_index = tonumber(keywords[3])
            
            if (keywords[3] == ""all"") then
              for i=1,#turbines,1 do
                print_turbine(turbines[i], i)
                screen_divider(""-"")
              end
            elseif (type(turbine_index) == ""number"") then
              if (turbine_index > 0 and turbine_index <= #turbines) then
                print_turbine(turbines[turbine_index], turbine_index)
              end
            end
          elseif (keywords[2] == ""auto"") then
            turbine_index = tonumber(keywords[3])
            
            if (keywords[3] == ""all"") then
              for i=1,#turbines,1 do
                print((""Turbine n. %2d -> AUTO: %5s""):format(i, auto[i] and ""true"" or ""false""))
              end
            elseif (type(turbine_index) == ""number"") then
              if (turbine_index > 0 and turbine_index <= #turbines) then
                print((""Turbine n. %2d -> AUTO: %5s""):format(turbine_index, auto[turbine_index] and ""true"" or ""false""))
              end
            end
          end
        elseif (keywords[1] == ""clear"") then
          print()
        elseif (keywords[1] == ""start"") then
          turbine_index = tonumber(keywords[2])
          if (keywords[2] == ""all"") then
            start_all(turbines)
            print(""Started "" .. #turbines .. "" turbines"")
          elseif (type(turbine_index) == ""number"") then
            if (turbine_index > 0 and turbine_index <= #turbines) then
              turbines[turbine_index].start()
              print(""Turbine n. "" .. turbine_index .. "" started"")
            end
          else
            print(""Usage:"")
            print(""'-all' -> Starts all turbines"")
            print(""'-n' -> Replace 'n' to start the desired turbine"")
            print(""Only offline turbines will be started"")
          end
        elseif (keywords[1] == ""stop"") then
          activation = false
          turbine_index = tonumber(keywords[2])
          if (keywords[2] == ""all"") then
            stop_all(turbines)
            print(""Stopped "" .. #turbines .. "" turbines"")
          elseif (type(turbine_index) == ""number"") then
            if (turbine_index > 0 and turbine_index <= #turbines) then
              turbines[turbine_index].stop()
              print(""Turbine n. "" .. turbine_index .. "" stopped"")
            end
          else
            print(""Usage:"")
            print(""'-all' -> Stops all turbines"")
            print(""'-n' -> Replace 'n' to stop the desired turbine"")
          end
        elseif (keywords[1] == ""shutdown"") then
          activation = false
          print(""Disabled ESBSR"")
        elseif (keywords[1] == ""startup"") then
          activation = true
          print(""Enabled ESBSR"")
        elseif (keywords[1] == ""exit"") then
          stop_all(turbines)
          exit(0)
        elseif (keywords[1] == ""help"") then
          print(""'get' -> Gets data from the system"")
          print(""'set' -> Sets data in the system"")
          print(""'start' -> Starts turbines"")
          print(""'stop' -> Stops turbines"")
          print(""'startup' -> Enables ESBSR control"")
          print(""'shutdown' -> Disables ESBSR control"")
          print(""(ESBSR = 'Energy Storage Block Self-Regulation')"")
          print(""'clear' -> Clears output"")
          print(""'exit' -> Exits the program and deactivates the turbines"")
          print(""'help' -> Shows this commands help list"")
          print(""Type only one of these keywords to get more info"")
        else
          print(""Not known command. Try 'help' for help."")
        end
      end
    end
  end
  term.setCursor(1, 3)
  io.write(""> "" .. input)
  screen_divider("" "")
  
  -- Auto regulation for turbines
  for i=1,#turbines,1 do
    turbines[i].setAuto(auto[i])
  end
  
  -- Screen update
  if (math.abs(time(""%M"") - temp[1]) >= 1) then
    term.setCursor(1, 1)
    print((""Heartbeat: %1s | Energy # Max: %5.1f%1s / Min: %5.1f%1s / Now: %5.1f%1s | ESBSR: %3s ""):format(blink and ""*"" or "" "", max * 100.0, ""%"", min * 100.0, ""%"", battery_percentage * 100.0, ""%"", activation and ""ON"" or ""OFF""))
    screen_divider(""="")
    term.setCursor(1, 4)
    screen_divider(""="")
    if (not battery_present) then
      gpu.setForeground(0xFFE600)
      print(""Warning: Energy Storage Block missing. Grid setups will be ignored."")
      gpu.setForeground(0xFFFFFF)
    end
    x, y = term.getCursor()
    
    -- Variables update
    temp[1] = time(""%M"")
    blink = not blink
  end
end"
uqWuGxCu,Base for Tetris Elektronika 60,WarPie90,Delphi,Saturday 17th of May 2025 06:47:02 AM CDT,"program new;
(*
  only thing implemented is `z` to rotate
*)


const
  DEFAULT_START = 5;
  TETRIS_ROWS   = 15;

var
  board: array of Char;
  tetroLocation: Int32 = DEFAULT_START;
  thisTetro: Int32 = 0;
  thisRotation: Int32 = 0;


const
  ui_row_width   = 43;
  ui_board_start = 19;

  starting_ui = ""
FULL LINES: 1    <! . . . . . . . . . .!>
LEVEL: 1         <! . . . . . . . . . .!>
SCORE: 1         <! . . . . . . . . . .!>
TIME: 00:00      <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
         XXYYZZ  <! . . . . . . . . . .!>
           LL    <! . . . . . . . . . .!>
           PP    <! . . . . . . . . . .!>
           TT    <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <! . . . . . . . . . .!>
                 <!********************!>
                  \/\/\/\/\/\/\/\/\/\/\/


                         PADDING
123456789

"";


const
  tetros: array of array of TByteArray = [
    {|}
    [[ 1, 11, 21, 31], [ 0,  1,  2,  3], [ 1, 11, 21, 31], [ 0,  1,  2,  3]],

    {L shapes}
    [[ 2, 10, 11, 12], [ 1, 11, 21, 22], [20, 10, 11, 12], [ 0, 01, 11, 21]],
    [[ 0, 10, 11, 12], [ 2,  1, 11, 21], [10, 11, 12, 22], [30, 11, 21, 31]],

    {T}
    [[ 1, 10, 11, 12], [ 1, 12, 11, 21], [ 11, 0, 1, 2], [ 10, 1, 11, 21]],

    {cube}
    [[ 1,  2, 11, 12], [ 1,  2, 11, 12], [ 1,  2, 11, 12], [ 1,  2, 11, 12]],

    {z}
    [[ 0,  1, 11, 12], [11, 21, 20, 30], [ 0,  1, 11, 12], [11, 21, 20, 30]],
    [[ 1,  2, 10, 11], [10, 20, 21, 31], [ 1,  2, 10, 11], [10, 20, 21, 31]]
  ];

function ToString(constref x:array of Char): string; override;
var i: Int32;
begin
  for i:=0 to High(x) do
  begin
    if (i mod ui_row_width = 0) and (i > 0) then Result += LINE_SEP;
    Result += x[i];
  end;
end;

procedure SetRandomTetro();
begin
  thisTetro := Random(Length(tetros));
end;

procedure RotateTetro();
begin
  thisRotation := (thisRotation + 1) mod 4;
end;

function TBL(idx: Int32): Int32;
var x,y: Byte;
begin
  x := idx mod 10;
  y := idx div 10;
  Result := y*ui_row_width+(x*2 + ui_board_start);
end;

function TBO(idx: Int32): Int32;
var x,y: Byte;
begin
  x := idx mod 10;
  y := idx div 10;
  Result := y*ui_row_width+(x*2);
end;

function VerifyFreeSapce(): Boolean;
var lc := TBL(tetroLocation);
var curr := tetros[thisTetro][thisRotation];
begin
  Result := (board[lc+TBO(curr[0])] in [' ', '.']) and
            (board[lc+TBO(curr[1])] in [' ', '.']) and
            (board[lc+TBO(curr[2])] in [' ', '.']) and
            (board[lc+TBO(curr[3])] in [' ', '.']);
end;

procedure DrawTetroBox();
var lc := TBL(tetroLocation);
var curr := tetros[thisTetro][thisRotation];
begin
  board[lc+TBO(curr[0])+0] := '[';
  board[lc+TBO(curr[0])+1] := ']';
  board[lc+TBO(curr[1])+0] := '[';
  board[lc+TBO(curr[1])+1] := ']';
  board[lc+TBO(curr[2])+0] := '[';
  board[lc+TBO(curr[2])+1] := ']';
  board[lc+TBO(curr[3])+0] := '[';
  board[lc+TBO(curr[3])+1] := ']';
end;

procedure ClearTetroBox();
var lc := TBL(tetroLocation);
var curr := tetros[thisTetro][thisRotation];
begin
  board[lc+TBO(curr[0])+0] := ' ';
  board[lc+TBO(curr[0])+1] := '.';
  board[lc+TBO(curr[1])+0] := ' ';
  board[lc+TBO(curr[1])+1] := '.';
  board[lc+TBO(curr[2])+0] := ' ';
  board[lc+TBO(curr[2])+1] := '.';
  board[lc+TBO(curr[3])+0] := ' ';
  board[lc+TBO(curr[3])+1] := '.';
end;

procedure DropTetro();
begin
  Inc(tetroLocation, 10);
end;

procedure UndropTetro();
begin
  Dec(tetroLocation, 10);
end;

var
  i:int32;
  TetrisFrame: TImage;
  ticker: TCountDown;
begin
  SetLength(board, Length(starting_ui));
  Move(starting_ui[1], board[0], Length(starting_ui));


  TetrisFrame := TImage.Create(500,1000); //this could be a form
  TetrisFrame.FontName := 'Consolas';
  tetrisFrame.FontSize := 15;
  TetrisFrame.FontAntialiasing := False; {!!!}
  TetrisFrame.FontBold := False;

  TetrisFrame.Show();

  SetRandomTetro();

  while true do
  begin
    TetrisFrame.DrawColor := 0;
    TetrisFrame.DrawText(ToString(board), [50,50]);

    ClearTetroBox();
    DropTetro();

    if not VerifyFreeSapce() then
    begin
      UnDropTetro();
      DrawTetroBox();

      TetrisFrame.DrawColor := $0077FF;
      TetrisFrame.DrawText(ToString(board), [50,50]);
      TetrisFrame.Show(False);

      SetRandomTetro();
      tetroLocation := Random(2,8);// DEFAULT_START;
      thisRotation  := 0;

      // still not free!?¤!""¤""!#%""#%
      //if not VerifyFreeSapce() then
      //  TerminateScript('Game over');
    end else
    begin
      DrawTetroBox();

      TetrisFrame.DrawColor := $0077FF;
      TetrisFrame.DrawText(ToString(board), [50,50]);
      TetrisFrame.Show(False);
    end;


    ticker.Start(300);
    while not ticker.IsFinished do
    begin
      if Target.KeyPressed(EKeyCode.Z) then
      begin
         ClearTetroBox();
         TetrisFrame.DrawColor := $0077FF;
         TetrisFrame.Clear();

         RotateTetro();
         DrawTetroBox();
         while Target.KeyPressed(EKeyCode.Z) and (not ticker.IsFinished) do sleep(1);
      end;

    end;
  end;
end."
Rr3uYZs6,Untitled,gandalfbialy,Python,Saturday 17th of May 2025 06:14:39 AM CDT,"import json, random, math

def load_data(path):
  with open(path, encoding=""utf-8"") as file:
    return json.load(file)

def train_test_split(data, test_ratio=0.2):
  random.shuffle(data)
  cut = int(len(data) * (1-test_ratio))
  print(f""Uczący zbiór: {len(data[:cut])}"")
  print(f""Testowy zbiór: {len(data[cut:])}"")
  return data[:cut], data[cut:]

def build_dictionary(train):
  vocabulary = set()
  for record in train:
    vocabulary.update(record[""tags""])
  print(vocabulary)
  return vocabulary

def train_nb(train, vocabulary):
  class_counts = {}
  word_counts = {}
  total_words = {}

  for record in train:
    c = record[""label""]
    class_counts[c] = class_counts.get(c, 0) + 1
    word_counts.setdefault(c, {})
    total_words.setdefault(c, 0)

    for tag in record[""tags""]:
      word_counts[c][tag] = word_counts[c].get(tag, 0) + 1
      total_words[c] += 1

  model = {
      ""class_counts"": class_counts,
      ""word_counts"": word_counts,
      ""total_words"": total_words,
      ""vocabulary"": vocabulary,
      ""alpha"": 1.0,
      ""total_docs"": len(train)
  }

  print(model)
  return model"
h0ASaPpH,dataNone,TestGuy1,JSON,Saturday 17th of May 2025 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '4eb875aecae73f67ac96516d32ded4972b07895f332349cf0c2521e6b14398b84b26ffdb1460b9b6bfdaa735258a8c07343f661aa0dc06b6b203a9f889299f5096debd2c754fab4ac94648b9a17408ceb1ccfc3d7eef55c0eb986b453b164bec9c4a375ea67c418599e52cff4affa398c013af607336163bf6c7594954eb458b',
  otherdata: [
    '117726f0b17167129aa831126f230167',
    '32ce0ca7fb70305acb484bcc91539cf2',
    '87878513a772235470d620813b81fe0f',
    '64146a0d1aa1498118cf876728614a1a',
    'e0224cb0ab97e10b4c18f21e1af9c8ae',
    '03fce7237c9ad929f7aab1b4fde50410',
    '437bbef7a926919ded0b7ba8c305fa2a',
    'c8aa38917ed16035380b4ff1f1ae448f'
  ]
}"
SbJKhypz,network conf,wprod,XML,Saturday 17th of May 2025 05:47:53 AM CDT,"<network>
  <name>default</name>
  <uuid>d3f1f03b-ce8c-4516-912b-982a1e0b9ec6</uuid>
  <forward mode=""nat"">
    <nat>
      <port start=""1024"" end=""65535""/>
    </nat>
  </forward>
  <bridge name=""virbr0"" stp=""on"" delay=""0""/>
  <mac address=""52:54:00:23:b9:28""/>
  <ip address=""192.168.122.1"" netmask=""255.255.255.0"">
    <dhcp>
      <range start=""192.168.122.2"" end=""192.168.122.254""/>
    </dhcp>
  </ip>
</network>"
qbPPJyW7,archlinux-nopassthrough,wprod,XML,Saturday 17th of May 2025 05:47:22 AM CDT,"<domain type=""kvm"">
  <name>archlinux</name>
  <uuid>b0f01776-50f7-4c2a-be22-72b6f295fa0a</uuid>
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo=""http://libosinfo.org/xmlns/libvirt/domain/1.0"">
      <libosinfo:os id=""http://archlinux.org/archlinux/rolling""/>
    </libosinfo:libosinfo>
  </metadata>
  <memory unit=""KiB"">4194304</memory>
  <currentMemory unit=""KiB"">4194304</currentMemory>
  <vcpu placement=""static"">4</vcpu>
  <os firmware=""efi"">
    <type arch=""x86_64"" machine=""pc-q35-9.2"">hvm</type>
    <firmware>
      <feature enabled=""no"" name=""enrolled-keys""/>
      <feature enabled=""no"" name=""secure-boot""/>
    </firmware>
    <loader readonly=""yes"" type=""pflash"" format=""raw"">/usr/share/edk2/x64/OVMF_CODE.4m.fd</loader>
    <nvram template=""/usr/share/edk2/x64/OVMF_VARS.4m.fd"" templateFormat=""raw"" format=""raw"">/var/lib/libvirt/qemu/nvram/archlinux_VARS.fd</nvram>
  </os>
  <features>
    <acpi/>
    <apic/>
    <vmport state=""off""/>
  </features>
  <cpu mode=""host-passthrough"" check=""none"" migratable=""on"">
    <topology sockets=""1"" dies=""1"" clusters=""1"" cores=""4"" threads=""1""/>
  </cpu>
  <clock offset=""utc"">
    <timer name=""rtc"" tickpolicy=""catchup""/>
    <timer name=""pit"" tickpolicy=""delay""/>
    <timer name=""hpet"" present=""no""/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled=""no""/>
    <suspend-to-disk enabled=""no""/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <disk type=""file"" device=""disk"">
      <driver name=""qemu"" type=""qcow2""/>
      <source file=""/home/keqwerty/libvirt_pool/archlinux.qcow2""/>
      <target dev=""vda"" bus=""virtio""/>
      <boot order=""1""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x04"" slot=""0x00"" function=""0x0""/>
    </disk>
    <controller type=""usb"" index=""0"" model=""qemu-xhci"" ports=""15"">
      <address type=""pci"" domain=""0x0000"" bus=""0x02"" slot=""0x00"" function=""0x0""/>
    </controller>
    <controller type=""pci"" index=""0"" model=""pcie-root""/>
    <controller type=""pci"" index=""1"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""1"" port=""0x10""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x0"" multifunction=""on""/>
    </controller>
    <controller type=""pci"" index=""2"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""2"" port=""0x11""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x1""/>
    </controller>
    <controller type=""pci"" index=""3"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""3"" port=""0x12""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x2""/>
    </controller>
    <controller type=""pci"" index=""4"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""4"" port=""0x13""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x3""/>
    </controller>
    <controller type=""pci"" index=""5"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""5"" port=""0x14""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x4""/>
    </controller>
    <controller type=""pci"" index=""6"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""6"" port=""0x15""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x5""/>
    </controller>
    <controller type=""pci"" index=""7"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""7"" port=""0x16""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x6""/>
    </controller>
    <controller type=""pci"" index=""8"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""8"" port=""0x17""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x7""/>
    </controller>
    <controller type=""pci"" index=""9"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""9"" port=""0x18""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x0"" multifunction=""on""/>
    </controller>
    <controller type=""pci"" index=""10"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""10"" port=""0x19""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x1""/>
    </controller>
    <controller type=""pci"" index=""11"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""11"" port=""0x1a""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x2""/>
    </controller>
    <controller type=""pci"" index=""12"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""12"" port=""0x1b""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x3""/>
    </controller>
    <controller type=""pci"" index=""13"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""13"" port=""0x1c""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x4""/>
    </controller>
    <controller type=""pci"" index=""14"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""14"" port=""0x1d""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x5""/>
    </controller>
    <controller type=""sata"" index=""0"">
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x1f"" function=""0x2""/>
    </controller>
    <controller type=""virtio-serial"" index=""0"">
      <address type=""pci"" domain=""0x0000"" bus=""0x03"" slot=""0x00"" function=""0x0""/>
    </controller>
    <controller type=""scsi"" index=""0"" model=""virtio-scsi"">
      <address type=""pci"" domain=""0x0000"" bus=""0x07"" slot=""0x00"" function=""0x0""/>
    </controller>
    <interface type=""network"">
      <mac address=""52:54:00:5f:3b:70""/>
      <source network=""default""/>
      <model type=""e1000e""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x01"" slot=""0x00"" function=""0x0""/>
    </interface>
    <serial type=""pty"">
      <target type=""isa-serial"" port=""0"">
        <model name=""isa-serial""/>
      </target>
    </serial>
    <console type=""pty"">
      <target type=""serial"" port=""0""/>
    </console>
    <channel type=""unix"">
      <target type=""virtio"" name=""org.qemu.guest_agent.0""/>
      <address type=""virtio-serial"" controller=""0"" bus=""0"" port=""1""/>
    </channel>
    <input type=""tablet"" bus=""usb"">
      <address type=""usb"" bus=""0"" port=""1""/>
    </input>
    <input type=""mouse"" bus=""ps2""/>
    <input type=""keyboard"" bus=""ps2""/>
    <graphics type=""spice"" autoport=""yes"">
      <listen type=""address""/>
      <image compression=""off""/>
      <gl enable=""no""/>
    </graphics>
    <audio id=""1"" type=""none""/>
    <video>
      <model type=""qxl"" ram=""65536"" vram=""65536"" vgamem=""16384"" heads=""1"" primary=""yes""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x01"" function=""0x0""/>
    </video>
    <watchdog model=""itco"" action=""reset""/>
    <memballoon model=""virtio"">
      <address type=""pci"" domain=""0x0000"" bus=""0x05"" slot=""0x00"" function=""0x0""/>
    </memballoon>
    <rng model=""virtio"">
      <backend model=""random"">/dev/urandom</backend>
      <address type=""pci"" domain=""0x0000"" bus=""0x06"" slot=""0x00"" function=""0x0""/>
    </rng>
  </devices>
</domain>
"
bvrvNawg,archlinux-passthrough,wprod,XML,Saturday 17th of May 2025 05:47:01 AM CDT,"<domain type=""kvm"">
  <name>archlinux-gpu</name>
  <uuid>f5088c66-cf07-4b1d-9eb6-282b6218a869</uuid>
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo=""http://libosinfo.org/xmlns/libvirt/domain/1.0"">
      <libosinfo:os id=""http://archlinux.org/archlinux/rolling""/>
    </libosinfo:libosinfo>
  </metadata>
  <memory unit=""KiB"">4194304</memory>
  <currentMemory unit=""KiB"">4194304</currentMemory>
  <vcpu placement=""static"">4</vcpu>
  <os firmware=""efi"">
    <type arch=""x86_64"" machine=""pc-q35-9.2"">hvm</type>
    <firmware>
      <feature enabled=""no"" name=""enrolled-keys""/>
      <feature enabled=""no"" name=""secure-boot""/>
    </firmware>
    <loader readonly=""yes"" type=""pflash"" format=""raw"">/usr/share/edk2/x64/OVMF_CODE.4m.fd</loader>
    <nvram template=""/usr/share/edk2/x64/OVMF_VARS.4m.fd"" templateFormat=""raw"" format=""raw"">/var/lib/libvirt/qemu/nvram/archlinux-gpu_VARS.fd</nvram>
  </os>
  <features>
    <acpi/>
    <apic/>
    <vmport state=""off""/>
  </features>
  <cpu mode=""host-passthrough"" check=""none"" migratable=""on"">
    <topology sockets=""1"" dies=""1"" clusters=""1"" cores=""4"" threads=""1""/>
  </cpu>
  <clock offset=""utc"">
    <timer name=""rtc"" tickpolicy=""catchup""/>
    <timer name=""pit"" tickpolicy=""delay""/>
    <timer name=""hpet"" present=""no""/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled=""no""/>
    <suspend-to-disk enabled=""no""/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <disk type=""file"" device=""disk"">
      <driver name=""qemu"" type=""qcow2""/>
      <source file=""/home/keqwerty/libvirt_pool/archlinux.qcow2""/>
      <target dev=""vda"" bus=""virtio""/>
      <boot order=""1""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x04"" slot=""0x00"" function=""0x0""/>
    </disk>
    <controller type=""usb"" index=""0"" model=""qemu-xhci"" ports=""15"">
      <address type=""pci"" domain=""0x0000"" bus=""0x02"" slot=""0x00"" function=""0x0""/>
    </controller>
    <controller type=""pci"" index=""0"" model=""pcie-root""/>
    <controller type=""pci"" index=""1"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""1"" port=""0x10""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x0"" multifunction=""on""/>
    </controller>
    <controller type=""pci"" index=""2"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""2"" port=""0x11""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x1""/>
    </controller>
    <controller type=""pci"" index=""3"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""3"" port=""0x12""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x2""/>
    </controller>
    <controller type=""pci"" index=""4"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""4"" port=""0x13""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x3""/>
    </controller>
    <controller type=""pci"" index=""5"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""5"" port=""0x14""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x4""/>
    </controller>
    <controller type=""pci"" index=""6"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""6"" port=""0x15""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x5""/>
    </controller>
    <controller type=""pci"" index=""7"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""7"" port=""0x16""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x6""/>
    </controller>
    <controller type=""pci"" index=""8"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""8"" port=""0x17""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x7""/>
    </controller>
    <controller type=""pci"" index=""9"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""9"" port=""0x18""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x0"" multifunction=""on""/>
    </controller>
    <controller type=""pci"" index=""10"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""10"" port=""0x19""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x1""/>
    </controller>
    <controller type=""pci"" index=""11"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""11"" port=""0x1a""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x2""/>
    </controller>
    <controller type=""pci"" index=""12"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""12"" port=""0x1b""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x3""/>
    </controller>
    <controller type=""pci"" index=""13"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""13"" port=""0x1c""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x4""/>
    </controller>
    <controller type=""pci"" index=""14"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""14"" port=""0x1d""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x5""/>
    </controller>
    <controller type=""sata"" index=""0"">
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x1f"" function=""0x2""/>
    </controller>
    <controller type=""virtio-serial"" index=""0"">
      <address type=""pci"" domain=""0x0000"" bus=""0x03"" slot=""0x00"" function=""0x0""/>
    </controller>
    <controller type=""scsi"" index=""0"" model=""virtio-scsi"">
      <address type=""pci"" domain=""0x0000"" bus=""0x07"" slot=""0x00"" function=""0x0""/>
    </controller>
    <interface type=""network"">
      <mac address=""52:54:00:a7:f8:7f""/>
      <source network=""default""/>
      <model type=""e1000e""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x01"" slot=""0x00"" function=""0x0""/>
    </interface>
    <serial type=""pty"">
      <target type=""isa-serial"" port=""0"">
        <model name=""isa-serial""/>
      </target>
    </serial>
    <console type=""pty"">
      <target type=""serial"" port=""0""/>
    </console>
    <channel type=""unix"">
      <target type=""virtio"" name=""org.qemu.guest_agent.0""/>
      <address type=""virtio-serial"" controller=""0"" bus=""0"" port=""1""/>
    </channel>
    <input type=""tablet"" bus=""usb"">
      <address type=""usb"" bus=""0"" port=""1""/>
    </input>
    <input type=""mouse"" bus=""ps2""/>
    <input type=""keyboard"" bus=""ps2""/>
    <audio id=""1"" type=""none""/>
    <hostdev mode=""subsystem"" type=""pci"" managed=""yes"">
      <source>
        <address domain=""0x0000"" bus=""0x01"" slot=""0x00"" function=""0x0""/>
      </source>
      <address type=""pci"" domain=""0x0000"" bus=""0x08"" slot=""0x00"" function=""0x0""/>
    </hostdev>
    <hostdev mode=""subsystem"" type=""pci"" managed=""yes"">
      <source>
        <address domain=""0x0000"" bus=""0x01"" slot=""0x00"" function=""0x1""/>
      </source>
      <address type=""pci"" domain=""0x0000"" bus=""0x09"" slot=""0x00"" function=""0x0""/>
    </hostdev>
    <hostdev mode=""subsystem"" type=""usb"" managed=""yes"">
      <source>
        <vendor id=""0x2023""/>
        <product id=""0xf013""/>
      </source>
      <address type=""usb"" bus=""0"" port=""2""/>
    </hostdev>
    <hostdev mode=""subsystem"" type=""usb"" managed=""yes"">
      <source>
        <vendor id=""0x3554""/>
        <product id=""0xfa09""/>
      </source>
      <address type=""usb"" bus=""0"" port=""3""/>
    </hostdev>
    <watchdog model=""itco"" action=""reset""/>
    <memballoon model=""virtio"">
      <address type=""pci"" domain=""0x0000"" bus=""0x05"" slot=""0x00"" function=""0x0""/>
    </memballoon>
    <rng model=""virtio"">
      <backend model=""random"">/dev/urandom</backend>
      <address type=""pci"" domain=""0x0000"" bus=""0x06"" slot=""0x00"" function=""0x0""/>
    </rng>
  </devices>
</domain>
"
gp7hJthX,win11-nopassthrough,wprod,XML,Saturday 17th of May 2025 05:46:41 AM CDT,"<domain type=""kvm"">
  <name>win11-nogpu</name>
  <uuid>4f2a3a6b-572f-441c-9654-f2af30aca67c</uuid>
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo=""http://libosinfo.org/xmlns/libvirt/domain/1.0"">
      <libosinfo:os id=""http://microsoft.com/win/11""/>
    </libosinfo:libosinfo>
  </metadata>
  <memory unit=""KiB"">16384000</memory>
  <currentMemory unit=""KiB"">16384000</currentMemory>
  <memoryBacking>
    <source type=""memfd""/>
    <access mode=""shared""/>
  </memoryBacking>
  <vcpu placement=""static"">8</vcpu>
  <os firmware=""efi"">
    <type arch=""x86_64"" machine=""pc-q35-9.2"">hvm</type>
    <firmware>
      <feature enabled=""no"" name=""enrolled-keys""/>
      <feature enabled=""yes"" name=""secure-boot""/>
    </firmware>
    <loader readonly=""yes"" secure=""yes"" type=""pflash"" format=""raw"">/usr/share/edk2/x64/OVMF_CODE.secboot.4m.fd</loader>
    <nvram template=""/usr/share/edk2/x64/OVMF_VARS.4m.fd"" templateFormat=""raw"" format=""raw"">/var/lib/libvirt/qemu/nvram/win11-nogpu_VARS.fd</nvram>
    <boot dev=""hd""/>
    <bootmenu enable=""no""/>
    <smbios mode=""host""/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <hyperv mode=""custom"">
      <relaxed state=""on""/>
      <vapic state=""on""/>
      <spinlocks state=""on"" retries=""8191""/>
      <vpindex state=""on""/>
      <runtime state=""on""/>
      <synic state=""on""/>
      <stimer state=""on""/>
      <frequencies state=""on""/>
      <tlbflush state=""on""/>
      <ipi state=""on""/>
      <avic state=""on""/>
    </hyperv>
    <vmport state=""off""/>
    <smm state=""on""/>
  </features>
  <cpu mode=""host-passthrough"" check=""none"" migratable=""on"">
    <topology sockets=""1"" dies=""1"" clusters=""1"" cores=""8"" threads=""1""/>
    <feature policy=""disable"" name=""hypervisor""/>
  </cpu>
  <clock offset=""localtime"">
    <timer name=""rtc"" tickpolicy=""catchup""/>
    <timer name=""pit"" tickpolicy=""delay""/>
    <timer name=""hpet"" present=""no""/>
    <timer name=""hypervclock"" present=""yes""/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled=""no""/>
    <suspend-to-disk enabled=""no""/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <disk type=""block"" device=""disk"">
      <driver name=""qemu"" type=""raw"" cache=""none"" io=""native"" discard=""unmap""/>
      <source dev=""/dev/disk/by-id/nvme-GXF-1TB_PRO_0017480003329""/>
      <target dev=""vda"" bus=""virtio""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x05"" slot=""0x00"" function=""0x0""/>
    </disk>
    <controller type=""usb"" index=""0"" model=""qemu-xhci"" ports=""15"">
      <address type=""pci"" domain=""0x0000"" bus=""0x02"" slot=""0x00"" function=""0x0""/>
    </controller>
    <controller type=""pci"" index=""0"" model=""pcie-root""/>
    <controller type=""pci"" index=""1"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""1"" port=""0x10""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x0"" multifunction=""on""/>
    </controller>
    <controller type=""pci"" index=""2"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""2"" port=""0x11""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x1""/>
    </controller>
    <controller type=""pci"" index=""3"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""3"" port=""0x12""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x2""/>
    </controller>
    <controller type=""pci"" index=""4"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""4"" port=""0x13""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x3""/>
    </controller>
    <controller type=""pci"" index=""5"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""5"" port=""0x14""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x4""/>
    </controller>
    <controller type=""pci"" index=""6"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""6"" port=""0x15""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x5""/>
    </controller>
    <controller type=""pci"" index=""7"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""7"" port=""0x16""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x6""/>
    </controller>
    <controller type=""pci"" index=""8"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""8"" port=""0x17""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x02"" function=""0x7""/>
    </controller>
    <controller type=""pci"" index=""9"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""9"" port=""0x18""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x0"" multifunction=""on""/>
    </controller>
    <controller type=""pci"" index=""10"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""10"" port=""0x19""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x1""/>
    </controller>
    <controller type=""pci"" index=""11"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""11"" port=""0x1a""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x2""/>
    </controller>
    <controller type=""pci"" index=""12"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""12"" port=""0x1b""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x3""/>
    </controller>
    <controller type=""pci"" index=""13"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""13"" port=""0x1c""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x4""/>
    </controller>
    <controller type=""pci"" index=""14"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""14"" port=""0x1d""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x5""/>
    </controller>
    <controller type=""pci"" index=""15"" model=""pcie-root-port"">
      <model name=""pcie-root-port""/>
      <target chassis=""15"" port=""0x1e""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x03"" function=""0x6""/>
    </controller>
    <controller type=""pci"" index=""16"" model=""pcie-to-pci-bridge"">
      <model name=""pcie-pci-bridge""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x06"" slot=""0x00"" function=""0x0""/>
    </controller>
    <controller type=""sata"" index=""0"">
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x1f"" function=""0x2""/>
    </controller>
    <controller type=""virtio-serial"" index=""0"">
      <address type=""pci"" domain=""0x0000"" bus=""0x03"" slot=""0x00"" function=""0x0""/>
    </controller>
    <controller type=""scsi"" index=""0"" model=""virtio-scsi"">
      <address type=""pci"" domain=""0x0000"" bus=""0x0b"" slot=""0x00"" function=""0x0""/>
    </controller>
    <interface type=""network"">
      <mac address=""52:54:00:9d:c3:cc""/>
      <source network=""default""/>
      <model type=""e1000e""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x01"" slot=""0x00"" function=""0x0""/>
    </interface>
    <serial type=""pty"">
      <target type=""isa-serial"" port=""0"">
        <model name=""isa-serial""/>
      </target>
    </serial>
    <console type=""pty"">
      <target type=""serial"" port=""0""/>
    </console>
    <input type=""tablet"" bus=""usb"">
      <address type=""usb"" bus=""0"" port=""1""/>
    </input>
    <input type=""mouse"" bus=""ps2""/>
    <input type=""keyboard"" bus=""ps2""/>
    <input type=""tablet"" bus=""usb"">
      <address type=""usb"" bus=""0"" port=""2""/>
    </input>
    <tpm model=""tpm-crb"">
      <backend type=""emulator"" version=""2.0""/>
    </tpm>
    <graphics type=""spice"" port=""-1"" autoport=""no"">
      <listen type=""address""/>
      <gl enable=""no""/>
    </graphics>
    <audio id=""1"" type=""none""/>
    <video>
      <model type=""qxl"" ram=""65536"" vram=""65536"" vgamem=""16384"" heads=""1"" primary=""yes""/>
      <address type=""pci"" domain=""0x0000"" bus=""0x00"" slot=""0x01"" function=""0x0""/>
    </video>
    <watchdog model=""itco"" action=""reset""/>
    <memballoon model=""virtio"">
      <address type=""pci"" domain=""0x0000"" bus=""0x04"" slot=""0x00"" function=""0x0""/>
    </memballoon>
  </devices>
</domain>
"
